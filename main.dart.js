// Generated by dart2js (NullSafetyMode.unsound, no-legacy-javascript), the Dart to JavaScript compiler version: 2.14.2.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback, loadId):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error. The loadId argument is the deferred import that resulted in
//    this uri being loaded.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  function mixinProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (!to.hasOwnProperty(key))
        to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == "function")
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    mixinProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazyOld(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel)
        holder[name] = initializer();
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function lazyFinal(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      if (holder[name] === uninitializedSentinel) {
        var value = initializer();
        if (holder[name] !== uninitializedSentinel)
          H.throwLateFieldADI(name);
        holder[name] = value;
      }
      holder[getterName] = function() {
        return this[name];
      };
      return holder[name];
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function instanceTearOffGetter(isIntercepted, parameters) {
    var name = parameters.fs[0];
    if (isIntercepted)
      return new Function("parameters, createTearOffClass, cache", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (cache === null) cache = createTearOffClass(parameters);" + "return new cache(receiver, this);" + "}")(parameters, H.closureFromTearOff, null);
    else
      return new Function("parameters, createTearOffClass, cache", "return function tearOff_" + name + functionCounter++ + "() {" + "if (cache === null) cache = createTearOffClass(parameters);" + "return new cache(this, null);" + "}")(parameters, H.closureFromTearOff, null);
  }
  function staticTearOffGetter(parameters) {
    var cache = null;
    return function() {
      if (cache === null)
        cache = H.closureFromTearOff(parameters).prototype;
      return cache;
    };
  }
  var typesOffset = 0;
  function tearOffParameters(container, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    if (typeof funType == "number")
      funType += typesOffset;
    return {co: container, iS: isStatic, iI: isIntercepted, rC: requiredParameterCount, dV: optionalParameterDefaultValues, cs: callNames, fs: funsOrNames, fT: funType, aI: applyIndex || 0, nDA: needsDirectAccess};
  }
  function installStaticTearOff(holder, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var parameters = tearOffParameters(holder, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, false);
    var getterFunction = staticTearOffGetter(parameters);
    holder[getterName] = getterFunction;
  }
  function installInstanceTearOff(prototype, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, needsDirectAccess) {
    isIntercepted = !!isIntercepted;
    var parameters = tearOffParameters(prototype, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex, !!needsDirectAccess);
    var getterFunction = instanceTearOffGetter(isIntercepted, parameters);
    prototype[getterName] = getterFunction;
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex, false);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, lazyFinal: lazyFinal, lazyOld: lazyOld, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  var A = {ErrorCode: function ErrorCode() {
    }, ErrorSeverity: function ErrorSeverity(t0, t1) {
      this.name = t0;
      this.ordinal = t1;
    }, ErrorType: function ErrorType(t0, t1) {
      this.name = t0;
      this.ordinal = t1;
    }, DirectiveContext: function DirectiveContext(t0) {
      this.state = t0;
    }, DirectiveState: function DirectiveState(t0, t1) {
      this.index = t0;
      this._directive_context$_name = t1;
    }, MemberKind: function MemberKind(t0) {
      this._member_kind$_name = t0;
    },
    translateErrorToken(token, reportError) {
      var t2, t3, errorCode, t4, type, _null = null, t1 = {},
        endOffset = t1.charOffset = token.offset,
        endOffset0 = token.get$endOffset();
      endOffset = endOffset0 == null ? endOffset : endOffset0;
      t2 = new A.translateErrorToken__makeError(t1, token, reportError);
      t3 = token.get$assertionMessage();
      errorCode = t3.get$code(t3);
      t3 = errorCode.analyzerCodes;
      t4 = t3 == null;
      switch (t4 ? _null : C.JSArray_methods.get$first(t3)) {
        case "UNTERMINATED_STRING_LITERAL":
          reportError.call$3(C.ScannerErrorCode_CJo, endOffset - 1, _null);
          return;
        case "UNTERMINATED_MULTI_LINE_COMMENT":
          reportError.call$3(C.ScannerErrorCode_g9V, endOffset - 1, _null);
          return;
        case "MISSING_DIGIT":
          t1.charOffset = endOffset - 1;
          return t2.call$2(C.ScannerErrorCode_IQy, _null);
        case "MISSING_HEX_DIGIT":
          t1.charOffset = endOffset - 1;
          return t2.call$2(C.ScannerErrorCode_wsa, _null);
        case "ILLEGAL_CHARACTER":
          return t2.call$2(C.ScannerErrorCode_66f, [token.get$character()]);
        case "UNSUPPORTED_OPERATOR":
          return t2.call$2(C.ScannerErrorCode_6TA, [type$.UnsupportedOperator._as(token).token.get$lexeme()]);
        default:
          if (errorCode === C.Code_kmC) {
            t1.charOffset = token.get$begin().endToken.offset;
            type = token.get$begin().type;
            if (type === C.TokenType_cOk || type === C.TokenType_skV)
              return t2.call$2(C.ScannerErrorCode_mtz, ["}"]);
            if (type === C.TokenType_AGi)
              return t2.call$2(C.ScannerErrorCode_mtz, ["]"]);
            if (type === C.TokenType_5uk)
              return t2.call$2(C.ScannerErrorCode_mtz, [")"]);
            if (type === C.TokenType_Drw)
              return t2.call$2(C.ScannerErrorCode_mtz, [">"]);
          } else if (errorCode === C.MessageCode_3Nw)
            return t2.call$2(C.ScannerErrorCode_q8u, _null);
          t1 = errorCode.toString$0(0) + ' "';
          throw H.wrapException(P.UnimplementedError$(t1 + H.S(t4 ? _null : C.JSArray_methods.get$first(t3)) + '"'));
      }
    },
    _isAtEnd(token, charOffset) {
      var t1;
      for (; true;) {
        token = token.next;
        t1 = token.type;
        if (t1 === C.TokenType_Emx)
          return token.offset === charOffset;
        if (t1.kind !== 88)
          return false;
      }
    },
    translateErrorToken__makeError: function translateErrorToken__makeError(t0, t1, t2) {
      this._box_0 = t0;
      this.token = t1;
      this.reportError = t2;
    },
    ScannerErrorCode: function ScannerErrorCode(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.uniqueName = t1;
      _._errors$_message = t2;
      _._correction = t3;
    },
    AstFactory: function AstFactory() {
    },
    AstFactoryImpl: function AstFactoryImpl() {
    },
    CompileTimeErrorCode: function CompileTimeErrorCode(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.uniqueName = t1;
      _._errors$_message = t2;
      _._correction = t3;
    },
    hashObjects(objects) {
      var hash,
        t1 = J.fold$1$2$ax(objects, 0, new A.hashObjects_closure(), type$.int);
      if (typeof t1 !== "number")
        return H.iae(t1);
      hash = t1 + ((t1 & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    hashObjects_closure: function hashObjects_closure() {
    },
    FormatterException$(errors) {
      return new A.FormatterException(errors);
    },
    FormatterException: function FormatterException(t0) {
      this.errors = t0;
    },
    UnexpectedOutputException: function UnexpectedOutputException(t0, t1) {
      this._input = t0;
      this._output = t1;
    },
    LineWriter: function LineWriter(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._buffer = t0;
      _._line_writer$_chunks = t1;
      _._lineEnding = t2;
      _.pageWidth = t3;
      _._blockIndentation = t4;
      _._blockCache = t5;
      _._selectionEnd = _._selectionStart = null;
    },
    _BlockKey: function _BlockKey(t0, t1) {
      this.chunk = t0;
      this.column = t1;
    },
    FormatResult: function FormatResult(t0, t1, t2, t3) {
      var _ = this;
      _.text = t0;
      _.cost = t1;
      _.selectionStart = t2;
      _.selectionEnd = t3;
    },
    SourceCode$(text, isCompilationUnit, selectionLength, selectionStart, uri) {
      var _null = null,
        t1 = selectionStart == null,
        t2 = selectionLength == null;
      if (t1 !== t2)
        H.throwExpression(P.ArgumentError$("Is selectionStart is provided, selectionLength must be too.", _null));
      if (!t1) {
        if (selectionStart < 0)
          H.throwExpression(P.ArgumentError$("selectionStart must be non-negative.", _null));
        if (selectionStart > text.length)
          H.throwExpression(P.ArgumentError$("selectionStart must be within text.", _null));
      }
      if (!t2) {
        if (selectionLength < 0)
          H.throwExpression(P.ArgumentError$("selectionLength must be non-negative.", _null));
        selectionStart.toString;
        if (selectionStart + selectionLength > text.length)
          H.throwExpression(P.ArgumentError$("selectionLength must end within text.", _null));
      }
      return new A.SourceCode(uri, text, isCompilationUnit, selectionStart, selectionLength);
    },
    SourceCode: function SourceCode(t0, t1, t2, t3, t4) {
      var _ = this;
      _.uri = t0;
      _.text = t1;
      _.isCompilationUnit = t2;
      _.selectionStart = t3;
      _.selectionLength = t4;
    },
    parseString($content, featureSet, path, throwIfDiagnostics) {
      var t2, t3, t4, t5, token, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, parser, unit,
        source = K.StringSource$($content, ""),
        errorCollector = new Z.RecordingErrorListener(),
        t1 = H._setArrayType([], type$.JSArray_int),
        scanner = new O.Scanner(source, $content, -1, errorCollector, t1);
      C.JSArray_methods.add$1(t1, 0);
      scanner.__Scanner__featureSetForOverriding = featureSet;
      scanner.__Scanner__featureSet = featureSet;
      t2 = featureSet._flags;
      t3 = $.$get$Feature_triple_shift().index;
      t4 = t2.length;
      if (t3 >= t4)
        return H.ioore(t2, t3);
      t5 = $.$get$Feature_non_nullable().index;
      if (t5 >= t4)
        return H.ioore(t2, t5);
      token = scanner.tokenize$0();
      t2 = scanner.get$_featureSet();
      t4 = t2._flags;
      t6 = t4.length;
      if (t5 >= t6)
        return H.ioore(t4, t5);
      t7 = t4[t5];
      t8 = $.$get$astFactory();
      t9 = H._setArrayType([], type$.JSArray_Directive);
      t10 = H._setArrayType([], type$.JSArray_CompilationUnitMember);
      t5 = t4[t5];
      t11 = $.$get$Feature_spread_collections().index;
      if (t11 >= t6)
        return H.ioore(t4, t11);
      t11 = t4[t11];
      t12 = $.$get$Feature_control_flow_collections().index;
      if (t12 >= t6)
        return H.ioore(t4, t12);
      t12 = t4[t12];
      if (t3 >= t6)
        return H.ioore(t4, t3);
      t3 = t4[t3];
      t13 = $.$get$Feature_nonfunction_type_aliases().index;
      if (t13 >= t6)
        return H.ioore(t4, t13);
      t13 = t4[t13];
      t14 = $.$get$Feature_variance().index;
      if (t14 >= t6)
        return H.ioore(t4, t14);
      t14 = t4[t14];
      t15 = $.$get$Feature_constructor_tearoffs().index;
      if (t15 >= t6)
        return H.ioore(t4, t15);
      t15 = t4[t15];
      t16 = $.$get$Feature_extension_types().index;
      if (t16 >= t6)
        return H.ioore(t4, t16);
      t16 = t4[t16];
      t4 = new Y.StackImpl(P.List_List$filled(8, null, false, type$.nullable_Object));
      t2 = new G.AstBuilder(t8, new N.FastaErrorReporter(new Z.ErrorReporter(errorCollector, t7, source)), t9, t10, source.uri, true, t5, t11, t12, t3, t13, t14, t15, t16, t2, t4);
      parser = new X.Parser0(t2);
      parser.__Parser_fastaParser = new N.Parser1(t2, C.AsyncModifier_0, C.LoopState_0);
      t2.__AstBuilder_parser = parser.get$fastaParser();
      t2.allowNativeClause = true;
      parser.__Parser_currentToken = token;
      t2 = parser.get$fastaParser();
      t3 = parser.__Parser_currentToken;
      parser.__Parser_currentToken = t2.parseUnit$1(t3 === $ ? H.throwExpression(H.LateError$fieldNI("currentToken")) : t3);
      unit = type$.CompilationUnitImpl._as(t4.pop$1(null));
      if (t1.length === 0)
        H.throwExpression(P.ArgumentError$("lineStarts must be non-empty", null));
      unit.lineInfo = new E.LineInfo(t1);
      t1 = errorCollector.get$errors();
      return new B.ParseStringResultImpl(t1, unit);
    },
    IterableNullableExtension_whereNotNull(_this, $T) {
      return A.IterableNullableExtension_whereNotNull$body(_this, $T, $T);
    },
    IterableNullableExtension_whereNotNull$body($async$_this, $async$$T, $async$type) {
      return P._makeSyncStarIterable(function() {
        var _this = $async$_this,
          $T = $async$$T;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, _i, element;
        return function $async$IterableNullableExtension_whereNotNull($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = _this.length, _i = 0;
              case 2:
                // for condition
                if (!(_i < _this.length)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                element = _this[_i];
                $async$goto = element != null ? 5 : 6;
                break;
              case 5:
                // then
                $async$goto = 7;
                return element;
              case 7:
                // after yield
              case 6:
                // join
              case 3:
                // for update
                _this.length === t1 || (0, H.throwConcurrentModificationError)(_this), ++_i;
                // goto for condition
                $async$goto = 2;
                break;
              case 4:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, $async$type);
    },
    _combine(hash, value) {
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    }
  },
  B = {
    StringToken$fromSubstring(type, data, start, end, charOffset, canonicalize, precedingComments) {
      var t1 = new B.StringToken(null, type, charOffset, precedingComments);
      t1._setCommentParent$1(precedingComments);
      t1.StringToken$fromSubstring$7$canonicalize$precedingComments(type, data, start, end, charOffset, true, precedingComments);
      return t1;
    },
    StringToken_canonicalizedString(s, start, end, canonicalize) {
      if (!canonicalize)
        return s;
      return $.$get$StringToken_canonicalizer().canonicalize$4(s, start, end, false);
    },
    CommentToken$fromSubstring(type, data, start, end, charOffset, canonicalize) {
      var _null = null,
        t1 = new B.CommentToken(_null, type, charOffset, _null);
      t1._setCommentParent$1(_null);
      t1.StringToken$fromSubstring$7$canonicalize$precedingComments(type, data, start, end, charOffset, true, _null);
      return t1;
    },
    _LazySubstring__LazySubstring(data, start, $length, b) {
      if (start < 1048576 && $length < 512)
        return new B._CompactLazySubstring(data, ((start << 9 | $length) << 1 | 1) >>> 0);
      else
        return new B._FullLazySubstring(data, start, $length, true);
    },
    StringToken: function StringToken(t0, t1, t2, t3) {
      var _ = this;
      _.valueOrLazySubstring = t0;
      _.type = t1;
      _.offset = t2;
      _.next = _.previous = null;
      _._precedingComment = t3;
    },
    CommentToken: function CommentToken(t0, t1, t2, t3) {
      var _ = this;
      _.valueOrLazySubstring = t0;
      _.type = t1;
      _.offset = t2;
      _.next = _.previous = null;
      _._precedingComment = t3;
    },
    LanguageVersionToken: function LanguageVersionToken(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.major = t0;
      _.minor = t1;
      _.valueOrLazySubstring = t2;
      _.type = t3;
      _.offset = t4;
      _.next = _.previous = null;
      _._precedingComment = t5;
    },
    DartDocToken: function DartDocToken(t0, t1, t2, t3) {
      var _ = this;
      _.valueOrLazySubstring = t0;
      _.type = t1;
      _.offset = t2;
      _.next = _.previous = null;
      _._precedingComment = t3;
    },
    _LazySubstring: function _LazySubstring() {
    },
    _CompactLazySubstring: function _CompactLazySubstring(t0, t1) {
      this.data = t0;
      this.fields = t1;
    },
    _FullLazySubstring: function _FullLazySubstring(t0, t1, t2, t3) {
      var _ = this;
      _.data = t0;
      _.start = t1;
      _.length = t2;
      _.boolValue = t3;
    },
    ThrowingAstVisitor: function ThrowingAstVisitor() {
    },
    ParseStringResultImpl: function ParseStringResultImpl(t0, t1) {
      this.errors = t0;
      this.unit = t1;
    },
    HasDartDocs: function HasDartDocs() {
    },
    HasDartDocsBuilder: function HasDartDocsBuilder() {
    },
    Expression0: function Expression0() {
    },
    ExpressionEmitter: function ExpressionEmitter() {
    },
    ExpressionEmitter_visitInvokeExpression_closure: function ExpressionEmitter_visitInvokeExpression_closure(t0, t1, t2) {
      this.$this = t0;
      this.expression = t1;
      this.out = t2;
    },
    ExpressionEmitter_visitInvokeExpression__closure: function ExpressionEmitter_visitInvokeExpression__closure(t0, t1) {
      this.$this = t0;
      this.out = t1;
    },
    ExpressionEmitter_visitInvokeExpression__closure0: function ExpressionEmitter_visitInvokeExpression__closure0(t0, t1) {
      this.$this = t0;
      this.out = t1;
    },
    ExpressionEmitter_visitInvokeExpression__closure1: function ExpressionEmitter_visitInvokeExpression__closure1(t0, t1, t2) {
      this.$this = t0;
      this.out = t1;
      this.expression = t2;
    },
    CodeExpression: function CodeExpression(t0) {
      this.code = t0;
    },
    InvokeExpression: function InvokeExpression(t0, t1, t2, t3) {
      var _ = this;
      _.target = t0;
      _.positionalArguments = t1;
      _.namedArguments = t2;
      _.typeArguments = t3;
    },
    SolveState$(_splitter, _ruleValues) {
      var t1 = new B.SolveState(_splitter, _ruleValues, P.LinkedHashSet_LinkedHashSet$_empty(type$.Rule));
      t1._calculateSplits$0();
      t1._calculateCost$0();
      return t1;
    },
    SolveState: function SolveState(t0, t1, t2) {
      var _ = this;
      _._splitter = t0;
      _._ruleValues = t1;
      _.__SolveState__unboundRules = _.__SolveState__boundRules = $;
      _._liveRules = t2;
      _.__SolveState__splits = $;
      _._overflowChars = 0;
      _._isComplete = true;
      _.__SolveState__boundRulesInUnboundLines = _.__SolveState__unboundConstraints = _.__SolveState__constraints = $;
    },
    SolveState_expand_closure: function SolveState_expand_closure(t0) {
      this._box_0 = t0;
    },
    SolveState_expand_closure0: function SolveState_expand_closure0() {
    },
    SolveState__calculateCost_endLine: function SolveState__calculateCost_endLine(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    SolveState__calculateCost_closure: function SolveState__calculateCost_closure(t0) {
      this._box_0 = t0;
    },
    SolveState__initUnboundConstraints_closure: function SolveState__initUnboundConstraints_closure(t0, t1) {
      this.unboundConstraints = t0;
      this.unbound = t1;
    },
    SolveState_toString_closure: function SolveState_toString_closure(t0) {
      this.$this = t0;
    },
    InternalStyle: function InternalStyle() {
    },
    isAlphabetic(char) {
      var t1;
      if (!(char >= 65 && char <= 90))
        t1 = char >= 97 && char <= 122;
      else
        t1 = true;
      return t1;
    },
    isDriveLetter(path, index) {
      var t1 = path.length,
        t2 = index + 2;
      if (t1 < t2)
        return false;
      if (!B.isAlphabetic(C.JSString_methods.codeUnitAt$1(path, index)))
        return false;
      if (C.JSString_methods.codeUnitAt$1(path, index + 1) !== 58)
        return false;
      if (t1 === t2)
        return true;
      return C.JSString_methods.codeUnitAt$1(path, t2) === 47;
    },
    isAllTheSame(iter) {
      var firstValue, t1;
      if (iter.get$length(iter) === 0)
        return true;
      firstValue = iter.get$first(iter);
      for (t1 = H.SubListIterable$(iter, 1, null, iter.$ti._eval$1("ListIterable.E")), t1 = new H.ListIterator(t1, t1.get$length(t1), t1.$ti._eval$1("ListIterator<ListIterable.E>")); t1.moveNext$0();)
        if (!J.$eq$(t1.__internal$_current, firstValue))
          return false;
      return true;
    },
    replaceFirstNull(list, element, $E) {
      var index = C.JSArray_methods.indexOf$1(list, null);
      if (index < 0)
        throw H.wrapException(P.ArgumentError$(H.S(list) + " contains no null elements.", null));
      C.JSArray_methods.$indexSet(list, index, element);
    },
    replaceWithNull(list, element, $E) {
      var index = C.JSArray_methods.indexOf$1(list, element);
      if (index < 0)
        throw H.wrapException(P.ArgumentError$(H.S(list) + " contains no elements matching " + element.toString$0(0) + ".", null));
      C.JSArray_methods.$indexSet(list, index, null);
    },
    countCodeUnits(string, codeUnit) {
      var t1, count;
      for (t1 = new H.CodeUnits(string), t1 = new H.ListIterator(t1, t1.get$length(t1), type$.CodeUnits._eval$1("ListIterator<ListMixin.E>")), count = 0; t1.moveNext$0();)
        if (t1.__internal$_current === codeUnit)
          ++count;
      return count;
    },
    findLineStart(context, text, column) {
      var beginningOfLine, index, lineStart;
      if (text.length === 0)
        for (beginningOfLine = 0; true;) {
          index = C.JSString_methods.indexOf$2(context, "\n", beginningOfLine);
          if (index === -1)
            return context.length - beginningOfLine >= column ? beginningOfLine : null;
          if (index - beginningOfLine >= column)
            return beginningOfLine;
          beginningOfLine = index + 1;
        }
      index = C.JSString_methods.indexOf$1(context, text);
      for (; index !== -1;) {
        lineStart = index === 0 ? 0 : C.JSString_methods.lastIndexOf$2(context, "\n", index - 1) + 1;
        if (column === index - lineStart)
          return lineStart;
        index = C.JSString_methods.indexOf$2(context, text, index + 1);
      }
      return null;
    }
  },
  C = {},
  D = {Assert: function Assert(t0) {
      this._assert$_name = t0;
    },
    looksLikeExpressionStart(next) {
      var t1;
      if (!next.get$isIdentifier())
        if (!(next.get$isKeyword() && !N.isOneOfOrEof(next, C.List_vjM))) {
          t1 = next.type;
          if (t1 !== C.TokenType_q1z)
            if (t1 !== C.TokenType_P5Z)
              if (t1 !== C.TokenType_pCd)
                if (t1 !== C.TokenType_IQp)
                  if (t1 !== C.TokenType_Vyt)
                    if (t1 !== C.TokenType_86y) {
                      t1 = t1.stringValue;
                      t1 = "{" === t1 || "(" === t1 || "[" === t1 || "[]" === t1 || "<" === t1 || "!" === t1 || "-" === t1 || "~" === t1 || "++" === t1 || "--" === t1;
                    } else
                      t1 = true;
                  else
                    t1 = true;
                else
                  t1 = true;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        } else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    IdentifierContext: function IdentifierContext() {
    },
    ListBuilder_ListBuilder(iterable, $E) {
      var t1 = new D.ListBuilder($E._eval$1("ListBuilder<0>")),
        t2 = $E._eval$1("_BuiltList<0>"),
        t3 = $E._eval$1("List<0>");
      if (t2._is(iterable)) {
        t2._as(iterable);
        t1.set$__ListBuilder__list(t3._as(iterable._list));
        t1.set$_listOwner(iterable);
      } else {
        t1.set$__ListBuilder__list(t3._as(P.List_List$from(iterable, true, $E)));
        t1.set$_listOwner(null);
      }
      return t1;
    },
    BuiltList: function BuiltList() {
    },
    _BuiltList: function _BuiltList(t0, t1) {
      this._list = t0;
      this._list$_hashCode = null;
      this.$ti = t1;
    },
    ListBuilder: function ListBuilder(t0) {
      this.__ListBuilder__list = $;
      this._listOwner = null;
      this.$ti = t0;
    },
    _NullAllocator: function _NullAllocator() {
    },
    visitAll(elements, output, visit, $T) {
      var iterator,
        t1 = J.getInterceptor$asx(elements);
      if (t1.get$isEmpty(elements))
        return output;
      iterator = t1.get$iterator(elements);
      iterator.moveNext$0();
      visit.call$1(iterator.get$current());
      for (; iterator.moveNext$0();) {
        output._contents += ", ";
        visit.call$1(iterator.get$current());
      }
      return output;
    },
    DartEmitter__isLambdaMethod(method) {
      var t1 = method.lambda;
      if (t1 == null)
        t1 = false;
      return t1;
    },
    DartEmitter: function DartEmitter(t0) {
      this.ExpressionEmitter__withInConstExpression = t0;
    },
    DartEmitter_visitClass_closure: function DartEmitter_visitClass_closure(t0, t1) {
      this.$this = t0;
      this.out = t1;
    },
    DartEmitter_visitClass_closure0: function DartEmitter_visitClass_closure0() {
    },
    DartEmitter_visitClass_closure1: function DartEmitter_visitClass_closure1(t0) {
      this.$this = t0;
    },
    DartEmitter_visitClass_closure2: function DartEmitter_visitClass_closure2(t0) {
      this.$this = t0;
    },
    DartEmitter_visitClass_closure3: function DartEmitter_visitClass_closure3(t0, t1, t2) {
      this.$this = t0;
      this.spec = t1;
      this.out = t2;
    },
    DartEmitter_visitClass_closure4: function DartEmitter_visitClass_closure4(t0, t1) {
      this.$this = t0;
      this.out = t1;
    },
    DartEmitter_visitClass_closure5: function DartEmitter_visitClass_closure5(t0, t1) {
      this.$this = t0;
      this.out = t1;
    },
    DartEmitter_visitConstructor_closure: function DartEmitter_visitConstructor_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    DartEmitter_visitConstructor_closure0: function DartEmitter_visitConstructor_closure0() {
    },
    DartEmitter_visitField_closure: function DartEmitter_visitField_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    DartEmitter_visitField_closure0: function DartEmitter_visitField_closure0(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.spec = t2;
    },
    DartEmitter_visitMethod_closure: function DartEmitter_visitMethod_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    DartEmitter_visitMethod_closure0: function DartEmitter_visitMethod_closure0() {
    },
    DartEmitter_visitMethod_closure1: function DartEmitter_visitMethod_closure1() {
    },
    DartEmitter__visitParameter_closure: function DartEmitter__visitParameter_closure(t0, t1) {
      this.$this = t0;
      this.output = t1;
    },
    DartEmitter_visitType_closure: function DartEmitter_visitType_closure() {
    },
    DartEmitter_visitTypeParameters_closure: function DartEmitter_visitTypeParameters_closure(t0) {
      this.$this = t0;
    },
    _DartEmitter_Object_CodeEmitter: function _DartEmitter_Object_CodeEmitter() {
    },
    _DartEmitter_Object_CodeEmitter_ExpressionEmitter: function _DartEmitter_Object_CodeEmitter_ExpressionEmitter() {
    },
    _$Method__$Method(updates) {
      var t1 = type$.Parameter;
      t1 = new D._$MethodBuilder(D.ListBuilder_ListBuilder(C.List_empty, type$.Expression_2), D.ListBuilder_ListBuilder(C.List_empty, type$.String), D.ListBuilder_ListBuilder(C.List_empty, type$.Reference), D.ListBuilder_ListBuilder(C.List_empty, t1), D.ListBuilder_ListBuilder(C.List_empty, t1));
      type$.nullable_void_Function_MethodBuilder._as(updates).call$1(t1);
      return t1.build$0();
    },
    _$Parameter__$Parameter(updates) {
      var t1 = new D._$ParameterBuilder(D.ListBuilder_ListBuilder(C.List_empty, type$.Expression_2), D.ListBuilder_ListBuilder(C.List_empty, type$.String), D.ListBuilder_ListBuilder(C.List_empty, type$.Reference));
      type$.nullable_void_Function_ParameterBuilder._as(updates).call$1(t1);
      return t1.build$0();
    },
    Method: function Method() {
    },
    MethodBuilder: function MethodBuilder() {
    },
    MethodType: function MethodType(t0) {
      this._method$_name = t0;
    },
    Parameter: function Parameter() {
    },
    ParameterBuilder: function ParameterBuilder() {
    },
    _$Method: function _$Method(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.annotations = t0;
      _.docs = t1;
      _.types = t2;
      _.optionalParameters = t3;
      _.requiredParameters = t4;
      _.body = t5;
      _.external = t6;
      _.lambda = t7;
      _.$static = t8;
      _.name = t9;
      _.type = t10;
      _.modifier = t11;
      _.returns = t12;
    },
    _$MethodBuilder: function _$MethodBuilder(t0, t1, t2, t3, t4) {
      var _ = this;
      _._method$_$v = null;
      _.annotations = t0;
      _.docs = t1;
      _.types = t2;
      _.optionalParameters = t3;
      _.requiredParameters = t4;
      _.body = null;
      _.external = false;
      _.lambda = null;
      _.$static = false;
      _.returns = _.modifier = _.type = _.name = null;
    },
    _$Parameter: function _$Parameter(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.defaultTo = t0;
      _.name = t1;
      _.named = t2;
      _.toThis = t3;
      _.annotations = t4;
      _.docs = t5;
      _.types = t6;
      _.type = t7;
      _.required = t8;
      _.covariant = t9;
    },
    _$ParameterBuilder: function _$ParameterBuilder(t0, t1, t2) {
      var _ = this;
      _.defaultTo = _._method$_$v = null;
      _.__ParameterBuilder_name = $;
      _.toThis = _.named = false;
      _.annotations = t0;
      _.docs = t1;
      _.types = t2;
      _.type = null;
      _.covariant = _.required = false;
    },
    _Method_Object_HasAnnotations: function _Method_Object_HasAnnotations() {
    },
    _Method_Object_HasAnnotations_HasGenerics: function _Method_Object_HasAnnotations_HasGenerics() {
    },
    _Method_Object_HasAnnotations_HasGenerics_HasDartDocs: function _Method_Object_HasAnnotations_HasGenerics_HasDartDocs() {
    },
    _MethodBuilder_Object_HasAnnotationsBuilder: function _MethodBuilder_Object_HasAnnotationsBuilder() {
    },
    _MethodBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder: function _MethodBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder() {
    },
    _MethodBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder_HasDartDocsBuilder: function _MethodBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder_HasDartDocsBuilder() {
    },
    _Parameter_Object_HasAnnotations: function _Parameter_Object_HasAnnotations() {
    },
    _Parameter_Object_HasAnnotations_HasGenerics: function _Parameter_Object_HasAnnotations_HasGenerics() {
    },
    _Parameter_Object_HasAnnotations_HasGenerics_HasDartDocs: function _Parameter_Object_HasAnnotations_HasGenerics_HasDartDocs() {
    },
    _ParameterBuilder_Object_HasAnnotationsBuilder: function _ParameterBuilder_Object_HasAnnotationsBuilder() {
    },
    _ParameterBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder: function _ParameterBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder() {
    },
    _ParameterBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder_HasDartDocsBuilder: function _ParameterBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder_HasDartDocsBuilder() {
    },
    SourceLocationMixin: function SourceLocationMixin() {
    },
    current() {
      var exception, t1, path, lastIndex, uri = null;
      try {
        uri = P.Uri_base();
      } catch (exception) {
        if (type$.Exception._is(H.unwrapException(exception))) {
          t1 = $._current;
          if (t1 != null)
            return t1;
          throw exception;
        } else
          throw exception;
      }
      if (J.$eq$(uri, $._currentUriBase)) {
        t1 = $._current;
        t1.toString;
        return t1;
      }
      $._currentUriBase = uri;
      if ($.$get$Style_platform() == $.$get$Style_url())
        t1 = $._current = uri.resolve$1(".").toString$0(0);
      else {
        path = uri.toFilePath$0();
        lastIndex = path.length - 1;
        t1 = $._current = lastIndex === 0 ? path : C.JSString_methods.substring$2(path, 0, lastIndex);
      }
      t1.toString;
      return t1;
    }
  },
  E = {AsyncModifier: function AsyncModifier(t0) {
      this._async_modifier$_name = t0;
    }, ConstructorReferenceContext: function ConstructorReferenceContext(t0) {
      this._constructor_reference_context$_name = t0;
    }, NullInterner: function NullInterner() {
    }, CharacterLocation: function CharacterLocation(t0, t1) {
      this.lineNumber = t0;
      this.columnNumber = t1;
    }, LineInfo: function LineInfo(t0) {
      this.lineStarts = t0;
      this._previousLine = 0;
    }, ParserErrorCode: function ParserErrorCode(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.uniqueName = t1;
      _._errors$_message = t2;
      _._correction = t3;
    }, TypeReference: function TypeReference() {
    }, TypeReferenceBuilder: function TypeReferenceBuilder() {
    }, _$TypeReference: function _$TypeReference(t0, t1, t2, t3, t4) {
      var _ = this;
      _.symbol = t0;
      _.url = t1;
      _.bound = t2;
      _.types = t3;
      _.isNullable = t4;
    }, _$TypeReferenceBuilder: function _$TypeReferenceBuilder(t0) {
      var _ = this;
      _.bound = _.url = _.symbol = _._type_reference$_$v = null;
      _.types = t0;
      _.isNullable = null;
    }, _TypeReference_Expression_HasGenerics: function _TypeReference_Expression_HasGenerics() {
    }, _TypeReferenceBuilder_Object_HasGenericsBuilder: function _TypeReferenceBuilder_Object_HasGenericsBuilder() {
    }, PosixStyle: function PosixStyle(t0, t1, t2) {
      this.separatorPattern = t0;
      this.needsSeparatorPattern = t1;
      this.rootPattern = t2;
    },
    _color(ansiEscape) {
      return "";
    }
  },
  F = {Precedence: function Precedence(t0) {
      this._precedence$_index = t0;
    },
    formatList(pattern, $arguments) {
      if ($arguments == null || $arguments.length === 0)
        return pattern;
      return H.stringReplaceAllFuncUnchecked(pattern, P.RegExp_RegExp("\\{(\\d+)\\}"), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(new F.formatList_closure($arguments))), type$.nullable_String_Function_String._as(null));
    },
    formatList_closure: function formatList_closure(t0) {
      this.$arguments = t0;
    },
    FieldModifier: function FieldModifier(t0) {
      this._field$_name = t0;
    },
    NestingBuilder: function NestingBuilder(t0, t1) {
      this._stack = t0;
      this._pendingNesting = null;
      this._nesting = t1;
    },
    UrlStyle: function UrlStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    main() {
      var t1 = document,
        outputText = t1.querySelector("#output_text"),
        input = type$.legacy_TextAreaElement._as(t1.getElementById("input_text"));
      (input && C.TextAreaElement_methods).set$text(input, ' {\n      "id": 157538,\n      "date": "2017-07-21T10:30:34",\n      "date_gmt": "2017-07-21T17:30:34",\n      "type": "post",\n      "link": "https://example.com",\n      "title": {\n          "rendered": "Json 2 dart built_value converter"\n      },\n      "tags": [\n          1798,\n          6298\n      ]\n}\n');
      J.get$onClick$x(t1.querySelector("#convert")).forEach$1(0, new F.main_closure(outputText));
    },
    main_closure: function main_closure(t0) {
      this.outputText = t0;
    },
    isHexDigit(characterCode) {
      if (characterCode <= 57)
        return 48 <= characterCode;
      characterCode |= 32;
      return 97 <= characterCode && characterCode <= 102;
    },
    hexDigitValue0(hexDigit) {
      if (hexDigit <= 57)
        return hexDigit - 48;
      return (hexDigit | 32) - 87;
    }
  },
  G = {
    checkAsyncAwaitYieldAsIdentifier(identifier, parser) {
      var t1, token;
      if (parser.asyncState !== C.AsyncModifier_0 && identifier.type.get$isPseudo()) {
        t1 = identifier.type.stringValue;
        if ("await" === t1) {
          token = N.findNonZeroLengthToken(identifier);
          parser.listener.handleRecoverableError$3(C.MessageCode_86y, token, token);
        } else if ("yield" === t1) {
          token = N.findNonZeroLengthToken(identifier);
          parser.listener.handleRecoverableError$3(C.MessageCode_gkc0, token, token);
        }
      }
    },
    CatchParameterIdentifierContext: function CatchParameterIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    ClassOrMixinOrExtensionIdentifierContext: function ClassOrMixinOrExtensionIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    CombinatorIdentifierContext: function CombinatorIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    ConstructorReferenceIdentifierContext: function ConstructorReferenceIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    DottedNameIdentifierContext: function DottedNameIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    EnumDeclarationIdentifierContext: function EnumDeclarationIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    EnumValueDeclarationIdentifierContext: function EnumValueDeclarationIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    ExpressionIdentifierContext: function ExpressionIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    ExtensionShowHideElementIdentifierContext: function ExtensionShowHideElementIdentifierContext(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._identifier_context_impl$_kind = t0;
      _._identifier_context$_name = t1;
      _.inDeclaration = t2;
      _.inLibraryOrPartOfDeclaration = t3;
      _.inSymbol = t4;
      _.isContinuation = t5;
      _.isBuiltInIdentifierAllowed = t6;
      _.recoveryTemplate = t7;
    },
    FieldDeclarationIdentifierContext: function FieldDeclarationIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    FieldInitializerIdentifierContext: function FieldInitializerIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    FormalParameterDeclarationIdentifierContext: function FormalParameterDeclarationIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    ImportPrefixIdentifierContext: function ImportPrefixIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    LiteralSymbolIdentifierContext: function LiteralSymbolIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    LocalFunctionDeclarationIdentifierContext: function LocalFunctionDeclarationIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    LabelDeclarationIdentifierContext: function LabelDeclarationIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    LabelReferenceIdentifierContext: function LabelReferenceIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    LibraryIdentifierContext: function LibraryIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    LocalVariableDeclarationIdentifierContext: function LocalVariableDeclarationIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    MetadataReferenceIdentifierContext: function MetadataReferenceIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    MethodDeclarationIdentifierContext: function MethodDeclarationIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    NamedArgumentReferenceIdentifierContext: function NamedArgumentReferenceIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    TopLevelDeclarationIdentifierContext: function TopLevelDeclarationIdentifierContext(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.followingValues = t0;
      _._identifier_context$_name = t1;
      _.inDeclaration = t2;
      _.inLibraryOrPartOfDeclaration = t3;
      _.inSymbol = t4;
      _.isContinuation = t5;
      _.isBuiltInIdentifierAllowed = t6;
      _.recoveryTemplate = t7;
    },
    TypedefDeclarationIdentifierContext: function TypedefDeclarationIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    TypeReferenceIdentifierContext: function TypeReferenceIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    TypeVariableDeclarationIdentifierContext: function TypeVariableDeclarationIdentifierContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._identifier_context$_name = t0;
      _.inDeclaration = t1;
      _.inLibraryOrPartOfDeclaration = t2;
      _.inSymbol = t3;
      _.isContinuation = t4;
      _.isBuiltInIdentifierAllowed = t5;
      _.recoveryTemplate = t6;
    },
    LinkIterator: function LinkIterator(t0, t1) {
      this._link_implementation$_current = null;
      this._link = t0;
      this.$ti = t1;
    },
    LinkEntry: function LinkEntry(t0, t1, t2) {
      this.head = t0;
      this.tail = t1;
      this.$ti = t2;
    },
    AstBuilder: function AstBuilder(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15) {
      var _ = this;
      _.ast = t0;
      _.errorReporter = t1;
      _.scriptTag = null;
      _.directives = t2;
      _.declarations = t3;
      _.uri = t4;
      _.__AstBuilder_parser = $;
      _.extensionDeclaration = _.mixinDeclaration = _.classDeclaration = null;
      _.isFullAst = t5;
      _.allowNativeClause = false;
      _.nativeName = null;
      _.enableNonNullable = t6;
      _.enableSpreadCollections = t7;
      _.enableControlFlowCollections = t8;
      _.enableTripleShift = t9;
      _.enableNonFunctionTypeAliases = t10;
      _.enableVariance = t11;
      _.enableConstructorTearoffs = t12;
      _.enableExtensionTypes = t13;
      _._ast_builder$_featureSet = t14;
      _.stack = t15;
    },
    AstBuilder_checkFieldFormalParameters_closure: function AstBuilder_checkFieldFormalParameters_closure(t0) {
      this.$this = t0;
    },
    AstBuilder_endSwitchBlock_closure: function AstBuilder_endSwitchBlock_closure() {
    },
    AstBuilder_handleLiteralList_closure: function AstBuilder_handleLiteralList_closure() {
    },
    AstBuilder_handleLiteralSetOrMap_closure: function AstBuilder_handleLiteralSetOrMap_closure() {
    },
    _ConstructorNameWithInvalidTypeArgs: function _ConstructorNameWithInvalidTypeArgs(t0, t1) {
      this.name = t0;
      this.invalidTypeArgs = t1;
    },
    _InvalidCollectionElement: function _InvalidCollectionElement() {
    },
    _Modifiers: function _Modifiers() {
      var _ = this;
      _.lateToken = _.requiredToken = _.covariantKeyword = _.staticKeyword = _.finalConstOrVarKeyword = _.externalKeyword = _.abstractKeyword = null;
    },
    _OperatorName: function _OperatorName(t0, t1) {
      this.operatorKeyword = t0;
      this.name = t1;
    },
    _OptionalFormalParameters: function _OptionalFormalParameters(t0, t1, t2) {
      this.parameters = t0;
      this.leftDelimiter = t1;
      this.rightDelimiter = t2;
    },
    _ParameterDefaultValue: function _ParameterDefaultValue(t0, t1) {
      this.separator = t0;
      this.value = t1;
    },
    _RedirectingFactoryBody: function _RedirectingFactoryBody(t0, t1) {
      this.equalToken = t0;
      this.constructorName = t1;
    },
    RuleSet: function RuleSet(t0) {
      this._values = t0;
    },
    RuleSet_toString_closure: function RuleSet_toString_closure() {
    },
    SplitSet: function SplitSet(t0) {
      this._columns = t0;
      this.__SplitSet__cost = $;
    },
    Parser: function Parser(t0) {
      this._dartfmt = t0;
    },
    Parser_parse_closure: function Parser_parse_closure(t0, t1) {
      this.$this = t0;
      this.allClasses = t1;
    },
    Parser_parse_closure0: function Parser_parse_closure0(t0) {
      this.$this = t0;
    },
    Parser_parse_closure1: function Parser_parse_closure1() {
    },
    Parser__generateStringClass_closure: function Parser__generateStringClass_closure(t0, t1, t2) {
      this.$this = t0;
      this.name = t1;
      this.topLevel = t2;
    },
    Parser__generateStringClass__closure: function Parser__generateStringClass__closure() {
    },
    Parser__generateStringClass__closure0: function Parser__generateStringClass__closure0(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    Parser__generateStringClass__closure1: function Parser__generateStringClass__closure1(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    Parser__generateStringClass___closure0: function Parser__generateStringClass___closure0() {
    },
    Parser__generateStringClass__closure2: function Parser__generateStringClass__closure2(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    Parser__generateStringClass__closure3: function Parser__generateStringClass__closure3(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    Parser__generateStringClass___closure: function Parser__generateStringClass___closure(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    Parser__buildMethods_closure: function Parser__buildMethods_closure(t0) {
      this.$this = t0;
    },
    Parser__buildMethods__closure: function Parser__buildMethods__closure(t0, t1) {
      this.$this = t0;
      this.s = t1;
    },
    Parser__getTypedClassFields_closure: function Parser__getTypedClassFields_closure(t0, t1) {
      this.$this = t0;
      this.topLevelClass = t1;
    }
  },
  H = {JS_CONST: function JS_CONST() {
    },
    LateError$fieldADI(fieldName) {
      return new H.LateError("Field '" + H.S(fieldName) + string$.x27_has_);
    },
    LateError$fieldNI(fieldName) {
      return new H.LateError("Field '" + fieldName + "' has not been initialized.");
    },
    LateError$fieldAI(fieldName) {
      return new H.LateError("Field '" + fieldName + "' has already been initialized.");
    },
    ReachabilityError$(_message) {
      return new H.ReachabilityError(_message);
    },
    hexDigitValue(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    checkNotNullable(value, $name, $T) {
      if (value == null)
        throw H.wrapException(new H.NotNullableError($name, $T._eval$1("NotNullableError<0>")));
      return value;
    },
    SubListIterable$(_iterable, _start, _endOrLength, $E) {
      P.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        P.RangeError_checkNotNegative(_endOrLength, "end");
        if (typeof _start !== "number")
          return _start.$gt();
        if (_start > _endOrLength)
          H.throwExpression(P.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new H.SubListIterable(_iterable, _start, _endOrLength, $E._eval$1("SubListIterable<0>"));
    },
    MappedIterable_MappedIterable(iterable, $function, $S, $T) {
      if (type$.EfficientLengthIterable_dynamic._is(iterable))
        return new H.EfficientLengthMappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("EfficientLengthMappedIterable<1,2>"));
      return new H.MappedIterable(iterable, $function, $S._eval$1("@<0>")._bind$1($T)._eval$1("MappedIterable<1,2>"));
    },
    IterableElementError_noElement() {
      return new P.StateError("No element");
    },
    IterableElementError_tooMany() {
      return new P.StateError("Too many elements");
    },
    IterableElementError_tooFew() {
      return new P.StateError("Too few elements");
    },
    Sort_sort(a, compare, $E) {
      H.Sort__doSort(a, 0, J.get$length$asx(a) - 1, compare, $E);
    },
    Sort__doSort(a, left, right, compare, $E) {
      if (right - left <= 32)
        H.Sort__insertionSort(a, left, right, compare, $E);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort(a, left, right, compare, $E) {
      var i, t1, el, j, t2, j0;
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (j > left) {
            t2 = compare.call$2(t1.$index(a, j - 1), el);
            if (typeof t2 !== "number")
              return t2.$gt();
            t2 = t2 > 0;
          } else
            t2 = false;
          if (!t2)
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort(a, left, right, compare, $E) {
      var t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, comp_pivot1, comp_pivot2,
        sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6),
        index1 = left + sixth,
        index5 = right - sixth,
        index3 = C.JSInt_methods._tdivFast$1(left + right, 2),
        index2 = index3 - sixth,
        index4 = index3 + sixth,
        t1 = J.getInterceptor$asx(a),
        el1 = t1.$index(a, index1),
        el2 = t1.$index(a, index2),
        el3 = t1.$index(a, index3),
        el4 = t1.$index(a, index4),
        el5 = t1.$index(a, index5),
        t2 = compare.call$2(el1, el2);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t2 = compare.call$2(el1, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el1, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      t2 = compare.call$2(el3, el4);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      t2 = compare.call$2(el2, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el2, el3);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      t2 = compare.call$2(el4, el5);
      if (typeof t2 !== "number")
        return t2.$gt();
      if (t2 > 0) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (typeof comp !== "number")
            return comp.$lt();
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (typeof comp !== "number")
                return comp.$gt();
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp_pivot1 = compare.call$2(ak, el2);
          if (typeof comp_pivot1 !== "number")
            return comp_pivot1.$lt();
          if (comp_pivot1 < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else {
            comp_pivot2 = compare.call$2(ak, el4);
            if (typeof comp_pivot2 !== "number")
              return comp_pivot2.$gt();
            if (comp_pivot2 > 0)
              for (; true;) {
                comp = compare.call$2(t1.$index(a, great), el4);
                if (typeof comp !== "number")
                  return comp.$gt();
                if (comp > 0) {
                  --great;
                  if (great < k)
                    break;
                  continue;
                } else {
                  comp = compare.call$2(t1.$index(a, great), el2);
                  if (typeof comp !== "number")
                    return comp.$lt();
                  great0 = great - 1;
                  if (comp < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    less = less0;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                  }
                  great = great0;
                  break;
                }
              }
          }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      H.Sort__doSort(a, left, less - 2, compare, $E);
      H.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                comp = compare.call$2(t1.$index(a, great), el2);
                if (typeof comp !== "number")
                  return comp.$lt();
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare, $E);
      } else
        H.Sort__doSort(a, less, great, compare, $E);
    },
    LateError: function LateError(t0) {
      this._message = t0;
    },
    ReachabilityError: function ReachabilityError(t0) {
      this._message = t0;
    },
    CodeUnits: function CodeUnits(t0) {
      this._string = t0;
    },
    nullFuture_closure: function nullFuture_closure() {
    },
    NotNullableError: function NotNullableError(t0, t1) {
      this._name = t0;
      this.$ti = t1;
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2, t3) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _.__internal$_current = null;
      _.$ti = t3;
    },
    TakeWhileIterable: function TakeWhileIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    TakeWhileIterator: function TakeWhileIterator(t0, t1, t2) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._isFinished = false;
      _.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    WhereTypeIterable: function WhereTypeIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    WhereTypeIterator: function WhereTypeIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol(t0) {
      this._name = t0;
    },
    unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    isJsIndexable(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return type$.JavaScriptIndexingBehavior_dynamic._is(object);
    },
    S(value) {
      var res;
      if (typeof value == "string")
        return value;
      if (typeof value == "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res != "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    createUnmangledInvocationMirror(symbol, internalName, kind, $arguments, argumentNames, types) {
      var t1;
      H._asStringS(internalName);
      t1 = type$.List_dynamic;
      return new H.JSInvocationMirror(symbol, H._asIntS(kind), t1._as($arguments), t1._as(argumentNames), H._asIntS(types));
    },
    Primitives_objectHashCode(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt(source, radix) {
      var match, decimalMatch, maxCharCode, digitsPart, t1, i, _null = null;
      if (typeof source != "string")
        H.throwExpression(H.argumentErrorValue(source));
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return _null;
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = match[3];
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return _null;
      }
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", _null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((C.JSString_methods._codeUnitAt$1(digitsPart, i) | 32) > maxCharCode)
            return _null;
      }
      return parseInt(source, radix);
    },
    Primitives_parseDouble(source) {
      var result, trimmed;
      if (typeof source != "string")
        H.throwExpression(H.argumentErrorValue(source));
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return null;
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = J.trim$0$s(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return null;
      }
      return result;
    },
    Primitives_objectTypeName(object) {
      return H.Primitives__objectTypeNameNewRti(object);
    },
    Primitives__objectTypeNameNewRti(object) {
      var dispatchName, t1, $constructor, constructorName;
      if (object instanceof P.Object)
        return H._rtiToString(H.instanceType(object), null);
      if (J.getInterceptor$(object) === C.Interceptor_methods || type$.UnknownJavaScriptObject._is(object)) {
        dispatchName = C.C_JS_CONST(object);
        t1 = dispatchName !== "Object" && dispatchName !== "";
        if (t1)
          return dispatchName;
        $constructor = object.constructor;
        if (typeof $constructor == "function") {
          constructorName = $constructor.name;
          if (typeof constructorName == "string")
            t1 = constructorName !== "Object" && constructorName !== "";
          else
            t1 = false;
          if (t1)
            return constructorName;
        }
      }
      return H._rtiToString(H.instanceType(object), null);
    },
    Primitives_currentUri() {
      if (!!self.location)
        return self.location.href;
      return null;
    },
    Primitives__fromCharCodeApply(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints(codePoints) {
      var t1, _i, i,
        a = H._setArrayType([], type$.JSArray_int);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (!H._isInt(i))
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (!H._isInt(i))
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode(charCode) {
      var bits;
      if (typeof charCode !== "number")
        return H.iae(charCode);
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((C.JSInt_methods._shrOtherPositive$1(bits, 10) | 55296) >>> 0, bits & 1023 | 56320);
        }
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    iae(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError(indexable, index) {
      var $length, t1, _s5_ = "index";
      if (!H._isInt(index))
        return new P.ArgumentError(true, index, _s5_, null);
      $length = H._asIntS(J.get$length$asx(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    diagnoseRangeError(start, end, $length) {
      if (start < 0 || start > $length)
        return P.RangeError$range(start, 0, $length, "start", null);
      if (end != null)
        if (end < start || end > $length)
          return P.RangeError$range(end, start, $length, "end", null);
      return new P.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkNum(value) {
      if (typeof value != "number")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException(ex) {
      var wrapper, t1;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      t1 = H.toStringWrapper;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: t1});
        wrapper.name = "";
      } else
        wrapper.toString = t1;
      return wrapper;
    },
    toStringWrapper() {
      return J.toString$0$(this.dartException);
    },
    throwExpression(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = H.quoteStringForRegExp(message.replace(String({}), "$receiver$"));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H._setArrayType([], type$.JSArray_String);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new H.TypeErrorDecoder(message.replace(new RegExp("\\\\\\$arguments\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$argumentsExpr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$expr\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$method\\\\\\$", "g"), "((?:x|[^x])*)").replace(new RegExp("\\\\\\$receiver\\\\\\$", "g"), "((?:x|[^x])*)"), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn(expression) {
      return function($expr$) {
        var $argumentsExpr$ = "$arguments$";
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    JsNoSuchMethodError$(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException(ex) {
      if (ex == null)
        return new H.NullThrownFromJavaScriptException(ex);
      if (ex instanceof H.ExceptionAndStackTrace)
        return H.saveStackTrace(ex, ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return H.saveStackTrace(ex, ex.dartException);
      return H._unwrapNonDartException(ex);
    },
    saveStackTrace(ex, error) {
      if (type$.Error._is(error))
        if (error.$thrownJsError == null)
          error.$thrownJsError = ex;
      return error;
    },
    _unwrapNonDartException(ex) {
      var message, number, ieErrorCode, t1, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, _null = null;
      if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              t1 = H.S(message) + " (Error " + ieErrorCode + ")";
              return H.saveStackTrace(ex, new H.NullError(t1, _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H._asStringS(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return H.saveStackTrace(ex, H.JsNoSuchMethodError$(H._asStringS(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t1 = match != null;
                        } else
                          t1 = true;
                      } else
                        t1 = true;
                    } else
                      t1 = true;
                  } else
                    t1 = true;
                } else
                  t1 = true;
              } else
                t1 = true;
            } else
              t1 = true;
            if (t1) {
              H._asStringS(message);
              return H.saveStackTrace(ex, new H.NullError(message, match == null ? _null : match.method));
            }
          }
        }
        return H.saveStackTrace(ex, new H.UnknownJsTypeError(typeof message == "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message == "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return H.saveStackTrace(ex, new P.ArgumentError(false, _null, _null, typeof message == "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message == "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    objectHashCode(object) {
      if (object == null || typeof object != "object")
        return J.get$hashCode$(object);
      else
        return H.Primitives_objectHashCode(object);
    },
    fillLiteralMap(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    fillLiteralSet(values, result) {
      var index,
        $length = values.length;
      for (index = 0; index < $length; ++index)
        result.add$1(0, values[index]);
      return result;
    },
    invokeClosure(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      type$.Function._as(closure);
      switch (H._asIntS(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS(closure, arity) {
      var $function;
      if (closure == null)
        return null;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff(parameters) {
      var $prototype, $constructor, t2, trampoline, applyTrampoline, i, stub, stub0, stubName, stubCallName,
        container = parameters.co,
        isStatic = parameters.iS,
        isIntercepted = parameters.iI,
        needsDirectAccess = parameters.nDA,
        applyTrampolineIndex = parameters.aI,
        funsOrNames = parameters.fs,
        callNames = parameters.cs,
        $name = funsOrNames[0],
        callName = callNames[0],
        $function = container[$name],
        t1 = parameters.fT;
      t1.toString;
      H.boolConversionCheck(isStatic);
      $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        t2 = new Function("a,b" + t2, "this.$initialize(a,b" + t2 + ")");
        $constructor = t2;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      $prototype.$_name = $name;
      $prototype.$_target = $function;
      t2 = !isStatic;
      if (t2)
        trampoline = H.Closure_forwardCallTo($name, $function, isIntercepted, needsDirectAccess);
      else {
        $prototype.$static_name = $name;
        trampoline = $function;
      }
      $prototype.$signature = H.Closure__computeSignatureFunctionNewRti(t1, isStatic, isIntercepted);
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < funsOrNames.length; ++i) {
        stub = funsOrNames[i];
        if (typeof stub == "string") {
          stub0 = container[stub];
          stubName = stub;
          stub = stub0;
        } else
          stubName = "";
        stubCallName = callNames[i];
        if (stubCallName != null) {
          if (t2)
            stub = H.Closure_forwardCallTo(stubName, stub, isIntercepted, needsDirectAccess);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex)
          applyTrampoline = stub;
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = parameters.rC;
      $prototype.$defaultValues = parameters.dV;
      return $constructor;
    },
    Closure__computeSignatureFunctionNewRti(functionType, isStatic, isIntercepted) {
      if (typeof functionType == "number")
        return functionType;
      if (typeof functionType == "string") {
        if (H.boolConversionCheck(isStatic))
          throw H.wrapException("Cannot compute signature for static tearoff.");
        return function(recipe, evalOnReceiver) {
          return function() {
            return evalOnReceiver(this, recipe);
          };
        }(functionType, H.BoundClosure_evalRecipe);
      }
      throw H.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = H.BoundClosure_receiverOf;
      switch (H.boolConversionCheck(needsDirectAccess) ? -1 : arity) {
        case 0:
          return function(entry, receiverOf) {
            return function() {
              return receiverOf(this)[entry]();
            };
          }(stubName, getReceiver);
        case 1:
          return function(entry, receiverOf) {
            return function(a) {
              return receiverOf(this)[entry](a);
            };
          }(stubName, getReceiver);
        case 2:
          return function(entry, receiverOf) {
            return function(a, b) {
              return receiverOf(this)[entry](a, b);
            };
          }(stubName, getReceiver);
        case 3:
          return function(entry, receiverOf) {
            return function(a, b, c) {
              return receiverOf(this)[entry](a, b, c);
            };
          }(stubName, getReceiver);
        case 4:
          return function(entry, receiverOf) {
            return function(a, b, c, d) {
              return receiverOf(this)[entry](a, b, c, d);
            };
          }(stubName, getReceiver);
        case 5:
          return function(entry, receiverOf) {
            return function(a, b, c, d, e) {
              return receiverOf(this)[entry](a, b, c, d, e);
            };
          }(stubName, getReceiver);
        default:
          return function(f, receiverOf) {
            return function() {
              return f.apply(receiverOf(this), arguments);
            };
          }($function, getReceiver);
      }
    },
    Closure_forwardCallTo(stubName, $function, isIntercepted, needsDirectAccess) {
      var arity, t1, selfName, t2, $arguments,
        _s8_ = "receiver";
      if (H.boolConversionCheck(isIntercepted))
        return H.Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess);
      arity = $function.length;
      t1 = H.boolConversionCheck(needsDirectAccess) || arity >= 27;
      if (t1)
        return H.Closure_cspForwardCall(arity, needsDirectAccess, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure__receiverFieldNameCache;
        return new Function(t1 + (t2 == null ? $.BoundClosure__receiverFieldNameCache = H.BoundClosure__computeFieldNamed(_s8_) : t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure__receiverFieldNameCache;
      return new Function(t1 + (t2 == null ? $.BoundClosure__receiverFieldNameCache = H.BoundClosure__computeFieldNamed(_s8_) : t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function) {
      var getReceiver = H.BoundClosure_receiverOf,
        getInterceptor = H.BoundClosure_interceptorOf;
      switch (H.boolConversionCheck(needsDirectAccess) ? -1 : arity) {
        case 0:
          throw H.wrapException(new H.RuntimeError("Intercepted function with no arguments."));
        case 1:
          return function(entry, interceptorOf, receiverOf) {
            return function() {
              return interceptorOf(this)[entry](receiverOf(this));
            };
          }(stubName, getInterceptor, getReceiver);
        case 2:
          return function(entry, interceptorOf, receiverOf) {
            return function(a) {
              return interceptorOf(this)[entry](receiverOf(this), a);
            };
          }(stubName, getInterceptor, getReceiver);
        case 3:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b) {
              return interceptorOf(this)[entry](receiverOf(this), a, b);
            };
          }(stubName, getInterceptor, getReceiver);
        case 4:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c);
            };
          }(stubName, getInterceptor, getReceiver);
        case 5:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d);
            };
          }(stubName, getInterceptor, getReceiver);
        case 6:
          return function(entry, interceptorOf, receiverOf) {
            return function(a, b, c, d, e) {
              return interceptorOf(this)[entry](receiverOf(this), a, b, c, d, e);
            };
          }(stubName, getInterceptor, getReceiver);
        default:
          return function(f, interceptorOf, receiverOf) {
            return function() {
              var a = [receiverOf(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(interceptorOf(this), a);
            };
          }($function, getInterceptor, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo(stubName, $function, needsDirectAccess) {
      var receiverField, arity, t1, t2, $arguments,
        interceptorField = $.BoundClosure__interceptorFieldNameCache;
      if (interceptorField == null)
        interceptorField = $.BoundClosure__interceptorFieldNameCache = H.BoundClosure__computeFieldNamed("interceptor");
      receiverField = $.BoundClosure__receiverFieldNameCache;
      if (receiverField == null)
        receiverField = $.BoundClosure__receiverFieldNameCache = H.BoundClosure__computeFieldNamed("receiver");
      arity = $function.length;
      t1 = H.boolConversionCheck(needsDirectAccess) || arity >= 28;
      if (t1)
        return H.Closure_cspForwardInterceptedCall(arity, needsDirectAccess, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + interceptorField + "." + H.S(stubName) + "(this." + receiverField + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + interceptorField + "." + H.S(stubName) + "(this." + receiverField + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff(parameters) {
      return H.Closure_fromTearOff(parameters);
    },
    BoundClosure_evalRecipe(closure, recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, H.instanceType(closure._receiver), recipe);
    },
    BoundClosure_receiverOf(closure) {
      return closure._receiver;
    },
    BoundClosure_interceptorOf(closure) {
      return closure._interceptor;
    },
    BoundClosure__computeFieldNamed(fieldName) {
      var t1, i, $name,
        template = new H.BoundClosure("receiver", "interceptor"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template), type$.nullable_Object);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
      throw H.wrapException(P.ArgumentError$("Field name " + fieldName + " not found.", null));
    },
    boolConversionCheck(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    assertThrow(message) {
      throw H.wrapException(new H._AssertionError(message));
    },
    throwCyclicInit(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(staticName));
    },
    getIsolateAffinityTag($name) {
      return init.getIsolateTag($name);
    },
    defineProperty(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor(obj) {
      var interceptor, interceptorClass, altTag, mark, t1,
        tag = H._asStringS($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        altTag = H._asStringQ($.alternateTagFunction.call$2(obj, tag));
        if (altTag != null) {
          record = $.dispatchRecordsForInstanceTags[altTag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[altTag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[altTag];
          tag = altTag;
        }
      }
      if (interceptorClass == null)
        return null;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    JSSyntaxRegExp_makeNative(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked(receiver, other, startIndex) {
      var t1;
      if (typeof other == "string")
        return receiver.indexOf(other, startIndex) >= 0;
      else if (other instanceof H.JSSyntaxRegExp) {
        t1 = C.JSString_methods.substring$1(receiver, startIndex);
        return other._nativeRegExp.test(t1);
      } else {
        t1 = J.allMatches$1$s(other, C.JSString_methods.substring$1(receiver, startIndex));
        return !t1.get$isEmpty(t1);
      }
    },
    escapeReplacement(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    quoteStringForRegExp(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked(receiver, pattern, replacement) {
      var t1 = H.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      return t1;
    },
    stringReplaceAllUncheckedString(receiver, pattern, replacement) {
      var $length, t1, i, index;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        for (t1 = replacement, i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      index = receiver.indexOf(pattern, 0);
      if (index < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(H.quoteStringForRegExp(pattern), "g"), H.escapeReplacement(replacement));
    },
    _stringIdentity(string) {
      return string;
    },
    stringReplaceAllFuncUnchecked(receiver, pattern, onMatch, onNonMatch) {
      var t1, startIndex, t2, match, t3, t4;
      if (!type$.Pattern._is(pattern))
        throw H.wrapException(P.ArgumentError$value(pattern, "pattern", "is not a Pattern"));
      for (t1 = pattern.allMatches$1(0, receiver), t1 = new H._AllMatchesIterator(t1._re, t1.__js_helper$_string, t1.__js_helper$_start), startIndex = 0, t2 = ""; t1.moveNext$0();) {
        match = t1.__js_helper$_current;
        t3 = match._match;
        t4 = t3.index;
        t2 = t2 + H.S(H._stringIdentity(C.JSString_methods.substring$2(receiver, startIndex, t4))) + H.S(onMatch.call$1(match));
        startIndex = t4 + t3[0].length;
      }
      t1 = t2 + H.S(H._stringIdentity(C.JSString_methods.substring$1(receiver, startIndex)));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    stringReplaceFirstUnchecked(receiver, pattern, replacement, startIndex) {
      var index = receiver.indexOf(pattern, startIndex);
      if (index < 0)
        return receiver;
      return H.stringReplaceRangeUnchecked(receiver, index, index + pattern.length, replacement);
    },
    stringReplaceRangeUnchecked(receiver, start, end, replacement) {
      var prefix = receiver.substring(0, start),
        suffix = receiver.substring(end);
      return prefix + replacement + suffix;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _._keys = t2;
      _.$ti = t3;
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _.__js_helper$_memberName = t0;
      _.__js_helper$_kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this.__js_helper$_message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this.__js_helper$_message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this.__js_helper$_message = t0;
    },
    NullThrownFromJavaScriptException: function NullThrownFromJavaScriptException(t0) {
      this._irritant = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    Closure0Args: function Closure0Args() {
    },
    Closure2Args: function Closure2Args() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1) {
      this._receiver = t0;
      this._interceptor = t1;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _.__js_helper$_last = _.__js_helper$_first = _.__js_helper$_rest = _.__js_helper$_nums = _.__js_helper$_strings = null;
      _.__js_helper$_modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      this.hashMapCellKey = t0;
      this.hashMapCellValue = t1;
      this.__js_helper$_next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _.__js_helper$_modifications = t1;
      _.__js_helper$_current = _.__js_helper$_cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterable: function _AllMatchesIterable(t0, t1, t2) {
      this._re = t0;
      this.__js_helper$_string = t1;
      this.__js_helper$_start = t2;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _.__js_helper$_string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _StringAllMatchesIterable: function _StringAllMatchesIterable(t0, t1, t2) {
      this.__js_helper$_input = t0;
      this._pattern = t1;
      this.__js_helper$_index = t2;
    },
    _StringAllMatchesIterator: function _StringAllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _.__js_helper$_input = t0;
      _._pattern = t1;
      _.__js_helper$_index = t2;
      _.__js_helper$_current = null;
    },
    throwLateFieldADI(fieldName) {
      return H.throwExpression(H.LateError$fieldADI(fieldName));
    },
    _Cell$named(_name) {
      var t1 = new H._Cell(_name);
      return t1._value = t1;
    },
    _InitializedCell$named(_name, _initializer) {
      var t1 = new H._InitializedCell(_name, _initializer);
      return t1._value = t1;
    },
    _Cell: function _Cell(t0) {
      this.__late_helper$_name = t0;
      this._value = null;
    },
    _InitializedCell: function _InitializedCell(t0, t1) {
      this.__late_helper$_name = t0;
      this._value = null;
      this._initializer = t1;
    },
    _ensureNativeList(list) {
      return list;
    },
    NativeInt8List__create1(arg) {
      return new Int8Array(arg);
    },
    _checkValidIndex(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    _checkValidRange(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    Rti__getQuestionFromStar(universe, rti) {
      var question = rti._precomputed1;
      return question == null ? rti._precomputed1 = H._Universe__lookupQuestionRti(universe, rti._primary, true) : question;
    },
    Rti__getFutureFromFutureOr(universe, rti) {
      var future = rti._precomputed1;
      return future == null ? rti._precomputed1 = H._Universe__lookupInterfaceRti(universe, "Future", [rti._primary]) : future;
    },
    Rti__isUnionOfFunctionType(rti) {
      var kind = rti._kind;
      if (kind === 6 || kind === 7 || kind === 8)
        return H.Rti__isUnionOfFunctionType(rti._primary);
      return kind === 11 || kind === 12;
    },
    Rti__getCanonicalRecipe(rti) {
      return rti._canonicalRecipe;
    },
    findType(recipe) {
      return H._Universe_eval(init.typeUniverse, recipe, false);
    },
    instantiatedGenericFunctionType(genericFunctionRti, instantiationRti) {
      var t1, cache, key, probe, rti;
      if (genericFunctionRti == null)
        return null;
      t1 = instantiationRti._rest;
      cache = genericFunctionRti._bindCache;
      if (cache == null)
        cache = genericFunctionRti._bindCache = new Map();
      key = instantiationRti._canonicalRecipe;
      probe = cache.get(key);
      if (probe != null)
        return probe;
      rti = H._substitute(init.typeUniverse, genericFunctionRti._primary, t1, 0);
      cache.set(key, rti);
      return rti;
    },
    _substitute(universe, rti, typeArguments, depth) {
      var baseType, substitutedBaseType, interfaceTypeArguments, substitutedInterfaceTypeArguments, base, substitutedBase, $arguments, substitutedArguments, returnType, substitutedReturnType, functionParameters, substitutedFunctionParameters, bounds, substitutedBounds, index, argument,
        kind = rti._kind;
      switch (kind) {
        case 5:
        case 1:
        case 2:
        case 3:
        case 4:
          return rti;
        case 6:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupStarRti(universe, substitutedBaseType, true);
        case 7:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupQuestionRti(universe, substitutedBaseType, true);
        case 8:
          baseType = rti._primary;
          substitutedBaseType = H._substitute(universe, baseType, typeArguments, depth);
          if (substitutedBaseType === baseType)
            return rti;
          return H._Universe__lookupFutureOrRti(universe, substitutedBaseType, true);
        case 9:
          interfaceTypeArguments = rti._rest;
          substitutedInterfaceTypeArguments = H._substituteArray(universe, interfaceTypeArguments, typeArguments, depth);
          if (substitutedInterfaceTypeArguments === interfaceTypeArguments)
            return rti;
          return H._Universe__lookupInterfaceRti(universe, rti._primary, substitutedInterfaceTypeArguments);
        case 10:
          base = rti._primary;
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          $arguments = rti._rest;
          substitutedArguments = H._substituteArray(universe, $arguments, typeArguments, depth);
          if (substitutedBase === base && substitutedArguments === $arguments)
            return rti;
          return H._Universe__lookupBindingRti(universe, substitutedBase, substitutedArguments);
        case 11:
          returnType = rti._primary;
          substitutedReturnType = H._substitute(universe, returnType, typeArguments, depth);
          functionParameters = rti._rest;
          substitutedFunctionParameters = H._substituteFunctionParameters(universe, functionParameters, typeArguments, depth);
          if (substitutedReturnType === returnType && substitutedFunctionParameters === functionParameters)
            return rti;
          return H._Universe__lookupFunctionRti(universe, substitutedReturnType, substitutedFunctionParameters);
        case 12:
          bounds = rti._rest;
          depth += bounds.length;
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, depth);
          base = rti._primary;
          substitutedBase = H._substitute(universe, base, typeArguments, depth);
          if (substitutedBounds === bounds && substitutedBase === base)
            return rti;
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, true);
        case 13:
          index = rti._primary;
          if (index < depth)
            return rti;
          argument = typeArguments[index - depth];
          if (argument == null)
            return rti;
          return argument;
        default:
          throw H.wrapException(P.AssertionError$("Attempted to substitute unexpected RTI kind " + kind));
      }
    },
    _substituteArray(universe, rtiArray, typeArguments, depth) {
      var changed, i, rti, substitutedRti,
        $length = rtiArray.length,
        result = H._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; ++i) {
        rti = rtiArray[i];
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result[i] = substitutedRti;
      }
      return changed ? result : rtiArray;
    },
    _substituteNamed(universe, namedArray, typeArguments, depth) {
      var changed, i, t1, t2, rti, substitutedRti,
        $length = namedArray.length,
        result = H._Utils_newArrayOrEmpty($length);
      for (changed = false, i = 0; i < $length; i += 3) {
        t1 = namedArray[i];
        t2 = namedArray[i + 1];
        rti = namedArray[i + 2];
        substitutedRti = H._substitute(universe, rti, typeArguments, depth);
        if (substitutedRti !== rti)
          changed = true;
        result.splice(i, 3, t1, t2, substitutedRti);
      }
      return changed ? result : namedArray;
    },
    _substituteFunctionParameters(universe, functionParameters, typeArguments, depth) {
      var result,
        requiredPositional = functionParameters._requiredPositional,
        substitutedRequiredPositional = H._substituteArray(universe, requiredPositional, typeArguments, depth),
        optionalPositional = functionParameters._optionalPositional,
        substitutedOptionalPositional = H._substituteArray(universe, optionalPositional, typeArguments, depth),
        named = functionParameters._named,
        substitutedNamed = H._substituteNamed(universe, named, typeArguments, depth);
      if (substitutedRequiredPositional === requiredPositional && substitutedOptionalPositional === optionalPositional && substitutedNamed === named)
        return functionParameters;
      result = new H._FunctionParameters();
      result._requiredPositional = substitutedRequiredPositional;
      result._optionalPositional = substitutedOptionalPositional;
      result._named = substitutedNamed;
      return result;
    },
    _setArrayType(target, rti) {
      target[init.arrayRti] = rti;
      return target;
    },
    closureFunctionType(closure) {
      var signature = closure.$signature;
      if (signature != null) {
        if (typeof signature == "number")
          return H.getTypeFromTypesTable(signature);
        return closure.$signature();
      }
      return null;
    },
    instanceOrFunctionType(object, testRti) {
      var rti;
      if (H.Rti__isUnionOfFunctionType(testRti))
        if (object instanceof H.Closure) {
          rti = H.closureFunctionType(object);
          if (rti != null)
            return rti;
        }
      return H.instanceType(object);
    },
    instanceType(object) {
      var rti;
      if (object instanceof P.Object) {
        rti = object.$ti;
        return rti != null ? rti : H._instanceTypeFromConstructor(object);
      }
      if (Array.isArray(object))
        return H._arrayInstanceType(object);
      return H._instanceTypeFromConstructor(J.getInterceptor$(object));
    },
    _arrayInstanceType(object) {
      var rti = object[init.arrayRti],
        defaultRti = type$.JSArray_dynamic;
      if (rti == null)
        return defaultRti;
      if (rti.constructor !== defaultRti.constructor)
        return defaultRti;
      return rti;
    },
    _instanceType(object) {
      var rti = object.$ti;
      return rti != null ? rti : H._instanceTypeFromConstructor(object);
    },
    _instanceTypeFromConstructor(instance) {
      var $constructor = instance.constructor,
        probe = $constructor.$ccache;
      if (probe != null)
        return probe;
      return H._instanceTypeFromConstructorMiss(instance, $constructor);
    },
    _instanceTypeFromConstructorMiss(instance, $constructor) {
      var effectiveConstructor = instance instanceof H.Closure ? instance.__proto__.__proto__.constructor : $constructor,
        rti = H._Universe_findErasedType(init.typeUniverse, effectiveConstructor.name);
      $constructor.$ccache = rti;
      return rti;
    },
    getTypeFromTypesTable(index) {
      var rti,
        table = init.types,
        type = table[index];
      if (typeof type == "string") {
        rti = H._Universe_eval(init.typeUniverse, type, false);
        table[index] = rti;
        return rti;
      }
      return type;
    },
    getRuntimeType(object) {
      var rti = object instanceof H.Closure ? H.closureFunctionType(object) : null;
      return H.createRuntimeType(rti == null ? H.instanceType(object) : rti);
    },
    createRuntimeType(rti) {
      var recipe, starErasedRecipe, starErasedRti,
        type = rti._cachedRuntimeType;
      if (type != null)
        return type;
      recipe = rti._canonicalRecipe;
      starErasedRecipe = recipe.replace(/\*/g, "");
      if (starErasedRecipe === recipe)
        return rti._cachedRuntimeType = new H._Type(rti);
      starErasedRti = H._Universe_eval(init.typeUniverse, starErasedRecipe, true);
      type = starErasedRti._cachedRuntimeType;
      return rti._cachedRuntimeType = type == null ? starErasedRti._cachedRuntimeType = new H._Type(starErasedRti) : type;
    },
    typeLiteral(recipe) {
      return H.createRuntimeType(H._Universe_eval(init.typeUniverse, recipe, false));
    },
    _installSpecializedIsTest(object) {
      var unstarred, isFn, $name, testRti = this,
        t1 = type$.Object;
      if (testRti === t1)
        return H._finishIsFn(testRti, object, H._isObject);
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = testRti === t1;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return H._finishIsFn(testRti, object, H._isTop);
      t1 = testRti._kind;
      unstarred = t1 === 6 ? testRti._primary : testRti;
      if (unstarred === type$.int)
        isFn = H._isInt;
      else if (unstarred === type$.double || unstarred === type$.num)
        isFn = H._isNum;
      else if (unstarred === type$.String)
        isFn = H._isString;
      else
        isFn = unstarred === type$.bool ? H._isBool : null;
      if (isFn != null)
        return H._finishIsFn(testRti, object, isFn);
      if (unstarred._kind === 9) {
        $name = unstarred._primary;
        if (unstarred._rest.every(H.isTopType)) {
          testRti._specializedTestResource = "$is" + $name;
          if ($name === "List")
            return H._finishIsFn(testRti, object, H._isListTestViaProperty);
          return H._finishIsFn(testRti, object, H._isTestViaProperty);
        }
      } else if (t1 === 7)
        return H._finishIsFn(testRti, object, H._generalNullableIsTestImplementation);
      return H._finishIsFn(testRti, object, H._generalIsTestImplementation);
    },
    _finishIsFn(testRti, object, isFn) {
      testRti._is = isFn;
      return testRti._is(object);
    },
    _installSpecializedAsCheck(object) {
      var t1, asFn, testRti = this;
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          t1 = testRti === type$.Object;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        asFn = H._asTop;
      else if (testRti === type$.Object)
        asFn = H._asObject;
      else
        asFn = H._generalNullableAsCheckImplementation;
      testRti._as = asFn;
      return testRti._as(object);
    },
    _nullIs(testRti) {
      var t1,
        kind = testRti._kind;
      if (!H.isStrongTopType(testRti))
        if (!(testRti === type$.legacy_Object))
          if (!(testRti === type$.legacy_Never))
            if (kind !== 7)
              t1 = kind === 8 && H._nullIs(testRti._primary) || testRti === type$.Null || testRti === type$.JSNull;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _generalIsTestImplementation(object) {
      var testRti = this;
      if (object == null)
        return H._nullIs(testRti);
      return H._isSubtype(init.typeUniverse, H.instanceOrFunctionType(object, testRti), null, testRti, null);
    },
    _generalNullableIsTestImplementation(object) {
      if (object == null)
        return true;
      return this._primary._is(object);
    },
    _isTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return H._nullIs(testRti);
      tag = testRti._specializedTestResource;
      if (object instanceof P.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _isListTestViaProperty(object) {
      var tag, testRti = this;
      if (object == null)
        return H._nullIs(testRti);
      if (typeof object != "object")
        return false;
      if (Array.isArray(object))
        return true;
      tag = testRti._specializedTestResource;
      if (object instanceof P.Object)
        return !!object[tag];
      return !!J.getInterceptor$(object)[tag];
    },
    _generalAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _generalNullableAsCheckImplementation(object) {
      var testRti = this;
      if (object == null)
        return object;
      else if (testRti._is(object))
        return object;
      H._failedAsCheck(object, testRti);
    },
    _failedAsCheck(object, testRti) {
      throw H.wrapException(H._TypeError$fromMessage(H._Error_compose(object, H.instanceOrFunctionType(object, testRti), H._rtiToString(testRti, null))));
    },
    checkTypeBound(type, bound, variable, methodName) {
      var _null = null;
      if (H._isSubtype(init.typeUniverse, type, _null, bound, _null))
        return type;
      throw H.wrapException(H._TypeError$fromMessage("The type argument '" + H.S(H._rtiToString(type, _null)) + "' is not a subtype of the type variable bound '" + H.S(H._rtiToString(bound, _null)) + "' of type variable '" + H.S(variable) + "' in '" + H.S(methodName) + "'."));
    },
    _Error_compose(object, objectRti, checkedTypeDescription) {
      var objectDescription = P.Error_safeToString(object),
        objectTypeDescription = H._rtiToString(objectRti == null ? H.instanceType(object) : objectRti, null);
      return objectDescription + ": type '" + H.S(objectTypeDescription) + "' is not a subtype of type '" + H.S(checkedTypeDescription) + "'";
    },
    _TypeError$fromMessage(message) {
      return new H._TypeError("TypeError: " + message);
    },
    _TypeError__TypeError$forType(object, type) {
      return new H._TypeError("TypeError: " + H._Error_compose(object, null, type));
    },
    _isObject(object) {
      return object != null;
    },
    _asObject(object) {
      return object;
    },
    _isTop(object) {
      return true;
    },
    _asTop(object) {
      return object;
    },
    _isBool(object) {
      return true === object || false === object;
    },
    _asBool(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolS(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool"));
    },
    _asBoolQ(object) {
      if (true === object)
        return true;
      if (false === object)
        return false;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "bool?"));
    },
    _asDouble(object) {
      if (typeof object == "number")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double"));
    },
    _asDoubleQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "double?"));
    },
    _isInt(object) {
      return typeof object == "number" && Math.floor(object) === object;
    },
    _asInt(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntS(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int"));
    },
    _asIntQ(object) {
      if (typeof object == "number" && Math.floor(object) === object)
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "int?"));
    },
    _isNum(object) {
      return typeof object == "number";
    },
    _asNum(object) {
      if (typeof object == "number")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumS(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num"));
    },
    _asNumQ(object) {
      if (typeof object == "number")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "num?"));
    },
    _isString(object) {
      return typeof object == "string";
    },
    _asString(object) {
      if (typeof object == "string")
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringS(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String"));
    },
    _asStringQ(object) {
      if (typeof object == "string")
        return object;
      if (object == null)
        return object;
      throw H.wrapException(H._TypeError__TypeError$forType(object, "String?"));
    },
    _rtiArrayToString(array, genericContext) {
      var s, sep, i;
      for (s = "", sep = "", i = 0; i < array.length; ++i, sep = ", ")
        s += C.JSString_methods.$add(sep, H._rtiToString(array[i], genericContext));
      return s;
    },
    _functionRtiToString(functionType, genericContext, bounds) {
      var boundsLength, outerContextLength, offset, i, t1, t2, t3, typeParametersText, typeSep, t4, t5, boundRti, kind, parameters, requiredPositional, requiredPositionalLength, optionalPositional, optionalPositionalLength, named, namedLength, returnTypeText, argumentsText, sep, _s2_ = ", ";
      if (bounds != null) {
        boundsLength = bounds.length;
        if (genericContext == null) {
          genericContext = H._setArrayType([], type$.JSArray_String);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsLength; i > 0; --i)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i));
        for (t1 = type$.nullable_Object, t2 = type$.legacy_Object, t3 = type$.Object, typeParametersText = "<", typeSep = "", i = 0; i < boundsLength; ++i, typeSep = _s2_) {
          typeParametersText += typeSep;
          t4 = genericContext.length;
          t5 = t4 - 1 - i;
          if (t5 < 0)
            return H.ioore(genericContext, t5);
          typeParametersText = C.JSString_methods.$add(typeParametersText, genericContext[t5]);
          boundRti = bounds[i];
          kind = boundRti._kind;
          if (!(kind === 2 || kind === 3 || kind === 4 || kind === 5 || boundRti === t1))
            if (!(boundRti === t2))
              t4 = boundRti === t3;
            else
              t4 = true;
          else
            t4 = true;
          if (!t4)
            typeParametersText += C.JSString_methods.$add(" extends ", H._rtiToString(boundRti, genericContext));
        }
        typeParametersText += ">";
      } else {
        typeParametersText = "";
        outerContextLength = null;
      }
      t1 = functionType._primary;
      parameters = functionType._rest;
      requiredPositional = parameters._requiredPositional;
      requiredPositionalLength = requiredPositional.length;
      optionalPositional = parameters._optionalPositional;
      optionalPositionalLength = optionalPositional.length;
      named = parameters._named;
      namedLength = named.length;
      returnTypeText = H._rtiToString(t1, genericContext);
      for (argumentsText = "", sep = "", i = 0; i < requiredPositionalLength; ++i, sep = _s2_)
        argumentsText += C.JSString_methods.$add(sep, H._rtiToString(requiredPositional[i], genericContext));
      if (optionalPositionalLength > 0) {
        argumentsText += sep + "[";
        for (sep = "", i = 0; i < optionalPositionalLength; ++i, sep = _s2_)
          argumentsText += C.JSString_methods.$add(sep, H._rtiToString(optionalPositional[i], genericContext));
        argumentsText += "]";
      }
      if (namedLength > 0) {
        argumentsText += sep + "{";
        for (sep = "", i = 0; i < namedLength; i += 3, sep = _s2_) {
          argumentsText += sep;
          if (named[i + 1])
            argumentsText += "required ";
          argumentsText += J.$add$ansx(H._rtiToString(named[i + 2], genericContext), " ") + named[i];
        }
        argumentsText += "}";
      }
      if (outerContextLength != null) {
        genericContext.toString;
        genericContext.length = outerContextLength;
      }
      return typeParametersText + "(" + argumentsText + ") => " + H.S(returnTypeText);
    },
    _rtiToString(rti, genericContext) {
      var s, questionArgument, argumentKind, $name, $arguments, t1, t2,
        kind = rti._kind;
      if (kind === 5)
        return "erased";
      if (kind === 2)
        return "dynamic";
      if (kind === 3)
        return "void";
      if (kind === 1)
        return "Never";
      if (kind === 4)
        return "any";
      if (kind === 6) {
        s = H._rtiToString(rti._primary, genericContext);
        return s;
      }
      if (kind === 7) {
        questionArgument = rti._primary;
        s = H._rtiToString(questionArgument, genericContext);
        argumentKind = questionArgument._kind;
        return J.$add$ansx(argumentKind === 11 || argumentKind === 12 ? C.JSString_methods.$add("(", s) + ")" : s, "?");
      }
      if (kind === 8)
        return "FutureOr<" + H.S(H._rtiToString(rti._primary, genericContext)) + ">";
      if (kind === 9) {
        $name = H._unminifyOrTag(rti._primary);
        $arguments = rti._rest;
        return $arguments.length > 0 ? $name + ("<" + H._rtiArrayToString($arguments, genericContext) + ">") : $name;
      }
      if (kind === 11)
        return H._functionRtiToString(rti, genericContext, null);
      if (kind === 12)
        return H._functionRtiToString(rti._primary, genericContext, rti._rest);
      if (kind === 13) {
        genericContext.toString;
        t1 = rti._primary;
        t2 = genericContext.length;
        t1 = t2 - 1 - t1;
        if (t1 < 0 || t1 >= t2)
          return H.ioore(genericContext, t1);
        return genericContext[t1];
      }
      return "?";
    },
    _unminifyOrTag(rawClassName) {
      var preserved = init.mangledGlobalNames[rawClassName];
      if (preserved != null)
        return preserved;
      return rawClassName;
    },
    _Universe_findRule(universe, targetType) {
      var rule = universe.tR[targetType];
      for (; typeof rule == "string";)
        rule = universe.tR[rule];
      return rule;
    },
    _Universe_findErasedType(universe, cls) {
      var $length, erased, $arguments, i, $interface,
        metadata = universe.eT,
        probe = metadata[cls];
      if (probe == null)
        return H._Universe_eval(universe, cls, false);
      else if (typeof probe == "number") {
        $length = probe;
        erased = H._Universe__lookupTerminalRti(universe, 5, "#");
        $arguments = H._Utils_newArrayOrEmpty($length);
        for (i = 0; i < $length; ++i)
          $arguments[i] = erased;
        $interface = H._Universe__lookupInterfaceRti(universe, cls, $arguments);
        metadata[cls] = $interface;
        return $interface;
      } else
        return probe;
    },
    _Universe_addRules(universe, rules) {
      return H._Utils_objectAssign(universe.tR, rules);
    },
    _Universe_addErasedTypes(universe, types) {
      return H._Utils_objectAssign(universe.eT, types);
    },
    _Universe_eval(universe, recipe, normalize) {
      var rti,
        cache = universe.eC,
        probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = H._Parser_parse(H._Parser_create(universe, null, recipe, normalize));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_evalInEnvironment(universe, environment, recipe) {
      var probe, rti,
        cache = environment._evalCache;
      if (cache == null)
        cache = environment._evalCache = new Map();
      probe = cache.get(recipe);
      if (probe != null)
        return probe;
      rti = H._Parser_parse(H._Parser_create(universe, environment, recipe, true));
      cache.set(recipe, rti);
      return rti;
    },
    _Universe_bind(universe, environment, argumentsRti) {
      var argumentsRecipe, probe, rti,
        cache = environment._bindCache;
      if (cache == null)
        cache = environment._bindCache = new Map();
      argumentsRecipe = argumentsRti._canonicalRecipe;
      probe = cache.get(argumentsRecipe);
      if (probe != null)
        return probe;
      rti = H._Universe__lookupBindingRti(universe, environment, argumentsRti._kind === 10 ? argumentsRti._rest : [argumentsRti]);
      cache.set(argumentsRecipe, rti);
      return rti;
    },
    _Universe__installTypeTests(universe, rti) {
      rti._as = H._installSpecializedAsCheck;
      rti._is = H._installSpecializedIsTest;
      return rti;
    },
    _Universe__lookupTerminalRti(universe, kind, key) {
      var rti, t1,
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = kind;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupStarRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "*",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createStarRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createStarRti(universe, baseType, key, normalize) {
      var baseKind, t1, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!H.isStrongTopType(baseType))
          t1 = baseType === type$.Null || baseType === type$.JSNull || baseKind === 7 || baseKind === 6;
        else
          t1 = true;
        if (t1)
          return baseType;
      }
      rti = new H.Rti(null, null);
      rti._kind = 6;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupQuestionRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "?",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createQuestionRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createQuestionRti(universe, baseType, key, normalize) {
      var baseKind, t1, starArgument, rti;
      if (normalize) {
        baseKind = baseType._kind;
        if (!H.isStrongTopType(baseType))
          if (!(baseType === type$.Null || baseType === type$.JSNull))
            if (baseKind !== 7)
              t1 = baseKind === 8 && H.isNullable(baseType._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return baseType;
        else if (baseKind === 1 || baseType === type$.legacy_Never)
          return type$.Null;
        else if (baseKind === 6) {
          starArgument = baseType._primary;
          if (starArgument._kind === 8 && H.isNullable(starArgument._primary))
            return starArgument;
          else
            return H.Rti__getQuestionFromStar(universe, baseType);
        }
      }
      rti = new H.Rti(null, null);
      rti._kind = 7;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupFutureOrRti(universe, baseType, normalize) {
      var t1,
        key = baseType._canonicalRecipe + "/",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createFutureOrRti(universe, baseType, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createFutureOrRti(universe, baseType, key, normalize) {
      var t1, t2, rti;
      if (normalize) {
        t1 = baseType._kind;
        if (!H.isStrongTopType(baseType))
          if (!(baseType === type$.legacy_Object))
            t2 = baseType === type$.Object;
          else
            t2 = true;
        else
          t2 = true;
        if (t2 || baseType === type$.Object)
          return baseType;
        else if (t1 === 1)
          return H._Universe__lookupInterfaceRti(universe, "Future", [baseType]);
        else if (baseType === type$.Null || baseType === type$.JSNull)
          return type$.nullable_Future_Null;
      }
      rti = new H.Rti(null, null);
      rti._kind = 8;
      rti._primary = baseType;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Universe__lookupGenericFunctionParameterRti(universe, index) {
      var rti, t1,
        key = "" + index + "^",
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 13;
      rti._primary = index;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__canonicalRecipeJoin($arguments) {
      var s, sep, i,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; ++i, sep = ",")
        s += sep + $arguments[i]._canonicalRecipe;
      return s;
    },
    _Universe__canonicalRecipeJoinNamed($arguments) {
      var s, sep, i, t1, nameSep, s0,
        $length = $arguments.length;
      for (s = "", sep = "", i = 0; i < $length; i += 3, sep = ",") {
        t1 = $arguments[i];
        nameSep = $arguments[i + 1] ? "!" : ":";
        s0 = $arguments[i + 2]._canonicalRecipe;
        s += sep + t1 + nameSep + s0;
      }
      return s;
    },
    _Universe__lookupInterfaceRti(universe, $name, $arguments) {
      var probe, rti, t1,
        s = $name;
      if ($arguments.length > 0)
        s += "<" + H._Universe__canonicalRecipeJoin($arguments) + ">";
      probe = universe.eC.get(s);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 9;
      rti._primary = $name;
      rti._rest = $arguments;
      if ($arguments.length > 0)
        rti._precomputed1 = $arguments[0];
      rti._canonicalRecipe = s;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(s, t1);
      return t1;
    },
    _Universe__lookupBindingRti(universe, base, $arguments) {
      var newBase, newArguments, key, probe, rti, t1;
      if (base._kind === 10) {
        newBase = base._primary;
        newArguments = base._rest.concat($arguments);
      } else {
        newArguments = $arguments;
        newBase = base;
      }
      key = newBase._canonicalRecipe + (";<" + H._Universe__canonicalRecipeJoin(newArguments) + ">");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 10;
      rti._primary = newBase;
      rti._rest = newArguments;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupFunctionRti(universe, returnType, parameters) {
      var sep, t1, key, probe, rti,
        s = returnType._canonicalRecipe,
        requiredPositional = parameters._requiredPositional,
        requiredPositionalLength = requiredPositional.length,
        optionalPositional = parameters._optionalPositional,
        optionalPositionalLength = optionalPositional.length,
        named = parameters._named,
        namedLength = named.length,
        recipe = "(" + H._Universe__canonicalRecipeJoin(requiredPositional);
      if (optionalPositionalLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = H._Universe__canonicalRecipeJoin(optionalPositional);
        recipe += sep + "[" + t1 + "]";
      }
      if (namedLength > 0) {
        sep = requiredPositionalLength > 0 ? "," : "";
        t1 = H._Universe__canonicalRecipeJoinNamed(named);
        recipe += sep + "{" + t1 + "}";
      }
      key = s + (recipe + ")");
      probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      rti = new H.Rti(null, null);
      rti._kind = 11;
      rti._primary = returnType;
      rti._rest = parameters;
      rti._canonicalRecipe = key;
      t1 = H._Universe__installTypeTests(universe, rti);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__lookupGenericFunctionRti(universe, baseFunctionType, bounds, normalize) {
      var t1,
        key = baseFunctionType._canonicalRecipe + ("<" + H._Universe__canonicalRecipeJoin(bounds) + ">"),
        probe = universe.eC.get(key);
      if (probe != null)
        return probe;
      t1 = H._Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize);
      universe.eC.set(key, t1);
      return t1;
    },
    _Universe__createGenericFunctionRti(universe, baseFunctionType, bounds, key, normalize) {
      var $length, typeArguments, count, i, bound, substitutedBase, substitutedBounds, rti;
      if (normalize) {
        $length = bounds.length;
        typeArguments = H._Utils_newArrayOrEmpty($length);
        for (count = 0, i = 0; i < $length; ++i) {
          bound = bounds[i];
          if (bound._kind === 1) {
            typeArguments[i] = bound;
            ++count;
          }
        }
        if (count > 0) {
          substitutedBase = H._substitute(universe, baseFunctionType, typeArguments, 0);
          substitutedBounds = H._substituteArray(universe, bounds, typeArguments, 0);
          return H._Universe__lookupGenericFunctionRti(universe, substitutedBase, substitutedBounds, bounds !== substitutedBounds);
        }
      }
      rti = new H.Rti(null, null);
      rti._kind = 12;
      rti._primary = baseFunctionType;
      rti._rest = bounds;
      rti._canonicalRecipe = key;
      return H._Universe__installTypeTests(universe, rti);
    },
    _Parser_create(universe, environment, recipe, normalize) {
      return {u: universe, e: environment, r: recipe, s: [], p: 0, n: normalize};
    },
    _Parser_parse(parser) {
      var t1, i, ch, universe, array, head, base, u, parameters, optionalPositional, named, item,
        source = parser.r,
        stack = parser.s;
      for (t1 = source.length, i = 0; i < t1;) {
        ch = source.charCodeAt(i);
        if (ch >= 48 && ch <= 57)
          i = H._Parser_handleDigit(i + 1, ch, source, stack);
        else if ((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36)
          i = H._Parser_handleIdentifier(parser, i, source, stack, false);
        else if (ch === 46)
          i = H._Parser_handleIdentifier(parser, i, source, stack, true);
        else {
          ++i;
          switch (ch) {
            case 44:
              break;
            case 58:
              stack.push(false);
              break;
            case 33:
              stack.push(true);
              break;
            case 59:
              stack.push(H._Parser_toType(parser.u, parser.e, stack.pop()));
              break;
            case 94:
              stack.push(H._Universe__lookupGenericFunctionParameterRti(parser.u, stack.pop()));
              break;
            case 35:
              stack.push(H._Universe__lookupTerminalRti(parser.u, 5, "#"));
              break;
            case 64:
              stack.push(H._Universe__lookupTerminalRti(parser.u, 2, "@"));
              break;
            case 126:
              stack.push(H._Universe__lookupTerminalRti(parser.u, 3, "~"));
              break;
            case 60:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 62:
              universe = parser.u;
              array = stack.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = stack.pop();
              head = stack.pop();
              if (typeof head == "string")
                stack.push(H._Universe__lookupInterfaceRti(universe, head, array));
              else {
                base = H._Parser_toType(universe, parser.e, head);
                switch (base._kind) {
                  case 11:
                    stack.push(H._Universe__lookupGenericFunctionRti(universe, base, array, parser.n));
                    break;
                  default:
                    stack.push(H._Universe__lookupBindingRti(universe, base, array));
                    break;
                }
              }
              break;
            case 38:
              H._Parser_handleExtendedOperations(parser, stack);
              break;
            case 42:
              u = parser.u;
              stack.push(H._Universe__lookupStarRti(u, H._Parser_toType(u, parser.e, stack.pop()), parser.n));
              break;
            case 63:
              u = parser.u;
              stack.push(H._Universe__lookupQuestionRti(u, H._Parser_toType(u, parser.e, stack.pop()), parser.n));
              break;
            case 47:
              u = parser.u;
              stack.push(H._Universe__lookupFutureOrRti(u, H._Parser_toType(u, parser.e, stack.pop()), parser.n));
              break;
            case 40:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 41:
              universe = parser.u;
              parameters = new H._FunctionParameters();
              optionalPositional = universe.sEA;
              named = universe.sEA;
              head = stack.pop();
              if (typeof head == "number")
                switch (head) {
                  case -1:
                    optionalPositional = stack.pop();
                    break;
                  case -2:
                    named = stack.pop();
                    break;
                  default:
                    stack.push(head);
                    break;
                }
              else
                stack.push(head);
              array = stack.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = stack.pop();
              parameters._requiredPositional = array;
              parameters._optionalPositional = optionalPositional;
              parameters._named = named;
              stack.push(H._Universe__lookupFunctionRti(universe, H._Parser_toType(universe, parser.e, stack.pop()), parameters));
              break;
            case 91:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 93:
              array = stack.splice(parser.p);
              H._Parser_toTypes(parser.u, parser.e, array);
              parser.p = stack.pop();
              stack.push(array);
              stack.push(-1);
              break;
            case 123:
              stack.push(parser.p);
              parser.p = stack.length;
              break;
            case 125:
              array = stack.splice(parser.p);
              H._Parser_toTypesNamed(parser.u, parser.e, array);
              parser.p = stack.pop();
              stack.push(array);
              stack.push(-2);
              break;
            default:
              throw "Bad character " + ch;
          }
        }
      }
      item = stack.pop();
      return H._Parser_toType(parser.u, parser.e, item);
    },
    _Parser_handleDigit(i, digit, source, stack) {
      var t1, ch,
        value = digit - 48;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (!(ch >= 48 && ch <= 57))
          break;
        value = value * 10 + (ch - 48);
      }
      stack.push(value);
      return i;
    },
    _Parser_handleIdentifier(parser, start, source, stack, hasPeriod) {
      var t1, ch, t2, string, environment, recipe,
        i = start + 1;
      for (t1 = source.length; i < t1; ++i) {
        ch = source.charCodeAt(i);
        if (ch === 46) {
          if (hasPeriod)
            break;
          hasPeriod = true;
        } else {
          if (!((((ch | 32) >>> 0) - 97 & 65535) < 26 || ch === 95 || ch === 36))
            t2 = ch >= 48 && ch <= 57;
          else
            t2 = true;
          if (!t2)
            break;
        }
      }
      string = source.substring(start, i);
      if (hasPeriod) {
        t1 = parser.u;
        environment = parser.e;
        if (environment._kind === 10)
          environment = environment._primary;
        recipe = H._Universe_findRule(t1, environment._primary)[string];
        if (recipe == null)
          H.throwExpression('No "' + string + '" in "' + H.Rti__getCanonicalRecipe(environment) + '"');
        stack.push(H._Universe_evalInEnvironment(t1, environment, recipe));
      } else
        stack.push(string);
      return i;
    },
    _Parser_handleExtendedOperations(parser, stack) {
      var $top = stack.pop();
      if (0 === $top) {
        stack.push(H._Universe__lookupTerminalRti(parser.u, 1, "0&"));
        return;
      }
      if (1 === $top) {
        stack.push(H._Universe__lookupTerminalRti(parser.u, 4, "1&"));
        return;
      }
      throw H.wrapException(P.AssertionError$("Unexpected extended operation " + H.S($top)));
    },
    _Parser_toType(universe, environment, item) {
      if (typeof item == "string")
        return H._Universe__lookupInterfaceRti(universe, item, universe.sEA);
      else if (typeof item == "number")
        return H._Parser_indexToType(universe, environment, item);
      else
        return item;
    },
    _Parser_toTypes(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 0; i < $length; ++i)
        items[i] = H._Parser_toType(universe, environment, items[i]);
    },
    _Parser_toTypesNamed(universe, environment, items) {
      var i,
        $length = items.length;
      for (i = 2; i < $length; i += 3)
        items[i] = H._Parser_toType(universe, environment, items[i]);
    },
    _Parser_indexToType(universe, environment, index) {
      var typeArguments, len,
        kind = environment._kind;
      if (kind === 10) {
        if (index === 0)
          return environment._primary;
        typeArguments = environment._rest;
        len = typeArguments.length;
        if (index <= len)
          return typeArguments[index - 1];
        index -= len;
        environment = environment._primary;
        kind = environment._kind;
      } else if (index === 0)
        return environment;
      if (kind !== 9)
        throw H.wrapException(P.AssertionError$("Indexed base must be an interface type"));
      typeArguments = environment._rest;
      if (index <= typeArguments.length)
        return typeArguments[index - 1];
      throw H.wrapException(P.AssertionError$("Bad index " + index + " for " + environment.toString$0(0)));
    },
    _isSubtype(universe, s, sEnv, t, tEnv) {
      var t1, sKind, leftTypeVariable, tKind, sBounds, tBounds, sLength, i, sBound, tBound;
      if (s === t)
        return true;
      if (!H.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = t === type$.Object;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return true;
      sKind = s._kind;
      if (sKind === 4)
        return true;
      if (H.isStrongTopType(s))
        return false;
      if (s._kind !== 1)
        t1 = s === type$.Null || s === type$.JSNull;
      else
        t1 = true;
      if (t1)
        return true;
      leftTypeVariable = sKind === 13;
      if (leftTypeVariable)
        if (H._isSubtype(universe, sEnv[s._primary], sEnv, t, tEnv))
          return true;
      tKind = t._kind;
      if (sKind === 6)
        return H._isSubtype(universe, s._primary, sEnv, t, tEnv);
      if (tKind === 6) {
        t1 = t._primary;
        return H._isSubtype(universe, s, sEnv, t1, tEnv);
      }
      if (sKind === 8) {
        if (!H._isSubtype(universe, s._primary, sEnv, t, tEnv))
          return false;
        return H._isSubtype(universe, H.Rti__getFutureFromFutureOr(universe, s), sEnv, t, tEnv);
      }
      if (sKind === 7) {
        t1 = H._isSubtype(universe, s._primary, sEnv, t, tEnv);
        return t1;
      }
      if (tKind === 8) {
        if (H._isSubtype(universe, s, sEnv, t._primary, tEnv))
          return true;
        return H._isSubtype(universe, s, sEnv, H.Rti__getFutureFromFutureOr(universe, t), tEnv);
      }
      if (tKind === 7) {
        t1 = H._isSubtype(universe, s, sEnv, t._primary, tEnv);
        return t1;
      }
      if (leftTypeVariable)
        return false;
      t1 = sKind !== 11;
      if ((!t1 || sKind === 12) && t === type$.Function)
        return true;
      if (tKind === 12) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (sKind !== 12)
          return false;
        sBounds = s._rest;
        tBounds = t._rest;
        sLength = sBounds.length;
        if (sLength !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
        for (i = 0; i < sLength; ++i) {
          sBound = sBounds[i];
          tBound = tBounds[i];
          if (!H._isSubtype(universe, sBound, sEnv, tBound, tEnv) || !H._isSubtype(universe, tBound, tEnv, sBound, sEnv))
            return false;
        }
        return H._isFunctionSubtype(universe, s._primary, sEnv, t._primary, tEnv);
      }
      if (tKind === 11) {
        if (s === type$.JavaScriptFunction)
          return true;
        if (t1)
          return false;
        return H._isFunctionSubtype(universe, s, sEnv, t, tEnv);
      }
      if (sKind === 9) {
        if (tKind !== 9)
          return false;
        return H._isInterfaceSubtype(universe, s, sEnv, t, tEnv);
      }
      return false;
    },
    _isFunctionSubtype(universe, s, sEnv, t, tEnv) {
      var sParameters, tParameters, sRequiredPositional, tRequiredPositional, sRequiredPositionalLength, tRequiredPositionalLength, requiredPositionalDelta, sOptionalPositional, tOptionalPositional, sOptionalPositionalLength, tOptionalPositionalLength, i, t1, sNamed, tNamed, sNamedLength, tNamedLength, sIndex, tIndex, tName, sName;
      if (!H._isSubtype(universe, s._primary, sEnv, t._primary, tEnv))
        return false;
      sParameters = s._rest;
      tParameters = t._rest;
      sRequiredPositional = sParameters._requiredPositional;
      tRequiredPositional = tParameters._requiredPositional;
      sRequiredPositionalLength = sRequiredPositional.length;
      tRequiredPositionalLength = tRequiredPositional.length;
      if (sRequiredPositionalLength > tRequiredPositionalLength)
        return false;
      requiredPositionalDelta = tRequiredPositionalLength - sRequiredPositionalLength;
      sOptionalPositional = sParameters._optionalPositional;
      tOptionalPositional = tParameters._optionalPositional;
      sOptionalPositionalLength = sOptionalPositional.length;
      tOptionalPositionalLength = tOptionalPositional.length;
      if (sRequiredPositionalLength + sOptionalPositionalLength < tRequiredPositionalLength + tOptionalPositionalLength)
        return false;
      for (i = 0; i < sRequiredPositionalLength; ++i) {
        t1 = sRequiredPositional[i];
        if (!H._isSubtype(universe, tRequiredPositional[i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < requiredPositionalDelta; ++i) {
        t1 = sOptionalPositional[i];
        if (!H._isSubtype(universe, tRequiredPositional[sRequiredPositionalLength + i], tEnv, t1, sEnv))
          return false;
      }
      for (i = 0; i < tOptionalPositionalLength; ++i) {
        t1 = sOptionalPositional[requiredPositionalDelta + i];
        if (!H._isSubtype(universe, tOptionalPositional[i], tEnv, t1, sEnv))
          return false;
      }
      sNamed = sParameters._named;
      tNamed = tParameters._named;
      sNamedLength = sNamed.length;
      tNamedLength = tNamed.length;
      for (sIndex = 0, tIndex = 0; tIndex < tNamedLength; tIndex += 3) {
        tName = tNamed[tIndex];
        for (; true;) {
          if (sIndex >= sNamedLength)
            return false;
          sName = sNamed[sIndex];
          sIndex += 3;
          if (tName < sName)
            return false;
          if (sName < tName)
            continue;
          t1 = sNamed[sIndex - 1];
          if (!H._isSubtype(universe, tNamed[tIndex + 2], tEnv, t1, sEnv))
            return false;
          break;
        }
      }
      return true;
    },
    _isInterfaceSubtype(universe, s, sEnv, t, tEnv) {
      var rule, recipes, $length, supertypeArgs, i, t1, t2,
        sName = s._primary,
        tName = t._primary;
      for (; sName !== tName;) {
        rule = universe.tR[sName];
        if (rule == null)
          return false;
        if (typeof rule == "string") {
          sName = rule;
          continue;
        }
        recipes = rule[tName];
        if (recipes == null)
          return false;
        $length = recipes.length;
        supertypeArgs = $length > 0 ? new Array($length) : init.typeUniverse.sEA;
        for (i = 0; i < $length; ++i)
          supertypeArgs[i] = H._Universe_evalInEnvironment(universe, s, recipes[i]);
        return H._areArgumentsSubtypes(universe, supertypeArgs, null, sEnv, t._rest, tEnv);
      }
      t1 = s._rest;
      t2 = t._rest;
      return H._areArgumentsSubtypes(universe, t1, null, sEnv, t2, tEnv);
    },
    _areArgumentsSubtypes(universe, sArgs, sVariances, sEnv, tArgs, tEnv) {
      var i, t1, t2,
        $length = sArgs.length;
      for (i = 0; i < $length; ++i) {
        t1 = sArgs[i];
        t2 = tArgs[i];
        if (!H._isSubtype(universe, t1, sEnv, t2, tEnv))
          return false;
      }
      return true;
    },
    isNullable(t) {
      var t1,
        kind = t._kind;
      if (!(t === type$.Null || t === type$.JSNull))
        if (!H.isStrongTopType(t))
          if (kind !== 7)
            if (!(kind === 6 && H.isNullable(t._primary)))
              t1 = kind === 8 && H.isNullable(t._primary);
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isTopType(t) {
      var t1;
      if (!H.isStrongTopType(t))
        if (!(t === type$.legacy_Object))
          t1 = t === type$.Object;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    isStrongTopType(t) {
      var kind = t._kind;
      return kind === 2 || kind === 3 || kind === 4 || kind === 5 || t === type$.nullable_Object;
    },
    _Utils_objectAssign(o, other) {
      var i, key,
        keys = Object.keys(other),
        $length = keys.length;
      for (i = 0; i < $length; ++i) {
        key = keys[i];
        o[key] = other[key];
      }
    },
    _Utils_newArrayOrEmpty($length) {
      return $length > 0 ? new Array($length) : init.typeUniverse.sEA;
    },
    Rti: function Rti(t0, t1) {
      var _ = this;
      _._as = t0;
      _._is = t1;
      _._cachedRuntimeType = _._specializedTestResource = _._precomputed1 = null;
      _._kind = 0;
      _._canonicalRecipe = _._bindCache = _._evalCache = _._rest = _._primary = null;
    },
    _FunctionParameters: function _FunctionParameters() {
      this._named = this._optionalPositional = this._requiredPositional = null;
    },
    _Type: function _Type(t0) {
      this._rti = t0;
    },
    _Error: function _Error() {
    },
    _TypeError: function _TypeError(t0) {
      this.__rti$_message = t0;
    },
    printString(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    makeDispatchRecord(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor(object) {
      var proto, objectProto, $constructor, interceptor, t1,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      if ($constructor == null)
        interceptor = null;
      else {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        interceptor = $constructor[t1];
      }
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        t1 = $._JS_INTEROP_INTERCEPTOR_TAG;
        if (t1 == null)
          t1 = $._JS_INTEROP_INTERCEPTOR_TAG = init.getIsolateTag("_$dart_js");
        Object.defineProperty($constructor, t1, {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed($length, $E) {
      if (!H._isInt($length))
        throw H.wrapException(P.ArgumentError$value($length, "length", "is not an integer"));
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$growable($length, $E) {
      if (!H._isInt($length) || $length < 0)
        throw H.wrapException(P.ArgumentError$("Length must be a non-negative integer: " + H.S($length), null));
      return H._setArrayType(new Array($length), $E._eval$1("JSArray<0>"));
    },
    JSArray_JSArray$markFixed(allocation, $E) {
      return J.JSArray_markFixedList(H._setArrayType(allocation, $E._eval$1("JSArray<0>")), $E);
    },
    JSArray_markFixedList(list, $T) {
      list.fixed$length = Array;
      return list;
    },
    JSArray_markUnmodifiableList(list) {
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    JSString__isWhitespace(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace(string, index) {
      var index0, codeUnit;
      for (; index > 0; index = index0) {
        index0 = index - 1;
        codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumNotInt.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$n(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$text$x(receiver, value) {
      return J.getInterceptor$x(receiver).set$text(receiver, value);
    },
    get$data$x(receiver) {
      return J.getInterceptor$x(receiver).get$data(receiver);
    },
    get$error$z(receiver) {
      return J.getInterceptor$z(receiver).get$error(receiver);
    },
    get$first$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$hashCode$(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$kind$z(receiver) {
      return J.getInterceptor$z(receiver).get$kind(receiver);
    },
    get$length$asx(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$name$x(receiver) {
      return J.getInterceptor$x(receiver).get$name(receiver);
    },
    get$onClick$x(receiver) {
      return J.getInterceptor$x(receiver).get$onClick(receiver);
    },
    get$runtimeType$(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    get$start$x(receiver) {
      return J.getInterceptor$x(receiver).get$start(receiver);
    },
    get$text$x(receiver) {
      return J.getInterceptor$x(receiver).get$text(receiver);
    },
    $add$ansx(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $eq$(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    _codeUnitAt$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver)._codeUnitAt$1(receiver, a0);
    },
    _removeEventListener$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver)._removeEventListener$3(receiver, a0, a1, a2);
    },
    accept$1$2$z(receiver, a0, a1, $T1) {
      return J.getInterceptor$z(receiver).accept$1$2(receiver, a0, a1, $T1);
    },
    add$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addEventListener$3$x(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
    },
    allMatches$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).allMatches$1(receiver, a0);
    },
    any$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).any$1(receiver, a0);
    },
    codeUnitAt$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
    },
    compareTo$1$ns(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    elementAt$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    endsWith$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
    },
    fold$1$2$ax(receiver, a0, a1, $T1) {
      return J.getInterceptor$ax(receiver).fold$1$2(receiver, a0, a1, $T1);
    },
    forEach$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    indexOf$2$asx(receiver, a0, a1) {
      return J.getInterceptor$asx(receiver).indexOf$2(receiver, a0, a1);
    },
    map$1$1$ax(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    matchAsPrefix$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    skip$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sort$1$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
    },
    startsWith$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
    },
    substring$1$s(receiver, a0) {
      return J.getInterceptor$s(receiver).substring$1(receiver, a0);
    },
    substring$2$s(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
    },
    toList$0$ax(receiver) {
      return J.getInterceptor$ax(receiver).toList$0(receiver);
    },
    toList$1$growable$ax(receiver, a0) {
      return J.getInterceptor$ax(receiver).toList$1$growable(receiver, a0);
    },
    toRadixString$1$n(receiver, a0) {
      return J.getInterceptor$n(receiver).toRadixString$1(receiver, a0);
    },
    toString$0$(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    trim$0$s(receiver) {
      return J.getInterceptor$s(receiver).trim$0(receiver);
    },
    trimRight$0$s(receiver) {
      return J.getInterceptor$s(receiver).trimRight$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSNumNotInt: function JSNumNotInt() {
    },
    JSString: function JSString() {
    }
  },
  K = {
    scanString(source, configuration, includeComments, languageVersionChanged) {
      var t2, t3, scanner, tokens, bytes,
        t1 = source.length;
      t1 = t1 === 0 || C.JSString_methods.codeUnitAt$1(source, t1 - 1) !== 0 ? source + "\x00" : source;
      t2 = L.Token_Token$eof(-1, null);
      t3 = new S.LineStarts(S.LineStarts__createInitialArray(null));
      t3.add$1(0, 0);
      scanner = new T.StringScanner(t1, -1, includeComments, languageVersionChanged, t2, t3, C.C_Link, false);
      scanner.AbstractScanner$4$numberOfBytesHint(configuration, includeComments, languageVersionChanged, null);
      tokens = scanner.tokenize$0();
      if (scanner.hasErrors) {
        type$.Utf8Codec._eval$1("Codec.S")._as(source);
        bytes = C.C_Utf8Codec.get$encoder().convert$1(source);
        tokens = M.scannerRecovery(bytes, tokens, t3);
      }
      return new K.ScannerResult(tokens, t3, scanner.hasErrors);
    },
    _tokenizeAndRecover(scanner, source) {
      var bytes,
        tokens = scanner.tokenize$0();
      if (scanner.hasErrors) {
        source.toString;
        type$.Utf8Codec._eval$1("Codec.S")._as(source);
        bytes = C.C_Utf8Codec.get$encoder().convert$1(source);
        tokens = M.scannerRecovery(bytes, tokens, scanner.lineStarts);
      }
      return new K.ScannerResult(tokens, scanner.lineStarts, scanner.hasErrors);
    },
    ScannerResult: function ScannerResult(t0, t1, t2) {
      this.tokens = t0;
      this.lineStarts = t1;
      this.hasErrors = t2;
    },
    ExperimentStatus_ExperimentStatus$fromStrings2(flags, sdkLanguageVersion) {
      var explicitFlags = T.decodeExplicitFlags(flags),
        t1 = explicitFlags.enabled,
        t2 = explicitFlags.disabled;
      return new K.ExperimentStatus(sdkLanguageVersion, t1, t2, T.restrictEnableFlagsToVersion(t2, t1, sdkLanguageVersion, sdkLanguageVersion));
    },
    ExperimentStatus__equalListOfBool(first, second) {
      var i, t3,
        t1 = first.length,
        t2 = second.length;
      if (t1 !== t2)
        return false;
      for (i = 0; i < t1; ++i) {
        t3 = first[i];
        if (i >= t2)
          return H.ioore(second, i);
        if (t3 !== second[i])
          return false;
      }
      return true;
    },
    ExperimentStatus: function ExperimentStatus(t0, t1, t2, t3) {
      var _ = this;
      _._sdkLanguageVersion = t0;
      _._explicitEnabledFlags = t1;
      _._explicitDisabledFlags = t2;
      _._flags = t3;
    },
    _CurrentState: function _CurrentState() {
    },
    _ExperimentStatus_Object__CurrentState: function _ExperimentStatus_Object__CurrentState() {
    },
    StringSource$(_contents, fullName) {
      var t1 = fullName == null ? "/test.dart" : fullName;
      return new K.StringSource(_contents, t1, K.StringSource__computeUri(null, fullName), Date.now());
    },
    StringSource__computeUri(uri, fullName) {
      if ($.$get$Style_platform() == $.$get$Style_windows())
        return $.$get$context().toUri$1("C:\\test.dart");
      else
        return $.$get$context().toUri$1("/test.dart");
    },
    StringSource: function StringSource(t0, t1, t2, t3) {
      var _ = this;
      _._string_source$_contents = t0;
      _.fullName = t1;
      _.uri = t2;
      _.modificationStamp = t3;
    },
    Rule$(cost) {
      var t1 = cost == null ? 1 : cost,
        t2 = $.FastHash__nextId + 1 & 268435455;
      $.FastHash__nextId = t2;
      return new K.Rule(t1, P.LinkedHashSet_LinkedHashSet$_empty(type$.Rule), t2);
    },
    Rule$hard() {
      var t1 = $.FastHash__nextId + 1 & 268435455;
      $.FastHash__nextId = t1;
      t1 = new K.Rule(0, P.LinkedHashSet_LinkedHashSet$_empty(type$.Rule), t1);
      t1._isHardened = true;
      return t1;
    },
    Rule: function Rule(t0, t1, t2) {
      var _ = this;
      _._rule$_cost = t0;
      _.index = null;
      _._isHardened = false;
      _._implied = t1;
      _._allConstrainedRules = _._constrainedRules = null;
      _.id = t2;
    },
    Rule_forgetUnusedRules_closure: function Rule_forgetUnusedRules_closure() {
    }
  },
  L = {Listener: function Listener() {
    },
    BeginToken$(type, offset, precedingComment) {
      var t1 = new L.BeginToken(type, offset, precedingComment);
      t1._setCommentParent$1(precedingComment);
      return t1;
    },
    Keyword__createKeywordMap() {
      var _i, keyword,
        result = P.LinkedHashMap_LinkedHashMap(null, null, type$.String, type$.Keyword);
      for (_i = 0; _i < 69; ++_i) {
        keyword = C.List_Gvb[_i];
        result.$indexSet(0, keyword.lexeme, keyword);
      }
      return result;
    },
    KeywordToken$(keyword, offset, precedingComment) {
      var t1 = new L.KeywordToken(keyword, keyword, offset, precedingComment);
      t1._setCommentParent$1(precedingComment);
      return t1;
    },
    SimpleToken$(type, offset, _precedingComment) {
      var t1 = new L.SimpleToken(type, offset, _precedingComment);
      t1._setCommentParent$1(_precedingComment);
      return t1;
    },
    StringToken$(type, value, offset) {
      var t1;
      $.$get$StringUtilities_INTERNER().toString;
      t1 = new L.StringToken0(value, type, offset, null);
      t1._setCommentParent$1(null);
      return t1;
    },
    SyntheticBeginToken$(type, offset, precedingComment) {
      var t1 = new L.SyntheticBeginToken(type, offset, precedingComment);
      t1._setCommentParent$1(precedingComment);
      return t1;
    },
    SyntheticKeywordToken$(keyword, offset) {
      var t1 = new L.SyntheticKeywordToken(keyword, keyword, offset, null);
      t1._setCommentParent$1(null);
      return t1;
    },
    SyntheticStringToken$(type, value, offset, _length) {
      var t1;
      $.$get$StringUtilities_INTERNER().toString;
      t1 = new L.SyntheticStringToken(_length, value, type, offset, null);
      t1._setCommentParent$1(null);
      return t1;
    },
    SyntheticToken$(type, offset) {
      var t1 = new L.SyntheticToken(type, offset, null);
      t1._setCommentParent$1(null);
      return t1;
    },
    ReplacementToken$(type, replacedToken) {
      var t2,
        t1 = new L.ReplacementToken(replacedToken, type, replacedToken.offset, null);
      t1._setCommentParent$1(null);
      t2 = replacedToken._precedingComment;
      t1._precedingComment = t2;
      t1._setCommentParent$1(t2);
      return t1;
    },
    Token_Token$eof(offset, precedingComments) {
      var eof = L.SimpleToken$(C.TokenType_Emx, offset, precedingComments);
      eof.previous = eof;
      return eof.next = eof;
    },
    Token_lexicallyFirst(t1, t2, t3, t4) {
      var t5, result;
      if (t1 != null)
        t5 = t2 != null && t2.offset < t1.offset;
      else
        t5 = true;
      result = t5 ? t2 : t1;
      if (result != null)
        t1 = t3 != null && t3.offset < result.offset;
      else
        t1 = true;
      if (t1)
        result = t3;
      if (result != null)
        t1 = t4 != null && t4.offset < result.offset;
      else
        t1 = true;
      return t1 ? t4 : result;
    },
    BeginToken: function BeginToken(t0, t1, t2) {
      var _ = this;
      _.endToken = null;
      _.type = t0;
      _.offset = t1;
      _.next = _.previous = null;
      _._precedingComment = t2;
    },
    KeywordStyle: function KeywordStyle(t0) {
      this._token$_name = t0;
    },
    Keyword: function Keyword(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.keywordStyle = t0;
      _.kind = t1;
      _.isModifier = t2;
      _.isOperator = t3;
      _.isTopLevelKeyword = t4;
      _.isUserDefinableOperator = t5;
      _.lexeme = t6;
      _.name = t7;
      _.precedence = t8;
      _.stringValue = t9;
    },
    KeywordToken: function KeywordToken(t0, t1, t2, t3) {
      var _ = this;
      _.keyword = t0;
      _.type = t1;
      _.offset = t2;
      _.next = _.previous = null;
      _._precedingComment = t3;
    },
    SimpleToken: function SimpleToken(t0, t1, t2) {
      var _ = this;
      _.type = t0;
      _.offset = t1;
      _.next = _.previous = null;
      _._precedingComment = t2;
    },
    StringToken0: function StringToken0(t0, t1, t2, t3) {
      var _ = this;
      _._token$_value = t0;
      _.type = t1;
      _.offset = t2;
      _.next = _.previous = null;
      _._precedingComment = t3;
    },
    SyntheticBeginToken: function SyntheticBeginToken(t0, t1, t2) {
      var _ = this;
      _.endToken = null;
      _.type = t0;
      _.offset = t1;
      _.next = _.previous = null;
      _._precedingComment = t2;
    },
    SyntheticKeywordToken: function SyntheticKeywordToken(t0, t1, t2, t3) {
      var _ = this;
      _.keyword = t0;
      _.type = t1;
      _.offset = t2;
      _.next = _.previous = null;
      _._precedingComment = t3;
    },
    SyntheticStringToken: function SyntheticStringToken(t0, t1, t2, t3, t4) {
      var _ = this;
      _._token$_length = t0;
      _.beforeSynthetic = null;
      _._token$_value = t1;
      _.type = t2;
      _.offset = t3;
      _.next = _.previous = null;
      _._precedingComment = t4;
    },
    SyntheticToken: function SyntheticToken(t0, t1, t2) {
      var _ = this;
      _.beforeSynthetic = null;
      _.type = t0;
      _.offset = t1;
      _.next = _.previous = null;
      _._precedingComment = t2;
    },
    ReplacementToken: function ReplacementToken(t0, t1, t2, t3) {
      var _ = this;
      _.replacedToken = t0;
      _.beforeSynthetic = _.ReplacementToken_beforeSynthetic = null;
      _.type = t1;
      _.offset = t2;
      _.next = _.previous = null;
      _._precedingComment = t3;
    },
    TokenType: function TokenType(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.kind = t0;
      _.isModifier = t1;
      _.isOperator = t2;
      _.isTopLevelKeyword = t3;
      _.isUserDefinableOperator = t4;
      _.lexeme = t5;
      _.name = t6;
      _.precedence = t7;
      _.stringValue = t8;
    },
    DiagnosticMessageImpl: function DiagnosticMessageImpl(t0, t1, t2, t3) {
      var _ = this;
      _.length = t0;
      _._diagnostic$_message = t1;
      _.offset = t2;
      _.url = t3;
    },
    Whitespace: function Whitespace(t0) {
      this.name = t0;
    },
    WindowsStyle: function WindowsStyle(t0, t1, t2, t3) {
      var _ = this;
      _.separatorPattern = t0;
      _.needsSeparatorPattern = t1;
      _.rootPattern = t2;
      _.relativeRootPattern = t3;
    },
    WindowsStyle_absolutePathToUri_closure: function WindowsStyle_absolutePathToUri_closure() {
    }
  },
  M = {FormalParameterKind: function FormalParameterKind(t0) {
      this._formal_parameter_kind$_name = t0;
    },
    isGeneralizedFunctionType(token) {
      var t1;
      if ("Function" === token.type.stringValue) {
        t1 = token.next.type.stringValue;
        t1 = "<" === t1 || "(" === t1;
      } else
        t1 = false;
      return t1;
    },
    isValidTypeReference(token) {
      var value,
        t1 = token.type,
        kind = t1.kind;
      if (97 === kind)
        return true;
      if (107 === kind) {
        value = t1.lexeme;
        if (!t1.get$isPseudo())
          t1 = t1.get$isBuiltIn() && "." === token.next.type.stringValue || value === "dynamic" || value === "void";
        else
          t1 = true;
        return t1;
      }
      return false;
    },
    computeType(token, required, inDeclaration, acceptKeywordForSimpleType) {
      var t2, typeParamOrArg, t3, value, result, next,
        t1 = token.next;
      t1.toString;
      if (!M.isValidTypeReference(t1)) {
        t2 = t1.type;
        if (t2.get$isBuiltIn()) {
          typeParamOrArg = M.computeTypeParamOrArg(t1, inDeclaration, false);
          if (typeParamOrArg !== C.C_NoTypeParamOrArg) {
            if (!required) {
              t1 = typeParamOrArg.skip$1(0, t1).next;
              t1.toString;
              t1 = V.looksLikeName(t1);
            } else
              t1 = true;
            if (t1) {
              t1 = V.ComplexTypeInfo$(token, typeParamOrArg).computeBuiltinOrVarAsType$1(required);
              t1.recovered = true;
              return t1;
            }
          } else {
            if (!required) {
              t3 = t1.next;
              t3.toString;
              t3 = M.isGeneralizedFunctionType(t3);
            } else
              t3 = true;
            if (t3) {
              value = t2.stringValue;
              if ("get" !== value)
                if ("set" !== value)
                  if ("factory" !== value)
                    if ("operator" !== value)
                      t1 = !("typedef" === value && t1.next.get$isIdentifier());
                    else
                      t1 = false;
                  else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
              if (t1) {
                t1 = V.ComplexTypeInfo$(token, typeParamOrArg).computeBuiltinOrVarAsType$1(required);
                t1.recovered = true;
                return t1;
              }
            }
          }
        } else if (required) {
          t2 = t2.stringValue;
          if ("." === t2) {
            result = V.ComplexTypeInfo$(token, M.computeTypeParamOrArg(t1, inDeclaration, false)).computePrefixedType$1(true);
            if (result instanceof V.ComplexTypeInfo)
              result.recovered = true;
            return result;
          } else {
            if ("var" === t2) {
              t2 = t1.next;
              t2.toString;
              t2 = N.isOneOf(t2, C.List_Tvy);
            } else
              t2 = false;
            if (t2) {
              t1 = V.ComplexTypeInfo$(token, M.computeTypeParamOrArg(t1, inDeclaration, false)).computeBuiltinOrVarAsType$1(true);
              t1.recovered = true;
              return t1;
            }
          }
        }
        return C.C_NoType;
      }
      if ("void" === t1.type.stringValue) {
        t1 = t1.next;
        t1.toString;
        if (M.isGeneralizedFunctionType(t1))
          return V.ComplexTypeInfo$(token, C.C_NoTypeParamOrArg).computeVoidGFT$1(required);
        return C.C_VoidType;
      }
      if (M.isGeneralizedFunctionType(t1))
        return V.ComplexTypeInfo$(token, C.C_NoTypeParamOrArg).computeNoTypeGFT$2(token, required);
      typeParamOrArg = M.computeTypeParamOrArg(t1, inDeclaration, false);
      if (typeParamOrArg !== C.C_NoTypeParamOrArg) {
        if (typeParamOrArg.get$isSimpleTypeArgument()) {
          next = typeParamOrArg.skip$1(0, t1).next;
          if ("?" === next.type.stringValue) {
            t1 = next.next;
            t1.toString;
            if (!M.isGeneralizedFunctionType(t1)) {
              if ((required || V.looksLikeName(t1)) && typeParamOrArg === C.C_SimpleTypeArgument1)
                return C.SimpleNullableTypeWith1Argument_SimpleTypeArgument1;
              return C.C_NoType;
            }
          } else if (!M.isGeneralizedFunctionType(next)) {
            if (required || V.looksLikeName(next))
              return typeParamOrArg.get$typeInfo();
            return C.C_NoType;
          }
        }
        return V.ComplexTypeInfo$(token, typeParamOrArg).computeSimpleWithTypeArguments$1(required);
      }
      next = t1.next;
      t1 = next.type.stringValue;
      if ("." === t1) {
        t1 = next.next;
        t1.toString;
        if (M.isValidTypeReference(t1)) {
          typeParamOrArg = M.computeTypeParamOrArg(t1, inDeclaration, false);
          t1 = t1.next;
          t1.toString;
          if (typeParamOrArg === C.C_NoTypeParamOrArg)
            if ("?" === t1.type.stringValue) {
              t1 = t1.next;
              t1.toString;
              if (!M.isGeneralizedFunctionType(t1))
                if (!(required || V.looksLikeName(t1)))
                  return C.C_NoType;
            } else if (!M.isGeneralizedFunctionType(t1))
              if (required || V.looksLikeName(t1))
                return C.C_PrefixedType;
              else
                return C.C_NoType;
          return V.ComplexTypeInfo$(token, typeParamOrArg).computePrefixedType$1(required);
        }
        if (required) {
          t1 = token.next.next;
          t1.toString;
          return V.ComplexTypeInfo$(token, M.computeTypeParamOrArg(t1, inDeclaration, false)).computePrefixedType$1(true);
        }
        return C.C_NoType;
      }
      if (M.isGeneralizedFunctionType(next))
        return V.ComplexTypeInfo$(token, C.C_NoTypeParamOrArg).computeIdentifierGFT$1(required);
      if ("?" === t1) {
        t1 = next.next;
        t1.toString;
        if (M.isGeneralizedFunctionType(t1))
          return V.ComplexTypeInfo$(token, C.C_NoTypeParamOrArg).computeIdentifierQuestionGFT$1(required);
        else if (required || V.looksLikeName(t1))
          return C.C_SimpleNullableType;
      } else {
        if (!required)
          if (!V.looksLikeName(next))
            if (acceptKeywordForSimpleType)
              if (next.get$isKeywordOrIdentifier()) {
                t1 = next.next;
                t1.toString;
                t1 = N.isOneOf(t1, C.List_egL);
              } else
                t1 = false;
            else
              t1 = false;
          else
            t1 = true;
        else
          t1 = true;
        if (t1)
          return C.C_SimpleType;
      }
      return C.C_NoType;
    },
    computeTypeParamOrArg(token, inDeclaration, allowsVariance) {
      var next, t1,
        beginGroup = token.next;
      if ("<" !== beginGroup.type.stringValue)
        return C.C_NoTypeParamOrArg;
      next = beginGroup.next;
      t1 = next.type;
      if (t1.kind === 97 || t1.get$isPseudo()) {
        t1 = next.next.type.stringValue;
        if (">" === t1)
          return C.C_SimpleTypeArgument1;
        else if (">>" === t1)
          return C.C_SimpleTypeArgument1GtGt;
        else if (">=" === t1)
          return C.C_SimpleTypeArgument1GtEq;
      } else if ("(" === t1.stringValue)
        return C.C_NoTypeParamOrArg;
      t1 = token.next;
      t1.toString;
      return new V.ComplexTypeParamOrArgInfo(t1, inDeclaration, allowsVariance).compute$0();
    },
    computeMethodTypeArguments(token) {
      var typeArg = M.computeTypeParamOrArg(token, false, false),
        t1 = typeArg.skip$1(0, token).next;
      t1.toString;
      return M.mayFollowTypeArgs(t1) && !typeArg.get$recovered() ? typeArg : C.C_NoTypeParamOrArg;
    },
    mayFollowTypeArgs(token) {
      if (token.type === C.TokenType_Emx)
        return true;
      return C.Set_kr3n9._collection$_map.containsKey$1(token.get$lexeme());
    },
    TypeParamOrArgInfo: function TypeParamOrArgInfo() {
    },
    NestingLevel$() {
      var t1 = $.FastHash__nextId + 1 & 268435455;
      $.FastHash__nextId = t1;
      return new M.NestingLevel(null, 0, t1);
    },
    NestingLevel$_($parent, indent) {
      var t1 = $.FastHash__nextId + 1 & 268435455;
      $.FastHash__nextId = t1;
      return new M.NestingLevel($parent, indent, t1);
    },
    NestingLevel: function NestingLevel(t0, t1, t2) {
      var _ = this;
      _.parent = t0;
      _.indent = t1;
      _._totalUsedIndent = null;
      _.id = t2;
    },
    _parseUri(uri) {
      return uri;
    },
    _validateArgList(method, args) {
      var numArgs, i, numArgs0, message, t1, t2, t3, t4;
      for (numArgs = args.length, i = 1; i < numArgs; ++i) {
        if (args[i] == null || args[i - 1] != null)
          continue;
        for (; numArgs >= 1; numArgs = numArgs0) {
          numArgs0 = numArgs - 1;
          if (args[numArgs0] != null)
            break;
        }
        message = new P.StringBuffer("");
        t1 = method + "(";
        message._contents = t1;
        t2 = H._arrayInstanceType(args);
        t3 = t2._eval$1("SubListIterable<1>");
        t4 = new H.SubListIterable(args, 0, numArgs, t3);
        t4.SubListIterable$3(args, 0, numArgs, t2._precomputed1);
        t3 = t1 + new H.MappedListIterable(t4, t3._eval$1("String(ListIterable.E)")._as(new M._validateArgList_closure()), t3._eval$1("MappedListIterable<ListIterable.E,String>")).join$1(0, ", ");
        message._contents = t3;
        message._contents = t3 + ("): part " + (i - 1) + " was null, but part " + i + " was not.");
        throw H.wrapException(P.ArgumentError$(message.toString$0(0), null));
      }
    },
    Context: function Context(t0, t1) {
      this.style = t0;
      this._context$_current = t1;
    },
    Context_joinAll_closure: function Context_joinAll_closure() {
    },
    Context_split_closure: function Context_split_closure() {
    },
    _validateArgList_closure: function _validateArgList_closure() {
    },
    ReCase$(text) {
      var t1 = new M.ReCase(P.RegExp_RegExp("[A-Z]"), P.LinkedHashSet_LinkedHashSet$_literal([" ", ".", "/", "_", "\\", "-"], type$.String));
      t1.set$__ReCase__words(type$.List_String._as(t1._groupIntoWords$1(text)));
      return t1;
    },
    ReCase: function ReCase(t0, t1) {
      this._upperAlphaRegex = t0;
      this.symbolSet = t1;
      this.__ReCase__words = $;
    },
    ReCase__getSnakeCase_closure: function ReCase__getSnakeCase_closure() {
    },
    scannerRecovery(bytes, tokens, lineStarts) {
      var token, t1, count, previous, msg, rti;
      for (token = tokens; token instanceof S.ErrorToken; token = t1) {
        t1 = token.next;
        t1.toString;
      }
      for (; token.type !== C.TokenType_Emx; token = t1) {
        if (token instanceof S.ErrorToken) {
          for (count = 0; count < 3; ++count, token = previous) {
            previous = token.previous;
            if (previous.type === C.TokenType_Emx)
              break;
          }
          msg = new P.StringBuffer("Internal error: All error tokens should have been prepended:");
          for (count = 0; count < 7; ++count, token = t1) {
            if (token.type === C.TokenType_Emx)
              break;
            rti = token instanceof H.Closure ? H.closureFunctionType(token) : null;
            msg._contents += " " + H.createRuntimeType(rti == null ? H.instanceType(token) : rti).toString$0(0) + ",";
            t1 = token.next;
            t1.toString;
          }
          throw H.wrapException(msg.toString$0(0));
        }
        t1 = token.next;
        t1.toString;
      }
      return tokens;
    }
  },
  N = {Severity: function Severity(t0) {
      this._severity$_name = t0;
    },
    computeLiteralEntry(token) {
      var t2,
        next = token.next,
        t1 = next.type.stringValue;
      if ("if" === t1)
        return C.IfCondition_false_1;
      else {
        if ("for" !== t1)
          t2 = "await" === t1 && "for" === next.next.type.stringValue;
        else
          t2 = true;
        if (t2)
          return new R.ForCondition(false, 0);
        else if ("..." === t1 || "...?" === t1)
          return C.SpreadOperator_false_0;
      }
      return C.LiteralEntryInfo_true_0;
    },
    looksLikeLiteralEntry(token) {
      var t1;
      if (!D.looksLikeExpressionStart(token)) {
        t1 = token.type.stringValue;
        if ("..." !== t1)
          if ("...?" !== t1)
            if ("if" !== t1)
              if ("for" !== t1)
                t1 = "await" === t1 && "for" === token.next.type.stringValue;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      } else
        t1 = true;
      return t1;
    },
    LiteralEntryInfo: function LiteralEntryInfo(t0, t1) {
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    },
    Parser1: function Parser1(t0, t1, t2) {
      var _ = this;
      _.listener = t0;
      _.mayParseFunctionExpressions = true;
      _.asyncState = t1;
      _.loopState = t2;
      _.cachedRewriter = null;
      _.expressionDepth = _.statementDepth = 0;
      _._currentlyRecovering = _._recoverAtPrecedenceLevel = false;
    },
    Parser_parseExtension_handleShowHideElements: function Parser_parseExtension_handleShowHideElements(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    StringCanonicalizer_hashString(data, start, end) {
      var i, h;
      for (i = start, h = 5381; i < end; ++i)
        h = (h << 5 >>> 0) + h + C.JSString_methods.codeUnitAt$1(data, i) & 16777215;
      return h;
    },
    Node: function Node(t0, t1, t2, t3, t4) {
      var _ = this;
      _.data = t0;
      _.start = t1;
      _.end = t2;
      _.payload = t3;
      _.next = t4;
    },
    StringCanonicalizer: function StringCanonicalizer(t0) {
      this._size = 8192;
      this._count = 0;
      this._nodes = t0;
    },
    FastaErrorReporter: function FastaErrorReporter(t0) {
      this.errorReporter = t0;
    },
    FastaErrorReporter_reportByCode_lexeme: function FastaErrorReporter_reportByCode_lexeme(t0) {
      this.$arguments = t0;
    },
    FastHash: function FastHash() {
    },
    findPreviousNonZeroLengthToken(token) {
      var previous;
      while (true) {
        if (!(token.get$isSynthetic() && token.get$length(token) === 0))
          break;
        previous = token.get$beforeSynthetic();
        if (previous === token)
          throw H.wrapException(P.StateError$("token == token.beforeSynthetic"));
        if (previous == null)
          break;
        token = previous;
      }
      return token;
    },
    findNonZeroLengthToken(token) {
      var t1;
      while (true) {
        if (!(token.get$isSynthetic() && token.get$length(token) === 0 && token.type !== C.TokenType_Emx))
          break;
        t1 = token.next;
        t1.toString;
        token = t1;
      }
      return token;
    },
    isLetter(c) {
      var t1;
      if (!(c >= 65 && c <= 90))
        t1 = c >= 97 && c <= 122;
      else
        t1 = true;
      return t1;
    },
    isOneOf(token, values) {
      var t1, _i;
      for (t1 = values.length, _i = 0; _i < t1; ++_i)
        if (values[_i] === token.type.stringValue)
          return true;
      return false;
    },
    isOneOfOrEof(token, values) {
      var t1, _i;
      for (t1 = values.length, _i = 0; _i < t1; ++_i)
        if (values[_i] === token.type.stringValue)
          return true;
      return token.type === C.TokenType_Emx;
    },
    lengthOfSpan(begin, end) {
      var t1;
      if (end == null) {
        t1 = begin.get$length(begin);
        return t1;
      }
      return end.offset + end.get$length(end) - begin.offset;
    },
    skipMetadata(token) {
      var next, next0, t1;
      token = token.next;
      next = token.next;
      if (next.get$isIdentifier()) {
        next0 = next.next;
        if ("." === next0.type.stringValue) {
          next = next0.next;
          if (next.get$isIdentifier()) {
            t1 = next.next;
            t1.toString;
            token = next;
            next = t1;
          } else
            token = next0;
        } else {
          token = next;
          next = next0;
        }
        if ("<" === next.type.stringValue && !next.get$endGroup().get$isSynthetic()) {
          token = next.get$endGroup();
          t1 = token.next;
          t1.toString;
          next = t1;
        }
        if ("." === next.type.stringValue) {
          next0 = next.next;
          if (next0.get$isIdentifier()) {
            t1 = next0.next;
            t1.toString;
            next = t1;
            token = next0;
          } else {
            token = next;
            next = next0;
          }
        }
        if ("(" === next.type.stringValue && !next.get$endGroup().get$isSynthetic()) {
          token = next.get$endGroup();
          token.next.toString;
        }
      }
      return token;
    },
    splitGtEq(token) {
      var t1 = L.SimpleToken$(C.TokenType_wOL, token.offset, token._precedingComment),
        t2 = L.SimpleToken$(C.TokenType_tca, token.offset + 1, null);
      t2.next = token.next;
      t1.setNext$1(t2);
      return t1;
    },
    splitGtGt(token) {
      var t1 = L.SimpleToken$(C.TokenType_wOL, token.offset, token._precedingComment),
        t2 = L.SimpleToken$(C.TokenType_wOL, token.offset + 1, null);
      t2.next = token.next;
      t1.setNext$1(t2);
      return t1;
    },
    syntheticGt(next) {
      var t1 = L.SyntheticToken$(C.TokenType_wOL, next.offset);
      t1.next = next;
      return t1;
    },
    _moveNextNonWhitespace(str, len, i) {
      var t1;
      while (true) {
        if (i < len) {
          t1 = C.JSString_methods._codeUnitAt$1(str, i);
          if (!(t1 >= 9 && t1 <= 13))
            if (t1 !== 32)
              if (t1 !== 133)
                if (t1 !== 160)
                  if (t1 !== 5760)
                    t1 = t1 >= 8192 && t1 <= 8202 || t1 === 8232 || t1 === 8233 || t1 === 8239 || t1 === 8287 || t1 === 12288 || t1 === 65279;
                  else
                    t1 = true;
                else
                  t1 = true;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        } else
          t1 = false;
        if (!t1)
          break;
        ++i;
      }
      return i;
    },
    equalIgnoringWhitespace(str1, str2) {
      var i1, i2, t1,
        len1 = str1.length,
        len2 = str2.length;
      for (i1 = 0, i2 = 0; true;) {
        i1 = N._moveNextNonWhitespace(str1, len1, i1);
        i2 = N._moveNextNonWhitespace(str2, len2, i2);
        t1 = i1 >= len1;
        if (t1 || i2 >= len2)
          return t1 === i2 >= len2;
        if (i1 >= len1)
          return H.ioore(str1, i1);
        t1 = str1[i1];
        if (i2 >= len2)
          return H.ioore(str2, i2);
        if (t1 !== str2[i2])
          return false;
        ++i1;
        ++i2;
      }
    }
  },
  O = {HintCode: function HintCode(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.uniqueName = t1;
      _._errors$_message = t2;
      _._correction = t3;
    },
    Scanner_buildConfig(featureSet) {
      var t1, t2, t3, t4, t5;
      if (featureSet == null)
        t1 = new S.ScannerConfiguration(false, false, false);
      else {
        t1 = $.$get$Feature_extension_methods();
        t2 = featureSet._flags;
        t1 = t1.index;
        t3 = t2.length;
        if (t1 >= t3)
          return H.ioore(t2, t1);
        t1 = t2[t1];
        t4 = $.$get$Feature_triple_shift().index;
        if (t4 >= t3)
          return H.ioore(t2, t4);
        t4 = t2[t4];
        t5 = $.$get$Feature_non_nullable().index;
        if (t5 >= t3)
          return H.ioore(t2, t5);
        t4 = new S.ScannerConfiguration(t1, t2[t5], t4);
        t1 = t4;
      }
      return t1;
    },
    Scanner: function Scanner(t0, t1, t2, t3, t4) {
      var _ = this;
      _.source = t0;
      _._scanner$_contents = t1;
      _._readerOffset = t2;
      _._scanner$_errorListener = t3;
      _.__Scanner__featureSetForOverriding = $;
      _.lineStarts = t4;
      _.__Scanner__featureSet = _.__Scanner_firstToken = $;
    },
    SolveStateQueue: function SolveStateQueue(t0) {
      this.__SolveStateQueue__splitter = $;
      this._solve_state_queue$_queue = t0;
      this._solve_state_queue$_length = 0;
    },
    MetadataRule$() {
      var t1 = $.FastHash__nextId + 1 & 268435455;
      $.FastHash__nextId = t1;
      return new O.MetadataRule(1, P.LinkedHashSet_LinkedHashSet$_empty(type$.Rule), t1);
    },
    MetadataRule: function MetadataRule(t0, t1, t2) {
      var _ = this;
      _._namedRule = _._positionalRule = null;
      _._rule$_cost = t0;
      _.index = null;
      _._isHardened = false;
      _._implied = t1;
      _._allConstrainedRules = _._constrainedRules = null;
      _.id = t2;
    },
    Subtype: function Subtype(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.type = t1;
      _.listType = t2;
      _.value = t3;
    },
    JsonType: function JsonType(t0) {
      this._root$_name = t0;
    },
    Style__getPlatformStyle() {
      if (P.Uri_base().get$scheme() !== "file")
        return $.$get$Style_url();
      var t1 = P.Uri_base();
      if (!C.JSString_methods.endsWith$1(t1.get$path(t1), "/"))
        return $.$get$Style_url();
      if (P._Uri__Uri(null, "a/b", null, null).toFilePath$0() === "a\\b")
        return $.$get$Style_windows();
      return $.$get$Style_posix();
    },
    Style: function Style() {
    }
  },
  P = {
    _AsyncRun__initializeScheduleImmediate() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(type$.void_Function._as(callback)), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer(callback) {
      type$.void_Function._as(callback);
      P._TimerImpl$(0, callback);
    },
    _TimerImpl$(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter($T) {
      return new P._AsyncAwaitCompleter(new P._Future($.Zone__current, $T._eval$1("_Future<0>")), $T._eval$1("_AsyncAwaitCompleter<0>"));
    },
    _asyncStartSync(bodyFunction, completer) {
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._future;
    },
    _asyncAwait(object, bodyFunction) {
      P._awaitOnObject(object, bodyFunction);
    },
    _asyncReturn(object, completer) {
      completer.complete$1(0, object);
    },
    _asyncRethrow(object, completer) {
      completer.completeError$2(H.unwrapException(object), H.getTraceFromException(object));
    },
    _awaitOnObject(object, bodyFunction) {
      var t1, future,
        thenCallback = new P._awaitOnObject_closure(bodyFunction),
        errorCallback = new P._awaitOnObject_closure0(bodyFunction);
      if (object instanceof P._Future)
        object._thenAwait$1$2(thenCallback, errorCallback, type$.dynamic);
      else {
        t1 = type$.dynamic;
        if (type$.Future_dynamic._is(object))
          object.then$1$2$onError(thenCallback, errorCallback, t1);
        else {
          future = new P._Future($.Zone__current, type$._Future_dynamic);
          future._state = 8;
          future._resultOrListeners = object;
          future._thenAwait$1$2(thenCallback, errorCallback, t1);
        }
      }
    },
    _wrapJsFunctionForAsync($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new P._wrapJsFunctionForAsync_closure($protected), type$.void, type$.int, type$.dynamic);
    },
    _IterationMarker_yieldStar(values) {
      return new P._IterationMarker(values, 1);
    },
    _IterationMarker_endOfIteration() {
      return C._IterationMarker_null_2;
    },
    _IterationMarker_uncaughtError(error) {
      return new P._IterationMarker(error, 3);
    },
    _makeSyncStarIterable(body, $T) {
      return new P._SyncStarIterable(body, $T._eval$1("_SyncStarIterable<0>"));
    },
    AsyncError$(error, stackTrace) {
      var t1 = H.checkNotNullable(error, "error", type$.Object);
      return new P.AsyncError(t1, stackTrace == null ? P.AsyncError_defaultStackTrace(error) : stackTrace);
    },
    AsyncError_defaultStackTrace(error) {
      var stackTrace;
      if (type$.Error._is(error)) {
        stackTrace = error.get$stackTrace();
        if (stackTrace != null)
          return stackTrace;
      }
      return C.C__StringStackTrace;
    },
    _Future__chainCoreFuture(source, target) {
      var t1, t2, listeners;
      for (t1 = type$._Future_dynamic; t2 = source._state, (t2 & 4) !== 0;)
        source = t1._as(source._resultOrListeners);
      if ((t2 & 24) !== 0) {
        listeners = target._removeListeners$0();
        target._cloneResult$1(source);
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = type$.nullable__FutureListener_dynamic_dynamic._as(target._resultOrListeners);
        target._state = target._state & 1 | 4;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners(source, listeners) {
      var t2, t3, t4, _box_0, t5, t6, hasError, asyncError, nextListener, nextListener0, sourceResult, t7, zone, oldZone, result, current, _box_1 = {},
        t1 = _box_1.source = source;
      for (t2 = type$.AsyncError, t3 = type$.nullable__FutureListener_dynamic_dynamic, t4 = type$.Future_dynamic; true;) {
        _box_0 = {};
        t5 = t1._state;
        t6 = (t5 & 16) === 0;
        hasError = !t6;
        if (listeners == null) {
          if (hasError && (t5 & 1) === 0) {
            asyncError = t2._as(t1._resultOrListeners);
            P._rootHandleError(asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        _box_0.listener = listeners;
        nextListener = listeners._nextListener;
        for (t1 = listeners; nextListener != null; t1 = nextListener, nextListener = nextListener0) {
          t1._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, t1);
          _box_0.listener = nextListener;
          nextListener0 = nextListener._nextListener;
        }
        t5 = _box_1.source;
        sourceResult = t5._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        if (t6) {
          t7 = t1.state;
          t7 = (t7 & 1) !== 0 || (t7 & 15) === 8;
        } else
          t7 = true;
        if (t7) {
          zone = t1.result._zone;
          if (hasError) {
            t5 = t5._zone === zone;
            t5 = !(t5 || t5);
          } else
            t5 = false;
          if (t5) {
            t2._as(sourceResult);
            P._rootHandleError(sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = null;
          t1 = t1.state;
          if ((t1 & 15) === 8)
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_0, _box_1, hasError).call$0();
          else if (t6) {
            if ((t1 & 1) !== 0)
              new P._Future__propagateToListeners_handleValueCallback(_box_0, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new P._Future__propagateToListeners_handleError(_box_1, _box_0).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (t4._is(t1)) {
            t5 = _box_0.listener.$ti;
            t5 = t5._eval$1("Future<2>")._is(t1) || !t5._rest[1]._is(t1);
          } else
            t5 = false;
          if (t5) {
            t4._as(t1);
            result = _box_0.listener.result;
            if (t1 instanceof P._Future)
              if ((t1._state & 24) !== 0) {
                current = t3._as(result._resultOrListeners);
                result._resultOrListeners = null;
                listeners = result._reverseListeners$1(current);
                result._state = t1._state & 30 | result._state & 1;
                result._resultOrListeners = t1._resultOrListeners;
                _box_1.source = t1;
                continue;
              } else
                P._Future__chainCoreFuture(t1, result);
            else
              result._chainForeignFuture$1(t1);
            return;
          }
        }
        result = _box_0.listener.result;
        current = t3._as(result._resultOrListeners);
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t5 = _box_0.listenerValueOrError;
        if (!t1) {
          result.$ti._precomputed1._as(t5);
          result._state = 8;
          result._resultOrListeners = t5;
        } else {
          t2._as(t5);
          result._state = result._state & 1 | 16;
          result._resultOrListeners = t5;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler(errorHandler, zone) {
      var t1;
      if (type$.dynamic_Function_Object_StackTrace._is(errorHandler))
        return zone.registerBinaryCallback$3$1(errorHandler, type$.dynamic, type$.Object, type$.StackTrace);
      t1 = type$.dynamic_Function_Object;
      if (t1._is(errorHandler))
        return t1._as(errorHandler);
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", string$.Error_));
    },
    _microtaskLoop() {
      var entry, next;
      for (entry = $._nextCallback; entry != null; entry = $._nextCallback) {
        $._lastPriorityCallback = null;
        next = entry.next;
        $._nextCallback = next;
        if (next == null)
          $._lastCallback = null;
        entry.callback.call$0();
      }
    },
    _startMicrotaskLoop() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback(callback) {
      var newEntry = new P._AsyncCallbackEntry(callback),
        lastCallback = $._lastCallback;
      if (lastCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback(callback) {
      var entry, lastPriorityCallback, next,
        t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      lastPriorityCallback = $._lastPriorityCallback;
      if (lastPriorityCallback == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        next = lastPriorityCallback.next;
        entry.next = next;
        $._lastPriorityCallback = lastPriorityCallback.next = entry;
        if (next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask(callback) {
      var _null = null,
        currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      P._rootScheduleMicrotask(_null, _null, currentZone, type$.void_Function._as(currentZone.bindCallbackGuarded$1(callback)));
    },
    StreamIterator_StreamIterator(stream, $T) {
      H.checkNotNullable(stream, "stream", type$.Object);
      return new P._StreamIterator($T._eval$1("_StreamIterator<0>"));
    },
    _runUserCode(userCode, onSuccess, onError, $T) {
      var e, s, replacement, error, stackTrace, exception;
      try {
        onSuccess.call$1(userCode.call$0());
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        type$.nullable_StackTrace._as(s);
        replacement = null;
        if (replacement == null)
          onError.call$2(e, s);
        else {
          error = J.get$error$z(replacement);
          stackTrace = replacement.get$stackTrace();
          onError.call$2(error, stackTrace);
        }
      }
    },
    _cancelAndError(subscription, future, error, stackTrace) {
      var action, t1, t2,
        cancelFuture = subscription.cancel$0();
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture()) {
        action = type$.dynamic_Function._as(new P._cancelAndError_closure(future, error, stackTrace));
        t1 = H._instanceType(cancelFuture);
        t2 = $.Zone__current;
        cancelFuture._addListener$1(new P._FutureListener(new P._Future(t2, t1._eval$1("_Future<1>")), 8, action, null, t1._eval$1("@<1>")._bind$1(t1._precomputed1)._eval$1("_FutureListener<1,2>")));
      } else
        future._completeError$2(error, stackTrace);
    },
    _cancelAndErrorClosure(subscription, future) {
      return new P._cancelAndErrorClosure_closure(subscription, future);
    },
    _rootHandleError(error, stackTrace) {
      P._schedulePriorityAsyncCallback(new P._rootHandleError_closure(error, stackTrace));
    },
    _rootRun($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask($self, $parent, zone, f) {
      type$.void_Function._as(f);
      if (C.C__RootZone !== zone)
        f = zone.bindCallbackGuarded$1(f);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._future = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _IterationMarker: function _IterationMarker(t0, t1) {
      this.value = t0;
      this.state = t1;
    },
    _SyncStarIterator: function _SyncStarIterator(t0, t1) {
      var _ = this;
      _._async$_body = t0;
      _._suspendedBodies = _._nestedIterator = _._async$_current = null;
      _.$ti = t1;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.$this = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncCompleteWithValue_closure: function _Future__asyncCompleteWithValue_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2) {
      this._box_0 = t0;
      this._box_1 = t1;
      this.hasError = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1) {
      this._box_0 = t0;
      this.sourceResult = t1;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1) {
      this._box_1 = t0;
      this._box_0 = t1;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_forEach_closure: function Stream_forEach_closure(t0) {
      this.future = t0;
    },
    Stream_forEach_closure0: function Stream_forEach_closure0(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.action = t1;
      _.subscription = t2;
      _.future = t3;
    },
    Stream_forEach__closure: function Stream_forEach__closure(t0, t1) {
      this.action = t0;
      this.element = t1;
    },
    Stream_forEach__closure0: function Stream_forEach__closure0() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    StreamSubscription: function StreamSubscription() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _StreamIterator: function _StreamIterator(t0) {
      this.$ti = t0;
    },
    _cancelAndError_closure: function _cancelAndError_closure(t0, t1, t2) {
      this.future = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _cancelAndErrorClosure_closure: function _cancelAndErrorClosure_closure(t0, t1) {
      this.subscription = t0;
      this.future = t1;
    },
    _Zone: function _Zone() {
    },
    _rootHandleError_closure: function _rootHandleError_closure(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    LinkedHashMap_LinkedHashMap(hashCode, isValidKey, $K, $V) {
      if (isValidKey == null) {
        if (hashCode == null)
          return new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
      } else if (hashCode == null)
        hashCode = P.collection___defaultHashCode$closure();
      return P._LinkedCustomHashMap$(P.collection___defaultEquals$closure(), hashCode, isValidKey, $K, $V);
    },
    LinkedHashMap_LinkedHashMap$_literal(keyValuePairs, $K, $V) {
      return $K._eval$1("@<0>")._bind$1($V)._eval$1("LinkedHashMap<1,2>")._as(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"))));
    },
    LinkedHashMap_LinkedHashMap$_empty($K, $V) {
      return new H.JsLinkedHashMap($K._eval$1("@<0>")._bind$1($V)._eval$1("JsLinkedHashMap<1,2>"));
    },
    _LinkedCustomHashMap$(_equals, _hashCode, validKey, $K, $V) {
      var t1 = validKey != null ? validKey : new P._LinkedCustomHashMap_closure($K);
      return new P._LinkedCustomHashMap(_equals, _hashCode, t1, $K._eval$1("@<0>")._bind$1($V)._eval$1("_LinkedCustomHashMap<1,2>"));
    },
    HashSet_HashSet($E) {
      return new P._HashSet($E._eval$1("_HashSet<0>"));
    },
    _HashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashSet_LinkedHashSet($E) {
      return new P._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_empty($E) {
      return new P._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"));
    },
    LinkedHashSet_LinkedHashSet$_literal(values, $E) {
      return $E._eval$1("LinkedHashSet<0>")._as(H.fillLiteralSet(values, new P._LinkedHashSet($E._eval$1("_LinkedHashSet<0>"))));
    },
    _LinkedHashSet__newHashTable() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$(_set, _modifications, $E) {
      var t1 = new P._LinkedHashSetIterator(_set, _modifications, $E._eval$1("_LinkedHashSetIterator<0>"));
      t1._cell = _set._first;
      return t1;
    },
    _defaultEquals(a, b) {
      return J.$eq$(a, b);
    },
    _defaultHashCode(a) {
      return J.get$hashCode$(a);
    },
    IterableBase_iterableToShortString(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H._setArrayType([], type$.JSArray_String);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, type$.Iterable_dynamic._as(parts), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = P.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = J.get$iterator$ax(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashSet_LinkedHashSet$of(elements, $E) {
      var t1 = P.LinkedHashSet_LinkedHashSet($E);
      t1.addAll$1(0, elements);
      return t1;
    },
    MapBase_mapToString(m) {
      var result, t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new P.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _UnmodifiableSetMixin__throwUnmodifiable() {
      throw H.wrapException(P.UnsupportedError$("Cannot change an unmodifiable set"));
    },
    _LinkedIdentityHashMap: function _LinkedIdentityHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _.__js_helper$_last = _.__js_helper$_first = _.__js_helper$_rest = _.__js_helper$_nums = _.__js_helper$_strings = null;
      _.__js_helper$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedCustomHashMap: function _LinkedCustomHashMap(t0, t1, t2, t3) {
      var _ = this;
      _._equals = t0;
      _._hashCode = t1;
      _._validKey = t2;
      _.__js_helper$_length = 0;
      _.__js_helper$_last = _.__js_helper$_first = _.__js_helper$_rest = _.__js_helper$_nums = _.__js_helper$_strings = null;
      _.__js_helper$_modifications = 0;
      _.$ti = t3;
    },
    _LinkedCustomHashMap_closure: function _LinkedCustomHashMap_closure(t0) {
      this.K = t0;
    },
    _HashSet: function _HashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_elements = _._collection$_rest = _._nums = _._strings = null;
      _.$ti = t0;
    },
    _HashSetIterator: function _HashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_elements = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._last = _._first = _._collection$_rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._previous = this._next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._modifications = t1;
      _._collection$_current = _._cell = null;
      _.$ti = t2;
    },
    IterableMixin: function IterableMixin() {
    },
    IterableBase: function IterableBase() {
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    MapMixin_entries_closure: function MapMixin_entries_closure(t0) {
      this.$this = t0;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView() {
    },
    SetMixin: function SetMixin() {
    },
    _SetBase: function _SetBase() {
    },
    _UnmodifiableSetMixin: function _UnmodifiableSetMixin() {
    },
    _UnmodifiableSet: function _UnmodifiableSet(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    __SetBase_Object_SetMixin: function __SetBase_Object_SetMixin() {
    },
    __UnmodifiableSet__SetBase__UnmodifiableSetMixin: function __UnmodifiableSet__SetBase__UnmodifiableSetMixin() {
    },
    _parseJson(source, reviver) {
      var parsed, e, exception, t1;
      if (typeof source != "string")
        throw H.wrapException(H.argumentErrorValue(source));
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.FormatException$(String(e), null, null);
        throw H.wrapException(t1);
      }
      t1 = P._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy(object) {
      var i;
      if (object == null)
        return null;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    Utf8Decoder__convertIntercepted(allowMalformed, codeUnits, start, end) {
      var casted, result;
      if (codeUnits instanceof Uint8Array) {
        casted = codeUnits;
        if (end == null)
          end = casted.length;
        if (end - start < 15)
          return null;
        result = P.Utf8Decoder__convertInterceptedUint8List(allowMalformed, casted, start, end);
        if (result != null && allowMalformed)
          if (result.indexOf("\ufffd") >= 0)
            return null;
        return result;
      }
      return null;
    },
    Utf8Decoder__convertInterceptedUint8List(allowMalformed, codeUnits, start, end) {
      var decoder = allowMalformed ? $.$get$Utf8Decoder__decoderNonfatal() : $.$get$Utf8Decoder__decoder();
      if (decoder == null)
        return null;
      if (0 === start && end === codeUnits.length)
        return P.Utf8Decoder__useTextDecoder(decoder, codeUnits);
      return P.Utf8Decoder__useTextDecoder(decoder, codeUnits.subarray(start, P.RangeError_checkValidRange(start, end, codeUnits.length)));
    },
    Utf8Decoder__useTextDecoder(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return null;
    },
    Base64Codec__checkPadding(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (C.JSInt_methods.$mod($length, 4) !== 0)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    _Utf8Decoder_errorDescription(state) {
      switch (state) {
        case 65:
          return "Missing extension byte";
        case 67:
          return "Unexpected extension byte";
        case 69:
          return "Invalid UTF-8 byte";
        case 71:
          return "Overlong encoding";
        case 73:
          return "Out of unicode range";
        case 75:
          return "Encoded surrogate";
        case 77:
          return "Unfinished UTF-8 octet sequence";
        default:
          return "";
      }
    },
    _Utf8Decoder__makeUint8List(codeUnits, start, end) {
      var t1, i, b,
        $length = end - start,
        bytes = new Uint8Array($length);
      for (t1 = J.getInterceptor$asx(codeUnits), i = 0; i < $length; ++i) {
        b = t1.$index(codeUnits, start + i);
        if (typeof b !== "number")
          return b.$and();
        if ((b & 4294967040) >>> 0 !== 0)
          b = 255;
        if (i >= $length)
          return H.ioore(bytes, i);
        bytes[i] = b;
      }
      return bytes;
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._convert$_data = null;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._convert$_parent = t0;
    },
    Utf8Decoder__decoder_closure: function Utf8Decoder__decoder_closure() {
    },
    Utf8Decoder__decoderNonfatal_closure: function Utf8Decoder__decoderNonfatal_closure() {
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    JsonCodec: function JsonCodec() {
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = 0;
      this._convert$_buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0) {
      this.allowMalformed = t0;
      this._convert$_state = 16;
      this._charOrIndex = 0;
    },
    int_parse(source, radix) {
      var value = H.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      throw H.wrapException(P.FormatException$(source, null, null));
    },
    double_parse(source) {
      var value = H.Primitives_parseDouble(source);
      if (value != null)
        return value;
      throw H.wrapException(P.FormatException$("Invalid double", source, null));
    },
    Error__objectToString(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.S(H.Primitives_objectTypeName(object)) + "'";
    },
    List_List$filled($length, fill, growable, $E) {
      var i,
        result = growable ? J.JSArray_JSArray$growable($length, $E) : J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && fill != null)
        for (i = 0; i < result.length; ++i)
          result[i] = fill;
      return result;
    },
    List_List$from(elements, growable, $E) {
      var t1,
        list = H._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        C.JSArray_methods.add$1(list, $E._as(t1.get$current()));
      if (growable)
        return list;
      return J.JSArray_markFixedList(list, $E);
    },
    List_List$of(elements, growable, $E) {
      var t1;
      if (growable)
        return P.List_List$_of(elements, $E);
      t1 = J.JSArray_markFixedList(P.List_List$_of(elements, $E), $E);
      return t1;
    },
    List_List$_of(elements, $E) {
      var list, t1;
      if (Array.isArray(elements))
        return H._setArrayType(elements.slice(0), $E._eval$1("JSArray<0>"));
      list = H._setArrayType([], $E._eval$1("JSArray<0>"));
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        C.JSArray_methods.add$1(list, t1.get$current());
      return list;
    },
    List_List$unmodifiable(elements, $E) {
      return J.JSArray_markUnmodifiableList(P.List_List$from(elements, false, $E));
    },
    String_String$fromCharCodes(charCodes, start, end) {
      var array, len;
      if (Array.isArray(charCodes)) {
        array = charCodes;
        len = array.length;
        end = P.RangeError_checkValidRange(start, end, len);
        return H.Primitives_stringFromCharCodes(start > 0 || end < len ? array.slice(start, end) : array);
      }
      if (type$.NativeUint8List._is(charCodes))
        return H.Primitives_stringFromNativeUint8List(charCodes, start, P.RangeError_checkValidRange(start, end, charCodes.length));
      return P.String__stringFromIterable(charCodes, start, end);
    },
    String_String$fromCharCode(charCode) {
      return H.Primitives_stringFromCharCode(charCode);
    },
    String__stringFromIterable(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(charCodes), _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw H.wrapException(P.RangeError$range(end, start, J.get$length$asx(charCodes), _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current());
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw H.wrapException(P.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current());
        }
      return H.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp(source) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, false, true, false, false, false));
    },
    StringBuffer__writeAll(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += H.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += H.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + H.S(iterator.get$current());
      }
      return string;
    },
    NoSuchMethodError$(receiver, memberName, positionalArguments, namedArguments) {
      return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments);
    },
    Uri_base() {
      var uri = H.Primitives_currentUri();
      if (uri != null)
        return P.Uri_parse(uri);
      throw H.wrapException(P.UnsupportedError$("'Uri.base' is not supported"));
    },
    _Uri__uriEncode(canonicalTable, text, encoding, spaceToPlus) {
      var t1, bytes, i, t2, byte, t3,
        _s16_ = "0123456789ABCDEF";
      if (encoding === C.C_Utf8Codec) {
        t1 = $.$get$_Uri__needsNoEncoding()._nativeRegExp;
        if (typeof text != "string")
          H.throwExpression(H.argumentErrorValue(text));
        t1 = t1.test(text);
      } else
        t1 = false;
      if (t1)
        return text;
      H._instanceType(encoding)._eval$1("Codec.S")._as(text);
      bytes = encoding.get$encoder().convert$1(text);
      for (t1 = bytes.length, i = 0, t2 = ""; i < t1; ++i) {
        byte = bytes[i];
        if (byte < 128) {
          t3 = byte >>> 4;
          if (t3 >= 8)
            return H.ioore(canonicalTable, t3);
          t3 = (canonicalTable[t3] & 1 << (byte & 15)) !== 0;
        } else
          t3 = false;
        if (t3)
          t2 += H.Primitives_stringFromCharCode(byte);
        else
          t2 = spaceToPlus && byte === 32 ? t2 + "+" : t2 + "%" + _s16_[byte >>> 4 & 15] + _s16_[byte & 15];
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    StackTrace_current() {
      var stackTrace, exception;
      if (H.boolConversionCheck($.$get$_hasErrorStackProperty()))
        return H.getTraceFromException(new Error());
      try {
        throw H.wrapException("");
      } catch (exception) {
        H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        return stackTrace;
      }
    },
    Error_safeToString(object) {
      if (typeof object == "number" || H._isBool(object) || object == null)
        return J.toString$0$(object);
      if (typeof object == "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    AssertionError$(message) {
      return new P.AssertionError(message);
    },
    ArgumentError$(message, $name) {
      return new P.ArgumentError(false, null, $name, message);
    },
    ArgumentError$value(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    ArgumentError$notNull($name) {
      return new P.ArgumentError(false, null, $name, "Must not be null");
    },
    RangeError$(message) {
      var _null = null;
      return new P.RangeError(_null, _null, false, _null, _null, message);
    },
    RangeError$value(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValueInInterval(value, minValue, maxValue, $name) {
      if (value < minValue || value > maxValue)
        throw H.wrapException(P.RangeError$range(value, minValue, maxValue, $name, null));
      return value;
    },
    RangeError_checkValidRange(start, end, $length) {
      if (0 > start || start > $length)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (start > end || end > $length)
          throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative(value, $name) {
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
      return value;
    },
    IndexError$(invalidValue, indexable, $name, message, $length) {
      var t1 = H._asIntS($length == null ? J.get$length$asx(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$(message) {
      return new P.UnimplementedError(message);
    },
    StateError$(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception(message) {
      return new P._Exception(message);
    },
    FormatException$(message, source, offset) {
      return new P.FormatException(message, source, offset);
    },
    print(object) {
      H.printString(object);
    },
    _combineSurrogatePair(start, end) {
      return 65536 + ((start & 1023) << 10) + (end & 1023);
    },
    Uri_parse(uri) {
      var delta, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t1, t2, schemeAuth, queryStart0, pathStart0, userInfoStart, userInfo, host, portNumber, port, path, query, _null = null,
        end = uri.length;
      if (end >= 5) {
        delta = ((C.JSString_methods._codeUnitAt$1(uri, 4) ^ 58) * 3 | C.JSString_methods._codeUnitAt$1(uri, 0) ^ 100 | C.JSString_methods._codeUnitAt$1(uri, 1) ^ 97 | C.JSString_methods._codeUnitAt$1(uri, 2) ^ 116 | C.JSString_methods._codeUnitAt$1(uri, 3) ^ 97) >>> 0;
        if (delta === 0)
          return P.UriData__parse(end < end ? C.JSString_methods.substring$2(uri, 0, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return P.UriData__parse(C.JSString_methods.substring$2(uri, 5, end), 0, _null).get$uri();
      }
      indices = P.List_List$filled(8, 0, false, type$.int);
      C.JSArray_methods.$indexSet(indices, 0, 0);
      C.JSArray_methods.$indexSet(indices, 1, -1);
      C.JSArray_methods.$indexSet(indices, 2, -1);
      C.JSArray_methods.$indexSet(indices, 7, -1);
      C.JSArray_methods.$indexSet(indices, 3, 0);
      C.JSArray_methods.$indexSet(indices, 4, 0);
      C.JSArray_methods.$indexSet(indices, 5, end);
      C.JSArray_methods.$indexSet(indices, 6, end);
      if (P._scan(uri, 0, end, 0, indices) >= 14)
        C.JSArray_methods.$indexSet(indices, 7, end);
      schemeEnd = indices[1];
      if (schemeEnd >= 0)
        if (P._scan(uri, 0, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      hostStart = indices[2] + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (portStart < hostStart)
        portStart = pathStart;
      isSimple = indices[7] < 0;
      if (isSimple)
        if (hostStart > schemeEnd + 3) {
          scheme = _null;
          isSimple = false;
        } else {
          t1 = portStart > 0;
          if (t1 && portStart + 1 === pathStart) {
            scheme = _null;
            isSimple = false;
          } else {
            if (!(queryStart < end && queryStart === pathStart + 2 && C.JSString_methods.startsWith$2(uri, "..", pathStart)))
              t2 = queryStart > pathStart + 2 && C.JSString_methods.startsWith$2(uri, "/..", queryStart - 3);
            else
              t2 = true;
            if (t2) {
              scheme = _null;
              isSimple = false;
            } else {
              if (schemeEnd === 4)
                if (C.JSString_methods.startsWith$2(uri, "file", 0)) {
                  if (hostStart <= 0) {
                    if (!C.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                      schemeAuth = "file:///";
                      delta = 3;
                    } else {
                      schemeAuth = "file://";
                      delta = 2;
                    }
                    uri = schemeAuth + C.JSString_methods.substring$2(uri, pathStart, end);
                    schemeEnd -= 0;
                    t1 = delta - 0;
                    queryStart += t1;
                    fragmentStart += t1;
                    end = uri.length;
                    hostStart = 7;
                    portStart = 7;
                    pathStart = 7;
                  } else if (pathStart === queryStart) {
                    ++fragmentStart;
                    queryStart0 = queryStart + 1;
                    uri = C.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                    ++end;
                    queryStart = queryStart0;
                  }
                  scheme = "file";
                } else if (C.JSString_methods.startsWith$2(uri, "http", 0)) {
                  if (t1 && portStart + 3 === pathStart && C.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                    fragmentStart -= 3;
                    pathStart0 = pathStart - 3;
                    queryStart -= 3;
                    uri = C.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "http";
                } else
                  scheme = _null;
              else if (schemeEnd === 5 && C.JSString_methods.startsWith$2(uri, "https", 0)) {
                if (t1 && portStart + 4 === pathStart && C.JSString_methods.startsWith$2(uri, "443", portStart + 1)) {
                  fragmentStart -= 4;
                  pathStart0 = pathStart - 4;
                  queryStart -= 4;
                  uri = C.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                  end -= 3;
                  pathStart = pathStart0;
                }
                scheme = "https";
              } else
                scheme = _null;
              isSimple = true;
            }
          }
        }
      else
        scheme = _null;
      if (isSimple) {
        if (end < uri.length) {
          uri = C.JSString_methods.substring$2(uri, 0, end);
          schemeEnd -= 0;
          hostStart -= 0;
          portStart -= 0;
          pathStart -= 0;
          queryStart -= 0;
          fragmentStart -= 0;
        }
        return new P._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      if (scheme == null)
        if (schemeEnd > 0)
          scheme = P._Uri__makeScheme(uri, 0, schemeEnd);
        else {
          if (schemeEnd === 0) {
            P._Uri__fail(uri, 0, "Invalid empty scheme");
            H.ReachabilityError$(string$.x60null_t);
          }
          scheme = "";
        }
      if (hostStart > 0) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? P._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = P._Uri__makeHost(uri, hostStart, portStart, false);
        t1 = portStart + 1;
        if (t1 < pathStart) {
          portNumber = H.Primitives_parseInt(C.JSString_methods.substring$2(uri, t1, pathStart), _null);
          port = P._Uri__makePort(portNumber == null ? H.throwExpression(P.FormatException$("Invalid port", uri, t1)) : portNumber, scheme);
        } else
          port = _null;
      } else {
        port = _null;
        host = port;
        userInfo = "";
      }
      path = P._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      query = queryStart < fragmentStart ? P._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return P._Uri$_internal(scheme, userInfo, host, port, path, query, fragmentStart < end ? P._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    Uri_decodeComponent(encodedComponent) {
      H._asStringS(encodedComponent);
      return P._Uri__uriDecode(encodedComponent, 0, encodedComponent.length, C.C_Utf8Codec, false);
    },
    Uri__parseIPv4Address(host, start, end) {
      var i, partStart, partIndex, char, part, partIndex0,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new P.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (i = start, partStart = i, partIndex = 0; i < end; ++i) {
        char = C.JSString_methods.codeUnitAt$1(host, i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = P.int_parse(C.JSString_methods.substring$2(host, partStart, i), null);
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (partIndex >= 4)
            return H.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = P.int_parse(C.JSString_methods.substring$2(host, partStart, end), null);
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (partIndex >= 4)
        return H.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address(host, start, end) {
      var parts, i, partStart, wildcardSeen, seenDot, char, atEnd, t1, last, bytes, wildCardLength, index, value, j, t2,
        error = new P.Uri_parseIPv6Address_error(host),
        parseHex = new P.Uri_parseIPv6Address_parseHex(error, host);
      if (host.length < 2)
        error.call$1("address is too short");
      parts = H._setArrayType([], type$.JSArray_int);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        char = C.JSString_methods.codeUnitAt$1(host, i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (C.JSString_methods.codeUnitAt$1(host, i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            C.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$1("too few parts");
      atEnd = partStart === end;
      t1 = C.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = P.Uri__parseIPv4Address(host, partStart, end);
          C.JSArray_methods.add$1(parts, (last[0] << 8 | last[1]) >>> 0);
          C.JSArray_methods.add$1(parts, (last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$1("an address with a wildcard must have less than 7 parts");
      } else if (parts.length !== 8)
        error.call$1("an address without a wildcard must contain exactly 8 parts");
      bytes = new Uint8Array(16);
      for (t1 = parts.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            if (index < 0 || index >= 16)
              return H.ioore(bytes, index);
            bytes[index] = 0;
            t2 = index + 1;
            if (t2 >= 16)
              return H.ioore(bytes, t2);
            bytes[t2] = 0;
            index += 2;
          }
        else {
          t2 = C.JSInt_methods._shrOtherPositive$1(value, 8);
          if (index < 0 || index >= 16)
            return H.ioore(bytes, index);
          bytes[index] = t2;
          t2 = index + 1;
          if (t2 >= 16)
            return H.ioore(bytes, t2);
          bytes[t2] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri$_internal(scheme, _userInfo, _host, _port, path, _query, _fragment) {
      return new P._Uri(scheme, _userInfo, _host, _port, path, _query, _fragment);
    },
    _Uri__Uri(host, path, pathSegments, scheme) {
      var userInfo, query, fragment, port, isFile, t1, hasAuthority, t2, _null = null;
      scheme = scheme == null ? "" : P._Uri__makeScheme(scheme, 0, scheme.length);
      userInfo = P._Uri__makeUserInfo(_null, 0, 0);
      host = P._Uri__makeHost(host, 0, host == null ? 0 : host.length, false);
      query = P._Uri__makeQuery(_null, 0, 0, _null);
      fragment = P._Uri__makeFragment(_null, 0, 0);
      port = P._Uri__makePort(_null, scheme);
      isFile = scheme === "file";
      if (host == null)
        t1 = userInfo.length !== 0 || port != null || isFile;
      else
        t1 = false;
      if (t1)
        host = "";
      t1 = host == null;
      hasAuthority = !t1;
      path = P._Uri__makePath(path, 0, path == null ? 0 : path.length, pathSegments, scheme, hasAuthority);
      t2 = scheme.length === 0;
      if (t2 && t1 && !C.JSString_methods.startsWith$1(path, "/"))
        path = P._Uri__normalizeRelativePath(path, !t2 || hasAuthority);
      else
        path = P._Uri__removeDotSegments(path);
      return P._Uri$_internal(scheme, userInfo, t1 && C.JSString_methods.startsWith$1(path, "//") ? "" : host, port, path, query, fragment);
    },
    _Uri__defaultPort(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__compareScheme(scheme, uri) {
      var t1, i, schemeChar, uriChar, delta, lowerChar;
      for (t1 = scheme.length, i = 0; i < t1; ++i) {
        schemeChar = C.JSString_methods._codeUnitAt$1(scheme, i);
        uriChar = C.JSString_methods._codeUnitAt$1(uri, i);
        delta = schemeChar ^ uriChar;
        if (delta !== 0) {
          if (delta === 32) {
            lowerChar = uriChar | delta;
            if (97 <= lowerChar && lowerChar <= 122)
              continue;
          }
          return false;
        }
      }
      return true;
    },
    _Uri__fail(uri, index, message) {
      throw H.wrapException(P.FormatException$(message, uri, index));
    },
    _Uri__checkNonWindowsPathReservedCharacters(segments, argumentError) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(segments); t1.moveNext$0();) {
        t2 = t1.get$current();
        t2.toString;
        if (H.stringContainsUnchecked(t2, "/", 0)) {
          t1 = P.UnsupportedError$("Illegal path character " + t2);
          throw H.wrapException(t1);
        }
      }
    },
    _Uri__checkWindowsPathReservedCharacters(segments, argumentError, firstSegment) {
      var t1, t2, t3;
      for (t1 = J.skip$1$ax(segments, firstSegment), t1 = new H.ListIterator(t1, t1.get$length(t1), t1.$ti._eval$1("ListIterator<ListIterable.E>")); t1.moveNext$0();) {
        t2 = t1.__internal$_current;
        t3 = P.RegExp_RegExp('["*/:<>?\\\\|]');
        t2.toString;
        if (H.stringContainsUnchecked(t2, t3, 0)) {
          t1 = P.UnsupportedError$("Illegal character in path: " + t2);
          throw H.wrapException(t1);
        }
      }
    },
    _Uri__checkWindowsDriveLetter(charCode, argumentError) {
      var t1;
      if (!(65 <= charCode && charCode <= 90))
        t1 = 97 <= charCode && charCode <= 122;
      else
        t1 = true;
      if (t1)
        return;
      t1 = P.UnsupportedError$("Illegal drive letter " + P.String_String$fromCharCode(charCode));
      throw H.wrapException(t1);
    },
    _Uri__makePort(port, scheme) {
      if (port != null && port === P._Uri__defaultPort(scheme))
        return null;
      return port;
    },
    _Uri__makeHost(host, start, end, strictIPv6) {
      var t1, t2, index, zoneIDstart, zoneID, i;
      if (host == null)
        return null;
      if (start === end)
        return "";
      if (C.JSString_methods.codeUnitAt$1(host, start) === 91) {
        t1 = end - 1;
        if (C.JSString_methods.codeUnitAt$1(host, t1) !== 93) {
          P._Uri__fail(host, start, "Missing end `]` to match `[` in host");
          H.ReachabilityError$(string$.x60null_t);
        }
        t2 = start + 1;
        index = P._Uri__checkZoneID(host, t2, t1);
        if (index < t1) {
          zoneIDstart = index + 1;
          zoneID = P._Uri__normalizeZoneID(host, C.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, t1, "%25");
        } else
          zoneID = "";
        P.Uri_parseIPv6Address(host, t2, index);
        return C.JSString_methods.substring$2(host, start, index).toLowerCase() + zoneID + "]";
      }
      for (i = start; i < end; ++i)
        if (C.JSString_methods.codeUnitAt$1(host, i) === 58) {
          index = C.JSString_methods.indexOf$2(host, "%", start);
          index = index >= start && index < end ? index : end;
          if (index < end) {
            zoneIDstart = index + 1;
            zoneID = P._Uri__normalizeZoneID(host, C.JSString_methods.startsWith$2(host, "25", zoneIDstart) ? index + 3 : zoneIDstart, end, "%25");
          } else
            zoneID = "";
          P.Uri_parseIPv6Address(host, start, index);
          return "[" + C.JSString_methods.substring$2(host, start, index) + zoneID + "]";
        }
      return P._Uri__normalizeRegName(host, start, end);
    },
    _Uri__checkZoneID(host, start, end) {
      var index = C.JSString_methods.indexOf$2(host, "%", start);
      return index >= start && index < end ? index : end;
    },
    _Uri__normalizeZoneID(host, start, end, prefix) {
      var index, sectionStart, isNormalized, char, replacement, t1, t2, tail, sourceLength, slice,
        buffer = prefix !== "" ? new P.StringBuffer(prefix) : null;
      for (index = start, sectionStart = index, isNormalized = true; index < end;) {
        char = C.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = P._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new P.StringBuffer("");
          t2 = buffer._contents += C.JSString_methods.substring$2(host, sectionStart, index);
          if (t1)
            replacement = C.JSString_methods.substring$2(host, index, index + 3);
          else if (replacement === "%") {
            P._Uri__fail(host, index, "ZoneID should not contain % anymore");
            H.ReachabilityError$(string$.x60null_t);
          }
          buffer._contents = t2 + replacement;
          index += 3;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t1 = char >>> 4;
            if (t1 >= 8)
              return H.ioore(C.List_nxB, t1);
            t1 = (C.List_nxB[t1] & 1 << (char & 15)) !== 0;
          } else
            t1 = false;
          if (t1) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new P.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += C.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if ((char & 64512) === 55296 && index + 1 < end) {
              tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
              if ((tail & 64512) === 56320) {
                char = (char & 1023) << 10 | tail & 1023 | 65536;
                sourceLength = 2;
              } else
                sourceLength = 1;
            } else
              sourceLength = 1;
            slice = C.JSString_methods.substring$2(host, sectionStart, index);
            if (buffer == null) {
              buffer = new P.StringBuffer("");
              t1 = buffer;
            } else
              t1 = buffer;
            t1._contents += slice;
            t1._contents += P._Uri__escapeChar(char);
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return C.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end)
        buffer._contents += C.JSString_methods.substring$2(host, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__normalizeRegName(host, start, end) {
      var index, sectionStart, buffer, isNormalized, char, replacement, t1, slice, t2, sourceLength, tail;
      for (index = start, sectionStart = index, buffer = null, isNormalized = true; index < end;) {
        char = C.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = P._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new P.StringBuffer("");
          slice = C.JSString_methods.substring$2(host, sectionStart, index);
          t2 = buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
          if (t1) {
            replacement = C.JSString_methods.substring$2(host, index, index + 3);
            sourceLength = 3;
          } else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          } else
            sourceLength = 3;
          buffer._contents = t2 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t1 = char >>> 4;
            if (t1 >= 8)
              return H.ioore(C.List_qNA, t1);
            t1 = (C.List_qNA[t1] & 1 << (char & 15)) !== 0;
          } else
            t1 = false;
          if (t1) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new P.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += C.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if (char <= 93) {
              t1 = char >>> 4;
              if (t1 >= 8)
                return H.ioore(C.List_2Vk, t1);
              t1 = (C.List_2Vk[t1] & 1 << (char & 15)) !== 0;
            } else
              t1 = false;
            if (t1) {
              P._Uri__fail(host, index, "Invalid character");
              H.ReachabilityError$(string$.x60null_t);
            } else {
              if ((char & 64512) === 55296 && index + 1 < end) {
                tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
                if ((tail & 64512) === 56320) {
                  char = (char & 1023) << 10 | tail & 1023 | 65536;
                  sourceLength = 2;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              slice = C.JSString_methods.substring$2(host, sectionStart, index);
              if (!isNormalized)
                slice = slice.toLowerCase();
              if (buffer == null) {
                buffer = new P.StringBuffer("");
                t1 = buffer;
              } else
                t1 = buffer;
              t1._contents += slice;
              t1._contents += P._Uri__escapeChar(char);
              index += sourceLength;
              sectionStart = index;
            }
          }
        }
      }
      if (buffer == null)
        return C.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = C.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme(scheme, start, end) {
      var i, containsUpperCase, codeUnit, t1,
        _s67_ = string$.x60null_t;
      if (start === end)
        return "";
      if (!P._Uri__isAlphabeticCharacter(C.JSString_methods._codeUnitAt$1(scheme, start))) {
        P._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
        H.ReachabilityError$(_s67_);
      }
      for (i = start, containsUpperCase = false; i < end; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(scheme, i);
        if (codeUnit < 128) {
          t1 = codeUnit >>> 4;
          if (t1 >= 8)
            return H.ioore(C.List_JYB, t1);
          t1 = (C.List_JYB[t1] & 1 << (codeUnit & 15)) !== 0;
        } else
          t1 = false;
        if (!t1) {
          P._Uri__fail(scheme, i, "Illegal scheme character");
          H.ReachabilityError$(_s67_);
        }
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = C.JSString_methods.substring$2(scheme, start, end);
      return P._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return P._Uri__normalizeOrSubstring(userInfo, start, end, C.List_gRj, false);
    },
    _Uri__makePath(path, start, end, pathSegments, scheme, hasAuthority) {
      var t1, result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority;
      if (path == null) {
        if (pathSegments == null)
          return isFile ? "/" : "";
        t1 = H._arrayInstanceType(pathSegments);
        result = new H.MappedListIterable(pathSegments, t1._eval$1("String(1)")._as(new P._Uri__makePath_closure()), t1._eval$1("MappedListIterable<1,String>")).join$1(0, "/");
      } else if (pathSegments != null)
        throw H.wrapException(P.ArgumentError$("Both path and pathSegments specified", null));
      else
        result = P._Uri__normalizeOrSubstring(path, start, end, C.List_qg4, true);
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !C.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return P._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !C.JSString_methods.startsWith$1(path, "/"))
        return P._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return P._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery(query, start, end, queryParameters) {
      if (query != null)
        return P._Uri__normalizeOrSubstring(query, start, end, C.List_CVk, true);
      return null;
    },
    _Uri__makeFragment(fragment, start, end) {
      if (fragment == null)
        return null;
      return P._Uri__normalizeOrSubstring(fragment, start, end, C.List_CVk, true);
    },
    _Uri__normalizeEscape(source, index, lowerCase) {
      var firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2;
      if (t1 >= source.length)
        return "%";
      firstDigit = C.JSString_methods.codeUnitAt$1(source, index + 1);
      secondDigit = C.JSString_methods.codeUnitAt$1(source, t1);
      firstDigitValue = H.hexDigitValue(firstDigit);
      secondDigitValue = H.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127) {
        t1 = C.JSInt_methods._shrOtherPositive$1(value, 4);
        if (t1 >= 8)
          return H.ioore(C.List_nxB, t1);
        t1 = (C.List_nxB[t1] & 1 << (value & 15)) !== 0;
      } else
        t1 = false;
      if (t1)
        return H.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return C.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return null;
    },
    _Uri__escapeChar(char) {
      var codeUnits, flag, encodedBytes, t1, index, byte, t2, t3,
        _s16_ = "0123456789ABCDEF";
      if (char < 128) {
        codeUnits = new Uint8Array(3);
        codeUnits[0] = 37;
        codeUnits[1] = C.JSString_methods._codeUnitAt$1(_s16_, char >>> 4);
        codeUnits[2] = C.JSString_methods._codeUnitAt$1(_s16_, char & 15);
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = 3 * encodedBytes;
        codeUnits = new Uint8Array(t1);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = C.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          if (index >= t1)
            return H.ioore(codeUnits, index);
          codeUnits[index] = 37;
          t2 = index + 1;
          t3 = C.JSString_methods._codeUnitAt$1(_s16_, byte >>> 4);
          if (t2 >= t1)
            return H.ioore(codeUnits, t2);
          codeUnits[t2] = t3;
          t3 = index + 2;
          t2 = C.JSString_methods._codeUnitAt$1(_s16_, byte & 15);
          if (t3 >= t1)
            return H.ioore(codeUnits, t3);
          codeUnits[t3] = t2;
          index += 3;
        }
      }
      return P.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring(component, start, end, charTable, escapeDelimiters) {
      var t1 = P._Uri__normalize(component, start, end, charTable, escapeDelimiters);
      return t1 == null ? C.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize(component, start, end, charTable, escapeDelimiters) {
      var t1, t2, index, sectionStart, buffer, char, t3, replacement, sourceLength, tail, _null = null;
      for (t1 = !escapeDelimiters, t2 = J.getInterceptor$s(component), index = start, sectionStart = index, buffer = _null; index < end;) {
        char = t2.codeUnitAt$1(component, index);
        if (char < 127) {
          t3 = char >>> 4;
          if (t3 >= 8)
            return H.ioore(charTable, t3);
          t3 = (charTable[t3] & 1 << (char & 15)) !== 0;
        } else
          t3 = false;
        if (t3)
          ++index;
        else {
          if (char === 37) {
            replacement = P._Uri__normalizeEscape(component, index, false);
            if (replacement == null) {
              index += 3;
              continue;
            }
            if ("%" === replacement) {
              replacement = "%25";
              sourceLength = 1;
            } else
              sourceLength = 3;
          } else {
            if (t1)
              if (char <= 93) {
                t3 = char >>> 4;
                if (t3 >= 8)
                  return H.ioore(C.List_2Vk, t3);
                t3 = (C.List_2Vk[t3] & 1 << (char & 15)) !== 0;
              } else
                t3 = false;
            else
              t3 = false;
            if (t3) {
              P._Uri__fail(component, index, "Invalid character");
              H.ReachabilityError$(string$.x60null_t);
              sourceLength = _null;
              replacement = sourceLength;
            } else {
              if ((char & 64512) === 55296) {
                t3 = index + 1;
                if (t3 < end) {
                  tail = C.JSString_methods.codeUnitAt$1(component, t3);
                  if ((tail & 64512) === 56320) {
                    char = (char & 1023) << 10 | tail & 1023 | 65536;
                    sourceLength = 2;
                  } else
                    sourceLength = 1;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              replacement = P._Uri__escapeChar(char);
            }
          }
          if (buffer == null) {
            buffer = new P.StringBuffer("");
            t3 = buffer;
          } else
            t3 = buffer;
          t3._contents += C.JSString_methods.substring$2(component, sectionStart, index);
          t3._contents += H.S(replacement);
          if (typeof sourceLength !== "number")
            return H.iae(sourceLength);
          index += sourceLength;
          sectionStart = index;
        }
      }
      if (buffer == null)
        return _null;
      if (sectionStart < end)
        buffer._contents += t2.substring$2(component, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments(path) {
      if (C.JSString_methods.startsWith$1(path, "."))
        return true;
      return C.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments(path) {
      var output, t1, t2, appendSlash, _i, segment, t3;
      if (!P._Uri__mayContainDotSegments(path))
        return path;
      output = H._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (J.$eq$(segment, "..")) {
          t3 = output.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return H.ioore(output, -1);
            output.pop();
            if (output.length === 0)
              C.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else if ("." === segment)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      if (appendSlash)
        C.JSArray_methods.add$1(output, "");
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!P._Uri__mayContainDotSegments(path))
        return !allowScheme ? P._Uri__escapeScheme(path) : path;
      output = H._setArrayType([], type$.JSArray_String);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment)
          if (output.length !== 0 && C.JSArray_methods.get$last(output) !== "..") {
            if (0 >= output.length)
              return H.ioore(output, -1);
            output.pop();
            appendSlash = true;
          } else {
            C.JSArray_methods.add$1(output, "..");
            appendSlash = false;
          }
        else if ("." === segment)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        if (t1 === 1) {
          if (0 >= t1)
            return H.ioore(output, 0);
          t1 = output[0].length === 0;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || C.JSArray_methods.get$last(output) === "..")
        C.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return H.ioore(output, 0);
        C.JSArray_methods.$indexSet(output, 0, P._Uri__escapeScheme(output[0]));
      }
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme(path) {
      var i, char, t2,
        t1 = path.length;
      if (t1 >= 2 && P._Uri__isAlphabeticCharacter(J._codeUnitAt$1$s(path, 0)))
        for (i = 1; i < t1; ++i) {
          char = C.JSString_methods._codeUnitAt$1(path, i);
          if (char === 58)
            return C.JSString_methods.substring$2(path, 0, i) + "%3A" + C.JSString_methods.substring$1(path, i + 1);
          if (char <= 127) {
            t2 = char >>> 4;
            if (t2 >= 8)
              return H.ioore(C.List_JYB, t2);
            t2 = (C.List_JYB[t2] & 1 << (char & 15)) === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__packageNameEnd(uri, path) {
      if (uri.isScheme$1("package") && uri._host == null)
        return P._skipPackageNameChars(path, 0, path.length);
      return -1;
    },
    _Uri__toWindowsFilePath(uri) {
      var hasDriveLetter, t2, host,
        segments = uri.get$pathSegments(),
        t1 = J.getInterceptor$asx(segments);
      if (t1.get$length(segments) > 0 && J.get$length$asx(t1.$index(segments, 0)) === 2 && J.codeUnitAt$1$s(t1.$index(segments, 0), 1) === 58) {
        P._Uri__checkWindowsDriveLetter(J.codeUnitAt$1$s(t1.$index(segments, 0), 0), false);
        P._Uri__checkWindowsPathReservedCharacters(segments, false, 1);
        hasDriveLetter = true;
      } else {
        P._Uri__checkWindowsPathReservedCharacters(segments, false, 0);
        hasDriveLetter = false;
      }
      t2 = uri.get$hasAbsolutePath() && !hasDriveLetter ? "\\" : "";
      if (uri.get$hasAuthority()) {
        host = uri.get$host(uri);
        if (host.length !== 0)
          t2 = t2 + "\\" + host + "\\";
      }
      t2 = P.StringBuffer__writeAll(t2, segments, "\\");
      t1 = hasDriveLetter && t1.get$length(segments) === 1 ? t2 + "\\" : t2;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__hexCharPairToByte(s, pos) {
      var byte, i, charCode;
      for (byte = 0, i = 0; i < 2; ++i) {
        charCode = C.JSString_methods.codeUnitAt$1(s, pos + i);
        if (48 <= charCode && charCode <= 57)
          byte = byte * 16 + charCode - 48;
        else {
          charCode |= 32;
          if (97 <= charCode && charCode <= 102)
            byte = byte * 16 + charCode - 87;
          else
            throw H.wrapException(P.ArgumentError$("Invalid URL encoding", null));
        }
      }
      return byte;
    },
    _Uri__uriDecode(text, start, end, encoding, plusToSpace) {
      var simple, codeUnit, t2, bytes,
        t1 = J.getInterceptor$s(text),
        i = start;
      while (true) {
        if (!(i < end)) {
          simple = true;
          break;
        }
        codeUnit = t1.codeUnitAt$1(text, i);
        if (codeUnit <= 127)
          if (codeUnit !== 37)
            t2 = false;
          else
            t2 = true;
        else
          t2 = true;
        if (t2) {
          simple = false;
          break;
        }
        ++i;
      }
      if (simple) {
        if (C.C_Utf8Codec !== encoding)
          t2 = false;
        else
          t2 = true;
        if (t2)
          return t1.substring$2(text, start, end);
        else
          bytes = new H.CodeUnits(t1.substring$2(text, start, end));
      } else {
        bytes = H._setArrayType([], type$.JSArray_int);
        for (i = start; i < end; ++i) {
          codeUnit = t1.codeUnitAt$1(text, i);
          if (codeUnit > 127)
            throw H.wrapException(P.ArgumentError$("Illegal percent encoding in URI", null));
          if (codeUnit === 37) {
            if (i + 3 > text.length)
              throw H.wrapException(P.ArgumentError$("Truncated URI", null));
            C.JSArray_methods.add$1(bytes, P._Uri__hexCharPairToByte(text, i + 1));
            i += 2;
          } else
            C.JSArray_methods.add$1(bytes, codeUnit);
        }
      }
      type$.List_int._as(bytes);
      return C.Utf8Decoder_false.convert$1(bytes);
    },
    _Uri__isAlphabeticCharacter(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__parse(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = H._setArrayType([start - 1], type$.JSArray_int);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = C.JSString_methods._codeUnitAt$1(text, i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw H.wrapException(P.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw H.wrapException(P.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        C.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          char = C.JSString_methods._codeUnitAt$1(text, i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          C.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = C.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !C.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw H.wrapException(P.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      C.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = C.C_Base64Codec.normalize$3(text, t2, t1);
      else {
        data = P._Uri__normalize(text, t2, t1, C.List_CVk, true);
        if (data != null)
          text = C.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new P.UriData(text, indices, sourceUri);
    },
    _createTables() {
      var _i, t1, t2, t3, t4, t5,
        _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "?", _s1_3 = "#",
        tables = H._setArrayType(new Array(22), type$.JSArray_Uint8List);
      for (_i = 0; _i < 22; ++_i)
        tables[_i] = new Uint8Array(96);
      t1 = new P._createTables_build(tables);
      t2 = new P._createTables_setChars();
      t3 = new P._createTables_setRange();
      t4 = type$.Uint8List;
      t5 = t4._as(t1.call$2(0, 225));
      t2.call$3(t5, _s77_, 1);
      t2.call$3(t5, _s1_, 14);
      t2.call$3(t5, _s1_0, 34);
      t2.call$3(t5, _s1_1, 3);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(14, 225));
      t2.call$3(t5, _s77_, 1);
      t2.call$3(t5, _s1_, 15);
      t2.call$3(t5, _s1_0, 34);
      t2.call$3(t5, _s1_1, 234);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(15, 225));
      t2.call$3(t5, _s77_, 1);
      t2.call$3(t5, "%", 225);
      t2.call$3(t5, _s1_0, 34);
      t2.call$3(t5, _s1_1, 9);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(1, 225));
      t2.call$3(t5, _s77_, 1);
      t2.call$3(t5, _s1_0, 34);
      t2.call$3(t5, _s1_1, 10);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(2, 235));
      t2.call$3(t5, _s77_, 139);
      t2.call$3(t5, _s1_1, 131);
      t2.call$3(t5, _s1_, 146);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(3, 235));
      t2.call$3(t5, _s77_, 11);
      t2.call$3(t5, _s1_1, 68);
      t2.call$3(t5, _s1_, 18);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(4, 229));
      t2.call$3(t5, _s77_, 5);
      t3.call$3(t5, "AZ", 229);
      t2.call$3(t5, _s1_0, 102);
      t2.call$3(t5, "@", 68);
      t2.call$3(t5, "[", 232);
      t2.call$3(t5, _s1_1, 138);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(5, 229));
      t2.call$3(t5, _s77_, 5);
      t3.call$3(t5, "AZ", 229);
      t2.call$3(t5, _s1_0, 102);
      t2.call$3(t5, "@", 68);
      t2.call$3(t5, _s1_1, 138);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(6, 231));
      t3.call$3(t5, "19", 7);
      t2.call$3(t5, "@", 68);
      t2.call$3(t5, _s1_1, 138);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(7, 231));
      t3.call$3(t5, "09", 7);
      t2.call$3(t5, "@", 68);
      t2.call$3(t5, _s1_1, 138);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t2.call$3(t4._as(t1.call$2(8, 8)), "]", 5);
      t5 = t4._as(t1.call$2(9, 235));
      t2.call$3(t5, _s77_, 11);
      t2.call$3(t5, _s1_, 16);
      t2.call$3(t5, _s1_1, 234);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(16, 235));
      t2.call$3(t5, _s77_, 11);
      t2.call$3(t5, _s1_, 17);
      t2.call$3(t5, _s1_1, 234);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(17, 235));
      t2.call$3(t5, _s77_, 11);
      t2.call$3(t5, _s1_1, 9);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(10, 235));
      t2.call$3(t5, _s77_, 11);
      t2.call$3(t5, _s1_, 18);
      t2.call$3(t5, _s1_1, 234);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(18, 235));
      t2.call$3(t5, _s77_, 11);
      t2.call$3(t5, _s1_, 19);
      t2.call$3(t5, _s1_1, 234);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(19, 235));
      t2.call$3(t5, _s77_, 11);
      t2.call$3(t5, _s1_1, 234);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(11, 235));
      t2.call$3(t5, _s77_, 11);
      t2.call$3(t5, _s1_1, 10);
      t2.call$3(t5, _s1_2, 172);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(12, 236));
      t2.call$3(t5, _s77_, 12);
      t2.call$3(t5, _s1_2, 12);
      t2.call$3(t5, _s1_3, 205);
      t5 = t4._as(t1.call$2(13, 237));
      t2.call$3(t5, _s77_, 13);
      t2.call$3(t5, _s1_2, 13);
      t3.call$3(t4._as(t1.call$2(20, 245)), "az", 21);
      t1 = t4._as(t1.call$2(21, 245));
      t3.call$3(t1, "az", 21);
      t3.call$3(t1, "09", 21);
      t2.call$3(t1, "+-.", 21);
      return tables;
    },
    _scan(uri, start, end, state, indices) {
      var i, table, char, transition,
        tables = $.$get$_scannerTables();
      for (i = start; i < end; ++i) {
        if (state < 0 || state >= tables.length)
          return H.ioore(tables, state);
        table = tables[state];
        char = C.JSString_methods._codeUnitAt$1(uri, i) ^ 96;
        transition = table[char > 95 ? 31 : char];
        state = transition & 31;
        C.JSArray_methods.$indexSet(indices, transition >>> 5, i);
      }
      return state;
    },
    _SimpleUri__packageNameEnd(uri) {
      if (uri._schemeEnd === 7 && C.JSString_methods.startsWith$1(uri._uri, "package") && uri._hostStart <= 0)
        return P._skipPackageNameChars(uri._uri, uri._pathStart, uri._queryStart);
      return -1;
    },
    _skipPackageNameChars(source, start, end) {
      var i, dots, char;
      for (i = start, dots = 0; i < end; ++i) {
        char = C.JSString_methods.codeUnitAt$1(source, i);
        if (char === 47)
          return dots !== 0 ? i : -1;
        if (char === 37 || char === 58)
          return -1;
        dots |= char ^ 46;
      }
      return -1;
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    TypeError: function TypeError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    MapEntry: function MapEntry(t0, t1, t2) {
      this.key = t0;
      this.value = t1;
      this.$ti = t2;
    },
    Null: function Null() {
    },
    Object: function Object() {
    },
    _StringStackTrace: function _StringStackTrace() {
    },
    Runes: function Runes(t0) {
      this.string = t0;
    },
    RuneIterator: function RuneIterator(t0) {
      var _ = this;
      _.string = t0;
      _._nextPosition = _._position = 0;
      _._currentCodePoint = -1;
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _.___Uri_hashCode = _.___Uri_pathSegments = _.___Uri__text = $;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure() {
    },
    UriData: function UriData(t0, t1, t2) {
      this._core$_text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._data = t0;
      _.scheme = t1;
      _._userInfo = t2;
      _._host = t3;
      _._port = t4;
      _.path = t5;
      _._query = t6;
      _._fragment = t7;
      _.___Uri_hashCode = _.___Uri_pathSegments = _.___Uri__text = $;
    },
    SvgElement: function SvgElement() {
    },
    max(a, b, $T) {
      H.checkTypeBound($T, type$.num, "T", "max");
      $T._as(a);
      $T._as(b);
      return Math.max(H.checkNum(a), H.checkNum(b));
    }
  },
  Q = {LoopState: function LoopState(t0) {
      this._loop_state$_name = t0;
    }, ParameterKind: function ParameterKind(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.ordinal = t1;
      _.isOptionalPositional = t2;
      _.isNamed = t3;
    }, CopyOnWriteList: function CopyOnWriteList(t0, t1, t2) {
      var _ = this;
      _._copyBeforeWrite = true;
      _._growable = t0;
      _._copy_on_write_list$_list = t1;
      _.$ti = t2;
    },
    Chunk$dummy() {
      return new Q.Chunk("(dummy)", H._setArrayType([], type$.JSArray_Span));
    },
    Selection: function Selection() {
    },
    Chunk: function Chunk(t0, t1) {
      var _ = this;
      _._text = t0;
      _._isDouble = _._rule = _._chunk$_block = _._chunk$_nesting = _._indent = null;
      _._spaceWhenUnsplit = _._flushLeft = false;
      _.__Chunk__canDivide = $;
      _.spans = t1;
      _._chunk$_selectionEnd = _._chunk$_selectionStart = null;
    },
    ChunkBlock: function ChunkBlock(t0, t1, t2) {
      this.argument = t0;
      this.indent = t1;
      this.chunks = t2;
    },
    OpenSpan: function OpenSpan(t0, t1) {
      this.start = t0;
      this.cost = t1;
    },
    Span: function Span(t0, t1) {
      this.cost = t0;
      this.id = t1;
    },
    CommentType: function CommentType(t0) {
      this._chunk$_name = t0;
    },
    SourceComment: function SourceComment(t0, t1, t2, t3) {
      var _ = this;
      _.text = t0;
      _.type = t1;
      _.linesBefore = t2;
      _.flushLeft = t3;
      _._chunk$_selectionEnd = _._chunk$_selectionStart = null;
    },
    CombinatorRule$() {
      var t1 = H._setArrayType([], type$.JSArray_Set_Chunk),
        t2 = $.FastHash__nextId + 1 & 268435455;
      $.FastHash__nextId = t2;
      return new Q.CombinatorRule(P.LinkedHashSet_LinkedHashSet$_empty(type$.Chunk), t1, 1, P.LinkedHashSet_LinkedHashSet$_empty(type$.Rule), t2);
    },
    CombinatorRule: function CombinatorRule(t0, t1, t2, t3, t4) {
      var _ = this;
      _._combinator$_combinators = t0;
      _._names = t1;
      _._rule$_cost = t2;
      _.index = null;
      _._isHardened = false;
      _._implied = t3;
      _._allConstrainedRules = _._constrainedRules = null;
      _.id = t4;
    },
    SourceVisitor_looksLikeStaticCall(node) {
      var t1, t2, target;
      if (!type$.MethodInvocation._is(node))
        return false;
      t1 = node._ast$_target;
      if (t1 == null)
        return false;
      t2 = type$.SimpleIdentifier;
      if (t2._is(t1) && Q.SourceVisitor__looksLikeClassName(node._methodName.token.get$lexeme()))
        return true;
      target = node._ast$_target;
      if (type$.PrefixedIdentifier._is(target))
        target = target._identifier;
      return t2._is(target) && Q.SourceVisitor__looksLikeClassName(target.token.get$lexeme());
    },
    SourceVisitor__looksLikeClassName($name) {
      var firstChar, start, t1, i, char;
      if ($name === "bool")
        return true;
      if ($name === "double")
        return true;
      if ($name === "int")
        return true;
      if ($name === "num")
        return true;
      firstChar = J._codeUnitAt$1$s($name, 0);
      if (firstChar === 95) {
        if ($name.length === 1)
          return false;
        firstChar = C.JSString_methods._codeUnitAt$1($name, 1);
        start = 2;
      } else
        start = 1;
      if (firstChar < 65 || firstChar > 90)
        return false;
      for (t1 = $name.length, i = start; i < t1; ++i) {
        char = C.JSString_methods._codeUnitAt$1($name, i);
        if (char >= 97 && char <= 122)
          return true;
      }
      return false;
    },
    SourceVisitor__synthesizeToken(type, operator) {
      var t1 = L.SimpleToken$(type, operator.offset, operator._precedingComment);
      t1.previous = operator.previous;
      t1.next = operator.next;
      return t1;
    },
    SourceVisitor__realTargetOf(expression) {
      var t1;
      if (type$.PropertyAccess._is(expression))
        return expression.get$realTarget();
      else if (type$.MethodInvocation._is(expression)) {
        t1 = expression.get$realTarget();
        t1.toString;
        return t1;
      } else if (type$.IndexExpression._is(expression))
        return expression.get$realTarget();
      throw H.wrapException(P.UnimplementedError$("Unhandled " + J.get$runtimeType$(expression).toString$0(0) + "(" + H.S(expression) + ")"));
    },
    SourceVisitor__insertCascadeTargetIntoExpression(expression, cascadeTarget) {
      var expressionTarget, t1, t2, t3, t4, t5, t6, question;
      if (expression == cascadeTarget)
        return cascadeTarget;
      expressionTarget = Q.SourceVisitor__realTargetOf(expression);
      if (type$.PropertyAccess._is(expression)) {
        t1 = $.$get$astFactory0();
        t2 = Q.SourceVisitor__insertCascadeTargetIntoExpression(expressionTarget, cascadeTarget);
        t3 = expression.operator;
        if (expressionTarget == cascadeTarget)
          t3 = Q.SourceVisitor__synthesizeToken(C.TokenType_wCI, t3);
        t4 = expression._propertyName;
        t1.toString;
        return U.PropertyAccessImpl$(t2, t3, t4);
      } else if (type$.MethodInvocation._is(expression)) {
        t1 = $.$get$astFactory0();
        t2 = Q.SourceVisitor__insertCascadeTargetIntoExpression(expressionTarget, cascadeTarget);
        t3 = expression.operator;
        if (expressionTarget == cascadeTarget) {
          t3.toString;
          t3 = Q.SourceVisitor__synthesizeToken(C.TokenType_wCI, t3);
        }
        t4 = expression._methodName;
        t5 = expression._typeArguments;
        t6 = expression._argumentList;
        t1.toString;
        return U.MethodInvocationImpl$(t2, t3, t4, t5, t6);
      } else if (type$.IndexExpression._is(expression)) {
        question = expression.question;
        t1 = expression.period;
        if ((t1 == null ? null : t1.type) === C.TokenType_O1S) {
          t1.toString;
          question = Q.SourceVisitor__synthesizeToken(C.TokenType_V43, t1);
        }
        t1 = $.$get$astFactory0();
        t2 = Q.SourceVisitor__insertCascadeTargetIntoExpression(expressionTarget, cascadeTarget);
        t3 = expression.leftBracket;
        t4 = expression._ast$_index;
        t5 = expression.rightBracket;
        t1.toString;
        return U.IndexExpressionImpl$forTarget(t2, question, t3, t4, t5);
      }
      throw H.wrapException(P.UnimplementedError$("Unhandled " + J.get$runtimeType$(expression).toString$0(0) + "(" + H.S(expression) + ")"));
    },
    SourceVisitor: function SourceVisitor(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.builder = t0;
      _._source_visitor$_formatter = t1;
      _._lineInfo = t2;
      _._source_visitor$_source = t3;
      _._passedSelectionEnd = _._passedSelectionStart = false;
      _._source_visitor$_selectionEnd = null;
      _._constNesting = 0;
      _._insideNewTypedefFix = false;
      _._collectionSplits = t4;
      _._metadataRules = t5;
      _._blockRules = t6;
      _._blockPreviousChunks = t7;
      _._suppressPrecedingCommentsAndNewLines = t8;
    },
    SourceVisitor_visitAssertStatement_closure: function SourceVisitor_visitAssertStatement_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitBinaryExpression_traverse: function SourceVisitor_visitBinaryExpression_traverse(t0, t1) {
      this.$this = t0;
      this.precedence = t1;
    },
    SourceVisitor_visitBreakStatement_closure: function SourceVisitor_visitBreakStatement_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitClassTypeAlias_closure: function SourceVisitor_visitClassTypeAlias_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitConstructorDeclaration_closure: function SourceVisitor_visitConstructorDeclaration_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitContinueStatement_closure: function SourceVisitor_visitContinueStatement_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitExportDirective_closure: function SourceVisitor_visitExportDirective_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitExpressionStatement_closure: function SourceVisitor_visitExpressionStatement_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitFieldDeclaration_closure: function SourceVisitor_visitFieldDeclaration_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitFieldFormalParameter_closure: function SourceVisitor_visitFieldFormalParameter_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitFormalParameterList_closure: function SourceVisitor_visitFormalParameterList_closure() {
    },
    SourceVisitor_visitForPartsWithDeclarations_closure: function SourceVisitor_visitForPartsWithDeclarations_closure(t0) {
      this.$this = t0;
    },
    SourceVisitor_visitFunctionTypeAlias_closure: function SourceVisitor_visitFunctionTypeAlias_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitFunctionTypeAlias_closure0: function SourceVisitor_visitFunctionTypeAlias_closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitFunctionTypedFormalParameter_closure: function SourceVisitor_visitFunctionTypedFormalParameter_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitGenericTypeAlias_closure: function SourceVisitor_visitGenericTypeAlias_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitIfElement_visitChild: function SourceVisitor_visitIfElement_visitChild(t0, t1) {
      this.$this = t0;
      this.spreadBrackets = t1;
    },
    SourceVisitor_visitIfStatement_visitClause: function SourceVisitor_visitIfStatement_visitClause(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitImportDirective_closure: function SourceVisitor_visitImportDirective_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitLibraryDirective_closure: function SourceVisitor_visitLibraryDirective_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitNativeFunctionBody_closure: function SourceVisitor_visitNativeFunctionBody_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitPartDirective_closure: function SourceVisitor_visitPartDirective_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitPartOfDirective_closure: function SourceVisitor_visitPartOfDirective_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitReturnStatement_closure: function SourceVisitor_visitReturnStatement_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitSimpleFormalParameter_closure: function SourceVisitor_visitSimpleFormalParameter_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitSimpleFormalParameter__closure: function SourceVisitor_visitSimpleFormalParameter__closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitSwitchStatement_closure: function SourceVisitor_visitSwitchStatement_closure(t0) {
      this.$this = t0;
    },
    SourceVisitor_visitTopLevelVariableDeclaration_closure: function SourceVisitor_visitTopLevelVariableDeclaration_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitTypeParameter_closure: function SourceVisitor_visitTypeParameter_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitVariableDeclarationStatement_closure: function SourceVisitor_visitVariableDeclarationStatement_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitYieldStatement_closure: function SourceVisitor_visitYieldStatement_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    },
    SourceVisitor_visitParameterMetadata_closure: function SourceVisitor_visitParameterMetadata_closure(t0) {
      this.$this = t0;
    },
    SourceVisitor__visitMemberDeclaration_closure: function SourceVisitor__visitMemberDeclaration_closure(t0, t1) {
      this.$this = t0;
      this.$function = t1;
    },
    SourceVisitor__containsLineComments_hasLineCommentBefore: function SourceVisitor__containsLineComments_hasLineCommentBefore() {
    },
    SourceVisitor__visitCombinator_closure: function SourceVisitor__visitCombinator_closure(t0, t1) {
      this.$this = t0;
      this.rule = t1;
    },
    SourceVisitor__endBody_closure: function SourceVisitor__endBody_closure(t0, t1) {
      this.$this = t0;
      this.space = t1;
    },
    StyleFix: function StyleFix(t0) {
      this.name = t0;
    }
  },
  R = {ForCondition: function ForCondition(t0, t1) {
      this._inStyle = false;
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    }, ForSpread: function ForSpread(t0, t1) {
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    }, ForInSpread: function ForInSpread(t0, t1) {
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    }, ForEntry: function ForEntry(t0, t1) {
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    }, ForInEntry: function ForInEntry(t0, t1) {
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    }, ForComplete: function ForComplete(t0, t1) {
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    }, ForInComplete: function ForInComplete(t0, t1) {
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    }, IfCondition: function IfCondition(t0, t1) {
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    }, IfSpread: function IfSpread(t0, t1) {
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    }, IfEntry: function IfEntry(t0, t1) {
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    }, IfComplete: function IfComplete(t0, t1) {
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    }, IfElse: function IfElse(t0, t1) {
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    }, ElseSpread: function ElseSpread(t0, t1) {
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    }, ElseEntry: function ElseEntry(t0, t1) {
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    }, IfElseComplete: function IfElseComplete(t0, t1) {
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    }, SpreadOperator: function SpreadOperator(t0, t1) {
      this.hasEntry = t0;
      this.ifConditionDelta = t1;
    }, Nested: function Nested(t0, t1, t2, t3) {
      var _ = this;
      _.nestedStep = t0;
      _.lastStep = t1;
      _.hasEntry = t2;
      _.ifConditionDelta = t3;
    }, ClassHeaderRecoveryListener: function ClassHeaderRecoveryListener(t0) {
      var _ = this;
      _.withKeyword = _.implementsKeyword = _.extendsKeyword = null;
      _.listener = t0;
      _.forwardErrors = true;
    }, ImportRecoveryListener: function ImportRecoveryListener(t0) {
      var _ = this;
      _.ifKeyword = _.deferredKeyword = _.asKeyword = null;
      _.hasCombinator = false;
      _.listener = t0;
      _.forwardErrors = true;
    }, MixinHeaderRecoveryListener: function MixinHeaderRecoveryListener(t0) {
      var _ = this;
      _.implementsKeyword = _.onKeyword = null;
      _.listener = t0;
      _.forwardErrors = true;
    }, TokenStreamRewriter: function TokenStreamRewriter() {
    }, TokenStreamRewriterImpl: function TokenStreamRewriterImpl() {
    }, NextTokenStreamChange: function NextTokenStreamChange(t0, t1, t2, t3, t4) {
      var _ = this;
      _.setOn = t0;
      _.setOnNext = t1;
      _.nextToken = t2;
      _.nextTokenPrevious = t3;
      _.nextTokenBeforeSynthetic = t4;
    }, EndGroupTokenStreamChange: function EndGroupTokenStreamChange(t0, t1) {
      this.setOn = t0;
      this.endGroup = t1;
    }, OffsetTokenStreamChange: function OffsetTokenStreamChange(t0, t1) {
      this.setOn = t0;
      this.offset = t1;
    }, PrecedingCommentsTokenStreamChange: function PrecedingCommentsTokenStreamChange(t0, t1) {
      this.setOn = t0;
      this.comment = t1;
    }, PreviousTokenStreamChange: function PreviousTokenStreamChange(t0, t1) {
      this.setOn = t0;
      this.previous = t1;
    }, UndoableTokenStreamRewriter: function UndoableTokenStreamRewriter(t0) {
      this._changes = t0;
    }},
  S = {DeclarationKind: function DeclarationKind(t0) {
      this._declaration_kind$_name = t0;
    },
    LineStarts__createInitialArray(numberOfBytesHint) {
      return new Uint16Array(14);
    },
    _isIdentifierChar(next, allowDollar) {
      var t1;
      if (!(97 <= next && next <= 122))
        if (!(65 <= next && next <= 90))
          if (!(48 <= next && next <= 57))
            if (next !== 95)
              t1 = next === 36 && allowDollar;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    AbstractScanner: function AbstractScanner() {
    },
    LineStarts: function LineStarts(t0) {
      this.array = t0;
      this.arrayLength = 0;
    },
    ScannerConfiguration: function ScannerConfiguration(t0, t1, t2) {
      this.enableExtensionMethods = t0;
      this.enableNonNullable = t1;
      this.enableTripleShift = t2;
    },
    _LineStarts_Object_ListMixin: function _LineStarts_Object_ListMixin() {
    },
    buildUnexpectedCharacterToken(character, charOffset) {
      var t1, _null = null;
      if (character < 31) {
        t1 = new S.AsciiControlCharacterToken(character, C.TokenType_uv8, charOffset, _null);
        t1._setCommentParent$1(_null);
        return t1;
      }
      switch (character) {
        case 65533:
          t1 = new S.EncodingErrorToken(C.TokenType_uv8, charOffset, _null);
          t1._setCommentParent$1(_null);
          return t1;
        case 160:
        case 5760:
        case 6158:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8203:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          t1 = new S.NonAsciiWhitespaceToken(character, C.TokenType_uv8, charOffset, _null);
          t1._setCommentParent$1(_null);
          return t1;
        default:
          t1 = new S.NonAsciiIdentifierToken(character, C.TokenType_uv8, charOffset, _null);
          t1._setCommentParent$1(_null);
          return t1;
      }
    },
    UnsupportedOperator$(token, charOffset) {
      var t1 = new S.UnsupportedOperator(token, C.TokenType_uv8, charOffset, null);
      t1._setCommentParent$1(null);
      return t1;
    },
    UnterminatedToken$(assertionMessage, charOffset, endOffset) {
      var t1 = new S.UnterminatedToken(assertionMessage, endOffset, C.TokenType_uv8, charOffset, null);
      t1._setCommentParent$1(null);
      return t1;
    },
    ErrorToken: function ErrorToken() {
    },
    EncodingErrorToken: function EncodingErrorToken(t0, t1, t2) {
      var _ = this;
      _.type = t0;
      _.offset = t1;
      _.next = _.previous = null;
      _._precedingComment = t2;
    },
    NonAsciiIdentifierToken: function NonAsciiIdentifierToken(t0, t1, t2, t3) {
      var _ = this;
      _.character = t0;
      _.type = t1;
      _.offset = t2;
      _.next = _.previous = null;
      _._precedingComment = t3;
    },
    NonAsciiWhitespaceToken: function NonAsciiWhitespaceToken(t0, t1, t2, t3) {
      var _ = this;
      _.character = t0;
      _.type = t1;
      _.offset = t2;
      _.next = _.previous = null;
      _._precedingComment = t3;
    },
    AsciiControlCharacterToken: function AsciiControlCharacterToken(t0, t1, t2, t3) {
      var _ = this;
      _.character = t0;
      _.type = t1;
      _.offset = t2;
      _.next = _.previous = null;
      _._precedingComment = t3;
    },
    UnsupportedOperator: function UnsupportedOperator(t0, t1, t2, t3) {
      var _ = this;
      _.token = t0;
      _.type = t1;
      _.offset = t2;
      _.next = _.previous = null;
      _._precedingComment = t3;
    },
    UnterminatedString: function UnterminatedString(t0, t1, t2, t3, t4) {
      var _ = this;
      _.start = t0;
      _.endOffset = t1;
      _.type = t2;
      _.offset = t3;
      _.next = _.previous = null;
      _._precedingComment = t4;
    },
    UnterminatedToken: function UnterminatedToken(t0, t1, t2, t3, t4) {
      var _ = this;
      _.assertionMessage = t0;
      _.endOffset = t1;
      _.type = t2;
      _.offset = t3;
      _.next = _.previous = null;
      _._precedingComment = t4;
    },
    UnmatchedToken: function UnmatchedToken(t0, t1, t2, t3) {
      var _ = this;
      _.begin = t0;
      _.type = t1;
      _.offset = t2;
      _.next = _.previous = null;
      _._precedingComment = t3;
    },
    Tuple2: function Tuple2(t0, t1, t2) {
      this.item1 = t0;
      this.item2 = t1;
      this.$ti = t2;
    }
  },
  T = {
    StringScanner$(string, configuration, includeComments, languageVersionChanged) {
      var t2, t3,
        t1 = string.length;
      t1 = t1 === 0 || C.JSString_methods.codeUnitAt$1(string, t1 - 1) !== 0 ? string + "\x00" : string;
      t2 = L.Token_Token$eof(-1, null);
      t3 = new S.LineStarts(S.LineStarts__createInitialArray(null));
      t3.add$1(0, 0);
      t3 = new T.StringScanner(t1, -1, includeComments, languageVersionChanged, t2, t3, C.C_Link, false);
      t3.AbstractScanner$4$numberOfBytesHint(configuration, includeComments, languageVersionChanged, null);
      return t3;
    },
    StringScanner$recoveryOptionScanner(copyFrom) {
      var t1 = new T.StringScanner(copyFrom.string, copyFrom.scanOffset, false, null, L.Token_Token$eof(-1, null), H._setArrayType([], type$.JSArray_int), C.C_Link, true);
      t1.AbstractScanner$recoveryOptionScanner$1(copyFrom);
      return t1;
    },
    StringScanner: function StringScanner(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.string = t0;
      _.scanOffset = t1;
      _.includeComments = t2;
      _.languageVersionChanged = t3;
      _._enableTripleShift = _._enableNonNullable = _._enableExtensionMethods = false;
      _.tokenStart = -1;
      _.tokens = t4;
      _.__AbstractScanner_errorTail = _.__AbstractScanner_tail = $;
      _.hasErrors = false;
      _.commentsTail = _.comments = null;
      _.lineStarts = t5;
      _.groupingStack = t6;
      _.inRecoveryOption = t7;
      _.recoveryCount = 0;
    },
    decodeExplicitFlags(flags) {
      var disabledFlags, t3,
        t1 = $.$get$_knownFeatures(),
        t2 = type$.bool,
        enabledFlags = P.List_List$filled(t1.get$length(t1), false, false, t2);
      t1 = $.$get$_knownFeatures();
      disabledFlags = P.List_List$filled(t1.get$length(t1), false, false, t2);
      for (t1 = T._flagStringsToMap(flags), t1 = t1.get$entries(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current();
        t3 = H.boolConversionCheck(t2.value);
        t2 = t2.key;
        if (t3)
          C.JSArray_methods.$indexSet(enabledFlags, t2, true);
        else
          C.JSArray_methods.$indexSet(disabledFlags, t2, true);
      }
      return new T.EnabledDisabledFlags(enabledFlags, disabledFlags);
    },
    experimentStatusToString(enableFlags) {
      var t1, t2, t3, t4,
        featuresInSet = H._setArrayType([], type$.JSArray_String);
      for (t1 = $.$get$_knownFeatures(), t1 = t1.get$values(t1), t1 = t1.get$iterator(t1), t2 = enableFlags.length; t1.moveNext$0();) {
        t3 = t1.get$current();
        t4 = t3.index;
        if (t4 >= t2)
          return H.ioore(enableFlags, t4);
        if (enableFlags[t4])
          C.JSArray_methods.add$1(featuresInSet, t3.enableString);
      }
      return "FeatureSet{" + C.JSArray_methods.join$1(featuresInSet, ", ") + "}";
    },
    restrictEnableFlagsToVersion(explicitDisabledFlags, explicitEnabledFlags, sdkLanguageVersion, version) {
      var t2, t3, t4, t5, t6, releaseVersion, experimentalReleaseVersion,
        t1 = $.$get$_knownFeatures(),
        decodedFlags = P.List_List$filled(t1.get$length(t1), false, false, type$.bool);
      for (t1 = $.$get$_knownFeatures(), t1 = t1.get$values(t1), t1 = t1.get$iterator(t1), t2 = explicitEnabledFlags.length, t3 = explicitDisabledFlags.length, t4 = J.getInterceptor$(version); t1.moveNext$0();) {
        t5 = t1.get$current();
        t6 = t5.index;
        if (t6 >= t3)
          return H.ioore(explicitDisabledFlags, t6);
        if (explicitDisabledFlags[t6]) {
          C.JSArray_methods.$indexSet(decodedFlags, t6, false);
          continue;
        }
        releaseVersion = t5.releaseVersion;
        if (releaseVersion != null && version.compareTo$1(0, releaseVersion) >= 0)
          C.JSArray_methods.$indexSet(decodedFlags, t6, true);
        if (t6 >= t2)
          return H.ioore(explicitEnabledFlags, t6);
        if (explicitEnabledFlags[t6]) {
          experimentalReleaseVersion = t5.experimentalReleaseVersion;
          if (experimentalReleaseVersion == null) {
            if (t4.$eq(version, sdkLanguageVersion))
              C.JSArray_methods.$indexSet(decodedFlags, t6, true);
          } else if (version.compareTo$1(0, experimentalReleaseVersion) >= 0 || version.compareTo$1(0, sdkLanguageVersion) >= 0)
            C.JSArray_methods.$indexSet(decodedFlags, t6, true);
        }
      }
      return decodedFlags;
    },
    _flagStringsToMap(flags) {
      var flagIndex, flag, feature, requestedValue,
        result = P.LinkedHashMap_LinkedHashMap$_empty(type$.int, type$.bool);
      for (flagIndex = 0; flagIndex < flags.length; ++flagIndex) {
        flag = flags[flagIndex];
        if (C.JSString_methods.startsWith$1(flag, "no-")) {
          feature = $.$get$_knownFeatures().$index(0, C.JSString_methods.substring$1(flag, 3));
          requestedValue = false;
        } else {
          feature = $.$get$_knownFeatures().$index(0, flag);
          requestedValue = true;
        }
        if (feature != null && !feature.isExpired)
          result.$indexSet(0, feature.index, requestedValue);
      }
      return result;
    },
    ExperimentalFeature$(documentation, enableString, experimentalReleaseVersion, index, isEnabledByDefault, isExpired, releaseVersion) {
      return new T.ExperimentalFeature(index, enableString, isExpired, experimentalReleaseVersion, releaseVersion);
    },
    EnabledDisabledFlags: function EnabledDisabledFlags(t0, t1) {
      this.enabled = t0;
      this.disabled = t1;
    },
    ExperimentalFeature: function ExperimentalFeature(t0, t1, t2, t3, t4) {
      var _ = this;
      _.index = t0;
      _.enableString = t1;
      _.isExpired = t2;
      _.experimentalReleaseVersion = t3;
      _.releaseVersion = t4;
    },
    Version$_(major, minor, patch, preRelease, build, _text) {
      var t1 = preRelease == null ? [] : T.Version__splitParts(preRelease),
        t2 = build == null ? [] : T.Version__splitParts(build);
      if (major < 0)
        H.throwExpression(P.ArgumentError$("Major version must be non-negative.", null));
      if (minor < 0)
        H.throwExpression(P.ArgumentError$("Minor version must be non-negative.", null));
      if (patch < 0)
        H.throwExpression(P.ArgumentError$("Patch version must be non-negative.", null));
      return new T.Version(major, minor, patch, t1, t2, _text);
    },
    Version_Version(major, minor, patch) {
      var text = "" + major + "." + minor + "." + patch;
      return T.Version$_(major, minor, patch, null, null, text);
    },
    Version_Version$parse(text) {
      var major, minor, patch, preRelease, build, t1, exception, _null = null,
        _s17_ = 'Could not parse "',
        match = $.$get$completeVersion().firstMatch$1(text);
      if (match == null)
        throw H.wrapException(P.FormatException$(_s17_ + text + '".', _null, _null));
      try {
        t1 = match._match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        t1 = t1[1];
        t1.toString;
        major = P.int_parse(t1, _null);
        t1 = match._match;
        if (2 >= t1.length)
          return H.ioore(t1, 2);
        t1 = t1[2];
        t1.toString;
        minor = P.int_parse(t1, _null);
        t1 = match._match;
        if (3 >= t1.length)
          return H.ioore(t1, 3);
        t1 = t1[3];
        t1.toString;
        patch = P.int_parse(t1, _null);
        t1 = match._match;
        if (5 >= t1.length)
          return H.ioore(t1, 5);
        preRelease = t1[5];
        t1 = match._match;
        if (8 >= t1.length)
          return H.ioore(t1, 8);
        build = t1[8];
        t1 = T.Version$_(major, minor, patch, preRelease, build, text);
        return t1;
      } catch (exception) {
        if (H.unwrapException(exception) instanceof P.FormatException)
          throw H.wrapException(P.FormatException$(_s17_ + text + '".', _null, _null));
        else
          throw exception;
      }
    },
    Version__splitParts(text) {
      var t1 = type$.MappedListIterable_String_Object;
      return P.List_List$of(new H.MappedListIterable(H._setArrayType(text.split("."), type$.JSArray_String), type$.Object_Function_String._as(new T.Version__splitParts_closure()), t1), true, t1._eval$1("ListIterable.E"));
    },
    Version: function Version(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.major = t0;
      _.minor = t1;
      _.patch = t2;
      _.preRelease = t3;
      _.build = t4;
      _._version$_text = t5;
    },
    Version__splitParts_closure: function Version__splitParts_closure() {
    }
  },
  U = {BlockKind: function BlockKind(t0, t1) {
      this.name = t0;
      this.useNameForMissingBlock = t1;
    }, Link: function Link(t0) {
      this.$ti = t0;
    },
    ArgumentListImpl$(leftParenthesis, $arguments, rightParenthesis) {
      var t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_Expression), type$.NodeListImpl_Expression),
        t2 = new U.ArgumentListImpl(leftParenthesis, t1, rightParenthesis);
      t1._initialize$2(t2, $arguments);
      return t2;
    },
    AssignmentExpressionImpl$(_leftHandSide, operator, _rightHandSide) {
      var _null = null,
        t1 = new U.AssignmentExpressionImpl(_leftHandSide, operator, _rightHandSide, _null, _null, _null, _null),
        t2 = type$.ExpressionImpl;
      t1._becomeParentOf$1$1(_leftHandSide, t2);
      t1._becomeParentOf$1$1(_rightHandSide, t2);
      return t1;
    },
    BlockFunctionBodyImpl$(keyword, star, _block) {
      var t1 = new U.BlockFunctionBodyImpl(keyword, star, _block);
      t1._becomeParentOf$1$1(_block, type$.BlockImpl);
      return t1;
    },
    BlockImpl$(leftBracket, statements, rightBracket) {
      var t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_Statement), type$.NodeListImpl_Statement),
        t2 = new U.BlockImpl(leftBracket, t1, rightBracket);
      t1._initialize$2(t2, statements);
      return t2;
    },
    CascadeExpressionImpl$(_target, cascadeSections) {
      var t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_Expression), type$.NodeListImpl_Expression),
        t2 = new U.CascadeExpressionImpl(_target, t1);
      t2._becomeParentOf$1$1(_target, type$.ExpressionImpl);
      t1._initialize$2(t2, cascadeSections);
      return t2;
    },
    DefaultFormalParameterImpl$(_parameter, kind, separator, _defaultValue) {
      var t1 = new U.DefaultFormalParameterImpl(_parameter, kind, separator, _defaultValue);
      t1._becomeParentOf$1$1(_parameter, type$.NormalFormalParameterImpl);
      t1._becomeParentOf$1$1(_defaultValue, type$.nullable_ExpressionImpl);
      return t1;
    },
    ExpressionStatementImpl$(_expression, semicolon) {
      var t1 = new U.ExpressionStatementImpl(_expression, semicolon);
      t1._becomeParentOf$1$1(_expression, type$.ExpressionImpl);
      return t1;
    },
    ForStatementImpl$(awaitKeyword, forKeyword, leftParenthesis, _forLoopParts, rightParenthesis, _body) {
      var t1 = new U.ForStatementImpl(awaitKeyword, forKeyword, leftParenthesis, _forLoopParts, rightParenthesis, _body);
      t1._becomeParentOf$1$1(_forLoopParts, type$.ForLoopPartsImpl);
      t1._becomeParentOf$1$1(_body, type$.StatementImpl);
      return t1;
    },
    FunctionDeclarationImpl$(comment, metadata, externalKeyword, _returnType, propertyKeyword, $name, _functionExpression) {
      var t1 = new U.FunctionDeclarationImpl(externalKeyword, _returnType, propertyKeyword, _functionExpression, $name, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t1.AnnotatedNodeImpl$2(comment, metadata);
      t1._becomeParentOf$1$1($name, type$.SimpleIdentifierImpl);
      t1._becomeParentOf$1$1(_returnType, type$.nullable_TypeAnnotationImpl);
      t1._becomeParentOf$1$1(_functionExpression, type$.FunctionExpressionImpl);
      return t1;
    },
    FunctionExpressionImpl$(_typeParameters, _parameters, _body) {
      var t1 = new U.FunctionExpressionImpl(_typeParameters, _parameters, _body);
      t1._becomeParentOf$1$1(_typeParameters, type$.nullable_TypeParameterListImpl);
      t1._becomeParentOf$1$1(_parameters, type$.nullable_FormalParameterListImpl);
      t1._becomeParentOf$1$1(_body, type$.FunctionBodyImpl);
      return t1;
    },
    FunctionExpressionInvocationImpl$(_function, typeArguments, argumentList) {
      var t1 = new U.FunctionExpressionInvocationImpl(_function, argumentList, typeArguments);
      t1.InvocationExpressionImpl$2(typeArguments, argumentList);
      t1._becomeParentOf$1$1(_function, type$.ExpressionImpl);
      return t1;
    },
    ImplementsClauseImpl$(implementsKeyword, interfaces) {
      var t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_TypeName), type$.NodeListImpl_TypeName),
        t2 = new U.ImplementsClauseImpl(implementsKeyword, t1);
      t1._initialize$2(t2, interfaces);
      return t2;
    },
    IndexExpressionImpl$forTarget(_target, question, leftBracket, _index, rightBracket) {
      var t1 = new U.IndexExpressionImpl(null, _target, question, leftBracket, _index, rightBracket);
      t1._becomeParentOf$1$1(_target, type$.nullable_ExpressionImpl);
      t1._becomeParentOf$1$1(_index, type$.ExpressionImpl);
      return t1;
    },
    LabelImpl$(_label, colon) {
      var t1 = new U.LabelImpl(_label, colon);
      t1._becomeParentOf$1$1(_label, type$.SimpleIdentifierImpl);
      return t1;
    },
    LibraryIdentifierImpl$(components) {
      var t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_SimpleIdentifier), type$.NodeListImpl_SimpleIdentifier),
        t2 = new U.LibraryIdentifierImpl(t1);
      t1._initialize$2(t2, components);
      return t2;
    },
    MapLiteralEntryImpl$(_key, separator, _value) {
      var t1 = new U.MapLiteralEntryImpl(_key, separator, _value),
        t2 = type$.ExpressionImpl;
      t1._becomeParentOf$1$1(_key, t2);
      t1._becomeParentOf$1$1(_value, t2);
      return t1;
    },
    MethodInvocationImpl$(_target, operator, _methodName, typeArguments, argumentList) {
      var t1 = new U.MethodInvocationImpl(_target, operator, _methodName, argumentList, typeArguments);
      t1.InvocationExpressionImpl$2(typeArguments, argumentList);
      t1._becomeParentOf$1$1(t1._ast$_target, type$.nullable_ExpressionImpl);
      t1._becomeParentOf$1$1(t1._methodName, type$.SimpleIdentifierImpl);
      return t1;
    },
    ParenthesizedExpressionImpl$(leftParenthesis, _expression, rightParenthesis) {
      var t1 = new U.ParenthesizedExpressionImpl(leftParenthesis, _expression, rightParenthesis);
      t1._becomeParentOf$1$1(_expression, type$.ExpressionImpl);
      return t1;
    },
    PostfixExpressionImpl$(_operand, operator) {
      var _null = null,
        t1 = new U.PostfixExpressionImpl(_operand, operator, _null, _null, _null, _null);
      t1._becomeParentOf$1$1(_operand, type$.ExpressionImpl);
      return t1;
    },
    PrefixedIdentifierImpl$(_prefix, period, _identifier) {
      var t1 = new U.PrefixedIdentifierImpl(_prefix, period, _identifier),
        t2 = type$.SimpleIdentifierImpl;
      t1._becomeParentOf$1$1(_prefix, t2);
      t1._becomeParentOf$1$1(_identifier, t2);
      return t1;
    },
    PrefixExpressionImpl$(operator, _operand) {
      var _null = null,
        t1 = new U.PrefixExpressionImpl(operator, _operand, _null, _null, _null, _null);
      t1._becomeParentOf$1$1(_operand, type$.ExpressionImpl);
      return t1;
    },
    PropertyAccessImpl$(_target, operator, _propertyName) {
      var t1 = new U.PropertyAccessImpl(_target, operator, _propertyName);
      t1._becomeParentOf$1$1(_target, type$.nullable_ExpressionImpl);
      t1._becomeParentOf$1$1(_propertyName, type$.SimpleIdentifierImpl);
      return t1;
    },
    RedirectingConstructorInvocationImpl$(thisKeyword, period, _constructorName, _argumentList) {
      var t1 = new U.RedirectingConstructorInvocationImpl(thisKeyword, period, _constructorName, _argumentList);
      t1._becomeParentOf$1$1(_constructorName, type$.nullable_SimpleIdentifierImpl);
      t1._becomeParentOf$1$1(_argumentList, type$.ArgumentListImpl);
      return t1;
    },
    SetOrMapLiteralImpl$(constKeyword, typeArguments, leftBracket, elements, rightBracket) {
      var t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_CollectionElement), type$.NodeListImpl_CollectionElement),
        t2 = new U.SetOrMapLiteralImpl(leftBracket, t1, rightBracket, constKeyword, typeArguments);
      t2._becomeParentOf$1$1(typeArguments, type$.nullable_TypeArgumentListImpl);
      t1._initialize$2(t2, elements);
      return t2;
    },
    StringLexemeHelper$(lexeme, isFirst, isLast) {
      var t3,
        t1 = new U.StringLexemeHelper(lexeme, true, isLast),
        t2 = J.startsWith$1$s(lexeme, "r");
      t1.isRaw = t2;
      if (t2) {
        t1.start = 1;
        t2 = 1;
      } else
        t2 = 0;
      if (Y.StringUtilities_startsWith3(lexeme, t2, 39, 39, 39)) {
        t1.isMultiline = true;
        t2 += 3;
        t1.start = t2;
        t2 = t1._trimInitialWhitespace$1(t2);
        t1.start = t2;
      } else if (Y.StringUtilities_startsWith3(lexeme, t2, 34, 34, 34)) {
        t1.isMultiline = true;
        t2 += 3;
        t1.start = t2;
        t2 = t1._trimInitialWhitespace$1(t2);
        t1.start = t2;
      } else {
        t3 = t2 < lexeme.length;
        if (t3 && C.JSString_methods._codeUnitAt$1(lexeme, t2) === 39) {
          ++t2;
          t1.start = t2;
        } else if (t3 && C.JSString_methods._codeUnitAt$1(lexeme, t2) === 34) {
          ++t2;
          t1.start = t2;
        }
      }
      t3 = lexeme.length;
      t1.end = t3;
      if (isLast) {
        if (t2 + 3 <= t3)
          t2 = Y.StringUtilities_endsWith3(lexeme, 34, 34, 34) || Y.StringUtilities_endsWith3(lexeme, 39, 39, 39);
        else
          t2 = false;
        if (t2)
          t1.end -= 3;
        else {
          if (t1.start + 1 <= t1.end)
            t2 = Y.StringUtilities_endsWithChar(lexeme, 34) || Y.StringUtilities_endsWithChar(lexeme, 39);
          else
            t2 = false;
          if (t2)
            --t1.end;
        }
      }
      return t1;
    },
    SuperConstructorInvocationImpl$(superKeyword, period, _constructorName, _argumentList) {
      var t1 = new U.SuperConstructorInvocationImpl(superKeyword, period, _constructorName, _argumentList);
      t1._becomeParentOf$1$1(_constructorName, type$.nullable_SimpleIdentifierImpl);
      t1._becomeParentOf$1$1(_argumentList, type$.ArgumentListImpl);
      return t1;
    },
    TypeNameImpl$(_name, _typeArguments, question) {
      var t1 = new U.TypeNameImpl(_name, _typeArguments, question);
      t1._becomeParentOf$1$1(_name, type$.IdentifierImpl);
      t1._becomeParentOf$1$1(_typeArguments, type$.nullable_TypeArgumentListImpl);
      return t1;
    },
    VariableDeclarationImpl$(_name, equals, _initializer) {
      var t1 = new U.VariableDeclarationImpl(_name, equals, _initializer, null, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t1.AnnotatedNodeImpl$2(null, null);
      t1._becomeParentOf$1$1(_name, type$.SimpleIdentifierImpl);
      t1._becomeParentOf$1$1(_initializer, type$.nullable_ExpressionImpl);
      return t1;
    },
    WithClauseImpl$(withKeyword, mixinTypes) {
      var t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_TypeName), type$.NodeListImpl_TypeName),
        t2 = new U.WithClauseImpl(withKeyword, t1);
      t1._initialize$2(t2, mixinTypes);
      return t2;
    },
    AdjacentStringsImpl: function AdjacentStringsImpl(t0) {
      this._ast$_strings = t0;
      this._ast$_parent = null;
    },
    AnnotatedNodeImpl: function AnnotatedNodeImpl() {
    },
    AnnotationImpl: function AnnotationImpl(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.atSign = t0;
      _._ast$_name = t1;
      _._typeArguments = t2;
      _.period = t3;
      _._constructorName = t4;
      _._ast$_arguments = t5;
      _._ast$_parent = null;
    },
    ArgumentListImpl: function ArgumentListImpl(t0, t1, t2) {
      var _ = this;
      _.leftParenthesis = t0;
      _._ast$_arguments = t1;
      _.rightParenthesis = t2;
      _._ast$_parent = null;
    },
    AsExpressionImpl: function AsExpressionImpl(t0, t1, t2) {
      var _ = this;
      _._expression = t0;
      _.asOperator = t1;
      _._type = t2;
      _._ast$_parent = null;
    },
    AssertInitializerImpl: function AssertInitializerImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _.assertKeyword = t0;
      _.leftParenthesis = t1;
      _._condition = t2;
      _._ast$_message = t3;
      _.rightParenthesis = t4;
      _._ast$_parent = null;
    },
    AssertStatementImpl: function AssertStatementImpl(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.assertKeyword = t0;
      _.leftParenthesis = t1;
      _._condition = t2;
      _._ast$_message = t3;
      _.rightParenthesis = t4;
      _.semicolon = t5;
      _._ast$_parent = null;
    },
    AssignmentExpressionImpl: function AssignmentExpressionImpl(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._leftHandSide = t0;
      _.operator = t1;
      _._rightHandSide = t2;
      _.CompoundAssignmentExpressionImpl_readElement = t3;
      _.CompoundAssignmentExpressionImpl_writeElement = t4;
      _.CompoundAssignmentExpressionImpl_readType = t5;
      _.CompoundAssignmentExpressionImpl_writeType = t6;
      _._ast$_parent = null;
    },
    AstNodeImpl: function AstNodeImpl() {
    },
    AwaitExpressionImpl: function AwaitExpressionImpl(t0, t1) {
      this.awaitKeyword = t0;
      this._expression = t1;
      this._ast$_parent = null;
    },
    BinaryExpressionImpl: function BinaryExpressionImpl(t0, t1, t2) {
      var _ = this;
      _._leftOperand = t0;
      _.operator = t1;
      _._rightOperand = t2;
      _._ast$_parent = null;
    },
    BlockFunctionBodyImpl: function BlockFunctionBodyImpl(t0, t1, t2) {
      var _ = this;
      _.keyword = t0;
      _.star = t1;
      _._block = t2;
      _._ast$_parent = null;
    },
    BlockImpl: function BlockImpl(t0, t1, t2) {
      var _ = this;
      _.leftBracket = t0;
      _._statements = t1;
      _.rightBracket = t2;
      _._ast$_parent = null;
    },
    BooleanLiteralImpl: function BooleanLiteralImpl(t0) {
      this.literal = t0;
      this._ast$_parent = null;
    },
    BreakStatementImpl: function BreakStatementImpl(t0, t1, t2) {
      var _ = this;
      _.breakKeyword = t0;
      _._label = t1;
      _.semicolon = t2;
      _._ast$_parent = null;
    },
    CascadeExpressionImpl: function CascadeExpressionImpl(t0, t1) {
      this._ast$_target = t0;
      this._cascadeSections = t1;
      this._ast$_parent = null;
    },
    CatchClauseImpl: function CatchClauseImpl(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.onKeyword = t0;
      _._exceptionType = t1;
      _.catchKeyword = t2;
      _.leftParenthesis = t3;
      _._exceptionParameter = t4;
      _.comma = t5;
      _._stackTraceParameter = t6;
      _.rightParenthesis = t7;
      _._body = t8;
      _._ast$_parent = null;
    },
    ChildEntities: function ChildEntities(t0) {
      this._entities = t0;
    },
    ClassDeclarationImpl: function ClassDeclarationImpl(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.abstractKeyword = t0;
      _.classKeyword = t1;
      _._extendsClause = t2;
      _._withClause = t3;
      _._nativeClause = null;
      _._typeParameters = t4;
      _._implementsClause = t5;
      _.leftBracket = t6;
      _._members = t7;
      _.rightBracket = t8;
      _._ast$_name = t9;
      _._comment = t10;
      _._metadata = t11;
      _._ast$_parent = null;
    },
    ClassMemberImpl: function ClassMemberImpl() {
    },
    ClassOrMixinDeclarationImpl: function ClassOrMixinDeclarationImpl() {
    },
    ClassTypeAliasImpl: function ClassTypeAliasImpl(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _._typeParameters = t0;
      _.equals = t1;
      _.abstractKeyword = t2;
      _._superclass = t3;
      _._withClause = t4;
      _._implementsClause = t5;
      _.typedefKeyword = t6;
      _.semicolon = t7;
      _._ast$_name = t8;
      _._comment = t9;
      _._metadata = t10;
      _._ast$_parent = null;
    },
    CollectionElementImpl: function CollectionElementImpl() {
    },
    CombinatorImpl: function CombinatorImpl() {
    },
    CommentImpl: function CommentImpl(t0, t1) {
      this.tokens = t0;
      this._references = t1;
      this._ast$_parent = null;
    },
    CommentReferenceImpl: function CommentReferenceImpl(t0, t1) {
      this.newKeyword = t0;
      this._identifier = t1;
      this._ast$_parent = null;
    },
    CompilationUnitImpl: function CompilationUnitImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _.beginToken = t0;
      _._scriptTag = t1;
      _._directives = t2;
      _._declarations = t3;
      _.endToken = t4;
      _._ast$_parent = _.lineInfo = null;
    },
    CompilationUnitMemberImpl: function CompilationUnitMemberImpl() {
    },
    CompoundAssignmentExpressionImpl: function CompoundAssignmentExpressionImpl() {
    },
    ConditionalExpressionImpl: function ConditionalExpressionImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _._condition = t0;
      _.question = t1;
      _._thenExpression = t2;
      _.colon = t3;
      _._elseExpression = t4;
      _._ast$_parent = null;
    },
    ConfigurationImpl: function ConfigurationImpl(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.ifKeyword = t0;
      _.leftParenthesis = t1;
      _._ast$_name = t2;
      _.equalToken = t3;
      _._ast$_value = t4;
      _.rightParenthesis = t5;
      _._ast$_uri = t6;
      _._ast$_parent = null;
    },
    ConstructorDeclarationImpl: function ConstructorDeclarationImpl(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.externalKeyword = t0;
      _.constKeyword = t1;
      _.factoryKeyword = t2;
      _._returnType = t3;
      _.period = t4;
      _._ast$_name = t5;
      _._parameters = t6;
      _.separator = t7;
      _._initializers = t8;
      _._redirectedConstructor = t9;
      _._body = t10;
      _._comment = t11;
      _._metadata = t12;
      _._ast$_parent = null;
    },
    ConstructorFieldInitializerImpl: function ConstructorFieldInitializerImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _.thisKeyword = t0;
      _.period = t1;
      _._fieldName = t2;
      _.equals = t3;
      _._expression = t4;
      _._ast$_parent = null;
    },
    ConstructorInitializerImpl: function ConstructorInitializerImpl() {
    },
    ConstructorNameImpl: function ConstructorNameImpl(t0, t1, t2) {
      var _ = this;
      _._type = t0;
      _.period = t1;
      _._ast$_name = t2;
      _._ast$_parent = null;
    },
    ContinueStatementImpl: function ContinueStatementImpl(t0, t1, t2) {
      var _ = this;
      _.continueKeyword = t0;
      _._label = t1;
      _.semicolon = t2;
      _._ast$_parent = null;
    },
    DeclarationImpl: function DeclarationImpl() {
    },
    DeclaredIdentifierImpl: function DeclaredIdentifierImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _.keyword = t0;
      _._type = t1;
      _._identifier = t2;
      _._comment = t3;
      _._metadata = t4;
      _._ast$_parent = null;
    },
    DeclaredSimpleIdentifier: function DeclaredSimpleIdentifier(t0) {
      this.token = t0;
      this._ast$_parent = null;
    },
    DefaultFormalParameterImpl: function DefaultFormalParameterImpl(t0, t1, t2, t3) {
      var _ = this;
      _._parameter = t0;
      _.kind = t1;
      _.separator = t2;
      _._defaultValue = t3;
      _._ast$_parent = null;
    },
    DirectiveImpl: function DirectiveImpl() {
    },
    DoStatementImpl: function DoStatementImpl(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.doKeyword = t0;
      _._body = t1;
      _.whileKeyword = t2;
      _.leftParenthesis = t3;
      _._condition = t4;
      _.rightParenthesis = t5;
      _.semicolon = t6;
      _._ast$_parent = null;
    },
    DottedNameImpl: function DottedNameImpl(t0) {
      this._components = t0;
      this._ast$_parent = null;
    },
    DoubleLiteralImpl: function DoubleLiteralImpl(t0) {
      this.literal = t0;
      this._ast$_parent = null;
    },
    EmptyFunctionBodyImpl: function EmptyFunctionBodyImpl(t0) {
      this.semicolon = t0;
      this._ast$_parent = null;
    },
    EmptyStatementImpl: function EmptyStatementImpl(t0) {
      this.semicolon = t0;
      this._ast$_parent = null;
    },
    EnumConstantDeclarationImpl: function EnumConstantDeclarationImpl(t0, t1, t2) {
      var _ = this;
      _._ast$_name = t0;
      _._comment = t1;
      _._metadata = t2;
      _._ast$_parent = null;
    },
    EnumDeclarationImpl: function EnumDeclarationImpl(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.enumKeyword = t0;
      _.leftBracket = t1;
      _._constants = t2;
      _.rightBracket = t3;
      _._ast$_name = t4;
      _._comment = t5;
      _._metadata = t6;
      _._ast$_parent = null;
    },
    ExportDirectiveImpl: function ExportDirectiveImpl(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.keyword = t0;
      _._configurations = t1;
      _._combinators = t2;
      _.semicolon = t3;
      _._ast$_uri = t4;
      _._comment = t5;
      _._metadata = t6;
      _._ast$_parent = null;
    },
    ExpressionFunctionBodyImpl: function ExpressionFunctionBodyImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _.keyword = t0;
      _.star = t1;
      _.functionDefinition = t2;
      _._expression = t3;
      _.semicolon = t4;
      _._ast$_parent = null;
    },
    ExpressionImpl: function ExpressionImpl() {
    },
    ExpressionStatementImpl: function ExpressionStatementImpl(t0, t1) {
      this._expression = t0;
      this.semicolon = t1;
      this._ast$_parent = null;
    },
    ExtendsClauseImpl: function ExtendsClauseImpl(t0, t1) {
      this.extendsKeyword = t0;
      this._superclass = t1;
      this._ast$_parent = null;
    },
    ExtensionDeclarationImpl: function ExtensionDeclarationImpl(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.extensionKeyword = t0;
      _.typeKeyword = t1;
      _._hideClause = t2;
      _._ast$_name = t3;
      _._showClause = t4;
      _._typeParameters = t5;
      _.onKeyword = t6;
      _._extendedType = t7;
      _.leftBracket = t8;
      _._members = t9;
      _.rightBracket = t10;
      _._comment = t11;
      _._metadata = t12;
      _._ast$_parent = null;
    },
    FieldDeclarationImpl: function FieldDeclarationImpl(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.abstractKeyword = t0;
      _.covariantKeyword = t1;
      _.externalKeyword = t2;
      _.staticKeyword = t3;
      _._fieldList = t4;
      _.semicolon = t5;
      _._comment = t6;
      _._metadata = t7;
      _._ast$_parent = null;
    },
    FieldFormalParameterImpl: function FieldFormalParameterImpl(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.keyword = t0;
      _._type = t1;
      _.thisKeyword = t2;
      _.period = t3;
      _._typeParameters = t4;
      _._parameters = t5;
      _.question = t6;
      _._comment = t7;
      _._metadata = t8;
      _.covariantKeyword = t9;
      _.requiredKeyword = t10;
      _._identifier = t11;
      _._ast$_parent = null;
    },
    ForEachPartsImpl: function ForEachPartsImpl() {
    },
    ForEachPartsWithDeclarationImpl: function ForEachPartsWithDeclarationImpl(t0, t1, t2) {
      var _ = this;
      _._loopVariable = t0;
      _.inKeyword = t1;
      _._ast$_iterable = t2;
      _._ast$_parent = null;
    },
    ForEachPartsWithIdentifierImpl: function ForEachPartsWithIdentifierImpl(t0, t1, t2) {
      var _ = this;
      _._identifier = t0;
      _.inKeyword = t1;
      _._ast$_iterable = t2;
      _._ast$_parent = null;
    },
    ForElementImpl: function ForElementImpl(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.awaitKeyword = t0;
      _.forKeyword = t1;
      _.leftParenthesis = t2;
      _._forLoopParts = t3;
      _.rightParenthesis = t4;
      _._body = t5;
      _._ast$_parent = null;
    },
    ForLoopPartsImpl: function ForLoopPartsImpl() {
    },
    FormalParameterImpl: function FormalParameterImpl() {
    },
    FormalParameterListImpl: function FormalParameterListImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _.leftParenthesis = t0;
      _._parameters = t1;
      _.leftDelimiter = t2;
      _.rightDelimiter = t3;
      _.rightParenthesis = t4;
      _._ast$_parent = null;
    },
    ForPartsImpl: function ForPartsImpl() {
    },
    ForPartsWithDeclarationsImpl: function ForPartsWithDeclarationsImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _._variableList = t0;
      _.leftSeparator = t1;
      _._condition = t2;
      _.rightSeparator = t3;
      _._updaters = t4;
      _._ast$_parent = null;
    },
    ForPartsWithExpressionImpl: function ForPartsWithExpressionImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _._initialization = t0;
      _.leftSeparator = t1;
      _._condition = t2;
      _.rightSeparator = t3;
      _._updaters = t4;
      _._ast$_parent = null;
    },
    ForStatementImpl: function ForStatementImpl(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.awaitKeyword = t0;
      _.forKeyword = t1;
      _.leftParenthesis = t2;
      _._forLoopParts = t3;
      _.rightParenthesis = t4;
      _._body = t5;
      _._ast$_parent = null;
    },
    FunctionBodyImpl: function FunctionBodyImpl() {
    },
    FunctionDeclarationImpl: function FunctionDeclarationImpl(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.externalKeyword = t0;
      _._returnType = t1;
      _.propertyKeyword = t2;
      _._functionExpression = t3;
      _._ast$_name = t4;
      _._comment = t5;
      _._metadata = t6;
      _._ast$_parent = null;
    },
    FunctionDeclarationStatementImpl: function FunctionDeclarationStatementImpl(t0) {
      this._functionDeclaration = t0;
      this._ast$_parent = null;
    },
    FunctionExpressionImpl: function FunctionExpressionImpl(t0, t1, t2) {
      var _ = this;
      _._typeParameters = t0;
      _._parameters = t1;
      _._body = t2;
      _._ast$_parent = null;
    },
    FunctionExpressionInvocationImpl: function FunctionExpressionInvocationImpl(t0, t1, t2) {
      var _ = this;
      _._function = t0;
      _._argumentList = t1;
      _._typeArguments = t2;
      _._ast$_parent = null;
    },
    FunctionReferenceImpl: function FunctionReferenceImpl(t0, t1) {
      this._function = t0;
      this._typeArguments = t1;
      this._ast$_parent = null;
    },
    FunctionTypeAliasImpl: function FunctionTypeAliasImpl(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._returnType = t0;
      _._typeParameters = t1;
      _._parameters = t2;
      _.typedefKeyword = t3;
      _.semicolon = t4;
      _._ast$_name = t5;
      _._comment = t6;
      _._metadata = t7;
      _._ast$_parent = null;
    },
    FunctionTypedFormalParameterImpl: function FunctionTypedFormalParameterImpl(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._returnType = t0;
      _._typeParameters = t1;
      _._parameters = t2;
      _.question = t3;
      _._comment = t4;
      _._metadata = t5;
      _.covariantKeyword = t6;
      _.requiredKeyword = t7;
      _._identifier = t8;
      _._ast$_parent = null;
    },
    GenericFunctionTypeImpl: function GenericFunctionTypeImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _._returnType = t0;
      _.functionKeyword = t1;
      _._typeParameters = t2;
      _._parameters = t3;
      _.question = t4;
      _._ast$_parent = null;
    },
    GenericTypeAliasImpl: function GenericTypeAliasImpl(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._type = t0;
      _._typeParameters = t1;
      _.equals = t2;
      _.typedefKeyword = t3;
      _.semicolon = t4;
      _._ast$_name = t5;
      _._comment = t6;
      _._metadata = t7;
      _._ast$_parent = null;
    },
    HideClauseImpl: function HideClauseImpl(t0, t1) {
      this.hideKeyword = t0;
      this._elements = t1;
      this._ast$_parent = null;
    },
    HideCombinatorImpl: function HideCombinatorImpl(t0, t1) {
      this._hiddenNames = t0;
      this.keyword = t1;
      this._ast$_parent = null;
    },
    IdentifierImpl: function IdentifierImpl() {
    },
    IfElementImpl: function IfElementImpl(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.ifKeyword = t0;
      _.leftParenthesis = t1;
      _._condition = t2;
      _.rightParenthesis = t3;
      _.elseKeyword = t4;
      _._thenElement = t5;
      _._elseElement = t6;
      _._ast$_parent = null;
    },
    IfStatementImpl: function IfStatementImpl(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.ifKeyword = t0;
      _.leftParenthesis = t1;
      _._condition = t2;
      _.rightParenthesis = t3;
      _.elseKeyword = t4;
      _._thenStatement = t5;
      _._elseStatement = t6;
      _._ast$_parent = null;
    },
    ImplementsClauseImpl: function ImplementsClauseImpl(t0, t1) {
      this.implementsKeyword = t0;
      this._interfaces = t1;
      this._ast$_parent = null;
    },
    ImportDirectiveImpl: function ImportDirectiveImpl(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.deferredKeyword = t0;
      _.asKeyword = t1;
      _._prefix = t2;
      _.keyword = t3;
      _._configurations = t4;
      _._combinators = t5;
      _.semicolon = t6;
      _._ast$_uri = t7;
      _._comment = t8;
      _._metadata = t9;
      _._ast$_parent = null;
    },
    IndexExpressionImpl: function IndexExpressionImpl(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.period = t0;
      _._ast$_target = t1;
      _.question = t2;
      _.leftBracket = t3;
      _._ast$_index = t4;
      _.rightBracket = t5;
      _._ast$_parent = null;
    },
    InstanceCreationExpressionImpl: function InstanceCreationExpressionImpl(t0, t1, t2, t3) {
      var _ = this;
      _.keyword = t0;
      _._constructorName = t1;
      _._typeArguments = t2;
      _._argumentList = t3;
      _._ast$_parent = null;
    },
    IntegerLiteralImpl: function IntegerLiteralImpl(t0) {
      this.literal = t0;
      this._ast$_parent = null;
    },
    InterpolationElementImpl: function InterpolationElementImpl() {
    },
    InterpolationExpressionImpl: function InterpolationExpressionImpl(t0, t1, t2) {
      var _ = this;
      _.leftBracket = t0;
      _._expression = t1;
      _.rightBracket = t2;
      _._ast$_parent = null;
    },
    InterpolationStringImpl: function InterpolationStringImpl(t0) {
      this.contents = t0;
      this._ast$_parent = null;
    },
    InvocationExpressionImpl: function InvocationExpressionImpl() {
    },
    IsExpressionImpl: function IsExpressionImpl(t0, t1, t2, t3) {
      var _ = this;
      _._expression = t0;
      _.isOperator = t1;
      _.notOperator = t2;
      _._type = t3;
      _._ast$_parent = null;
    },
    LabeledStatementImpl: function LabeledStatementImpl(t0, t1) {
      this._labels = t0;
      this._statement = t1;
      this._ast$_parent = null;
    },
    LabelImpl: function LabelImpl(t0, t1) {
      this._label = t0;
      this.colon = t1;
      this._ast$_parent = null;
    },
    LibraryDirectiveImpl: function LibraryDirectiveImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _.libraryKeyword = t0;
      _._ast$_name = t1;
      _.semicolon = t2;
      _._comment = t3;
      _._metadata = t4;
      _._ast$_parent = null;
    },
    LibraryIdentifierImpl: function LibraryIdentifierImpl(t0) {
      this._components = t0;
      this._ast$_parent = null;
    },
    ListLiteralImpl: function ListLiteralImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _.leftBracket = t0;
      _._elements = t1;
      _.rightBracket = t2;
      _.constKeyword = t3;
      _._typeArguments = t4;
      _._ast$_parent = null;
    },
    LiteralImpl: function LiteralImpl() {
    },
    MapLiteralEntryImpl: function MapLiteralEntryImpl(t0, t1, t2) {
      var _ = this;
      _._key = t0;
      _.separator = t1;
      _._ast$_value = t2;
      _._ast$_parent = null;
    },
    MethodDeclarationImpl: function MethodDeclarationImpl(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.externalKeyword = t0;
      _.modifierKeyword = t1;
      _._returnType = t2;
      _.propertyKeyword = t3;
      _.operatorKeyword = t4;
      _._ast$_name = t5;
      _._typeParameters = t6;
      _._parameters = t7;
      _._body = t8;
      _._comment = t9;
      _._metadata = t10;
      _._ast$_parent = null;
    },
    MethodInvocationImpl: function MethodInvocationImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _._ast$_target = t0;
      _.operator = t1;
      _._methodName = t2;
      _._argumentList = t3;
      _._typeArguments = t4;
      _._ast$_parent = null;
    },
    MixinDeclarationImpl: function MixinDeclarationImpl(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.mixinKeyword = t0;
      _._onClause = t1;
      _._typeParameters = t2;
      _._implementsClause = t3;
      _.leftBracket = t4;
      _._members = t5;
      _.rightBracket = t6;
      _._ast$_name = t7;
      _._comment = t8;
      _._metadata = t9;
      _._ast$_parent = null;
    },
    NamedCompilationUnitMemberImpl: function NamedCompilationUnitMemberImpl() {
    },
    NamedExpressionImpl: function NamedExpressionImpl(t0, t1) {
      this._ast$_name = t0;
      this._expression = t1;
      this._ast$_parent = null;
    },
    NamespaceDirectiveImpl: function NamespaceDirectiveImpl() {
    },
    NativeClauseImpl: function NativeClauseImpl(t0, t1) {
      this.nativeKeyword = t0;
      this._ast$_name = t1;
      this._ast$_parent = null;
    },
    NativeFunctionBodyImpl: function NativeFunctionBodyImpl(t0, t1, t2) {
      var _ = this;
      _.nativeKeyword = t0;
      _._stringLiteral = t1;
      _.semicolon = t2;
      _._ast$_parent = null;
    },
    NodeListImpl: function NodeListImpl(t0, t1) {
      this.__NodeListImpl__owner = $;
      this._elements = t0;
      this.$ti = t1;
    },
    NormalFormalParameterImpl: function NormalFormalParameterImpl() {
    },
    NullLiteralImpl: function NullLiteralImpl(t0) {
      this.literal = t0;
      this._ast$_parent = null;
    },
    NullShortableExpressionImpl: function NullShortableExpressionImpl() {
    },
    OnClauseImpl: function OnClauseImpl(t0, t1) {
      this.onKeyword = t0;
      this._superclassConstraints = t1;
      this._ast$_parent = null;
    },
    ParenthesizedExpressionImpl: function ParenthesizedExpressionImpl(t0, t1, t2) {
      var _ = this;
      _.leftParenthesis = t0;
      _._expression = t1;
      _.rightParenthesis = t2;
      _._ast$_parent = null;
    },
    PartDirectiveImpl: function PartDirectiveImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _.partKeyword = t0;
      _.semicolon = t1;
      _._ast$_uri = t2;
      _._comment = t3;
      _._metadata = t4;
      _._ast$_parent = null;
    },
    PartOfDirectiveImpl: function PartOfDirectiveImpl(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.partKeyword = t0;
      _.ofKeyword = t1;
      _._ast$_uri = t2;
      _._libraryName = t3;
      _.semicolon = t4;
      _._comment = t5;
      _._metadata = t6;
      _._ast$_parent = null;
    },
    PostfixExpressionImpl: function PostfixExpressionImpl(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._operand = t0;
      _.operator = t1;
      _.CompoundAssignmentExpressionImpl_readElement = t2;
      _.CompoundAssignmentExpressionImpl_writeElement = t3;
      _.CompoundAssignmentExpressionImpl_readType = t4;
      _.CompoundAssignmentExpressionImpl_writeType = t5;
      _._ast$_parent = null;
    },
    PrefixedIdentifierImpl: function PrefixedIdentifierImpl(t0, t1, t2) {
      var _ = this;
      _._prefix = t0;
      _.period = t1;
      _._identifier = t2;
      _._ast$_parent = null;
    },
    PrefixExpressionImpl: function PrefixExpressionImpl(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.operator = t0;
      _._operand = t1;
      _.CompoundAssignmentExpressionImpl_readElement = t2;
      _.CompoundAssignmentExpressionImpl_writeElement = t3;
      _.CompoundAssignmentExpressionImpl_readType = t4;
      _.CompoundAssignmentExpressionImpl_writeType = t5;
      _._ast$_parent = null;
    },
    PropertyAccessImpl: function PropertyAccessImpl(t0, t1, t2) {
      var _ = this;
      _._ast$_target = t0;
      _.operator = t1;
      _._propertyName = t2;
      _._ast$_parent = null;
    },
    RedirectingConstructorInvocationImpl: function RedirectingConstructorInvocationImpl(t0, t1, t2, t3) {
      var _ = this;
      _.thisKeyword = t0;
      _.period = t1;
      _._constructorName = t2;
      _._argumentList = t3;
      _._ast$_parent = null;
    },
    RethrowExpressionImpl: function RethrowExpressionImpl(t0) {
      this.rethrowKeyword = t0;
      this._ast$_parent = null;
    },
    ReturnStatementImpl: function ReturnStatementImpl(t0, t1, t2) {
      var _ = this;
      _.returnKeyword = t0;
      _._expression = t1;
      _.semicolon = t2;
      _._ast$_parent = null;
    },
    ScriptTagImpl: function ScriptTagImpl(t0) {
      this.scriptTag = t0;
      this._ast$_parent = null;
    },
    SetOrMapLiteralImpl: function SetOrMapLiteralImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _.leftBracket = t0;
      _._elements = t1;
      _.rightBracket = t2;
      _.constKeyword = t3;
      _._typeArguments = t4;
      _._ast$_parent = null;
    },
    ShowClauseImpl: function ShowClauseImpl(t0, t1) {
      this.showKeyword = t0;
      this._elements = t1;
      this._ast$_parent = null;
    },
    ShowCombinatorImpl: function ShowCombinatorImpl(t0, t1) {
      this._shownNames = t0;
      this.keyword = t1;
      this._ast$_parent = null;
    },
    ShowHideElementImpl: function ShowHideElementImpl(t0, t1) {
      this.modifier = t0;
      this.name = t1;
      this._ast$_parent = null;
    },
    SimpleFormalParameterImpl: function SimpleFormalParameterImpl(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.keyword = t0;
      _._type = t1;
      _._comment = t2;
      _._metadata = t3;
      _.covariantKeyword = t4;
      _.requiredKeyword = t5;
      _._identifier = t6;
      _._ast$_parent = null;
    },
    SimpleIdentifierImpl: function SimpleIdentifierImpl(t0) {
      this.token = t0;
      this._ast$_parent = null;
    },
    SimpleStringLiteralImpl: function SimpleStringLiteralImpl(t0, t1) {
      this.literal = t0;
      this._ast$_value = t1;
      this._ast$_parent = null;
    },
    SingleStringLiteralImpl: function SingleStringLiteralImpl() {
    },
    SpreadElementImpl: function SpreadElementImpl(t0, t1) {
      this.spreadOperator = t0;
      this._expression = t1;
      this._ast$_parent = null;
    },
    StatementImpl: function StatementImpl() {
    },
    StringInterpolationImpl: function StringInterpolationImpl(t0) {
      this._elements = t0;
      this._ast$_parent = null;
    },
    StringLexemeHelper: function StringLexemeHelper(t0, t1, t2) {
      var _ = this;
      _.lexeme = t0;
      _.isFirst = t1;
      _.isLast = t2;
      _.isMultiline = _.isRaw = false;
      _.end = _.start = 0;
    },
    StringLiteralImpl: function StringLiteralImpl() {
    },
    SuperConstructorInvocationImpl: function SuperConstructorInvocationImpl(t0, t1, t2, t3) {
      var _ = this;
      _.superKeyword = t0;
      _.period = t1;
      _._constructorName = t2;
      _._argumentList = t3;
      _._ast$_parent = null;
    },
    SuperExpressionImpl: function SuperExpressionImpl(t0) {
      this.superKeyword = t0;
      this._ast$_parent = null;
    },
    SwitchCaseImpl: function SwitchCaseImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _._expression = t0;
      _._labels = t1;
      _.keyword = t2;
      _.colon = t3;
      _._statements = t4;
      _._ast$_parent = null;
    },
    SwitchDefaultImpl: function SwitchDefaultImpl(t0, t1, t2, t3) {
      var _ = this;
      _._labels = t0;
      _.keyword = t1;
      _.colon = t2;
      _._statements = t3;
      _._ast$_parent = null;
    },
    SwitchMemberImpl: function SwitchMemberImpl() {
    },
    SwitchStatementImpl: function SwitchStatementImpl(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.switchKeyword = t0;
      _.leftParenthesis = t1;
      _._expression = t2;
      _.rightParenthesis = t3;
      _.leftBracket = t4;
      _._members = t5;
      _.rightBracket = t6;
      _._ast$_parent = null;
    },
    SymbolLiteralImpl: function SymbolLiteralImpl(t0, t1) {
      this.poundSign = t0;
      this.components = t1;
      this._ast$_parent = null;
    },
    ThisExpressionImpl: function ThisExpressionImpl(t0) {
      this.thisKeyword = t0;
      this._ast$_parent = null;
    },
    ThrowExpressionImpl: function ThrowExpressionImpl(t0, t1) {
      this.throwKeyword = t0;
      this._expression = t1;
      this._ast$_parent = null;
    },
    TopLevelVariableDeclarationImpl: function TopLevelVariableDeclarationImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _._variableList = t0;
      _.externalKeyword = t1;
      _.semicolon = t2;
      _._comment = t3;
      _._metadata = t4;
      _._ast$_parent = null;
    },
    TryStatementImpl: function TryStatementImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _.tryKeyword = t0;
      _._body = t1;
      _._catchClauses = t2;
      _.finallyKeyword = t3;
      _._finallyBlock = t4;
      _._ast$_parent = null;
    },
    TypeAliasImpl: function TypeAliasImpl() {
    },
    TypeAnnotationImpl: function TypeAnnotationImpl() {
    },
    TypeArgumentListImpl: function TypeArgumentListImpl(t0, t1, t2) {
      var _ = this;
      _.leftBracket = t0;
      _._ast$_arguments = t1;
      _.rightBracket = t2;
      _._ast$_parent = null;
    },
    TypedLiteralImpl: function TypedLiteralImpl() {
    },
    TypeNameImpl: function TypeNameImpl(t0, t1, t2) {
      var _ = this;
      _._ast$_name = t0;
      _._typeArguments = t1;
      _.question = t2;
      _._ast$_parent = null;
    },
    TypeParameterImpl: function TypeParameterImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _._ast$_name = t0;
      _.varianceKeyword = null;
      _.extendsKeyword = t1;
      _._bound = t2;
      _._comment = t3;
      _._metadata = t4;
      _._ast$_parent = null;
    },
    TypeParameterListImpl: function TypeParameterListImpl(t0, t1, t2) {
      var _ = this;
      _.leftBracket = t0;
      _._typeParameters = t1;
      _.rightBracket = t2;
      _._ast$_parent = null;
    },
    UriBasedDirectiveImpl: function UriBasedDirectiveImpl() {
    },
    VariableDeclarationImpl: function VariableDeclarationImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _._ast$_name = t0;
      _.equals = t1;
      _._ast$_initializer = t2;
      _._comment = t3;
      _._metadata = t4;
      _._ast$_parent = null;
    },
    VariableDeclarationListImpl: function VariableDeclarationListImpl(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.keyword = t0;
      _.lateKeyword = t1;
      _._type = t2;
      _._variables = t3;
      _._comment = t4;
      _._metadata = t5;
      _._ast$_parent = null;
    },
    VariableDeclarationStatementImpl: function VariableDeclarationStatementImpl(t0, t1) {
      this._variableList = t0;
      this.semicolon = t1;
      this._ast$_parent = null;
    },
    WhileStatementImpl: function WhileStatementImpl(t0, t1, t2, t3, t4) {
      var _ = this;
      _.whileKeyword = t0;
      _.leftParenthesis = t1;
      _._condition = t2;
      _.rightParenthesis = t3;
      _._body = t4;
      _._ast$_parent = null;
    },
    WithClauseImpl: function WithClauseImpl(t0, t1) {
      this.withKeyword = t0;
      this._mixinTypes = t1;
      this._ast$_parent = null;
    },
    YieldStatementImpl: function YieldStatementImpl(t0, t1, t2, t3) {
      var _ = this;
      _.yieldKeyword = t0;
      _.star = t1;
      _._expression = t2;
      _.semicolon = t3;
      _._ast$_parent = null;
    },
    _AssignmentExpressionImpl_ExpressionImpl_NullShortableExpressionImpl: function _AssignmentExpressionImpl_ExpressionImpl_NullShortableExpressionImpl() {
    },
    _AssignmentExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl: function _AssignmentExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl() {
    },
    _CascadeExpressionImpl_ExpressionImpl_NullShortableExpressionImpl: function _CascadeExpressionImpl_ExpressionImpl_NullShortableExpressionImpl() {
    },
    _ChildEntities_Object_IterableMixin: function _ChildEntities_Object_IterableMixin() {
    },
    _FunctionExpressionInvocationImpl_InvocationExpressionImpl_NullShortableExpressionImpl: function _FunctionExpressionInvocationImpl_InvocationExpressionImpl_NullShortableExpressionImpl() {
    },
    _IndexExpressionImpl_ExpressionImpl_NullShortableExpressionImpl: function _IndexExpressionImpl_ExpressionImpl_NullShortableExpressionImpl() {
    },
    _MethodInvocationImpl_InvocationExpressionImpl_NullShortableExpressionImpl: function _MethodInvocationImpl_InvocationExpressionImpl_NullShortableExpressionImpl() {
    },
    _NodeListImpl_Object_ListMixin: function _NodeListImpl_Object_ListMixin() {
    },
    _PostfixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl: function _PostfixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl() {
    },
    _PostfixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl: function _PostfixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl() {
    },
    _PrefixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl: function _PrefixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl() {
    },
    _PrefixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl: function _PrefixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl() {
    },
    _PropertyAccessImpl_ExpressionImpl_NullShortableExpressionImpl: function _PropertyAccessImpl_ExpressionImpl_NullShortableExpressionImpl() {
    },
    Reference: function Reference(t0, t1) {
      this.url = t0;
      this.symbol = t1;
    },
    Reference_type_closure: function Reference_type_closure(t0) {
      this.$this = t0;
    },
    DefaultEquality: function DefaultEquality(t0) {
      this.$ti = t0;
    },
    IterableEquality: function IterableEquality(t0) {
      this.$ti = t0;
    },
    ArgumentListVisitor_ArgumentListVisitor$forArguments(visitor, leftParenthesis, rightParenthesis, $arguments) {
      var t1, functionsEnd, functionsStart, i, t2, isArrow, argument, t3, argumentsBefore, functions, argumentsAfter, _null = null;
      for (t1 = J.getInterceptor$asx($arguments), functionsEnd = _null, functionsStart = functionsEnd, i = 0; i < t1.get$length($arguments); ++i)
        if (U.ArgumentListVisitor__isBlockFunction(t1.$index($arguments, i))) {
          if (functionsStart == null)
            functionsStart = i;
          if (functionsEnd != null && functionsEnd !== i) {
            functionsEnd = _null;
            functionsStart = functionsEnd;
            break;
          }
          functionsEnd = i + 1;
        }
      if (functionsStart != null)
        if (type$.NamedExpression._is(t1.$index($arguments, 0)))
          if (!(functionsStart > 0)) {
            t2 = t1.get$length($arguments);
            if (typeof functionsEnd !== "number")
              return functionsEnd.$lt();
            t2 = functionsEnd < t2;
          } else
            t2 = true;
        else
          t2 = false;
      else
        t2 = false;
      if (t2)
        functionsStart = _null;
      if (functionsStart != null && type$.NamedExpression._is(t1.$index($arguments, functionsStart))) {
        isArrow = new U.ArgumentListVisitor_ArgumentListVisitor$forArguments_isArrow();
        if (typeof functionsStart !== "number")
          return H.iae(functionsStart);
        t2 = type$.NamedExpression;
        i = 0;
        for (; i < functionsStart; ++i) {
          argument = t1.$index($arguments, i);
          if (!t2._is(argument))
            continue;
          if (H.boolConversionCheck(isArrow.call$1(argument))) {
            functionsStart = _null;
            break;
          }
        }
        i = functionsEnd;
        while (true) {
          t3 = t1.get$length($arguments);
          if (typeof i !== "number")
            return i.$lt();
          if (!(i < t3))
            break;
          if (H.boolConversionCheck(isArrow.call$1(t2._as(t1.$index($arguments, i))))) {
            functionsStart = _null;
            break;
          }
          ++i;
        }
      }
      if (functionsStart == null)
        return new U.ArgumentListVisitor(visitor, leftParenthesis, rightParenthesis, $arguments, U.ArgumentSublist_ArgumentSublist($arguments, $arguments), _null, _null);
      argumentsBefore = t1.take$1($arguments, functionsStart).toList$0(0);
      functions = t1.sublist$2($arguments, functionsStart, functionsEnd);
      argumentsAfter = t1.skip$1($arguments, functionsEnd).toList$0(0);
      return new U.ArgumentListVisitor(visitor, leftParenthesis, rightParenthesis, $arguments, U.ArgumentSublist_ArgumentSublist($arguments, argumentsBefore), functions, U.ArgumentSublist_ArgumentSublist($arguments, argumentsAfter));
    },
    ArgumentListVisitor__isBlockFunction(expression) {
      var t1, t2;
      if (type$.NamedExpression._is(expression))
        expression = expression._expression;
      if (type$.MethodInvocation._is(expression)) {
        if (!U.ArgumentListVisitor__isValidWrappingTarget(expression._ast$_target))
          return false;
        t1 = expression._argumentList._ast$_arguments;
        if (t1._elements.length !== 1)
          return false;
        return U.ArgumentListVisitor__isBlockFunction(t1.get$single(t1));
      }
      if (type$.InstanceCreationExpression._is(expression)) {
        t1 = expression._argumentList._ast$_arguments;
        if (t1._elements.length !== 1)
          return false;
        return U.ArgumentListVisitor__isBlockFunction(t1.get$single(t1));
      }
      if (type$.FunctionExpressionInvocation._is(expression)) {
        t1 = expression._argumentList._ast$_arguments;
        if (t1.get$length(t1) !== 0)
          return false;
        expression = expression._function;
      }
      for (t1 = type$.ParenthesizedExpression; t1._is(expression);)
        expression = expression._expression;
      if (!type$.FunctionExpression._is(expression))
        return false;
      t1 = expression._body;
      if (!type$.BlockFunctionBody._is(t1))
        return false;
      t1 = t1._block;
      t2 = t1._statements;
      return t2.get$length(t2) !== 0 || t1.rightBracket._precedingComment != null;
    },
    ArgumentListVisitor__isValidWrappingTarget(expression) {
      var t1;
      if (expression == null)
        return true;
      for (t1 = type$.PropertyAccess; t1._is(expression);)
        expression = expression._ast$_target;
      if (type$.PrefixedIdentifier._is(expression))
        return true;
      if (type$.SimpleIdentifier._is(expression))
        return true;
      return false;
    },
    ArgumentSublist_ArgumentSublist(allArguments, $arguments) {
      var t3, bracket, leadingBlocks, trailingBlocks,
        t1 = J.getInterceptor$ax($arguments),
        t2 = t1.takeWhile$1($arguments, new U.ArgumentSublist_ArgumentSublist_closure()),
        positional = P.List_List$of(t2, true, t2.$ti._eval$1("Iterable.E")),
        named = t1.skip$1($arguments, positional.length).toList$0(0),
        blocks = P.LinkedHashMap_LinkedHashMap$_empty(type$.Expression, type$.Token);
      for (t2 = t1.get$iterator($arguments); t2.moveNext$0();) {
        t3 = t2.get$current();
        bracket = U.ArgumentSublist__blockToken(t3);
        if (bracket != null)
          blocks.$indexSet(0, t3, bracket);
      }
      for (t2 = t1.get$iterator($arguments), leadingBlocks = 0; t2.moveNext$0();) {
        if (!blocks.containsKey$1(t2.get$current()))
          break;
        ++leadingBlocks;
      }
      if (leadingBlocks !== t1.get$length($arguments))
        for (t1 = t1.get$reversed($arguments), t1 = new H.ListIterator(t1, t1.get$length(t1), t1.$ti._eval$1("ListIterator<ListIterable.E>")), trailingBlocks = 0; t1.moveNext$0();) {
          if (!blocks.containsKey$1(t1.__internal$_current))
            break;
          ++trailingBlocks;
        }
      else
        trailingBlocks = 0;
      if (leadingBlocks !== blocks.get$length(blocks))
        leadingBlocks = 0;
      if (trailingBlocks !== blocks.get$length(blocks))
        trailingBlocks = 0;
      if (leadingBlocks === 0 && trailingBlocks === 0)
        blocks.clear$0(0);
      return new U.ArgumentSublist(allArguments, positional, named, blocks, leadingBlocks, trailingBlocks);
    },
    ArgumentSublist__blockToken(expression) {
      if (type$.NamedExpression._is(expression))
        expression = expression._expression;
      if (type$.ListLiteral._is(expression))
        return expression.leftBracket;
      if (type$.SetOrMapLiteral._is(expression))
        return expression.leftBracket;
      if (type$.SingleStringLiteral._is(expression) && expression.get$isMultiline())
        return expression.get$beginToken();
      return null;
    },
    ArgumentListVisitor: function ArgumentListVisitor(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._argument_list_visitor$_visitor = t0;
      _._leftParenthesis = t1;
      _._rightParenthesis = t2;
      _._allArguments = t3;
      _._argument_list_visitor$_arguments = t4;
      _._functions = t5;
      _._argumentsAfterFunctions = t6;
    },
    ArgumentListVisitor_ArgumentListVisitor$forArguments_isArrow: function ArgumentListVisitor_ArgumentListVisitor$forArguments_isArrow() {
    },
    ArgumentSublist: function ArgumentSublist(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._allArguments = t0;
      _._positional = t1;
      _._argument_list_visitor$_named = t2;
      _._blocks = t3;
      _._leadingBlocks = t4;
      _._trailingBlocks = t5;
      _._previousSplit = _._blockRule = null;
    },
    ArgumentSublist_ArgumentSublist_closure: function ArgumentSublist_ArgumentSublist_closure() {
    },
    CallChainVisitor_CallChainVisitor(visitor, node) {
      var hangingCall, t2, t3, blockCalls, inBlockCalls, _i, $call, _null = null,
        t1 = type$.JSArray__Selector,
        calls = H._setArrayType([], t1),
        target = U._unwrapTarget(node, calls),
        properties = H._setArrayType([], t1);
      if (type$.SimpleIdentifier._is(U._unwrapNullAssertion(target))) {
        t1 = type$.TakeWhileIterable__Selector;
        properties = P.List_List$of(new H.TakeWhileIterable(calls, type$.bool_Function__Selector._as(new U.CallChainVisitor_CallChainVisitor_closure()), t1), true, t1._eval$1("Iterable.E"));
      }
      C.JSArray_methods.removeRange$2(calls, 0, properties.length);
      t1 = calls.length;
      t2 = type$._MethodSelector;
      t3 = type$.JSArray__MethodSelector;
      blockCalls = _null;
      inBlockCalls = false;
      _i = 0;
      while (true) {
        if (!(_i < calls.length)) {
          hangingCall = _null;
          break;
        }
        $call = calls[_i];
        if ($call.isBlockCall$1(visitor)) {
          if (blockCalls == null)
            blockCalls = H._setArrayType([], t3);
          C.JSArray_methods.add$1(blockCalls, t2._as($call));
          inBlockCalls = true;
        } else if (inBlockCalls) {
          if ($call === C.JSArray_methods.get$last(calls)) {
            hangingCall = $call;
            break;
          }
          hangingCall = _null;
          blockCalls = hangingCall;
          break;
        }
        calls.length === t1 || (0, H.throwConcurrentModificationError)(calls);
        ++_i;
      }
      if (blockCalls != null)
        for (t1 = blockCalls.length, _i = 0; _i < blockCalls.length; blockCalls.length === t1 || (0, H.throwConcurrentModificationError)(blockCalls), ++_i)
          C.JSArray_methods.remove$1(calls, blockCalls[_i]);
      if (hangingCall != null)
        C.JSArray_methods.remove$1(calls, hangingCall);
      return new U.CallChainVisitor(visitor, target, properties, calls, blockCalls, hangingCall);
    },
    _unwrapNullAssertion(expression) {
      if (type$.PostfixExpression._is(expression) && expression.operator.type === C.TokenType_cYV)
        return expression._operand;
      return expression;
    },
    _unwrapTarget(node, calls) {
      var t1, t2, target;
      if (Q.SourceVisitor_looksLikeStaticCall(node))
        return node;
      if (type$.MethodInvocation._is(node) && node._ast$_target != null) {
        t1 = node._ast$_target;
        t1.toString;
        t2 = H._setArrayType([], type$.JSArray_Expression);
        target = U._unwrapTarget(t1, calls);
        C.JSArray_methods.add$1(calls, new U._MethodSelector(node, t2));
        return target;
      }
      if (type$.PropertyAccess._is(node) && node._ast$_target != null) {
        t1 = node._ast$_target;
        t1.toString;
        t2 = H._setArrayType([], type$.JSArray_Expression);
        target = U._unwrapTarget(t1, calls);
        C.JSArray_methods.add$1(calls, new U._PropertySelector(node, t2));
        return target;
      }
      if (type$.PrefixedIdentifier._is(node)) {
        t1 = node._prefix;
        t2 = H._setArrayType([], type$.JSArray_Expression);
        target = U._unwrapTarget(t1, calls);
        C.JSArray_methods.add$1(calls, new U._PrefixedSelector(node, t2));
        return target;
      }
      if (type$.IndexExpression._is(node) && node._ast$_target != null) {
        t1 = node._ast$_target;
        t1.toString;
        return U._unwrapPostfix(node, t1, calls);
      }
      if (type$.FunctionExpressionInvocation._is(node))
        return U._unwrapPostfix(node, node._function, calls);
      if (type$.PostfixExpression._is(node) && node.operator.type === C.TokenType_cYV)
        return U._unwrapPostfix(node, node._operand, calls);
      return node;
    },
    _unwrapPostfix(node, target, calls) {
      target = U._unwrapTarget(target, calls);
      if (calls.length === 0)
        return node;
      C.JSArray_methods.add$1(C.JSArray_methods.get$last(calls)._postfixes, node);
      return target;
    },
    CallChainVisitor: function CallChainVisitor(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._visitor = t0;
      _._call_chain_visitor$_target = t1;
      _._properties = t2;
      _._calls = t3;
      _._blockCalls = t4;
      _._hangingCall = t5;
      _._spanEnded = _._ruleEnabled = false;
      _._propertyRule = null;
    },
    CallChainVisitor_CallChainVisitor_closure: function CallChainVisitor_CallChainVisitor_closure() {
    },
    _Selector: function _Selector() {
    },
    _MethodSelector: function _MethodSelector(t0, t1) {
      this._node = t0;
      this._postfixes = t1;
    },
    _PrefixedSelector: function _PrefixedSelector(t0, t1) {
      this._node = t0;
      this._postfixes = t1;
    },
    _PropertySelector: function _PropertySelector(t0, t1) {
      this._node = t0;
      this._postfixes = t1;
    },
    ChunkBuilder: function ChunkBuilder(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _._formatter = t0;
      _._parent = t1;
      _._chunk_builder$_source = t2;
      _._chunks = t3;
      _._pendingWhitespace = t4;
      _._rules = t5;
      _._hardSplitRules = t6;
      _._lazyRules = t7;
      _._openSpans = t8;
      _._chunk_builder$_nesting = t9;
      _._blockArgumentNesting = t10;
      _._firstFlushLeft = false;
      _._preventSplitNesting = 0;
    },
    ChunkBuilder_writeComments_closure: function ChunkBuilder_writeComments_closure() {
    },
    ChunkBuilder__hardenRules_walkConstraints: function ChunkBuilder__hardenRules_walkConstraints() {
    },
    Highlighter$(span, color) {
      var t1 = U.Highlighter__collateLines(H._setArrayType([U._Highlight$(span, true)], type$.JSArray__Highlight)),
        t2 = new U.Highlighter_closure(color).call$0(),
        t3 = C.JSInt_methods.toString$0(C.JSArray_methods.get$last(t1).number + 1),
        t4 = U.Highlighter__contiguous(t1) ? 0 : 3,
        t5 = H._arrayInstanceType(t1);
      return new U.Highlighter(t1, t2, null, 1 + Math.max(t3.length, t4), new H.MappedListIterable(t1, t5._eval$1("int(1)")._as(new U.Highlighter$__closure()), t5._eval$1("MappedListIterable<1,int>")).reduce$1(0, C.CONSTANT), !B.isAllTheSame(new H.MappedListIterable(t1, t5._eval$1("Object?(1)")._as(new U.Highlighter$__closure0()), t5._eval$1("MappedListIterable<1,Object?>"))), new P.StringBuffer(""));
    },
    Highlighter__contiguous(lines) {
      var i, thisLine, nextLine;
      for (i = 0; i < lines.length - 1;) {
        thisLine = lines[i];
        ++i;
        nextLine = lines[i];
        if (thisLine.number + 1 !== nextLine.number && thisLine.url.$eq(0, nextLine.url))
          return false;
      }
      return true;
    },
    Highlighter__collateLines(highlights) {
      var t1, t2, t3,
        highlightsByUrl = Y.groupBy(highlights, new U.Highlighter__collateLines_closure(), type$._Highlight, type$.nullable_Uri);
      for (t1 = highlightsByUrl.get$values(highlightsByUrl), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        J.sort$1$ax(t1.get$current(), new U.Highlighter__collateLines_closure0());
      t1 = highlightsByUrl.get$values(highlightsByUrl);
      t2 = H._instanceType(t1);
      t3 = t2._eval$1("ExpandIterable<Iterable.E,_Line>");
      return P.List_List$of(new H.ExpandIterable(t1, t2._eval$1("Iterable<_Line>(Iterable.E)")._as(new U.Highlighter__collateLines_closure1()), t3), true, t3._eval$1("Iterable.E"));
    },
    _Highlight$(span, primary) {
      return new U._Highlight(new U._Highlight_closure(span).call$0(), true);
    },
    _Highlight__normalizeNewlines(span) {
      var t1, endOffset, i, t2, t3, t4,
        text = span.get$text(span);
      if (!C.JSString_methods.contains$1(text, "\r\n"))
        return span;
      t1 = span.get$end();
      endOffset = t1.get$offset(t1);
      for (t1 = text.length - 1, i = 0; i < t1; ++i)
        if (C.JSString_methods._codeUnitAt$1(text, i) === 13 && C.JSString_methods._codeUnitAt$1(text, i + 1) === 10)
          --endOffset;
      t1 = span.get$start(span);
      t2 = span.get$sourceUrl();
      t3 = span.get$end().get$line();
      t2 = V.SourceLocation$(endOffset, span.get$end().get$column(), t3, t2);
      t3 = H.stringReplaceAllUnchecked(text, "\r\n", "\n");
      t4 = span.get$context();
      return X.SourceSpanWithContext$(t1, t2, t3, H.stringReplaceAllUnchecked(t4, "\r\n", "\n"));
    },
    _Highlight__normalizeTrailingNewline(span) {
      var context, text, start, end, t1, t2, t3;
      if (!C.JSString_methods.endsWith$1(span.get$context(), "\n"))
        return span;
      if (C.JSString_methods.endsWith$1(span.get$text(span), "\n\n"))
        return span;
      context = C.JSString_methods.substring$2(span.get$context(), 0, span.get$context().length - 1);
      text = span.get$text(span);
      start = span.get$start(span);
      end = span.get$end();
      if (C.JSString_methods.endsWith$1(span.get$text(span), "\n")) {
        t1 = B.findLineStart(span.get$context(), span.get$text(span), span.get$start(span).get$column());
        t1.toString;
        t1 = t1 + span.get$start(span).get$column() + span.get$length(span) === span.get$context().length;
      } else
        t1 = false;
      if (t1) {
        text = C.JSString_methods.substring$2(span.get$text(span), 0, span.get$text(span).length - 1);
        if (text.length === 0)
          end = start;
        else {
          t1 = span.get$end();
          t1 = t1.get$offset(t1);
          t2 = span.get$sourceUrl();
          t3 = span.get$end().get$line();
          if (typeof t3 !== "number")
            return t3.$sub();
          end = V.SourceLocation$(t1 - 1, U._Highlight__lastLineLength(context), t3 - 1, t2);
          t1 = span.get$start(span);
          t1 = t1.get$offset(t1);
          t2 = span.get$end();
          start = t1 === t2.get$offset(t2) ? end : span.get$start(span);
        }
      }
      return X.SourceSpanWithContext$(start, end, text, context);
    },
    _Highlight__normalizeEndOfLine(span) {
      var text, t1, t2, t3, t4;
      if (span.get$end().get$column() !== 0)
        return span;
      if (span.get$end().get$line() == span.get$start(span).get$line())
        return span;
      text = C.JSString_methods.substring$2(span.get$text(span), 0, span.get$text(span).length - 1);
      t1 = span.get$start(span);
      t2 = span.get$end();
      t2 = t2.get$offset(t2);
      t3 = span.get$sourceUrl();
      t4 = span.get$end().get$line();
      if (typeof t4 !== "number")
        return t4.$sub();
      t3 = V.SourceLocation$(t2 - 1, text.length - C.JSString_methods.lastIndexOf$1(text, "\n") - 1, t4 - 1, t3);
      return X.SourceSpanWithContext$(t1, t3, text, C.JSString_methods.endsWith$1(span.get$context(), "\n") ? C.JSString_methods.substring$2(span.get$context(), 0, span.get$context().length - 1) : span.get$context());
    },
    _Highlight__lastLineLength(text) {
      var t1 = text.length;
      if (t1 === 0)
        return 0;
      else if (C.JSString_methods.codeUnitAt$1(text, t1 - 1) === 10)
        return t1 === 1 ? 0 : t1 - C.JSString_methods.lastIndexOf$2(text, "\n", t1 - 2) - 1;
      else
        return t1 - C.JSString_methods.lastIndexOf$1(text, "\n") - 1;
    },
    Highlighter: function Highlighter(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._lines = t0;
      _._primaryColor = t1;
      _._secondaryColor = t2;
      _._paddingBeforeSidebar = t3;
      _._maxMultilineSpans = t4;
      _._multipleFiles = t5;
      _._highlighter$_buffer = t6;
    },
    Highlighter_closure: function Highlighter_closure(t0) {
      this.color = t0;
    },
    Highlighter$__closure: function Highlighter$__closure() {
    },
    Highlighter$___closure: function Highlighter$___closure() {
    },
    Highlighter$__closure0: function Highlighter$__closure0() {
    },
    Highlighter__collateLines_closure: function Highlighter__collateLines_closure() {
    },
    Highlighter__collateLines_closure0: function Highlighter__collateLines_closure0() {
    },
    Highlighter__collateLines_closure1: function Highlighter__collateLines_closure1() {
    },
    Highlighter__collateLines__closure: function Highlighter__collateLines__closure(t0) {
      this.line = t0;
    },
    Highlighter_highlight_closure: function Highlighter_highlight_closure() {
    },
    Highlighter__writeFileStart_closure: function Highlighter__writeFileStart_closure(t0) {
      this.$this = t0;
    },
    Highlighter__writeMultilineHighlights_closure: function Highlighter__writeMultilineHighlights_closure(t0, t1, t2) {
      this.$this = t0;
      this.startLine = t1;
      this.line = t2;
    },
    Highlighter__writeMultilineHighlights_closure0: function Highlighter__writeMultilineHighlights_closure0(t0, t1) {
      this.$this = t0;
      this.highlight = t1;
    },
    Highlighter__writeMultilineHighlights_closure1: function Highlighter__writeMultilineHighlights_closure1(t0) {
      this.$this = t0;
    },
    Highlighter__writeMultilineHighlights_closure2: function Highlighter__writeMultilineHighlights_closure2(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.current = t2;
      _.startLine = t3;
      _.line = t4;
      _.highlight = t5;
      _.endLine = t6;
    },
    Highlighter__writeMultilineHighlights__closure: function Highlighter__writeMultilineHighlights__closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Highlighter__writeMultilineHighlights__closure0: function Highlighter__writeMultilineHighlights__closure0(t0, t1) {
      this.$this = t0;
      this.vertical = t1;
    },
    Highlighter__writeHighlightedText_closure: function Highlighter__writeHighlightedText_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.text = t1;
      _.startColumn = t2;
      _.endColumn = t3;
    },
    Highlighter__writeIndicator_closure: function Highlighter__writeIndicator_closure(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.highlight = t2;
    },
    Highlighter__writeIndicator_closure0: function Highlighter__writeIndicator_closure0(t0, t1, t2) {
      this.$this = t0;
      this.line = t1;
      this.highlight = t2;
    },
    Highlighter__writeIndicator_closure1: function Highlighter__writeIndicator_closure1(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.coversWholeLine = t1;
      _.line = t2;
      _.highlight = t3;
    },
    Highlighter__writeSidebar_closure: function Highlighter__writeSidebar_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.end = t2;
    },
    _Highlight: function _Highlight(t0, t1) {
      this.span = t0;
      this.isPrimary = t1;
    },
    _Highlight_closure: function _Highlight_closure(t0) {
      this.span = t0;
    },
    _Line: function _Line(t0, t1, t2, t3) {
      var _ = this;
      _.text = t0;
      _.number = t1;
      _.url = t2;
      _.highlights = t3;
    }
  },
  V = {
    looksLikeName(token) {
      var t1 = token.type;
      if (t1.kind !== 97) {
        t1 = t1.stringValue;
        if ("this" !== t1)
          if (token.get$isIdentifier())
            t1 = "typedef" !== t1 || !token.next.get$isIdentifier();
          else
            t1 = false;
        else
          t1 = true;
      } else
        t1 = true;
      return t1;
    },
    looksLikeTypeParamOrArg(inDeclaration, token) {
      var next, t1;
      if (inDeclaration && token.type.kind === 97) {
        next = token.next;
        t1 = next.type;
        if (t1.kind === 97 || "," === t1.stringValue || V.isCloser(next))
          return true;
      }
      return false;
    },
    ComplexTypeInfo$(beforeStart, typeArguments) {
      var t1 = beforeStart.next;
      t1.toString;
      return new V.ComplexTypeInfo(t1, typeArguments, null, C.C_Link0, null, typeArguments.get$recovered());
    },
    isCloser(token) {
      var value = token.type.stringValue;
      return value === ">" || value === ">>" || value === ">=" || value === ">>>" || value === ">>=" || value === ">>>=";
    },
    parseCloser(beforeCloser) {
      var split, t2,
        t1 = beforeCloser.next;
      t1.toString;
      split = V.splitCloser(t1);
      if (split === t1)
        return true;
      else if (split == null)
        return false;
      t2 = split.next;
      t2.toString;
      t1 = t1.next;
      t1.toString;
      t2.setNext$1(t1);
      beforeCloser.setNext$1(split);
      return true;
    },
    splitCloser(closer) {
      var t1, t2, _null = null,
        value = closer.type.stringValue;
      if (value === ">")
        return closer;
      else if (value === ">>")
        return N.splitGtGt(closer);
      else if (value === ">=")
        return N.splitGtEq(closer);
      else if (value === ">>>") {
        t1 = L.SimpleToken$(C.TokenType_wOL, closer.offset, closer._precedingComment);
        t2 = L.SimpleToken$(C.TokenType_4XV, closer.offset + 1, _null);
        t2.next = closer.next;
        t1.setNext$1(t2);
        return t1;
      } else if (value === ">>=") {
        t1 = L.SimpleToken$(C.TokenType_wOL, closer.offset, closer._precedingComment);
        t2 = L.SimpleToken$(C.TokenType_0Ef, closer.offset + 1, _null);
        t2.next = closer.next;
        t1.setNext$1(t2);
        return t1;
      } else if (value === ">>>=") {
        t1 = L.SimpleToken$(C.TokenType_wOL, closer.offset, closer._precedingComment);
        t2 = L.SimpleToken$(C.TokenType_DCV, closer.offset + 1, _null);
        t2.next = closer.next;
        t1.setNext$1(t2);
        return t1;
      }
      return _null;
    },
    NoType: function NoType() {
    },
    PrefixedType: function PrefixedType() {
    },
    SimpleNullableTypeWith1Argument: function SimpleNullableTypeWith1Argument(t0) {
      this.typeArg = t0;
    },
    SimpleTypeWith1Argument: function SimpleTypeWith1Argument(t0) {
      this.typeArg = t0;
    },
    SimpleNullableType: function SimpleNullableType() {
    },
    SimpleType: function SimpleType() {
    },
    VoidType: function VoidType() {
    },
    ComplexTypeInfo: function ComplexTypeInfo(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.typeArguments = t1;
      _.beforeQuestionMark = null;
      _.end = t2;
      _.typeVariableStarters = t3;
      _.gftHasReturnType = t4;
      _.recovered = t5;
    },
    NoTypeParamOrArg: function NoTypeParamOrArg() {
    },
    SimpleTypeArgument1: function SimpleTypeArgument1() {
    },
    SimpleTypeArgument1GtEq: function SimpleTypeArgument1GtEq() {
    },
    SimpleTypeArgument1GtGt: function SimpleTypeArgument1GtGt() {
    },
    ComplexTypeParamOrArgInfo: function ComplexTypeParamOrArgInfo(t0, t1, t2) {
      var _ = this;
      _.start = t0;
      _.inDeclaration = t1;
      _.allowsVariance = t2;
      _.typeArgumentCount = 0;
      _.skipEnd = null;
      _.recovered = false;
    },
    AnalysisError$(source, offset, $length, errorCode, $arguments, contextMessages) {
      var t1 = new V.AnalysisError(errorCode, source),
        message = F.formatList(errorCode.get$message(errorCode), $arguments),
        correctionTemplate = errorCode.get$correction();
      if (correctionTemplate != null)
        F.formatList(correctionTemplate, $arguments);
      t1.__AnalysisError__problemMessage = new L.DiagnosticMessageImpl($length, message, offset, null);
      return t1;
    },
    AnalysisError$withNamedArguments(source, offset, $length, errorCode, $arguments) {
      var t1 = new V.AnalysisError(errorCode, source),
        messageText = Z.applyArgumentsToTemplate(errorCode.get$message(errorCode), $arguments),
        correctionTemplate = errorCode.get$correction();
      if (correctionTemplate != null)
        Z.applyArgumentsToTemplate(correctionTemplate, $arguments);
      t1.__AnalysisError__problemMessage = new L.DiagnosticMessageImpl($length, messageText, offset, null);
      return t1;
    },
    AnalysisError: function AnalysisError(t0, t1) {
      this.errorCode = t0;
      this.__AnalysisError__problemMessage = $;
      this.source = t1;
    },
    ToSourceVisitor: function ToSourceVisitor(t0) {
      this.sink = t0;
    },
    HasAnnotations: function HasAnnotations() {
    },
    HasAnnotationsBuilder: function HasAnnotationsBuilder() {
    },
    SourceLocation$(offset, column, line, sourceUrl) {
      var t1 = line == null,
        t2 = t1 ? 0 : line;
      if (offset < 0)
        H.throwExpression(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (!t1 && line < 0)
        H.throwExpression(P.RangeError$("Line may not be negative, was " + H.S(line) + "."));
      else if (column < 0)
        H.throwExpression(P.RangeError$("Column may not be negative, was " + column + "."));
      return new V.SourceLocation(sourceUrl, offset, t2, column);
    },
    SourceLocation: function SourceLocation(t0, t1, t2, t3) {
      var _ = this;
      _.sourceUrl = t0;
      _.offset = t1;
      _.line = t2;
      _.column = t3;
    },
    SourceSpanBase: function SourceSpanBase() {
    }
  },
  W = {
    _EventStreamSubscription$(_target, _eventType, onData, _useCapture, $T) {
      var t1 = onData == null ? null : W._wrapZone(new W._EventStreamSubscription_closure(onData), type$.Event);
      t1 = new W._EventStreamSubscription(_target, _eventType, t1, false, $T._eval$1("_EventStreamSubscription<0>"));
      t1._tryResume$0();
      return t1;
    },
    _wrapZone(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    HtmlElement: function HtmlElement() {
    },
    AnchorElement: function AnchorElement() {
    },
    AreaElement: function AreaElement() {
    },
    DomException: function DomException() {
    },
    Element: function Element() {
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    FormElement: function FormElement() {
    },
    InputElement: function InputElement() {
    },
    MouseEvent: function MouseEvent() {
    },
    Node0: function Node0() {
    },
    SelectElement: function SelectElement() {
    },
    TextAreaElement: function TextAreaElement() {
    },
    UIEvent: function UIEvent() {
    },
    EventStreamProvider: function EventStreamProvider(t0) {
      this.$ti = t0;
    },
    _EventStream: function _EventStream() {
    },
    _ElementEventStreamImpl: function _ElementEventStreamImpl(t0, t1, t2, t3) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    _EventStreamSubscription_onData_closure: function _EventStreamSubscription_onData_closure(t0) {
      this.handleData = t0;
    }
  },
  X = {
    isModifier(token) {
      var next, keyword,
        t1 = token.type;
      if (!t1.isModifier)
        return false;
      else if (t1.get$isBuiltIn()) {
        next = token.next;
        keyword = next.get$keyword();
        if (keyword == null && !next.get$isIdentifier() || keyword === C.Keyword_bId)
          return false;
      }
      return true;
    },
    ModifierRecoveryContext: function ModifierRecoveryContext(t0) {
      var _ = this;
      _.parser = t0;
      _.varToken = _.staticToken = _.requiredToken = _.lateToken = _.finalToken = _.externalToken = _.covariantToken = _.constToken = _.abstractToken = null;
      _.afterFactory = false;
    },
    Parser0: function Parser0(t0) {
      this.__Parser_fastaParser = this.__Parser_currentToken = $;
      this.astBuilder = t0;
    },
    Class: function Class() {
    },
    ClassBuilder: function ClassBuilder() {
    },
    _$Class: function _$Class(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.abstract = t0;
      _.annotations = t1;
      _.docs = t2;
      _.extend = t3;
      _.$implements = t4;
      _.mixins = t5;
      _.types = t6;
      _.constructors = t7;
      _.methods = t8;
      _.fields = t9;
      _.name = t10;
    },
    _$ClassBuilder: function _$ClassBuilder(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._$v = null;
      _.abstract = false;
      _.annotations = t0;
      _.docs = t1;
      _.extend = null;
      _.$implements = t2;
      _.mixins = t3;
      _.types = t4;
      _.constructors = t5;
      _.methods = t6;
      _.fields = t7;
      _.name = null;
    },
    _Class_Object_HasAnnotations: function _Class_Object_HasAnnotations() {
    },
    _Class_Object_HasAnnotations_HasDartDocs: function _Class_Object_HasAnnotations_HasDartDocs() {
    },
    _Class_Object_HasAnnotations_HasDartDocs_HasGenerics: function _Class_Object_HasAnnotations_HasDartDocs_HasGenerics() {
    },
    _ClassBuilder_Object_HasAnnotationsBuilder: function _ClassBuilder_Object_HasAnnotationsBuilder() {
    },
    _ClassBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder: function _ClassBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder() {
    },
    _ClassBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder_HasGenericsBuilder: function _ClassBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder_HasGenericsBuilder() {
    },
    CodeEmitter: function CodeEmitter() {
    },
    StaticCode: function StaticCode(t0) {
      this.code = t0;
    },
    ParsedPath_ParsedPath$parse(path, style) {
      var t1, parts, separators, start, i,
        root = style.getRoot$1(path);
      style.isRootRelative$1(path);
      if (root != null)
        path = J.substring$1$s(path, root.length);
      t1 = type$.JSArray_String;
      parts = H._setArrayType([], t1);
      separators = H._setArrayType([], t1);
      t1 = path.length;
      if (t1 !== 0 && style.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, 0))) {
        if (0 >= t1)
          return H.ioore(path, 0);
        C.JSArray_methods.add$1(separators, path[0]);
        start = 1;
      } else {
        C.JSArray_methods.add$1(separators, "");
        start = 0;
      }
      for (i = start; i < t1; ++i)
        if (style.isSeparator$1(C.JSString_methods._codeUnitAt$1(path, i))) {
          C.JSArray_methods.add$1(parts, C.JSString_methods.substring$2(path, start, i));
          C.JSArray_methods.add$1(separators, path[i]);
          start = i + 1;
        }
      if (start < t1) {
        C.JSArray_methods.add$1(parts, C.JSString_methods.substring$1(path, start));
        C.JSArray_methods.add$1(separators, "");
      }
      return new X.ParsedPath(style, root, parts, separators);
    },
    ParsedPath: function ParsedPath(t0, t1, t2, t3) {
      var _ = this;
      _.style = t0;
      _.root = t1;
      _.parts = t2;
      _.separators = t3;
    },
    PathException$(message) {
      return new X.PathException(message);
    },
    PathException: function PathException(t0) {
      this.message = t0;
    },
    SourceSpanWithContext$(start, end, text, _context) {
      var t1 = new X.SourceSpanWithContext(_context, start, end, text);
      t1.SourceSpanBase$3(start, end, text);
      if (!C.JSString_methods.contains$1(_context, text))
        H.throwExpression(P.ArgumentError$('The context line "' + _context + '" must contain "' + text + '".', null));
      if (B.findLineStart(_context, text, start.get$column()) == null)
        H.throwExpression(P.ArgumentError$('The span text "' + text + '" must start at column ' + (start.get$column() + 1) + ' in a line within "' + _context + '".', null));
      return t1;
    },
    SourceSpanWithContext: function SourceSpanWithContext(t0, t1, t2, t3) {
      var _ = this;
      _._context = t0;
      _.start = t1;
      _.end = t2;
      _.text = t3;
    }
  },
  Y = {ForwardingListener: function ForwardingListener(t0) {
      this.listener = t0;
      this.forwardErrors = true;
    }, NullListener: function NullListener(t0) {
      this.hasErrors = false;
      this.listener = t0;
      this.forwardErrors = true;
    },
    analyzeQuote(first) {
      if (J.startsWith$1$s(first, '"""'))
        return C.Quote_3;
      if (C.JSString_methods.startsWith$1(first, 'r"""'))
        return C.Quote_7;
      if (C.JSString_methods.startsWith$1(first, "'''"))
        return C.Quote_2;
      if (C.JSString_methods.startsWith$1(first, "r'''"))
        return C.Quote_6;
      if (C.JSString_methods.startsWith$1(first, '"'))
        return C.Quote_1;
      if (C.JSString_methods.startsWith$1(first, 'r"'))
        return C.Quote_5;
      if (C.JSString_methods.startsWith$1(first, "'"))
        return C.Quote_0;
      if (C.JSString_methods.startsWith$1(first, "r'"))
        return C.Quote_4;
      return H.throwExpression(P.UnsupportedError$("'" + first + "' in analyzeQuote"));
    },
    lengthOfOptionalWhitespacePrefix(first, start) {
      var t1, i, code, i0;
      for (t1 = first.length, i = start; i < t1; ++i) {
        code = C.JSString_methods._codeUnitAt$1(first, i);
        if (code === 92) {
          ++i;
          if (i < t1)
            code = C.JSString_methods._codeUnitAt$1(first, i);
          else
            break;
        }
        if (code === 9 || code === 32)
          continue;
        if (code === 13) {
          i0 = i + 1;
          return (i0 < t1 && C.JSString_methods._codeUnitAt$1(first, i0) === 10 ? i0 : i) + 1;
        }
        if (code === 10)
          return i + 1;
        break;
      }
      return start;
    },
    firstQuoteLength(first, quote) {
      switch (quote) {
        case C.Quote_0:
        case C.Quote_1:
          return 1;
        case C.Quote_2:
        case C.Quote_3:
          return Y.lengthOfOptionalWhitespacePrefix(first, 3);
        case C.Quote_4:
        case C.Quote_5:
          return 2;
        case C.Quote_6:
        case C.Quote_7:
          return Y.lengthOfOptionalWhitespacePrefix(first, 4);
        default:
          throw H.wrapException(H.ReachabilityError$(string$.x60null_c));
      }
    },
    lastQuoteLength(quote) {
      switch (quote) {
        case C.Quote_0:
        case C.Quote_1:
        case C.Quote_4:
        case C.Quote_5:
          return 1;
        case C.Quote_2:
        case C.Quote_3:
        case C.Quote_6:
        case C.Quote_7:
          return 3;
        default:
          throw H.wrapException(H.ReachabilityError$(string$.x60null_c));
      }
    },
    unescapeString(string, $location, listener) {
      var quote = Y.analyzeQuote(string),
        startIndex = Y.firstQuoteLength(string, quote),
        endIndex = string.length - Y.lastQuoteLength(quote);
      if (startIndex > endIndex)
        return "";
      return Y.unescape(J.substring$2$s(string, startIndex, endIndex), quote, $location, listener);
    },
    unescape(string, quote, $location, listener) {
      switch (quote) {
        case C.Quote_0:
        case C.Quote_1:
          return !J.contains$1$asx(string, "\\") ? string : Y.unescapeCodeUnits(new H.CodeUnits(string), false, $location, listener);
        case C.Quote_2:
        case C.Quote_3:
          return !J.contains$1$asx(string, "\\") && !C.JSString_methods.contains$1(string, "\r") ? string : Y.unescapeCodeUnits(new H.CodeUnits(string), false, $location, listener);
        case C.Quote_4:
        case C.Quote_5:
          return string;
        case C.Quote_6:
        case C.Quote_7:
          return !J.contains$1$asx(string, "\r") ? string : Y.unescapeCodeUnits(new H.CodeUnits(string), true, $location, listener);
        default:
          throw H.wrapException(H.ReachabilityError$(string$.x60null_c));
      }
    },
    unescapeCodeUnits(codeUnits, isRaw, $location, listener) {
      var t3, resultOffset, i, code, i0, j, digit, resultOffset0, _null = null,
        t1 = codeUnits._string,
        t2 = t1.length,
        result = P.List_List$filled(t2, 0, false, type$.int);
      for (t3 = !isRaw, resultOffset = 0, i = 0; i < t2; ++i, resultOffset = resultOffset0) {
        code = C.JSString_methods._codeUnitAt$1(t1, i);
        if (code === 13) {
          i0 = i + 1;
          if (i0 < t2 && C.JSString_methods._codeUnitAt$1(t1, i0) === 10)
            i = i0;
          code = 10;
        } else if (t3 && code === 92) {
          ++i;
          if (t2 === i) {
            listener.addProblem$3(C.MessageCode_ROa, $location.offset + i, 1);
            return P.String_String$fromCharCodes(codeUnits, 0, _null);
          }
          code = C.JSString_methods._codeUnitAt$1(t1, i);
          if (code === 110)
            code = 10;
          else if (code === 114)
            code = 13;
          else if (code === 102)
            code = 12;
          else if (code === 98)
            code = 8;
          else if (code === 116)
            code = 9;
          else if (code === 118)
            code = 11;
          else if (code === 120) {
            if (t2 <= i + 2) {
              listener.addProblem$3(C.MessageCode_EOr, $location.offset + i, t2 + 1 - i);
              return P.String_String$fromCharCodes(codeUnits, 0, _null);
            }
            for (i0 = i, code = 0, j = 0; j < 2; ++j) {
              ++i0;
              digit = C.JSString_methods._codeUnitAt$1(t1, i0);
              if (!F.isHexDigit(digit)) {
                listener.addProblem$3(C.MessageCode_EOr, $location.offset + i, i0 + 1 - i);
                return P.String_String$fromCharCodes(codeUnits, 0, _null);
              }
              code = (code << 4 >>> 0) + F.hexDigitValue0(digit);
            }
            i = i0;
          } else if (code === 117) {
            i0 = i + 1;
            if (t2 === i0) {
              listener.addProblem$3(C.MessageCode_ROa, $location.offset + i, t2 + 1 - i);
              return P.String_String$fromCharCodes(codeUnits, 0, _null);
            }
            if (C.JSString_methods._codeUnitAt$1(t1, i0) === 123)
              for (code = 0, j = 0; j < 7; ++j) {
                ++i0;
                if (t2 === i0) {
                  listener.addProblem$3(C.MessageCode_ROa, $location.offset + i, i0 + 1 - i);
                  return P.String_String$fromCharCodes(codeUnits, 0, _null);
                }
                digit = C.JSString_methods._codeUnitAt$1(t1, i0);
                if (j !== 0 && digit === 125)
                  break;
                if (!F.isHexDigit(digit)) {
                  listener.addProblem$3(C.MessageCode_ROa, $location.offset + i, i0 + 2 - i);
                  return P.String_String$fromCharCodes(codeUnits, 0, _null);
                }
                code = (code << 4 >>> 0) + F.hexDigitValue0(digit);
              }
            else {
              if (t2 <= i + 4) {
                listener.addProblem$3(C.MessageCode_ROa, $location.offset + i, t2 + 1 - i);
                return P.String_String$fromCharCodes(codeUnits, 0, _null);
              }
              for (i0 = i, code = 0, j = 0; j < 4; ++j) {
                ++i0;
                digit = C.JSString_methods._codeUnitAt$1(t1, i0);
                if (!F.isHexDigit(digit)) {
                  listener.addProblem$3(C.MessageCode_ROa, $location.offset + i, i0 + 1 - i);
                  return P.String_String$fromCharCodes(codeUnits, 0, _null);
                }
                code = (code << 4 >>> 0) + F.hexDigitValue0(digit);
              }
            }
            if (code > 1114111) {
              listener.addProblem$3(C.MessageCode_qGx, $location.offset + i, i0 + 1 - i);
              return P.String_String$fromCharCodes(codeUnits, 0, _null);
            }
            i = i0;
          }
        }
        resultOffset0 = resultOffset + 1;
        C.JSArray_methods.$indexSet(result, resultOffset, code);
      }
      return P.String_String$fromCharCodes(result, 0, resultOffset);
    },
    Quote: function Quote(t0) {
      this._quote$_name = t0;
    },
    NullValue: function NullValue(t0) {
      this._stack_listener$_name = t0;
    },
    StackListener: function StackListener() {
    },
    StackImpl: function StackImpl(t0) {
      this.array = t0;
      this.arrayLength = 0;
    },
    DebugStack: function DebugStack(t0, t1, t2) {
      this.realStack = t0;
      this.stackTraceStack = t1;
      this.latestStacktraces = t2;
    },
    ParserRecovery: function ParserRecovery(t0) {
      this.charOffset = t0;
    },
    KeywordState_KEYWORD_STATE() {
      var strings,
        t1 = $.KeywordState__KEYWORD_STATE;
      if (t1 == null) {
        t1 = type$.MappedListIterable_of_legacy_Keyword_and_String;
        strings = P.List_List$of(new H.MappedListIterable(C.List_Gvb, type$.String_Function_legacy_Keyword._as(new Y.KeywordState_KEYWORD_STATE_closure()), t1), false, t1._eval$1("ListIterable.E"));
        C.JSArray_methods.sort$1(strings, new Y.KeywordState_KEYWORD_STATE_closure0());
        t1 = $.KeywordState__KEYWORD_STATE = Y.KeywordState_computeKeywordStateTable(0, strings, 0, strings.length);
      }
      return t1;
    },
    KeywordState_computeKeywordStateTable(start, strings, offset, $length) {
      var t1, t2, i, isLowercase, chunk, chunkStart, isLeaf, c, syntax, _null = null,
        table = P.List_List$filled(58, _null, false, type$.nullable_KeywordState);
      for (t1 = offset + $length, t2 = start + 1, i = offset, isLowercase = true, chunk = 0, chunkStart = -1, isLeaf = false; i < t1; ++i) {
        if (i < 0 || i >= strings.length)
          return H.ioore(strings, i);
        if (J.get$length$asx(strings[i]) === start)
          isLeaf = true;
        if (i >= strings.length)
          return H.ioore(strings, i);
        if (J.get$length$asx(strings[i]) > start) {
          if (i >= strings.length)
            return H.ioore(strings, i);
          c = J.codeUnitAt$1$s(strings[i], start);
          if (65 <= c && c <= 90)
            isLowercase = false;
          if (chunk !== c) {
            if (chunkStart !== -1)
              C.JSArray_methods.$indexSet(table, chunk - 65, Y.KeywordState_computeKeywordStateTable(t2, strings, chunkStart, i - chunkStart));
            chunkStart = i;
            chunk = c;
          }
        }
      }
      if (chunkStart !== -1)
        C.JSArray_methods.$indexSet(table, chunk - 65, Y.KeywordState_computeKeywordStateTable(t2, strings, chunkStart, t1 - chunkStart));
      else {
        if (offset < 0 || offset >= strings.length)
          return H.ioore(strings, offset);
        t1 = strings[offset];
        t1 = $.$get$Keyword_keywords().$index(0, t1);
        t1.toString;
        return new Y.LeafKeywordState(t1);
      }
      if (isLeaf) {
        if (offset < 0 || offset >= strings.length)
          return H.ioore(strings, offset);
        syntax = strings[offset];
      } else
        syntax = _null;
      if (isLowercase) {
        table = C.JSArray_methods.sublist$1(table, 32);
        return new Y.LowerCaseArrayKeywordState(table, syntax == null ? _null : $.$get$Keyword_keywords().$index(0, syntax));
      } else
        return new Y.UpperCaseArrayKeywordState(table, syntax == null ? _null : $.$get$Keyword_keywords().$index(0, syntax));
    },
    KeywordState_KEYWORD_STATE_closure: function KeywordState_KEYWORD_STATE_closure() {
    },
    KeywordState_KEYWORD_STATE_closure0: function KeywordState_KEYWORD_STATE_closure0() {
    },
    ArrayKeywordState: function ArrayKeywordState() {
    },
    LowerCaseArrayKeywordState: function LowerCaseArrayKeywordState(t0, t1) {
      this.table = t0;
      this.keyword = t1;
    },
    UpperCaseArrayKeywordState: function UpperCaseArrayKeywordState(t0, t1) {
      this.table = t0;
      this.keyword = t1;
    },
    LeafKeywordState: function LeafKeywordState(t0) {
      this.keyword = t0;
    },
    $jc(hash, value) {
      if (typeof value !== "number")
        return H.iae(value);
      hash = hash + value & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    $jf(hash) {
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    BuiltValueNullFieldError$(type, field) {
      return new Y.BuiltValueNullFieldError(type, field);
    },
    BuiltValueNestedFieldError$(type, field, error) {
      return new Y.BuiltValueNestedFieldError(type, field, error);
    },
    newBuiltValueToStringHelper_closure: function newBuiltValueToStringHelper_closure() {
    },
    IndentingBuiltValueToStringHelper: function IndentingBuiltValueToStringHelper(t0) {
      this._result = t0;
    },
    BuiltValueNullFieldError: function BuiltValueNullFieldError(t0, t1) {
      this.type = t0;
      this.field = t1;
    },
    BuiltValueNestedFieldError: function BuiltValueNestedFieldError(t0, t1, t2) {
      this.type = t0;
      this.field = t1;
      this.error = t2;
    },
    HasGenerics: function HasGenerics() {
    },
    HasGenericsBuilder: function HasGenericsBuilder() {
    },
    _$Constructor__$Constructor(updates) {
      var t1 = type$.Parameter;
      t1 = new Y._$ConstructorBuilder(D.ListBuilder_ListBuilder(C.List_empty, type$.Expression_2), D.ListBuilder_ListBuilder(C.List_empty, type$.String), D.ListBuilder_ListBuilder(C.List_empty, t1), D.ListBuilder_ListBuilder(C.List_empty, t1), D.ListBuilder_ListBuilder(C.List_empty, type$.Code));
      type$.nullable_void_Function_ConstructorBuilder._as(updates).call$1(t1);
      return t1.build$0();
    },
    Constructor: function Constructor() {
    },
    ConstructorBuilder: function ConstructorBuilder() {
    },
    _$Constructor: function _$Constructor(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.annotations = t0;
      _.docs = t1;
      _.optionalParameters = t2;
      _.requiredParameters = t3;
      _.initializers = t4;
      _.body = t5;
      _.external = t6;
      _.constant = t7;
      _.factory = t8;
      _.lambda = t9;
      _.name = t10;
      _.redirect = t11;
    },
    _$ConstructorBuilder: function _$ConstructorBuilder(t0, t1, t2, t3, t4) {
      var _ = this;
      _._constructor$_$v = null;
      _.annotations = t0;
      _.docs = t1;
      _.optionalParameters = t2;
      _.requiredParameters = t3;
      _.initializers = t4;
      _.body = null;
      _.factory = _.external = _.constant = false;
      _.redirect = _.name = _.lambda = null;
    },
    _Constructor_Object_HasAnnotations: function _Constructor_Object_HasAnnotations() {
    },
    _Constructor_Object_HasAnnotations_HasDartDocs: function _Constructor_Object_HasAnnotations_HasDartDocs() {
    },
    _ConstructorBuilder_Object_HasAnnotationsBuilder: function _ConstructorBuilder_Object_HasAnnotationsBuilder() {
    },
    _ConstructorBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder: function _ConstructorBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder() {
    },
    DartFormatter$() {
      return new Y.DartFormatter(80, 0, P.LinkedHashSet_LinkedHashSet$_empty(type$.StyleFix));
    },
    DartFormatter: function DartFormatter(t0, t1, t2) {
      var _ = this;
      _.lineEnding = null;
      _.pageWidth = t0;
      _.indent = t1;
      _.fixes = t2;
    },
    DartFormatter_formatSource_closure: function DartFormatter_formatSource_closure() {
    },
    TypeArgumentRule$() {
      var t1 = H._setArrayType([], type$.JSArray_Chunk),
        t2 = $.FastHash__nextId + 1 & 268435455;
      $.FastHash__nextId = t2;
      return new Y.TypeArgumentRule(t1, 1, P.LinkedHashSet_LinkedHashSet$_empty(type$.Rule), t2);
    },
    TypeArgumentRule: function TypeArgumentRule(t0, t1, t2, t3) {
      var _ = this;
      _._type_argument$_arguments = t0;
      _._rule$_cost = t1;
      _.index = null;
      _._isHardened = false;
      _._implied = t2;
      _._allConstrainedRules = _._constrainedRules = null;
      _.id = t3;
    },
    FileLocation$_(file, offset) {
      if (offset < 0)
        H.throwExpression(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > file._decodedChars.length)
        H.throwExpression(P.RangeError$("Offset " + offset + string$.x20must_ + file.get$length(file) + "."));
      return new Y.FileLocation(file, offset);
    },
    SourceFile: function SourceFile(t0, t1, t2) {
      var _ = this;
      _.url = t0;
      _._lineStarts = t1;
      _._decodedChars = t2;
      _._cachedLine = null;
    },
    FileLocation: function FileLocation(t0, t1) {
      this.file = t0;
      this.offset = t1;
    },
    _FileSpan: function _FileSpan(t0, t1, t2) {
      this.file = t0;
      this._start = t1;
      this._end = t2;
    },
    SourceSpanMixin: function SourceSpanMixin() {
    },
    StringUtilities_endsWith3(str, c1, c2, c3) {
      var $length = str.length;
      return $length >= 3 && J.codeUnitAt$1$s(str, $length - 3) === c1 && C.JSString_methods.codeUnitAt$1(str, $length - 2) === c2 && C.JSString_methods.codeUnitAt$1(str, $length - 1) === c3;
    },
    StringUtilities_endsWithChar(str, c) {
      var $length = str.length;
      return $length > 0 && J.codeUnitAt$1$s(str, $length - 1) === c;
    },
    StringUtilities_startsWith3(str, start, c1, c2, c3) {
      return str.length - start >= 3 && J._codeUnitAt$1$s(str, start) === c1 && C.JSString_methods._codeUnitAt$1(str, start + 1) === c2 && C.JSString_methods._codeUnitAt$1(str, start + 2) === c3;
    },
    groupBy(values, key, $S, $T) {
      var t1, _i, element, t2, t3,
        map = P.LinkedHashMap_LinkedHashMap$_empty($T, $S._eval$1("List<0>"));
      for (t1 = $S._eval$1("JSArray<0>"), _i = 0; _i < 1; ++_i) {
        element = values[_i];
        t2 = key.call$1(element);
        t3 = map.$index(0, t2);
        if (t3 == null) {
          t3 = H._setArrayType([], t1);
          map.$indexSet(0, t2, t3);
          t2 = t3;
        } else
          t2 = t3;
        C.JSArray_methods.add$1(t2, element);
      }
      return map;
    }
  },
  Z = {
    demangleMixinApplicationName($name) {
      var demangledName, i, t2,
        nameParts = $name.split("&"),
        t1 = nameParts.length;
      if (t1 < 2 || $name === "&")
        return $name;
      if (1 >= t1)
        return H.ioore(nameParts, 1);
      demangledName = nameParts[1];
      for (i = 2; i < t1; ++i) {
        t2 = i === 2 ? " with " : ", ";
        demangledName = J.$add$ansx(demangledName, C.JSString_methods.$add(t2, nameParts[i]));
      }
      return demangledName;
    },
    applyArgumentsToTemplate(template, $arguments) {
      var t1 = $arguments.get$isEmpty($arguments);
      if (t1)
        return template;
      return H.stringReplaceAllFuncUnchecked(template, $.$get$templateKey(), type$.nullable_String_Function_Match._as(type$.String_Function_Match._as(new Z.applyArgumentsToTemplate_closure($arguments))), type$.nullable_String_Function_String._as(null));
    },
    _withArgumentsAsciiControlCharacter(codePoint) {
      H._asIntS(codePoint);
      return new Z.Message(C.Code_qdq, "The control character " + ("U+" + C.JSString_methods.padLeft$2(J.toRadixString$1$n(codePoint, 16).toUpperCase(), 4, "0")) + string$.x20can_o, null, P.LinkedHashMap_LinkedHashMap$_literal(["unicode", codePoint], type$.String, type$.dynamic));
    },
    _withArgumentsBinaryOperatorWrittenOut(string, string2) {
      var _s18_ = "No string provided";
      H._asStringS(string);
      H._asStringS(string2);
      if (string.length === 0)
        throw H.wrapException(_s18_);
      if (string2.length === 0)
        throw H.wrapException(_s18_);
      return new Z.Message(C.Code_BinaryOperatorWrittenOut_112_null, "Binary operator '" + string + "' is written as '" + string2 + "' instead of the written out word.", "Try replacing '" + string + "' with '" + string2 + "'.", P.LinkedHashMap_LinkedHashMap$_literal(["string", string, "string2", string2], type$.String, type$.dynamic));
    },
    _withArgumentsBuiltInIdentifierAsType(token) {
      type$.Token._as(token);
      return new Z.Message(C.Code_MDT, "The built-in identifier '" + H.S(token.get$lexeme()) + "' can't be used as a type.", null, P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsBuiltInIdentifierInDeclaration(token) {
      type$.Token._as(token);
      return new Z.Message(C.Code_UcG, "Can't use '" + H.S(token.get$lexeme()) + "' as a name here.", null, P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsConflictingModifiers(string, string2) {
      var _s18_ = "No string provided";
      H._asStringS(string);
      H._asStringS(string2);
      if (string.length === 0)
        throw H.wrapException(_s18_);
      if (string2.length === 0)
        throw H.wrapException(_s18_);
      return new Z.Message(C.Code_ConflictingModifiers_59_null, "Members can't be declared to be both '" + string + "' and '" + string2 + "'.", "Try removing one of the keywords.", P.LinkedHashMap_LinkedHashMap$_literal(["string", string, "string2", string2], type$.String, type$.dynamic));
    },
    _withArgumentsConstFieldWithoutInitializer($name) {
      H._asStringS($name);
      if ($name.length === 0)
        throw H.wrapException("No name provided");
      $name = Z.demangleMixinApplicationName($name);
      return new Z.Message(C.Code_8eb, "The const variable '" + H.S($name) + "' must be initialized.", string$.Try_ad, P.LinkedHashMap_LinkedHashMap$_literal(["name", $name], type$.String, type$.dynamic));
    },
    _withArgumentsDuplicateLabelInSwitchStatement($name) {
      H._asStringS($name);
      if ($name.length === 0)
        throw H.wrapException("No name provided");
      $name = Z.demangleMixinApplicationName($name);
      return new Z.Message(C.Code_ERY, "The label '" + H.S($name) + "' was already used in this switch statement.", string$.Try_ch, P.LinkedHashMap_LinkedHashMap$_literal(["name", $name], type$.String, type$.dynamic));
    },
    _withArgumentsDuplicatedModifier(token) {
      type$.Token._as(token);
      return new Z.Message(C.Code_DuplicatedModifier_70_null, "The modifier '" + H.S(token.get$lexeme()) + "' was already specified.", string$.Try_rem, P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsExpectedAfterButGot(string) {
      H._asStringS(string);
      if (string.length === 0)
        throw H.wrapException("No string provided");
      return new Z.Message(C.Code_MUB, "Expected '" + string + "' after this.", null, P.LinkedHashMap_LinkedHashMap$_literal(["string", string], type$.String, type$.dynamic));
    },
    _withArgumentsExpectedButGot(string) {
      H._asStringS(string);
      if (string.length === 0)
        throw H.wrapException("No string provided");
      return new Z.Message(C.Code_gT2, "Expected '" + string + "' before this.", null, P.LinkedHashMap_LinkedHashMap$_literal(["string", string], type$.String, type$.dynamic));
    },
    _withArgumentsExpectedClassMember(token) {
      type$.Token._as(token);
      return new Z.Message(C.Code_K6C, "Expected a class member, but got '" + H.S(token.get$lexeme()) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsExpectedClassOrMixinBody(string) {
      H._asStringS(string);
      if (string.length === 0)
        throw H.wrapException("No string provided");
      return new Z.Message(C.Code_ExpectedClassOrMixinBody_8_null, "A " + string + " must have a body, even if it is empty.", "Try adding an empty body.", P.LinkedHashMap_LinkedHashMap$_literal(["string", string], type$.String, type$.dynamic));
    },
    _withArgumentsExpectedDeclaration(token) {
      type$.Token._as(token);
      return new Z.Message(C.Code_6YB, "Expected a declaration, but got '" + H.S(token.get$lexeme()) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsExpectedEnumBody(token) {
      type$.Token._as(token);
      return new Z.Message(C.Code_Azp, "Expected a enum body, but got '" + H.S(token.get$lexeme()) + "'.", string$.An_enu, P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsExpectedFunctionBody(token) {
      type$.Token._as(token);
      return new Z.Message(C.Code_uFz, "Expected a function body, but got '" + H.S(token.get$lexeme()) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsExpectedIdentifier(token) {
      var lexeme;
      type$.Token._as(token);
      lexeme = token.get$lexeme();
      return new Z.Message(C.Code_a3F, "Expected an identifier, but got '" + H.S(lexeme) + "'.", "Try inserting an identifier before '" + H.S(lexeme) + "'.", P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsExpectedIdentifierButGotKeyword(token) {
      type$.Token._as(token);
      return new Z.Message(C.Code_U4q, "'" + H.S(token.get$lexeme()) + "' can't be used as an identifier because it's a keyword.", string$.Try_ren, P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsExpectedInstead(string) {
      H._asStringS(string);
      if (string.length === 0)
        throw H.wrapException("No string provided");
      return new Z.Message(C.Code_ExpectedInstead_41_null, "Expected '" + string + "' instead of this.", null, P.LinkedHashMap_LinkedHashMap$_literal(["string", string], type$.String, type$.dynamic));
    },
    _withArgumentsExpectedString(token) {
      type$.Token._as(token);
      return new Z.Message(C.Code_P50, "Expected a String, but got '" + H.S(token.get$lexeme()) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsExpectedToken(string) {
      H._asStringS(string);
      if (string.length === 0)
        throw H.wrapException("No string provided");
      return new Z.Message(C.Code_v60, "Expected to find '" + string + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["string", string], type$.String, type$.dynamic));
    },
    _withArgumentsExpectedType(token) {
      type$.Token._as(token);
      return new Z.Message(C.Code_vMb, "Expected a type, but got '" + H.S(token.get$lexeme()) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsExperimentNotEnabled(string, string2) {
      var _s18_ = "No string provided";
      H._asStringS(string);
      H._asStringS(string2);
      if (string.length === 0)
        throw H.wrapException(_s18_);
      if (string2.length === 0)
        throw H.wrapException(_s18_);
      return new Z.Message(C.Code_ExperimentNotEnabled_48_null, "This requires the '" + string + "' language feature to be enabled.", "Try updating your pubspec.yaml to set the minimum SDK constraint to " + string2 + " or higher, and running 'pub get'.", P.LinkedHashMap_LinkedHashMap$_literal(["string", string, "string2", string2], type$.String, type$.dynamic));
    },
    _withArgumentsExtraneousModifier(token) {
      var lexeme;
      type$.Token._as(token);
      lexeme = token.get$lexeme();
      return new Z.Message(C.Code_ExtraneousModifier_77_null, "Can't have modifier '" + H.S(lexeme) + "' here.", "Try removing '" + H.S(lexeme) + "'.", P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsExtraneousModifierInExtension(token) {
      var lexeme;
      type$.Token._as(token);
      lexeme = token.get$lexeme();
      return new Z.Message(C.Code_ge0, "Can't have modifier '" + H.S(lexeme) + "' in an extension.", "Try removing '" + H.S(lexeme) + "'.", P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsFinalFieldWithoutInitializer($name) {
      H._asStringS($name);
      if ($name.length === 0)
        throw H.wrapException("No name provided");
      $name = Z.demangleMixinApplicationName($name);
      return new Z.Message(C.Code_OXJ, "The final variable '" + H.S($name) + "' must be initialized.", string$.Try_ad, P.LinkedHashMap_LinkedHashMap$_literal(["name", $name], type$.String, type$.dynamic));
    },
    _withArgumentsInternalProblemStackNotEmpty($name, string) {
      H._asStringS($name);
      H._asStringS(string);
      if ($name.length === 0)
        throw H.wrapException("No name provided");
      $name = Z.demangleMixinApplicationName($name);
      if (string.length === 0)
        throw H.wrapException("No string provided");
      return new Z.Message(C.Code_ASw, H.S($name) + ".stack isn't empty:\n  " + string, null, P.LinkedHashMap_LinkedHashMap$_literal(["name", $name, "string", string], type$.String, type$.dynamic));
    },
    _withArgumentsInternalProblemUnhandled(string, string2) {
      var _s18_ = "No string provided";
      H._asStringS(string);
      H._asStringS(string2);
      if (string.length === 0)
        throw H.wrapException(_s18_);
      if (string2.length === 0)
        throw H.wrapException(_s18_);
      return new Z.Message(C.Code_InternalProblemUnhandled_m1_null, "Unhandled " + string + " in " + string2 + ".", null, P.LinkedHashMap_LinkedHashMap$_literal(["string", string, "string2", string2], type$.String, type$.dynamic));
    },
    _withArgumentsInvalidOperator(token) {
      type$.Token._as(token);
      return new Z.Message(C.Code_InvalidOperator_39_null, "The string '" + H.S(token.get$lexeme()) + "' isn't a user-definable operator.", null, P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsLiteralWithClass(string, token) {
      var lexeme;
      H._asStringS(string);
      type$.Token._as(token);
      if (string.length === 0)
        throw H.wrapException("No string provided");
      lexeme = token.get$lexeme();
      return new Z.Message(C.Code_LiteralWithClass_116_null, "A " + string + " literal can't be prefixed by '" + H.S(lexeme) + "'.", "Try removing '" + H.S(lexeme) + "'", P.LinkedHashMap_LinkedHashMap$_literal(["string", string, "lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsLiteralWithClassAndNew(string, token) {
      var lexeme;
      H._asStringS(string);
      type$.Token._as(token);
      if (string.length === 0)
        throw H.wrapException("No string provided");
      lexeme = token.get$lexeme();
      return new Z.Message(C.Code_LiteralWithClassAndNew_115_null, "A " + string + " literal can't be prefixed by 'new " + H.S(lexeme) + "'.", "Try removing 'new' and '" + H.S(lexeme) + "'", P.LinkedHashMap_LinkedHashMap$_literal(["string", string, "lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsModifierOutOfOrder(string, string2) {
      var _s18_ = "No string provided";
      H._asStringS(string);
      H._asStringS(string2);
      if (string.length === 0)
        throw H.wrapException(_s18_);
      if (string2.length === 0)
        throw H.wrapException(_s18_);
      return new Z.Message(C.Code_ModifierOutOfOrder_56_null, "The modifier '" + string + "' should be before the modifier '" + string2 + "'.", "Try re-ordering the modifiers.", P.LinkedHashMap_LinkedHashMap$_literal(["string", string, "string2", string2], type$.String, type$.dynamic));
    },
    _withArgumentsNonAsciiIdentifier(character, codePoint) {
      var t1, unicode;
      H._asStringS(character);
      H._asIntS(codePoint);
      character.toString;
      t1 = new P.Runes(character);
      if (t1.get$length(t1) !== 1)
        throw H.wrapException("Not a character '" + character + "'");
      unicode = "U+" + C.JSString_methods.padLeft$2(J.toRadixString$1$n(codePoint, 16).toUpperCase(), 4, "0");
      return new Z.Message(C.Code_7A3, "The non-ASCII character '" + character + "' (" + unicode + ") can't be used in identifiers, only in strings and comments.", "Try using an US-ASCII letter, a digit, '_' (an underscore), or '$' (a dollar sign).", P.LinkedHashMap_LinkedHashMap$_literal(["character", character, "unicode", codePoint], type$.String, type$.dynamic));
    },
    _withArgumentsNonAsciiWhitespace(codePoint) {
      H._asIntS(codePoint);
      return new Z.Message(C.Code_wC2, "The non-ASCII space character " + ("U+" + C.JSString_methods.padLeft$2(J.toRadixString$1$n(codePoint, 16).toUpperCase(), 4, "0")) + string$.x20can_o, null, P.LinkedHashMap_LinkedHashMap$_literal(["unicode", codePoint], type$.String, type$.dynamic));
    },
    _withArgumentsUnexpectedModifierInNonNnbd(token) {
      type$.Token._as(token);
      return new Z.Message(C.Code_QEL, "The modifier '" + H.S(token.get$lexeme()) + "' is only available in null safe libraries.", null, P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsUnexpectedToken(token) {
      type$.Token._as(token);
      return new Z.Message(C.Code_e3S, "Unexpected token '" + H.S(token.get$lexeme()) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsUnmatchedToken(string, token) {
      var lexeme;
      H._asStringS(string);
      type$.Token._as(token);
      if (string.length === 0)
        throw H.wrapException("No string provided");
      lexeme = token.get$lexeme();
      return new Z.Message(C.Code_kmC, "Can't find '" + string + "' to match '" + H.S(lexeme) + "'.", null, P.LinkedHashMap_LinkedHashMap$_literal(["string", string, "lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsUnsupportedOperator(token) {
      type$.Token._as(token);
      return new Z.Message(C.Code_0, "The '" + H.S(token.get$lexeme()) + "' operator is not supported.", null, P.LinkedHashMap_LinkedHashMap$_literal(["lexeme", token], type$.String, type$.dynamic));
    },
    _withArgumentsUnterminatedString(string, string2) {
      var _s18_ = "No string provided";
      H._asStringS(string);
      H._asStringS(string2);
      if (string.length === 0)
        throw H.wrapException(_s18_);
      if (string2.length === 0)
        throw H.wrapException(_s18_);
      return new Z.Message(C.Code_2ru, "String starting with " + string + " must end with " + string2 + ".", null, P.LinkedHashMap_LinkedHashMap$_literal(["string", string, "string2", string2], type$.String, type$.dynamic));
    },
    Code: function Code(t0, t1, t2, t3) {
      var _ = this;
      _.name = t0;
      _.index = t1;
      _.analyzerCodes = t2;
      _.$ti = t3;
    },
    Message: function Message(t0, t1, t2, t3) {
      var _ = this;
      _.code = t0;
      _.message = t1;
      _.tip = t2;
      _.$arguments = t3;
    },
    MessageCode: function MessageCode(t0, t1, t2, t3) {
      var _ = this;
      _.message = t0;
      _.name = t1;
      _.index = t2;
      _.analyzerCodes = t3;
    },
    Template: function Template(t0, t1) {
      this.withArguments = t0;
      this.$ti = t1;
    },
    applyArgumentsToTemplate_closure: function applyArgumentsToTemplate_closure(t0) {
      this.$arguments = t0;
    },
    ErrorReporter: function ErrorReporter(t0, t1, t2) {
      this._errorListener = t0;
      this.isNonNullableByDefault = t1;
      this._listener$_source = t2;
    },
    ErrorReporter__convertTypeNames_closure: function ErrorReporter__convertTypeNames_closure() {
    },
    RecordingErrorListener: function RecordingErrorListener() {
      this._errors = null;
    },
    _TypeToConvert_allElements_addElementsFrom: function _TypeToConvert_allElements_addElementsFrom(t0) {
      this.elements = t0;
    },
    _TypeToConvert_allElements_closure: function _TypeToConvert_allElements_closure() {
    },
    AnalyzerErrorCode: function AnalyzerErrorCode() {
    },
    Source: function Source() {
    },
    LineSplitter$(writer, chunks, blockIndentation, firstLineIndent, flushLeft) {
      var t1 = P.List_List$filled(7, null, false, type$.nullable_SolveState),
        t2 = H._arrayInstanceType(chunks),
        t3 = type$.WhereTypeIterable_Rule;
      t3 = P.LinkedHashSet_LinkedHashSet$of(new H.WhereTypeIterable(new H.MappedListIterable(chunks, t2._eval$1("Rule?(1)")._as(new Z.LineSplitter_closure()), t2._eval$1("MappedListIterable<1,Rule?>")), t3), t3._eval$1("Iterable.E"));
      t3 = P.List_List$of(t3, false, H._instanceType(t3)._precomputed1);
      if (flushLeft)
        t2 = 0;
      else {
        if (typeof firstLineIndent !== "number")
          return firstLineIndent.$add();
        t2 = firstLineIndent + blockIndentation;
      }
      t1 = new Z.LineSplitter(writer, chunks, t3, blockIndentation, t2, new O.SolveStateQueue(t1));
      t1.LineSplitter$5$flushLeft(writer, chunks, blockIndentation, firstLineIndent, flushLeft);
      return t1;
    },
    LineSplitter: function LineSplitter(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.writer = t0;
      _.chunks = t1;
      _.rules = t2;
      _.blockIndentation = t3;
      _.firstLineIndent = t4;
      _._queue = t5;
    },
    LineSplitter_closure: function LineSplitter_closure() {
    },
    PositionalRule$(collectionRule, leadingCollections, trailingCollections) {
      var t1 = H._setArrayType([], type$.JSArray_nullable_Chunk),
        t2 = $.FastHash__nextId + 1 & 268435455;
      $.FastHash__nextId = t2;
      return new Z.PositionalRule(t1, collectionRule, leadingCollections, trailingCollections, 1, P.LinkedHashSet_LinkedHashSet$_empty(type$.Rule), t2);
    },
    NamedRule$(collectionRule, leadingCollections, trailingCollections) {
      var t1 = H._setArrayType([], type$.JSArray_nullable_Chunk),
        t2 = $.FastHash__nextId + 1 & 268435455;
      $.FastHash__nextId = t2;
      return new Z.NamedRule(t1, collectionRule, leadingCollections, trailingCollections, 1, P.LinkedHashSet_LinkedHashSet$_empty(type$.Rule), t2);
    },
    ArgumentRule: function ArgumentRule() {
    },
    PositionalRule: function PositionalRule(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._namedArgsRule = null;
      _._argument$_arguments = t0;
      _._collectionRule = t1;
      _._leadingCollections = t2;
      _._trailingCollections = t3;
      _._trackInnerRules = true;
      _._rule$_cost = t4;
      _.index = null;
      _._isHardened = false;
      _._implied = t5;
      _._allConstrainedRules = _._constrainedRules = null;
      _.id = t6;
    },
    NamedRule: function NamedRule(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._argument$_arguments = t0;
      _._collectionRule = t1;
      _._leadingCollections = t2;
      _._trailingCollections = t3;
      _._trackInnerRules = true;
      _._rule$_cost = t4;
      _.index = null;
      _._isHardened = false;
      _._implied = t5;
      _._allConstrainedRules = _._constrainedRules = null;
      _.id = t6;
    }
  };
  var holders = [A, B, C, D, E, F, G, H, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq(receiver, other) {
      return receiver === other;
    },
    get$hashCode(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0(receiver) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(receiver)) + "'";
    },
    get$runtimeType(receiver) {
      return H.getRuntimeType(receiver);
    }
  };
  J.JSBool.prototype = {
    toString$0(receiver) {
      return String(receiver);
    },
    $or(receiver, other) {
      return other || receiver;
    },
    get$hashCode(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType(receiver) {
      return C.Type_bool_lhE;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq(receiver, other) {
      return null == other;
    },
    toString$0(receiver) {
      return "null";
    },
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return C.Type_Null_Yyn;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode(receiver) {
      return 0;
    },
    get$runtimeType(receiver) {
      return C.Type_JSObject_8k0;
    },
    toString$0(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1(receiver, value) {
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1(receiver, index) {
      var t1;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      t1 = receiver.length;
      if (index >= t1)
        throw H.wrapException(P.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2(receiver, index, value) {
      var t1;
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insert"));
      t1 = receiver.length;
      if (index > t1)
        throw H.wrapException(P.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2(receiver, index, iterable) {
      var t1, insertionLength, end;
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insertAll"));
      t1 = receiver.length;
      P.RangeError_checkValueInInterval(index, 0, t1, "index");
      insertionLength = iterable.length;
      receiver.length = t1 + insertionLength;
      end = index + insertionLength;
      this.setRange$4(receiver, end, receiver.length, receiver, index);
      this.setRange$3(receiver, index, end, iterable);
    },
    removeLast$0(receiver) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeLast"));
      if (receiver.length === 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    remove$1(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    _removeWhere$2(receiver, test, removeMatching) {
      var retained, end, i, element, t1;
      H._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      retained = [];
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (!H.boolConversionCheck(test.call$1(element)))
          retained.push(element);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      t1 = retained.length;
      if (t1 === end)
        return;
      this.set$length(receiver, t1);
      for (i = 0; i < retained.length; ++i)
        receiver[i] = retained[i];
    },
    addAll$1(receiver, collection) {
      var t1;
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(collection);
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      if (Array.isArray(collection)) {
        this._addAllFromArray$1(receiver, collection);
        return;
      }
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    _addAllFromArray$1(receiver, array) {
      var len, i;
      type$.JSArray_dynamic._as(array);
      len = array.length;
      if (len === 0)
        return;
      if (receiver === array)
        throw H.wrapException(P.ConcurrentModificationError$(receiver));
      for (i = 0; i < len; ++i)
        receiver.push(array[i]);
    },
    forEach$1(receiver, f) {
      var end, i;
      H._arrayInstanceType(receiver)._eval$1("~(1)")._as(f);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1(receiver, f, $T) {
      var t1 = H._arrayInstanceType(receiver);
      return new H.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(2)")._as(f), t1._eval$1("@<1>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    join$1(receiver, separator) {
      var i,
        list = P.List_List$filled(receiver.length, "", false, type$.String);
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, H.S(receiver[i]));
      return list.join(separator);
    },
    take$1(receiver, n) {
      return H.SubListIterable$(receiver, 0, H.checkNotNullable(n, "count", type$.int), H._arrayInstanceType(receiver)._precomputed1);
    },
    takeWhile$1(receiver, test) {
      var t1 = H._arrayInstanceType(receiver);
      return new H.TakeWhileIterable(receiver, t1._eval$1("bool(1)")._as(test), t1._eval$1("TakeWhileIterable<1>"));
    },
    skip$1(receiver, n) {
      return H.SubListIterable$(receiver, n, null, H._arrayInstanceType(receiver)._precomputed1);
    },
    fold$1$2(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      H._arrayInstanceType(receiver)._bind$1($T)._eval$1("1(1,2)")._as(combine);
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    sublist$2(receiver, start, end) {
      var end0 = receiver.length;
      if (start > end0)
        throw H.wrapException(P.RangeError$range(start, 0, end0, "start", null));
      if (end == null)
        end = end0;
      else if (end < start || end > end0)
        throw H.wrapException(P.RangeError$range(end, start, end0, "end", null));
      if (start === end)
        return H._setArrayType([], H._arrayInstanceType(receiver));
      return H._setArrayType(receiver.slice(start, end), H._arrayInstanceType(receiver));
    },
    sublist$1($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    get$first(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$single(receiver) {
      var t1 = receiver.length;
      if (t1 === 1) {
        if (0 >= t1)
          return H.ioore(receiver, 0);
        return receiver[0];
      }
      if (t1 === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      throw H.wrapException(H.IterableElementError_tooMany());
    },
    removeRange$2(receiver, start, end) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeRange"));
      P.RangeError_checkValidRange(start, end, receiver.length);
      receiver.splice(start, end - start);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherList, t1, i;
      H._arrayInstanceType(receiver)._eval$1("Iterable<1>")._as(iterable);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("setRange"));
      P.RangeError_checkValidRange(start, end, receiver.length);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      otherList = iterable;
      t1 = J.getInterceptor$asx(otherList);
      if (skipCount + $length > t1.get$length(otherList))
        throw H.wrapException(H.IterableElementError_tooFew());
      if (skipCount < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, skipCount + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, skipCount + i);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    any$1(receiver, test) {
      var end, i;
      H._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (H.boolConversionCheck(test.call$1(receiver[i])))
          return true;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    every$1(receiver, test) {
      var end, i;
      H._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (!H.boolConversionCheck(test.call$1(receiver[i])))
          return false;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    get$reversed(receiver) {
      return new H.ReversedListIterable(receiver, H._arrayInstanceType(receiver)._eval$1("ReversedListIterable<1>"));
    },
    sort$1(receiver, compare) {
      var t1 = H._arrayInstanceType(receiver);
      t1._eval$1("int(1,1)?")._as(compare);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      H.Sort_sort(receiver, compare, t1._precomputed1);
    },
    indexOf$2(receiver, element, start) {
      var i,
        $length = receiver.length;
      if (start >= $length)
        return -1;
      for (i = start; i < $length; ++i) {
        if (i >= receiver.length)
          return H.ioore(receiver, i);
        if (J.$eq$(receiver[i], element))
          return i;
      }
      return -1;
    },
    indexOf$1($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    contains$1(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty(receiver) {
      return receiver.length !== 0;
    },
    toString$0(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable(receiver, growable) {
      var t1 = H._arrayInstanceType(receiver);
      return growable ? H._setArrayType(receiver.slice(0), t1) : J.JSArray_JSArray$markFixed(receiver.slice(0), t1._precomputed1);
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, H._arrayInstanceType(receiver)._eval$1("ArrayIterator<1>"));
    },
    get$hashCode(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length(receiver) {
      return receiver.length;
    },
    set$length(receiver, newLength) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $index(receiver, index) {
      if (!H._isInt(index))
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      H._asIntS(index);
      H._arrayInstanceType(receiver)._precomputed1._as(value);
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (!H._isInt(index))
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    indexWhere$2(receiver, test, start) {
      var i;
      H._arrayInstanceType(receiver)._eval$1("bool(1)")._as(test);
      if (start >= receiver.length)
        return -1;
      for (i = start; i < receiver.length; ++i)
        if (H.boolConversionCheck(test.call$1(receiver[i])))
          return i;
      return -1;
    },
    indexWhere$1($receiver, test) {
      return this.indexWhere$2($receiver, test, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current() {
      return this._current;
    },
    moveNext$0() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current(_current) {
      this._current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1(receiver, b) {
      var bIsNegative;
      H._asNumS(b);
      if (typeof b != "number")
        throw H.wrapException(H.argumentErrorValue(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toRadixString$1(receiver, radix) {
      var result, match, t1, exponent;
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (C.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        H.throwExpression(P.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return H.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return H.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + C.JSString_methods.$mul("0", exponent);
    },
    toString$0(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return intValue & 536870911;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259 & 536870911;
    },
    $mod(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      return result + other;
    },
    _tdivFast$1(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
    },
    _shrOtherPositive$1(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1(receiver, other) {
      if (0 > other)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    get$runtimeType(receiver) {
      return C.Type_num_cv7;
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$runtimeType(receiver) {
      return C.Type_int_tHn;
    },
    $isint: 1
  };
  J.JSNumNotInt.prototype = {
    get$runtimeType(receiver) {
      return C.Type_double_K1J;
    }
  };
  J.JSString.prototype = {
    codeUnitAt$1(receiver, index) {
      if (!H._isInt(index))
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        H.throwExpression(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    allMatches$2(receiver, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw H.wrapException(P.RangeError$range(start, 0, t1, null, null));
      return new H._StringAllMatchesIterable(string, receiver, start);
    },
    allMatches$1($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    matchAsPrefix$2(receiver, string, start) {
      var t1, i, _null = null;
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, _null, _null));
      t1 = receiver.length;
      if (start + t1 > string.length)
        return _null;
      for (i = 0; i < t1; ++i)
        if (this.codeUnitAt$1(string, start + i) !== this._codeUnitAt$1(receiver, i))
          return _null;
      return new H.StringMatch(start, receiver);
    },
    $add(receiver, other) {
      if (typeof other != "string")
        throw H.wrapException(P.ArgumentError$value(other, null, null));
      return receiver + other;
    },
    endsWith$1(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceRange$3(receiver, start, end, replacement) {
      var e = P.RangeError_checkValidRange(start, end, receiver.length);
      return H.stringReplaceRangeUnchecked(receiver, start, e, replacement);
    },
    startsWith$2(receiver, pattern, index) {
      var endIndex;
      if (index < 0 || index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
      if (typeof pattern == "string") {
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
    },
    startsWith$1($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2(receiver, start, end) {
      return receiver.substring(start, P.RangeError_checkValidRange(start, end, receiver.length));
    },
    substring$1($receiver, start) {
      return this.substring$2($receiver, start, null);
    },
    trim$0(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    trimRight$0(receiver) {
      var result, endIndex, t1;
      if (typeof receiver.trimRight != "undefined") {
        result = receiver.trimRight();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        t1 = endIndex - 1;
        if (this.codeUnitAt$1(result, t1) === 133)
          endIndex = J.JSString__skipTrailingWhitespace(result, t1);
      } else {
        endIndex = J.JSString__skipTrailingWhitespace(receiver, receiver.length);
        result = receiver;
      }
      if (endIndex === result.length)
        return result;
      if (endIndex === 0)
        return "";
      return result.substring(0, endIndex);
    },
    $mul(receiver, times) {
      var s, result;
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    padLeft$1($receiver, width) {
      return this.padLeft$2($receiver, width, " ");
    },
    padRight$1(receiver, width) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return receiver + this.$mul(" ", delta);
    },
    indexOf$2(receiver, pattern, start) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      t1 = receiver.indexOf(pattern, start);
      return t1;
    },
    indexOf$1($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2(receiver, pattern, start) {
      var t1, t2;
      if (start == null)
        start = receiver.length;
      else if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$2(receiver, other, startIndex) {
      var t1 = receiver.length;
      if (startIndex > t1)
        throw H.wrapException(P.RangeError$range(startIndex, 0, t1, null, null));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    compareTo$1(receiver, other) {
      var t1;
      H._asStringS(other);
      if (typeof other != "string")
        throw H.wrapException(H.argumentErrorValue(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0(receiver) {
      return receiver;
    },
    get$hashCode(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = hash + receiver.charCodeAt(i) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    get$runtimeType(receiver) {
      return C.Type_String_k8F;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isPattern: 1,
    $isString: 1
  };
  H.LateError.prototype = {
    toString$0(_) {
      var t1 = "LateInitializationError: " + this._message;
      return t1;
    }
  };
  H.ReachabilityError.prototype = {
    toString$0(_) {
      var t1 = "ReachabilityError: " + this._message;
      return t1;
    }
  };
  H.CodeUnits.prototype = {
    get$length(_) {
      return this._string.length;
    },
    $index(_, i) {
      return C.JSString_methods.codeUnitAt$1(this._string, i);
    }
  };
  H.nullFuture_closure.prototype = {
    call$0() {
      var t1 = new P._Future($.Zone__current, type$._Future_Null);
      t1._asyncComplete$1(null);
      return t1;
    },
    $signature: 34
  };
  H.NotNullableError.prototype = {
    toString$0(_) {
      return "Null is not a valid value for the parameter '" + this._name + "' of type '" + H.createRuntimeType(this.$ti._precomputed1).toString$0(0) + "'";
    },
    $isTypeError: 1
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator(_) {
      var _this = this;
      return new H.ListIterator(_this, _this.get$length(_this), H._instanceType(_this)._eval$1("ListIterator<ListIterable.E>"));
    },
    forEach$1(_, action) {
      var $length, i, _this = this;
      H._instanceType(_this)._eval$1("~(ListIterable.E)")._as(action);
      $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        action.call$1(_this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$first(_) {
      if (this.get$length(this) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    join$1(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = H.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + H.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += H.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    map$1$1(_, toElement, $T) {
      var t1 = H._instanceType(this);
      return new H.MappedListIterable(this, t1._bind$1($T)._eval$1("1(ListIterable.E)")._as(toElement), t1._eval$1("@<ListIterable.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    reduce$1(_, combine) {
      var $length, value, i, _this = this;
      H._instanceType(_this)._eval$1("ListIterable.E(ListIterable.E,ListIterable.E)")._as(combine);
      $length = _this.get$length(_this);
      if ($length === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      value = _this.elementAt$1(0, 0);
      for (i = 1; i < $length; ++i) {
        value = combine.call$2(value, _this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return value;
    },
    toList$1$growable(_, growable) {
      return P.List_List$of(this, growable, H._instanceType(this)._eval$1("ListIterable.E"));
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.SubListIterable.prototype = {
    SubListIterable$3(_iterable, _start, _endOrLength, $E) {
      var endOrLength,
        t1 = this.__internal$_start;
      P.RangeError_checkNotNegative(t1, "start");
      endOrLength = this._endOrLength;
      if (endOrLength != null) {
        P.RangeError_checkNotNegative(endOrLength, "end");
        if (typeof t1 !== "number")
          return t1.$gt();
        if (t1 > endOrLength)
          throw H.wrapException(P.RangeError$range(t1, 0, endOrLength, "start", null));
      }
    },
    get$_endIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength > $length)
        return $length;
      return endOrLength;
    },
    get$_startIndex() {
      var $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length(_) {
      var endOrLength,
        $length = J.get$length$asx(this.__internal$_iterable),
        t1 = this.__internal$_start;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= $length)
        return 0;
      endOrLength = this._endOrLength;
      if (endOrLength == null || endOrLength >= $length)
        return $length - t1;
      if (typeof endOrLength !== "number")
        return endOrLength.$sub();
      return endOrLength - t1;
    },
    elementAt$1(_, index) {
      var realIndex, _this = this,
        t1 = _this.get$_startIndex();
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof index !== "number")
        return H.iae(index);
      realIndex = t1 + index;
      if (index < 0 || realIndex >= _this.get$_endIndex())
        throw H.wrapException(P.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this.__internal$_iterable, realIndex);
    },
    skip$1(_, count) {
      var t1, newStart, endOrLength, _this = this;
      P.RangeError_checkNotNegative(count, "count");
      t1 = _this.__internal$_start;
      if (typeof t1 !== "number")
        return t1.$add();
      newStart = t1 + count;
      endOrLength = _this._endOrLength;
      if (endOrLength != null && newStart >= endOrLength)
        return new H.EmptyIterable(_this.$ti._eval$1("EmptyIterable<1>"));
      return H.SubListIterable$(_this.__internal$_iterable, newStart, endOrLength, _this.$ti._precomputed1);
    },
    toList$1$growable(_, growable) {
      var $length, result, i, _this = this,
        start = _this.__internal$_start,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        endOrLength = _this._endOrLength;
      if (endOrLength != null && endOrLength < end)
        end = endOrLength;
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length <= 0) {
        t1 = _this.$ti._precomputed1;
        return growable ? J.JSArray_JSArray$growable(0, t1) : J.JSArray_JSArray$fixed(0, t1);
      }
      result = P.List_List$filled($length, t2.elementAt$1(t1, start), growable, _this.$ti._precomputed1);
      for (i = 1; i < $length; ++i) {
        C.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        if (t2.get$length(t1) < end)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return result;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.ListIterator.prototype = {
    get$current() {
      return this.__internal$_current;
    },
    moveNext$0() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator(_) {
      var t1 = H._instanceType(this);
      return new H.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("MappedIterator<1,2>"));
    },
    get$length(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1};
  H.MappedIterator.prototype = {
    moveNext$0() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current() {
      return this.__internal$_current;
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    }
  };
  H.MappedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    }
  };
  H.WhereIterable.prototype = {
    get$iterator(_) {
      return new H.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("WhereIterator<1>"));
    }
  };
  H.WhereIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (H.boolConversionCheck(t2.call$1(t1.get$current())))
          return true;
      return false;
    },
    get$current() {
      return this._iterator.get$current();
    }
  };
  H.ExpandIterable.prototype = {
    get$iterator(_) {
      var t1 = this.$ti;
      return new H.ExpandIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, C.C_EmptyIterator, t1._eval$1("@<1>")._bind$1(t1._rest[1])._eval$1("ExpandIterator<1,2>"));
    }
  };
  H.ExpandIterator.prototype = {
    get$current() {
      return this.__internal$_current;
    },
    moveNext$0() {
      var t1, t2, _this = this;
      if (_this._currentExpansion == null)
        return false;
      for (t1 = _this._iterator, t2 = _this._f; !_this._currentExpansion.moveNext$0();) {
        _this.set$__internal$_current(null);
        if (t1.moveNext$0()) {
          _this.set$_currentExpansion(null);
          _this.set$_currentExpansion(J.get$iterator$ax(t2.call$1(t1.get$current())));
        } else
          return false;
      }
      _this.set$__internal$_current(_this._currentExpansion.get$current());
      return true;
    },
    set$_currentExpansion(_currentExpansion) {
      this._currentExpansion = this.$ti._eval$1("Iterator<2>?")._as(_currentExpansion);
    },
    set$__internal$_current(_current) {
      this.__internal$_current = this.$ti._eval$1("2?")._as(_current);
    },
    $isIterator: 1
  };
  H.TakeWhileIterable.prototype = {
    get$iterator(_) {
      return new H.TakeWhileIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti._eval$1("TakeWhileIterator<1>"));
    }
  };
  H.TakeWhileIterator.prototype = {
    moveNext$0() {
      var t1, _this = this;
      if (_this._isFinished)
        return false;
      t1 = _this._iterator;
      if (!t1.moveNext$0() || !H.boolConversionCheck(_this._f.call$1(t1.get$current()))) {
        _this._isFinished = true;
        return false;
      }
      return true;
    },
    get$current() {
      if (this._isFinished)
        return null;
      return this._iterator.get$current();
    }
  };
  H.EmptyIterable.prototype = {
    get$iterator(_) {
      return C.C_EmptyIterator;
    },
    forEach$1(_, action) {
      this.$ti._eval$1("~(1)")._as(action);
    },
    get$isEmpty(_) {
      return true;
    },
    get$length(_) {
      return 0;
    },
    toList$1$growable(_, growable) {
      var t1 = J.JSArray_JSArray$growable(0, this.$ti._precomputed1);
      return t1;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.EmptyIterator.prototype = {
    moveNext$0() {
      return false;
    },
    get$current() {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    $isIterator: 1
  };
  H.WhereTypeIterable.prototype = {
    get$iterator(_) {
      return new H.WhereTypeIterator(J.get$iterator$ax(this._source), this.$ti._eval$1("WhereTypeIterator<1>"));
    }
  };
  H.WhereTypeIterator.prototype = {
    moveNext$0() {
      var t1, t2;
      for (t1 = this._source, t2 = this.$ti._precomputed1; t1.moveNext$0();)
        if (t2._is(t1.get$current()))
          return true;
      return false;
    },
    get$current() {
      return this.$ti._precomputed1._as(this._source.get$current());
    },
    $isIterator: 1
  };
  H.FixedLengthListMixin.prototype = {
    set$length(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1(receiver, value) {
      H.instanceType(receiver)._eval$1("FixedLengthListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  };
  H.UnmodifiableListMixin.prototype = {
    $indexSet(_, index, value) {
      H._asIntS(index);
      H._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1(_, value) {
      H._instanceType(this)._eval$1("UnmodifiableListMixin.E")._as(value);
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    sort$1(_, compare) {
      H._instanceType(this)._eval$1("int(UnmodifiableListMixin.E,UnmodifiableListMixin.E)?")._as(compare);
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    }
  };
  H.UnmodifiableListBase.prototype = {};
  H.ReversedListIterable.prototype = {
    get$length(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1),
        t3 = t2.get$length(t1);
      if (typeof index !== "number")
        return H.iae(index);
      return t2.elementAt$1(t1, t3 - 1 - index);
    }
  };
  H.Symbol.prototype = {
    get$hashCode(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 664597 * J.get$hashCode$(this._name) & 536870911;
      this._hashCode = hash;
      return hash;
    },
    toString$0(_) {
      return 'Symbol("' + H.S(this._name) + '")';
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof H.Symbol && this._name == other._name;
    },
    $isSymbol0: 1
  };
  H.ConstantMapView.prototype = {};
  H.ConstantMap.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) !== 0;
    },
    toString$0(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  H.ConstantStringMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    containsKey$1(key) {
      if (typeof key != "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index(_, key) {
      if (!this.containsKey$1(key))
        return null;
      return this._jsObject[H._asStringS(key)];
    },
    forEach$1(_, f) {
      var keys, t2, t3, i, t4,
        t1 = this.$ti;
      t1._eval$1("~(1,2)")._as(f);
      keys = this._keys;
      for (t2 = keys.length, t3 = this._jsObject, t1 = t1._rest[1], i = 0; i < t2; ++i) {
        t4 = H._asStringS(keys[i]);
        f.call$2(t4, t1._as(t3[t4]));
      }
    },
    get$keys() {
      return new H._ConstantMapKeyIterable(this, this.$ti._eval$1("_ConstantMapKeyIterable<1>"));
    }
  };
  H._ConstantMapKeyIterable.prototype = {
    get$iterator(_) {
      var t1 = this._map._keys;
      return new J.ArrayIterator(t1, t1.length, H._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    },
    get$length(_) {
      return this._map._keys.length;
    }
  };
  H.Instantiation.prototype = {
    toString$0(_) {
      var types = "<" + C.JSArray_methods.join$1([H.createRuntimeType(this.$ti._precomputed1)], ", ") + ">";
      return H.S(this._genericClosure) + " with " + types;
    }
  };
  H.Instantiation1.prototype = {
    call$2(a0, a1) {
      return this._genericClosure.call$1$2(a0, a1, this.$ti._rest[0]);
    },
    $signature() {
      return H.instantiatedGenericFunctionType(H.closureFunctionType(this._genericClosure), this.$ti);
    }
  };
  H.JSInvocationMirror.prototype = {
    get$memberName() {
      var t1 = this.__js_helper$_memberName;
      if (type$.Symbol._is(t1))
        return t1;
      return this.__js_helper$_memberName = new H.Symbol(H._asStringS(t1));
    },
    get$positionalArguments() {
      var t1, t2, t3, t4, t5, argumentCount, list, index, _this = this;
      if (_this.__js_helper$_kind === 1)
        return C.List_empty;
      t1 = _this._arguments;
      t2 = J.getInterceptor$asx(t1);
      t3 = t2.get$length(t1);
      t4 = J.get$length$asx(_this._namedArgumentNames);
      t5 = _this._typeArgumentCount;
      if (typeof t5 !== "number")
        return H.iae(t5);
      argumentCount = t3 - t4 - t5;
      if (argumentCount === 0)
        return C.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index)
        list.push(t2.$index(t1, index));
      return J.JSArray_markUnmodifiableList(list);
    },
    get$namedArguments() {
      var t1, t2, namedArgumentCount, t3, t4, t5, t6, namedArgumentsStartIndex, map, i, _this = this;
      if (_this.__js_helper$_kind !== 0)
        return C.Map_empty1;
      t1 = _this._namedArgumentNames;
      t2 = J.getInterceptor$asx(t1);
      namedArgumentCount = t2.get$length(t1);
      t3 = _this._arguments;
      t4 = J.getInterceptor$asx(t3);
      t5 = t4.get$length(t3);
      t6 = _this._typeArgumentCount;
      if (typeof t6 !== "number")
        return H.iae(t6);
      namedArgumentsStartIndex = t5 - namedArgumentCount - t6;
      if (namedArgumentCount === 0)
        return C.Map_empty1;
      map = new H.JsLinkedHashMap(type$.JsLinkedHashMap_Symbol_dynamic);
      for (i = 0; i < namedArgumentCount; ++i)
        map.$indexSet(0, new H.Symbol(H._asStringS(t2.$index(t1, i))), t4.$index(t3, namedArgumentsStartIndex + i));
      return new H.ConstantMapView(map, type$.ConstantMapView_Symbol_dynamic);
    },
    $isInvocation: 1
  };
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return null;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this.__js_helper$_message);
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(_this.__js_helper$_message);
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + H.S(_this.__js_helper$_message) + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + H.S(_this.__js_helper$_message) + ")";
    }
  };
  H.UnknownJsTypeError.prototype = {
    toString$0(_) {
      var t1 = this.__js_helper$_message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  H.NullThrownFromJavaScriptException.prototype = {
    toString$0(_) {
      return "Throw of null ('" + (this._irritant === null ? "null" : "undefined") + "' from JavaScript)";
    },
    $isException: 1
  };
  H.ExceptionAndStackTrace.prototype = {};
  H._StackTrace.prototype = {
    toString$0(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + H.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.Closure0Args.prototype = {"call*": "call$0", $requiredArgCount: 0};
  H.Closure2Args.prototype = {"call*": "call$2", $requiredArgCount: 2};
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return this.$_target === other.$_target && this._receiver === other._receiver;
    },
    get$hashCode(_) {
      var receiverHashCode = H.objectHashCode(this._receiver),
        t1 = H.Primitives_objectHashCode(this.$_target);
      if (typeof receiverHashCode !== "number")
        return receiverHashCode.$xor();
      return (receiverHashCode ^ t1) >>> 0;
    },
    toString$0(_) {
      return "Closure '" + H.S(this.$_name) + "' of " + ("Instance of '" + H.S(H.Primitives_objectTypeName(this._receiver)) + "'");
    }
  };
  H.RuntimeError.prototype = {
    toString$0(_) {
      return "RuntimeError: " + this.message;
    }
  };
  H._AssertionError.prototype = {
    toString$0(_) {
      return "Assertion failed: " + P.Error_safeToString(this.message);
    }
  };
  H.JsLinkedHashMap.prototype = {
    get$length(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this.__js_helper$_length === 0;
    },
    get$isNotEmpty(_) {
      return !this.get$isEmpty(this);
    },
    get$keys() {
      return new H.LinkedHashMapKeyIterable(this, H._instanceType(this)._eval$1("LinkedHashMapKeyIterable<1>"));
    },
    get$values(_) {
      var t1 = H._instanceType(this);
      return H.MappedIterable_MappedIterable(this.get$keys(), new H.JsLinkedHashMap_values_closure(this), t1._precomputed1, t1._rest[1]);
    },
    containsKey$1(key) {
      var strings, nums, _this = this;
      if (typeof key == "string") {
        strings = _this.__js_helper$_strings;
        if (strings == null)
          return false;
        return _this._containsTableEntry$2(strings, key);
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this.__js_helper$_nums;
        if (nums == null)
          return false;
        return _this._containsTableEntry$2(nums, key);
      } else
        return _this.internalContainsKey$1(key);
    },
    internalContainsKey$1(key) {
      var _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return false;
      return _this.internalFindBucketIndex$2(_this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key)), key) >= 0;
    },
    $index(_, key) {
      var strings, cell, t1, nums, _this = this, _null = null;
      if (typeof key == "string") {
        strings = _this.__js_helper$_strings;
        if (strings == null)
          return _null;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this.__js_helper$_nums;
        if (nums == null)
          return _null;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? _null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1(key) {
      var bucket, index, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return null;
      bucket = _this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key));
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return null;
      return bucket[index].hashMapCellValue;
    },
    $indexSet(_, key, value) {
      var strings, nums, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      if (typeof key == "string") {
        strings = _this.__js_helper$_strings;
        _this.__js_helper$_addHashTableEntry$3(strings == null ? _this.__js_helper$_strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key == "number" && (key & 0x3ffffff) === key) {
        nums = _this.__js_helper$_nums;
        _this.__js_helper$_addHashTableEntry$3(nums == null ? _this.__js_helper$_nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2(key, value) {
      var rest, hash, bucket, index, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this.__js_helper$_newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this.__js_helper$_newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2(key, ifAbsent) {
      var value, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._eval$1("2()")._as(ifAbsent);
      if (_this.containsKey$1(key))
        return _this.$index(0, key);
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    clear$0(_) {
      var _this = this;
      if (_this.__js_helper$_length > 0) {
        _this.__js_helper$_strings = _this.__js_helper$_nums = _this.__js_helper$_rest = _this.__js_helper$_first = _this.__js_helper$_last = null;
        _this.__js_helper$_length = 0;
        _this.__js_helper$_modified$0();
      }
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this;
      H._instanceType(_this)._eval$1("~(1,2)")._as(action);
      cell = _this.__js_helper$_first;
      modifications = _this.__js_helper$_modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this.__js_helper$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell.__js_helper$_next;
      }
    },
    __js_helper$_addHashTableEntry$3(table, key, value) {
      var cell, _this = this,
        t1 = H._instanceType(_this);
      t1._precomputed1._as(key);
      t1._rest[1]._as(value);
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this.__js_helper$_newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    __js_helper$_modified$0() {
      this.__js_helper$_modifications = this.__js_helper$_modifications + 1 & 67108863;
    },
    __js_helper$_newLinkedCell$2(key, value) {
      var _this = this,
        t1 = H._instanceType(_this),
        cell = new H.LinkedHashMapCell(t1._precomputed1._as(key), t1._rest[1]._as(value));
      if (_this.__js_helper$_first == null)
        _this.__js_helper$_first = _this.__js_helper$_last = cell;
      else
        _this.__js_helper$_last = _this.__js_helper$_last.__js_helper$_next = cell;
      ++_this.__js_helper$_length;
      _this.__js_helper$_modified$0();
      return cell;
    },
    internalComputeHashCode$1(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2(table, key) {
      return table[key];
    },
    _getTableBucket$2(table, key) {
      return table[key];
    },
    _setTableEntry$3(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2(table, key) {
      delete table[key];
    },
    _containsTableEntry$2(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isLinkedHashMap: 1
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1(each) {
      var t1 = this.$this;
      return t1.$index(0, H._instanceType(t1)._precomputed1._as(each));
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1("2(1)");
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator(_) {
      var t1 = this._map,
        t2 = new H.LinkedHashMapKeyIterator(t1, t1.__js_helper$_modifications, this.$ti._eval$1("LinkedHashMapKeyIterator<1>"));
      t2.__js_helper$_cell = t1.__js_helper$_first;
      return t2;
    },
    contains$1(_, element) {
      return this._map.containsKey$1(element);
    },
    forEach$1(_, f) {
      var t1, cell, modifications;
      this.$ti._eval$1("~(1)")._as(f);
      t1 = this._map;
      cell = t1.__js_helper$_first;
      modifications = t1.__js_helper$_modifications;
      for (; cell != null;) {
        f.call$1(cell.hashMapCellKey);
        if (modifications !== t1.__js_helper$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell.__js_helper$_next;
      }
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var cell, _this = this,
        t1 = _this._map;
      if (_this.__js_helper$_modifications !== t1.__js_helper$_modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      cell = _this.__js_helper$_cell;
      if (cell == null) {
        _this.set$__js_helper$_current(null);
        return false;
      } else {
        _this.set$__js_helper$_current(cell.hashMapCellKey);
        _this.__js_helper$_cell = cell.__js_helper$_next;
        return true;
      }
    },
    set$__js_helper$_current(_current) {
      this.__js_helper$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  H.initHooks_closure.prototype = {
    call$1(o) {
      return this.getTag(o);
    },
    $signature: 89
  };
  H.initHooks_closure0.prototype = {
    call$2(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 45
  };
  H.initHooks_closure1.prototype = {
    call$1(tag) {
      return this.prototypeForTag(H._asStringS(tag));
    },
    $signature: 49
  };
  H.JSSyntaxRegExp.prototype = {
    toString$0(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = H.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    get$_nativeAnchoredVersion() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeAnchoredRegExp = H.JSSyntaxRegExp_makeNative(_this.pattern + "|()", t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    firstMatch$1(string) {
      var m = this._nativeRegExp.exec(string);
      if (m == null)
        return null;
      return new H._MatchImplementation(m);
    },
    allMatches$2(_, string, start) {
      var t1 = string.length;
      if (start > t1)
        throw H.wrapException(P.RangeError$range(start, 0, t1, null, null));
      return new H._AllMatchesIterable(this, string, start);
    },
    allMatches$1($receiver, string) {
      return this.allMatches$2($receiver, string, 0);
    },
    _execGlobal$2(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      return new H._MatchImplementation(match);
    },
    _execAnchored$2(string, start) {
      var match,
        regexp = this.get$_nativeAnchoredVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return null;
      if (0 >= match.length)
        return H.ioore(match, -1);
      if (match.pop() != null)
        return null;
      return new H._MatchImplementation(match);
    },
    matchAsPrefix$2(_, string, start) {
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      return this._execAnchored$2(string, start);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  H._MatchImplementation.prototype = {
    get$end() {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    group$1(index) {
      var t1 = this._match;
      if (index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $isMatch: 1,
    $isRegExpMatch: 1
  };
  H._AllMatchesIterable.prototype = {
    get$iterator(_) {
      return new H._AllMatchesIterator(this._re, this.__js_helper$_string, this.__js_helper$_start);
    }
  };
  H._AllMatchesIterator.prototype = {
    get$current() {
      return this.__js_helper$_current;
    },
    moveNext$0() {
      var t1, t2, t3, match, nextIndex, _this = this,
        string = _this.__js_helper$_string;
      if (string == null)
        return false;
      t1 = _this._nextIndex;
      t2 = string.length;
      if (t1 <= t2) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(string, t1);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end();
          if (match._match.index === nextIndex) {
            if (t3._nativeRegExp.unicode) {
              t1 = _this._nextIndex;
              t3 = t1 + 1;
              if (t3 < t2) {
                t1 = C.JSString_methods.codeUnitAt$1(string, t1);
                if (t1 >= 55296 && t1 <= 56319) {
                  t1 = C.JSString_methods.codeUnitAt$1(string, t3);
                  t1 = t1 >= 56320 && t1 <= 57343;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this.__js_helper$_string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1
  };
  H.StringMatch.prototype = {
    group$1(group_) {
      if (group_ !== 0)
        throw H.wrapException(P.RangeError$value(group_, null));
      return this.pattern;
    },
    $isMatch: 1
  };
  H._StringAllMatchesIterable.prototype = {
    get$iterator(_) {
      return new H._StringAllMatchesIterator(this.__js_helper$_input, this._pattern, this.__js_helper$_index);
    }
  };
  H._StringAllMatchesIterator.prototype = {
    moveNext$0() {
      var index, end, _this = this,
        t1 = _this.__js_helper$_index,
        t2 = _this._pattern,
        t3 = t2.length,
        t4 = _this.__js_helper$_input,
        t5 = t4.length;
      if (t1 + t3 > t5) {
        _this.__js_helper$_current = null;
        return false;
      }
      index = t4.indexOf(t2, t1);
      if (index < 0) {
        _this.__js_helper$_index = t5 + 1;
        _this.__js_helper$_current = null;
        return false;
      }
      end = index + t3;
      _this.__js_helper$_current = new H.StringMatch(index, t2);
      _this.__js_helper$_index = end === _this.__js_helper$_index ? end + 1 : end;
      return true;
    },
    get$current() {
      var t1 = this.__js_helper$_current;
      t1.toString;
      return t1;
    },
    $isIterator: 1
  };
  H._Cell.prototype = {
    readLocal$1$0() {
      var t1 = this._value;
      if (t1 === this)
        H.throwExpression(new H.LateError("Local '" + this.__late_helper$_name + "' has not been initialized."));
      return t1;
    },
    readLocal$0() {
      return this.readLocal$1$0(type$.dynamic);
    }
  };
  H._InitializedCell.prototype = {};
  H.NativeByteBuffer.prototype = {
    get$runtimeType(receiver) {
      return C.Type_ByteBuffer_RkP;
    }
  };
  H.NativeTypedData.prototype = {
    _invalidPosition$3(receiver, position, $length, $name) {
      var t1 = P.RangeError$range(position, 0, $length, $name, null);
      throw H.wrapException(t1);
    },
    _checkPosition$3(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    }
  };
  H.NativeByteData.prototype = {
    get$runtimeType(receiver) {
      return C.Type_ByteData_zNC;
    }
  };
  H.NativeTypedArray.prototype = {
    get$length(receiver) {
      return receiver.length;
    },
    _setRangeFast$4(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      count = end - start;
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: 1
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet(receiver, index, value) {
      H._asIntS(index);
      H._asDoubleS(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet(receiver, index, value) {
      H._asIntS(index);
      H._asIntS(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      type$.Iterable_int._as(iterable);
      if (type$.NativeTypedArrayOfInt._is(iterable)) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  H.NativeFloat32List.prototype = {
    get$runtimeType(receiver) {
      return C.Type_Float32List_LB7;
    }
  };
  H.NativeFloat64List.prototype = {
    get$runtimeType(receiver) {
      return C.Type_Float64List_LB7;
    }
  };
  H.NativeInt16List.prototype = {
    get$runtimeType(receiver) {
      return C.Type_Int16List_uXf;
    },
    $index(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt32List.prototype = {
    get$runtimeType(receiver) {
      return C.Type_Int32List_O50;
    },
    $index(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt8List.prototype = {
    get$runtimeType(receiver) {
      return C.Type_Int8List_ekJ;
    },
    $index(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint16List.prototype = {
    get$runtimeType(receiver) {
      return C.Type_Uint16List_2bx;
    },
    $index(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isUint16List: 1
  };
  H.NativeUint32List.prototype = {
    get$runtimeType(receiver) {
      return C.Type_Uint32List_2bx;
    },
    $index(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint32Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    $isUint32List: 1
  };
  H.NativeUint8ClampedList.prototype = {
    get$runtimeType(receiver) {
      return C.Type_Uint8ClampedList_Jik;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint8List.prototype = {
    get$runtimeType(receiver) {
      return C.Type_Uint8List_WLA;
    },
    get$length(receiver) {
      return receiver.length;
    },
    $index(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$2(receiver, start, end) {
      return new Uint8Array(receiver.subarray(start, H._checkValidRange(start, end, receiver.length)));
    },
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H.Rti.prototype = {
    _eval$1(recipe) {
      return H._Universe_evalInEnvironment(init.typeUniverse, this, recipe);
    },
    _bind$1(typeOrTuple) {
      return H._Universe_bind(init.typeUniverse, this, typeOrTuple);
    }
  };
  H._FunctionParameters.prototype = {};
  H._Type.prototype = {
    toString$0(_) {
      return H._rtiToString(this._rti, null);
    }
  };
  H._Error.prototype = {
    toString$0(_) {
      return this.__rti$_message;
    }
  };
  H._TypeError.prototype = {$isTypeError: 1};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 12
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1(callback) {
      var t1, t2;
      this._box_0.storedCallback = type$.void_Function._as(callback);
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 44
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 5
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 5
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2(milliseconds, callback) {
      if (self.setTimeout != null)
        self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    }
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0() {
      this.callback.call$0();
    },
    $signature: 0
  };
  P._AsyncAwaitCompleter.prototype = {
    complete$1(_, value) {
      var t2, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/?")._as(value);
      if (!_this.isSync)
        _this._future._asyncComplete$1(value);
      else {
        t2 = _this._future;
        if (t1._eval$1("Future<1>")._is(value))
          t2._chainFuture$1(value);
        else
          t2._completeWithValue$1(t1._precomputed1._as(value));
      }
    },
    completeError$2(e, st) {
      var t1;
      if (st == null)
        st = P.AsyncError_defaultStackTrace(e);
      t1 = this._future;
      if (this.isSync)
        t1._completeError$2(e, st);
      else
        t1._asyncCompleteError$2(e, st);
    }
  };
  P._awaitOnObject_closure.prototype = {
    call$1(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 13
  };
  P._awaitOnObject_closure0.prototype = {
    call$2(error, stackTrace) {
      this.bodyFunction.call$2(1, new H.ExceptionAndStackTrace(error, type$.StackTrace._as(stackTrace)));
    },
    $signature: 99
  };
  P._wrapJsFunctionForAsync_closure.prototype = {
    call$2(errorCode, result) {
      this.$protected(H._asIntS(errorCode), result);
    },
    $signature: 26
  };
  P._IterationMarker.prototype = {
    toString$0(_) {
      return "IterationMarker(" + this.state + ", " + H.S(this.value) + ")";
    }
  };
  P._SyncStarIterator.prototype = {
    get$current() {
      var nested = this._nestedIterator;
      if (nested == null)
        return this.$ti._precomputed1._as(this._async$_current);
      return nested.get$current();
    },
    moveNext$0() {
      var t1, t2, value, state, suspendedBodies, inner, _this = this;
      for (t1 = _this.$ti._eval$1("Iterator<1>"); true;) {
        t2 = _this._nestedIterator;
        if (t2 != null)
          if (t2.moveNext$0())
            return true;
          else
            _this.set$_nestedIterator(null);
        value = function(body, SUCCESS, ERROR) {
          var errorValue,
            errorCode = SUCCESS;
          while (true)
            try {
              return body(errorCode, errorValue);
            } catch (error) {
              errorValue = error;
              errorCode = ERROR;
            }
        }(_this._async$_body, 0, 1);
        if (value instanceof P._IterationMarker) {
          state = value.state;
          if (state === 2) {
            suspendedBodies = _this._suspendedBodies;
            if (suspendedBodies == null || suspendedBodies.length === 0) {
              _this.set$_async$_current(null);
              return false;
            }
            if (0 >= suspendedBodies.length)
              return H.ioore(suspendedBodies, -1);
            _this._async$_body = suspendedBodies.pop();
            continue;
          } else {
            t2 = value.value;
            if (state === 3)
              throw t2;
            else {
              inner = t1._as(J.get$iterator$ax(t2));
              if (inner instanceof P._SyncStarIterator) {
                t2 = _this._suspendedBodies;
                if (t2 == null)
                  t2 = _this._suspendedBodies = [];
                C.JSArray_methods.add$1(t2, _this._async$_body);
                _this._async$_body = inner._async$_body;
                continue;
              } else {
                _this.set$_nestedIterator(inner);
                continue;
              }
            }
          }
        } else {
          _this.set$_async$_current(value);
          return true;
        }
      }
      return false;
    },
    set$_async$_current(_current) {
      this._async$_current = this.$ti._eval$1("1?")._as(_current);
    },
    set$_nestedIterator(_nestedIterator) {
      this._nestedIterator = this.$ti._eval$1("Iterator<1>?")._as(_nestedIterator);
    },
    $isIterator: 1
  };
  P._SyncStarIterable.prototype = {
    get$iterator(_) {
      return new P._SyncStarIterator(this._outerHelper(), this.$ti._eval$1("_SyncStarIterator<1>"));
    }
  };
  P.AsyncError.prototype = {
    toString$0(_) {
      return H.S(this.error);
    },
    $isError: 1,
    get$stackTrace() {
      return this.stackTrace;
    }
  };
  P._FutureListener.prototype = {
    matchesErrorTest$1(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(type$.bool_Function_Object._as(this.callback), asyncError.error, type$.bool, type$.Object);
    },
    handleError$1(asyncError) {
      var exception, _this = this,
        errorCallback = _this.errorCallback,
        result = null,
        t1 = type$.dynamic,
        t2 = type$.Object,
        t3 = _this.result._zone;
      if (type$.dynamic_Function_Object_StackTrace._is(errorCallback))
        result = t3.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, t1, t2, type$.StackTrace);
      else
        result = t3.runUnary$2$2(type$.dynamic_Function_Object._as(errorCallback), asyncError.error, t1, t2);
      try {
        t1 = _this.$ti._eval$1("2/")._as(result);
        return t1;
      } catch (exception) {
        if (type$.TypeError._is(H.unwrapException(exception))) {
          if ((_this.state & 1) !== 0)
            throw H.wrapException(P.ArgumentError$("The error handler of Future.then must return a value of the returned future's type", "onError"));
          throw H.wrapException(P.ArgumentError$("The error handler of Future.catchError must return a value of the future's type", "onError"));
        } else
          throw exception;
      }
    }
  };
  P._Future.prototype = {
    then$1$2$onError(f, onError, $R) {
      var currentZone, result, t2,
        t1 = this.$ti;
      t1._bind$1($R)._eval$1("1/(2)")._as(f);
      currentZone = $.Zone__current;
      if (currentZone === C.C__RootZone) {
        if (onError != null && !type$.dynamic_Function_Object_StackTrace._is(onError) && !type$.dynamic_Function_Object._is(onError))
          throw H.wrapException(P.ArgumentError$value(onError, "onError", string$.Error_));
      } else {
        $R._eval$1("@<0/>")._bind$1(t1._precomputed1)._eval$1("1(2)")._as(f);
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      result = new P._Future(currentZone, $R._eval$1("_Future<0>"));
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(result, t2, f, onError, t1._eval$1("@<1>")._bind$1($R)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    then$1$1(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _thenAwait$1$2(f, onError, $E) {
      var result,
        t1 = this.$ti;
      t1._bind$1($E)._eval$1("1/(2)")._as(f);
      result = new P._Future($.Zone__current, $E._eval$1("_Future<0>"));
      this._addListener$1(new P._FutureListener(result, 19, f, onError, t1._eval$1("@<1>")._bind$1($E)._eval$1("_FutureListener<1,2>")));
      return result;
    },
    _setErrorObject$1(error) {
      this._state = this._state & 1 | 16;
      this._resultOrListeners = error;
    },
    _cloneResult$1(source) {
      this._state = source._state & 30 | this._state & 1;
      this._resultOrListeners = source._resultOrListeners;
    },
    _addListener$1(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 3) {
        listener._nextListener = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listener;
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._addListener$1(listener);
            return;
          }
          _this._cloneResult$1(source);
        }
        P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__addListener_closure(_this, listener)));
      }
    },
    _prependListeners$1(listeners) {
      var t1, existingListeners, next, cursor, next0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 3) {
        existingListeners = type$.nullable__FutureListener_dynamic_dynamic._as(_this._resultOrListeners);
        _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          next = listeners._nextListener;
          for (cursor = listeners; next != null; cursor = next, next = next0)
            next0 = next._nextListener;
          cursor._nextListener = existingListeners;
        }
      } else {
        if ((t1 & 4) !== 0) {
          source = type$._Future_dynamic._as(_this._resultOrListeners);
          if ((source._state & 24) === 0) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._cloneResult$1(source);
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__prependListeners_closure(_box_0, _this)));
      }
    },
    _removeListeners$0() {
      var current = type$.nullable__FutureListener_dynamic_dynamic._as(this._resultOrListeners);
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _chainForeignFuture$1(source) {
      var e, s, exception, _this = this;
      _this._state ^= 2;
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(_this), new P._Future__chainForeignFuture_closure0(_this), type$.Null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(_this, e, s));
      }
    },
    _complete$1(value) {
      var listeners, _this = this,
        t1 = _this.$ti;
      t1._eval$1("1/")._as(value);
      listeners = _this._removeListeners$0();
      t1._precomputed1._as(value);
      _this._state = 8;
      _this._resultOrListeners = value;
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeWithValue$1(value) {
      var listeners, _this = this;
      _this.$ti._precomputed1._as(value);
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = value;
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2(error, stackTrace) {
      var listeners;
      type$.StackTrace._as(stackTrace);
      listeners = this._removeListeners$0();
      this._setErrorObject$1(P.AsyncError$(error, stackTrace));
      P._Future__propagateToListeners(this, listeners);
    },
    _asyncComplete$1(value) {
      var t1 = this.$ti;
      t1._eval$1("1/")._as(value);
      if (t1._eval$1("Future<1>")._is(value)) {
        this._chainFuture$1(value);
        return;
      }
      this._asyncCompleteWithValue$1(t1._precomputed1._as(value));
    },
    _asyncCompleteWithValue$1(value) {
      var _this = this;
      _this.$ti._precomputed1._as(value);
      _this._state ^= 2;
      P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__asyncCompleteWithValue_closure(_this, value)));
    },
    _chainFuture$1(value) {
      var _this = this,
        t1 = _this.$ti;
      t1._eval$1("Future<1>")._as(value);
      if (t1._is(value)) {
        if ((value._state & 16) !== 0) {
          _this._state ^= 2;
          P._rootScheduleMicrotask(null, null, _this._zone, type$.void_Function._as(new P._Future__chainFuture_closure(_this, value)));
        } else
          P._Future__chainCoreFuture(value, _this);
        return;
      }
      _this._chainForeignFuture$1(value);
    },
    _asyncCompleteError$2(error, stackTrace) {
      this._state ^= 2;
      P._rootScheduleMicrotask(null, null, this._zone, type$.void_Function._as(new P._Future__asyncCompleteError_closure(this, error, stackTrace)));
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  P._Future__prependListeners_closure.prototype = {
    call$0() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1(value) {
      var error, stackTrace, exception,
        t1 = this.$this;
      t1._state ^= 2;
      try {
        t1._completeWithValue$1(t1.$ti._precomputed1._as(value));
      } catch (exception) {
        error = H.unwrapException(exception);
        stackTrace = H.getTraceFromException(exception);
        t1._completeError$2(error, stackTrace);
      }
    },
    $signature: 12
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2(error, stackTrace) {
      this.$this._completeError$2(error, type$.StackTrace._as(stackTrace));
    },
    $signature: 27
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0() {
      this.$this._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  P._Future__asyncCompleteWithValue_closure.prototype = {
    call$0() {
      this.$this._completeWithValue$1(this.value);
    },
    $signature: 0
  };
  P._Future__chainFuture_closure.prototype = {
    call$0() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 0
  };
  P._Future__asyncCompleteError_closure.prototype = {
    call$0() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this._box_0.listener;
        completeResult = t1.result._zone.run$1$1(type$.dynamic_Function._as(t1.callback), type$.dynamic);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (_this.hasError) {
          t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners).error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        else
          t2.listenerValueOrError = P.AsyncError$(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (completeResult instanceof P._Future && (completeResult._state & 24) !== 0) {
        if ((completeResult._state & 16) !== 0) {
          t1 = _this._box_0;
          t1.listenerValueOrError = type$.AsyncError._as(completeResult._resultOrListeners);
          t1.listenerHasError = true;
        }
        return;
      }
      if (type$.Future_dynamic._is(completeResult)) {
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), type$.dynamic);
        t1.listenerHasError = false;
      }
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1(_) {
      return this.originalSource;
    },
    $signature: 35
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0() {
      var e, s, t1, t2, t3, t4, t5, exception;
      try {
        t1 = this._box_0;
        t2 = t1.listener;
        t3 = t2.$ti;
        t4 = t3._precomputed1;
        t5 = t4._as(this.sourceResult);
        t1.listenerValueOrError = t2.result._zone.runUnary$2$2(t3._eval$1("2/(1)")._as(t2.callback), t5, t3._eval$1("2/"), t4);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = this._box_0;
        t1.listenerValueOrError = P.AsyncError$(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0() {
      var asyncError, e, s, t1, exception, t2, t3, t4, _this = this;
      try {
        asyncError = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t1 = _this._box_0;
        if (H.boolConversionCheck(t1.listener.matchesErrorTest$1(asyncError)) && t1.listener.errorCallback != null) {
          t1.listenerValueOrError = t1.listener.handleError$1(asyncError);
          t1.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = type$.AsyncError._as(_this._box_1.source._resultOrListeners);
        t2 = t1.error;
        t3 = e;
        t4 = _this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1;
        else
          t4.listenerValueOrError = P.AsyncError$(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 0
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    forEach$1(_, action) {
      var future, subscription, _this = this,
        t1 = _this.$ti;
      t1._eval$1("~(1)")._as(action);
      future = new P._Future($.Zone__current, type$._Future_dynamic);
      t1._eval$1("~(1)?")._as(null);
      type$.nullable_void_Function._as(new P.Stream_forEach_closure(future));
      subscription = W._EventStreamSubscription$(_this._target, _this._eventType, null, false, t1._precomputed1);
      subscription.onData$1(new P.Stream_forEach_closure0(_this, action, subscription, future));
      return future;
    },
    get$length(_) {
      var t2, t3, _this = this, t1 = {},
        future = new P._Future($.Zone__current, type$._Future_int);
      t1.count = 0;
      t2 = _this.$ti;
      t3 = t2._eval$1("~(1)?")._as(new P.Stream_length_closure(t1, _this));
      type$.nullable_void_Function._as(new P.Stream_length_closure0(t1, future));
      W._EventStreamSubscription$(_this._target, _this._eventType, t3, false, t2._precomputed1);
      return future;
    }
  };
  P.Stream_forEach_closure.prototype = {
    call$0() {
      this.future._complete$1(null);
    },
    $signature: 0
  };
  P.Stream_forEach_closure0.prototype = {
    call$1(element) {
      var _this = this;
      P._runUserCode(new P.Stream_forEach__closure(_this.action, _this.$this.$ti._precomputed1._as(element)), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(_this.subscription, _this.future), type$.void);
    },
    $signature() {
      return this.$this.$ti._eval$1("~(1)");
    }
  };
  P.Stream_forEach__closure.prototype = {
    call$0() {
      return this.action.call$1(this.element);
    },
    $signature: 0
  };
  P.Stream_forEach__closure0.prototype = {
    call$1(_) {
    },
    $signature: 39
  };
  P.Stream_length_closure.prototype = {
    call$1(_) {
      this.$this.$ti._precomputed1._as(_);
      ++this._box_0.count;
    },
    $signature() {
      return this.$this.$ti._eval$1("~(1)");
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 0
  };
  P.StreamSubscription.prototype = {};
  P.StreamTransformerBase.prototype = {};
  P._StreamIterator.prototype = {};
  P._cancelAndError_closure.prototype = {
    call$0() {
      return this.future._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  P._cancelAndErrorClosure_closure.prototype = {
    call$2(error, stackTrace) {
      P._cancelAndError(this.subscription, this.future, error, type$.StackTrace._as(stackTrace));
    },
    $signature: 43
  };
  P._Zone.prototype = {$isZone: 1};
  P._rootHandleError_closure.prototype = {
    call$0() {
      var error = H.wrapException(this.error);
      error.stack = J.toString$0$(this.stackTrace);
      throw error;
    },
    $signature: 0
  };
  P._RootZone.prototype = {
    runGuarded$1(f) {
      var e, s, exception;
      type$.void_Function._as(f);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(null, null, this, f, type$.void);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleError(e, type$.StackTrace._as(s));
      }
    },
    runUnaryGuarded$1$2(f, arg, $T) {
      var e, s, exception;
      $T._eval$1("~(0)")._as(f);
      $T._as(arg);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(null, null, this, f, arg, type$.void, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleError(e, type$.StackTrace._as(s));
      }
    },
    bindCallbackGuarded$1(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, type$.void_Function._as(f));
    },
    bindUnaryCallbackGuarded$1$1(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, $T._eval$1("~(0)")._as(f), $T);
    },
    run$1$1(f, $R) {
      $R._eval$1("0()")._as(f);
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2(f, arg, $R, $T) {
      $R._eval$1("@<0>")._bind$1($T)._eval$1("1(2)")._as(f);
      $T._as(arg);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3(f, arg1, arg2, $R, T1, T2) {
      $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
      T1._as(arg1);
      T2._as(arg2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1(f, $R, T1, T2) {
      return $R._eval$1("@<0>")._bind$1(T1)._bind$1(T2)._eval$1("1(2,3)")._as(f);
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 0
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, t1._as(arg), t1);
    },
    $signature() {
      return this.T._eval$1("~(0)");
    }
  };
  P._LinkedIdentityHashMap.prototype = {
    internalComputeHashCode$1(key) {
      return H.objectHashCode(key) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i].hashMapCellKey;
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  };
  P._LinkedCustomHashMap.prototype = {
    $index(_, key) {
      if (!H.boolConversionCheck(this._validKey.call$1(key)))
        return null;
      return this.super$JsLinkedHashMap$internalGet(key);
    },
    $indexSet(_, key, value) {
      var t1 = this.$ti;
      this.super$JsLinkedHashMap$internalSet(t1._precomputed1._as(key), t1._rest[1]._as(value));
    },
    containsKey$1(key) {
      if (!H.boolConversionCheck(this._validKey.call$1(key)))
        return false;
      return this.super$JsLinkedHashMap$internalContainsKey(key);
    },
    internalComputeHashCode$1(key) {
      return this._hashCode.call$1(this.$ti._precomputed1._as(key)) & 1073741823;
    },
    internalFindBucketIndex$2(bucket, key) {
      var $length, t1, t2, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (t1 = this.$ti._precomputed1, t2 = this._equals, i = 0; i < $length; ++i)
        if (H.boolConversionCheck(t2.call$2(t1._as(bucket[i].hashMapCellKey), t1._as(key))))
          return i;
      return -1;
    }
  };
  P._LinkedCustomHashMap_closure.prototype = {
    call$1(v) {
      return this.K._is(v);
    },
    $signature: 14
  };
  P._HashSet.prototype = {
    _newSet$0() {
      return new P._HashSet(H._instanceType(this)._eval$1("_HashSet<1>"));
    },
    get$iterator(_) {
      return new P._HashSetIterator(this, this._computeElements$0(), H._instanceType(this)._eval$1("_HashSetIterator<1>"));
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    contains$1(_, object) {
      var nums;
      if (typeof object == "number" && (object & 1073741823) === object) {
        nums = this._nums;
        return nums == null ? false : nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      H._instanceType(_this)._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._strings;
        return _this._addHashTableEntry$2(strings == null ? _this._strings = P._HashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._nums;
        return _this._addHashTableEntry$2(nums == null ? _this._nums = P._HashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1(element) {
      var rest, hash, bucket, _this = this;
      H._instanceType(_this)._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._HashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      ++_this._collection$_length;
      _this._collection$_elements = null;
      return true;
    },
    addAll$1(_, objects) {
      var t1;
      H._instanceType(this)._eval$1("Iterable<1>")._as(objects);
      for (t1 = objects.get$iterator(objects); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    _computeElements$0() {
      var strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        result = _this._collection$_elements;
      if (result != null)
        return result;
      result = P.List_List$filled(_this._collection$_length, null, false, type$.dynamic);
      strings = _this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._collection$_elements = result;
    },
    _addHashTableEntry$2(table, element) {
      H._instanceType(this)._precomputed1._as(element);
      if (table[element] != null)
        return false;
      table[element] = 0;
      ++this._collection$_length;
      this._collection$_elements = null;
      return true;
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i], element))
          return i;
      return -1;
    }
  };
  P._HashSetIterator.prototype = {
    get$current() {
      return this._collection$_current;
    },
    moveNext$0() {
      var _this = this,
        elements = _this._collection$_elements,
        offset = _this._offset,
        t1 = _this._set;
      if (elements !== t1._collection$_elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(elements[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  P._LinkedHashSet.prototype = {
    _newSet$0() {
      return new P._LinkedHashSet(H._instanceType(this)._eval$1("_LinkedHashSet<1>"));
    },
    get$iterator(_) {
      var _this = this,
        t1 = new P._LinkedHashSetIterator(_this, _this._modifications, H._instanceType(_this)._eval$1("_LinkedHashSetIterator<1>"));
      t1._cell = _this._first;
      return t1;
    },
    get$length(_) {
      return this._collection$_length;
    },
    get$isEmpty(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty(_) {
      return this._collection$_length !== 0;
    },
    contains$1(_, object) {
      var strings, nums;
      if (typeof object == "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(strings[object]) != null;
      } else if (typeof object == "number" && (object & 1073741823) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return type$.nullable__LinkedHashSetCell._as(nums[object]) != null;
      } else
        return this._contains$1(object);
    },
    _contains$1(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    forEach$1(_, action) {
      var cell, modifications, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("~(1)")._as(action);
      cell = _this._first;
      modifications = _this._modifications;
      for (t1 = t1._precomputed1; cell != null;) {
        action.call$1(t1._as(cell._element));
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    add$1(_, element) {
      var strings, nums, _this = this;
      H._instanceType(_this)._precomputed1._as(element);
      if (typeof element == "string" && element !== "__proto__") {
        strings = _this._strings;
        return _this._addHashTableEntry$2(strings == null ? _this._strings = P._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element == "number" && (element & 1073741823) === element) {
        nums = _this._nums;
        return _this._addHashTableEntry$2(nums == null ? _this._nums = P._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1(element) {
      var rest, hash, bucket, _this = this;
      H._instanceType(_this)._precomputed1._as(element);
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._newLinkedCell$1(element));
      }
      return true;
    },
    remove$1(_, object) {
      var _this = this;
      if (typeof object == "string" && object !== "__proto__")
        return _this._removeHashTableEntry$2(_this._strings, object);
      else if (typeof object == "number" && (object & 1073741823) === object)
        return _this._removeHashTableEntry$2(_this._nums, object);
      else
        return _this._remove$1(object);
    },
    _remove$1(object) {
      var hash, bucket, index, cell, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      hash = _this._computeHashCode$1(object);
      bucket = rest[hash];
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      cell = bucket.splice(index, 1)[0];
      if (0 === bucket.length)
        delete rest[hash];
      _this._unlinkCell$1(cell);
      return true;
    },
    _filterWhere$2(test, removeMatching) {
      var cell, element, next, modifications, t2, _this = this,
        t1 = H._instanceType(_this);
      t1._eval$1("bool(1)")._as(test);
      cell = _this._first;
      for (t1 = t1._precomputed1; cell != null; cell = next) {
        element = t1._as(cell._element);
        next = cell._next;
        modifications = _this._modifications;
        t2 = test.call$1(element);
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        if (false === t2)
          _this.remove$1(0, element);
      }
    },
    _addHashTableEntry$2(table, element) {
      H._instanceType(this)._precomputed1._as(element);
      if (type$.nullable__LinkedHashSetCell._as(table[element]) != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = type$.nullable__LinkedHashSetCell._as(table[element]);
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _modified$0() {
      this._modifications = this._modifications + 1 & 1073741823;
    },
    _newLinkedCell$1(element) {
      var t1, _this = this,
        cell = new P._LinkedHashSetCell(H._instanceType(_this)._precomputed1._as(element));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        t1 = _this._last;
        t1.toString;
        cell._previous = t1;
        _this._last = t1._next = cell;
      }
      ++_this._collection$_length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this._collection$_length;
      _this._modified$0();
    },
    _computeHashCode$1(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _findBucketIndex$2(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    },
    $isLinkedHashSet: 1
  };
  P._LinkedHashSetCell.prototype = {};
  P._LinkedHashSetIterator.prototype = {
    get$current() {
      return this._collection$_current;
    },
    moveNext$0() {
      var _this = this,
        cell = _this._cell,
        t1 = _this._set;
      if (_this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (cell == null) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(_this.$ti._eval$1("1?")._as(cell._element));
        _this._cell = cell._next;
        return true;
      }
    },
    set$_collection$_current(_current) {
      this._collection$_current = this.$ti._eval$1("1?")._as(_current);
    },
    $isIterator: 1
  };
  P.IterableMixin.prototype = {
    forEach$1(_, action) {
      var t1;
      H._instanceType(this)._eval$1("~(IterableMixin.E)")._as(action);
      for (t1 = this._entities, t1 = new J.ArrayIterator(t1, t1.length, H._arrayInstanceType(t1)._eval$1("ArrayIterator<1>")); t1.moveNext$0();)
        action.call$1(t1._current);
    },
    toList$1$growable(_, growable) {
      return P.List_List$from(this, true, H._instanceType(this)._eval$1("IterableMixin.E"));
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length(_) {
      var count,
        t1 = this._entities,
        it = new J.ArrayIterator(t1, t1.length, H._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      var t1 = this._entities;
      return !new J.ArrayIterator(t1, t1.length, H._arrayInstanceType(t1)._eval$1("ArrayIterator<1>")).moveNext$0();
    },
    toString$0(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.IterableBase.prototype = {};
  P.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), H.instanceType(receiver)._eval$1("ListIterator<ListMixin.E>"));
    },
    elementAt$1(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1(receiver, action) {
      var $length, i;
      H.instanceType(receiver)._eval$1("~(ListMixin.E)")._as(action);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty(receiver) {
      return this.get$length(receiver) !== 0;
    },
    get$first(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    get$last(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.$index(receiver, this.get$length(receiver) - 1);
    },
    get$single(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      if (this.get$length(receiver) > 1)
        throw H.wrapException(H.IterableElementError_tooMany());
      return this.$index(receiver, 0);
    },
    any$1(receiver, test) {
      var $length, i;
      H.instanceType(receiver)._eval$1("bool(ListMixin.E)")._as(test);
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (H.boolConversionCheck(test.call$1(this.$index(receiver, i))))
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    map$1$1(receiver, f, $T) {
      var t1 = H.instanceType(receiver);
      return new H.MappedListIterable(receiver, t1._bind$1($T)._eval$1("1(ListMixin.E)")._as(f), t1._eval$1("@<ListMixin.E>")._bind$1($T)._eval$1("MappedListIterable<1,2>"));
    },
    fold$1$2(receiver, initialValue, combine, $T) {
      var $length, value, i;
      $T._as(initialValue);
      H.instanceType(receiver)._bind$1($T)._eval$1("1(1,ListMixin.E)")._as(combine);
      $length = this.get$length(receiver);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    skip$1(receiver, count) {
      return H.SubListIterable$(receiver, count, null, H.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    take$1(receiver, count) {
      return H.SubListIterable$(receiver, 0, H.checkNotNullable(count, "count", type$.int), H.instanceType(receiver)._eval$1("ListMixin.E"));
    },
    takeWhile$1(receiver, test) {
      var t1 = H.instanceType(receiver);
      return new H.TakeWhileIterable(receiver, t1._eval$1("bool(ListMixin.E)")._as(test), t1._eval$1("TakeWhileIterable<ListMixin.E>"));
    },
    toList$1$growable(receiver, growable) {
      var t1, first, result, i, _this = this;
      if (_this.get$length(receiver) === 0) {
        t1 = J.JSArray_JSArray$growable(0, H.instanceType(receiver)._eval$1("ListMixin.E"));
        return t1;
      }
      first = _this.$index(receiver, 0);
      result = P.List_List$filled(_this.get$length(receiver), first, true, H.instanceType(receiver)._eval$1("ListMixin.E"));
      for (i = 1; i < _this.get$length(receiver); ++i)
        C.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
      return result;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1(receiver, element) {
      var t1;
      H.instanceType(receiver)._eval$1("ListMixin.E")._as(element);
      t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    _closeGap$2(receiver, start, end) {
      var i, _this = this,
        $length = _this.get$length(receiver),
        size = end - start;
      for (i = end; i < $length; ++i)
        _this.$indexSet(receiver, i - size, _this.$index(receiver, i));
      _this.set$length(receiver, $length - size);
    },
    removeLast$0(receiver) {
      var result, _this = this;
      if (_this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      result = _this.$index(receiver, _this.get$length(receiver) - 1);
      _this.set$length(receiver, _this.get$length(receiver) - 1);
      return result;
    },
    sort$1(receiver, compare) {
      var t1 = H.instanceType(receiver);
      t1._eval$1("int(ListMixin.E,ListMixin.E)?")._as(compare);
      H.Sort_sort(receiver, compare, t1._eval$1("ListMixin.E"));
    },
    sublist$2(receiver, start, end) {
      var t1,
        listLength = this.get$length(receiver);
      if (end == null)
        end = listLength;
      P.RangeError_checkValidRange(start, end, listLength);
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      t1 = H.instanceType(receiver)._eval$1("ListMixin.E");
      return P.List_List$from(H.SubListIterable$(receiver, start, end, t1), true, t1);
    },
    fillRange$3(receiver, start, end, fill) {
      var i;
      H.instanceType(receiver)._eval$1("ListMixin.E?")._as(fill);
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    setRange$4(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, i,
        t1 = H.instanceType(receiver);
      t1._eval$1("Iterable<ListMixin.E>")._as(iterable);
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (t1._eval$1("List<ListMixin.E>")._is(iterable)) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      if (otherStart + $length > t1.get$length(otherList))
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    removeAt$1(receiver, index) {
      var result = this.$index(receiver, index);
      this._closeGap$2(receiver, index, index + 1);
      return result;
    },
    get$reversed(receiver) {
      return new H.ReversedListIterable(receiver, H.instanceType(receiver)._eval$1("ReversedListIterable<ListMixin.E>"));
    },
    toString$0(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 100
  };
  P.MapMixin.prototype = {
    forEach$1(_, action) {
      var t1, key;
      H._instanceType(this)._eval$1("~(MapMixin.K,MapMixin.V)")._as(action);
      for (t1 = this.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current();
        action.call$2(key, this.$index(0, key));
      }
    },
    get$entries(_) {
      return this.get$keys().map$1$1(0, new P.MapMixin_entries_closure(this), H._instanceType(this)._eval$1("MapEntry<MapMixin.K,MapMixin.V>"));
    },
    containsKey$1(key) {
      return this.get$keys().contains$1(0, key);
    },
    get$length(_) {
      var t1 = this.get$keys();
      return t1.get$length(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this.get$keys();
      return !t1.get$isEmpty(t1);
    },
    toString$0(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  P.MapMixin_entries_closure.prototype = {
    call$1(key) {
      var t1 = this.$this,
        t2 = H._instanceType(t1);
      t2._eval$1("MapMixin.K")._as(key);
      return new P.MapEntry(key, t1.$index(0, key), t2._eval$1("@<MapMixin.K>")._bind$1(t2._eval$1("MapMixin.V"))._eval$1("MapEntry<1,2>"));
    },
    $signature() {
      return H._instanceType(this.$this)._eval$1("MapEntry<MapMixin.K,MapMixin.V>(MapMixin.K)");
    }
  };
  P._UnmodifiableMapMixin.prototype = {};
  P.MapView.prototype = {
    $index(_, key) {
      return this._collection$_map.$index(0, key);
    },
    containsKey$1(key) {
      return this._collection$_map.containsKey$1(key);
    },
    forEach$1(_, action) {
      this._collection$_map.forEach$1(0, this.$ti._eval$1("~(1,2)")._as(action));
    },
    get$isEmpty(_) {
      var t1 = this._collection$_map;
      return t1.get$isEmpty(t1);
    },
    get$isNotEmpty(_) {
      var t1 = this._collection$_map;
      return t1.get$isNotEmpty(t1);
    },
    get$length(_) {
      var t1 = this._collection$_map;
      return t1.get$length(t1);
    },
    get$keys() {
      return this._collection$_map.get$keys();
    },
    toString$0(_) {
      return P.MapBase_mapToString(this._collection$_map);
    },
    $isMap: 1
  };
  P.UnmodifiableMapView.prototype = {};
  P.SetMixin.prototype = {
    get$isEmpty(_) {
      return this.get$length(this) === 0;
    },
    addAll$1(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(H._instanceType(this)._eval$1("Iterable<1>")._as(elements)); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    toList$1$growable(_, growable) {
      return P.List_List$of(this, growable, H._instanceType(this)._precomputed1);
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    toString$0(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    forEach$1(_, f) {
      var t1;
      H._instanceType(this)._eval$1("~(1)")._as(f);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    join$1(_, separator) {
      var t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += H.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        t1 = H.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + H.S(iterator.get$current());
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  P._SetBase.prototype = {
    toSet$0(_) {
      var t1 = this._newSet$0();
      t1.addAll$1(0, this);
      return t1;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  P._UnmodifiableSetMixin.prototype = {
    add$1(_, value) {
      this.$ti._precomputed1._as(value);
      P._UnmodifiableSetMixin__throwUnmodifiable();
      return H.ReachabilityError$(string$.x60null_t);
    }
  };
  P._UnmodifiableSet.prototype = {
    _newSet$0() {
      return P.LinkedHashSet_LinkedHashSet(this.$ti._precomputed1);
    },
    contains$1(_, element) {
      return this._collection$_map.containsKey$1(element);
    },
    get$iterator(_) {
      var t1 = this._collection$_map.get$keys();
      return t1.get$iterator(t1);
    },
    get$length(_) {
      var t1 = this._collection$_map;
      return t1.get$length(t1);
    }
  };
  P._ListBase_Object_ListMixin.prototype = {};
  P._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  P.__SetBase_Object_SetMixin.prototype = {};
  P.__UnmodifiableSet__SetBase__UnmodifiableSetMixin.prototype = {};
  P._JsonMap.prototype = {
    $index(_, key) {
      var result,
        t1 = this._processed;
      if (t1 == null)
        return this._convert$_data.$index(0, key);
      else if (typeof key != "string")
        return null;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._convert$_data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._computeKeys$0().length;
      return t1;
    },
    get$isNotEmpty(_) {
      return this.get$length(this) > 0;
    },
    get$keys() {
      if (this._processed == null)
        return this._convert$_data.get$keys();
      return new P._JsonMapKeyIterable(this);
    },
    containsKey$1(key) {
      if (this._processed == null)
        return this._convert$_data.containsKey$1(key);
      if (typeof key != "string")
        return false;
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    forEach$1(_, f) {
      var keys, i, key, value, _this = this;
      type$.void_Function_String_dynamic._as(f);
      if (_this._processed == null)
        return _this._convert$_data.forEach$1(0, f);
      keys = _this._computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = _this._processed[key];
        if (typeof value == "undefined") {
          value = P._convertJsonToDartLazy(_this._original[key]);
          _this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== _this._convert$_data)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0() {
      var keys = type$.nullable_List_dynamic._as(this._convert$_data);
      if (keys == null)
        keys = this._convert$_data = H._setArrayType(Object.keys(this._original), type$.JSArray_String);
      return keys;
    },
    _process$1(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return null;
      result = P._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    }
  };
  P._JsonMapKeyIterable.prototype = {
    get$length(_) {
      var t1 = this._convert$_parent;
      return t1.get$length(t1);
    },
    elementAt$1(_, index) {
      var t1 = this._convert$_parent;
      return t1._processed == null ? t1.get$keys().elementAt$1(0, index) : C.JSArray_methods.$index(t1._computeKeys$0(), index);
    },
    get$iterator(_) {
      var t1 = this._convert$_parent;
      if (t1._processed == null) {
        t1 = t1.get$keys();
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length, H._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
      }
      return t1;
    },
    contains$1(_, key) {
      return this._convert$_parent.containsKey$1(key);
    }
  };
  P.Utf8Decoder__decoder_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return null;
    },
    $signature: 15
  };
  P.Utf8Decoder__decoderNonfatal_closure.prototype = {
    call$0() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: false});
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return null;
    },
    $signature: 15
  };
  P.Base64Codec.prototype = {
    normalize$3(source, start, end) {
      var inverseAlphabet, t1, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, digit1, digit2, char0, value, t2, t3, endLength, $length,
        _s31_ = "Invalid base64 encoding length ";
      end = P.RangeError_checkValidRange(start, end, source.length);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      for (t1 = J.getInterceptor$s(source), i = start, sliceStart = i, buffer = null, firstPadding = -1, firstPaddingSourceIndex = -1, paddingCount = 0; i < end; i = i0) {
        i0 = i + 1;
        char = t1._codeUnitAt$1(source, i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            digit1 = H.hexDigitValue(C.JSString_methods._codeUnitAt$1(source, i0));
            digit2 = H.hexDigitValue(C.JSString_methods._codeUnitAt$1(source, i0 + 1));
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          if (char0 < 0 || char0 >= inverseAlphabet.length)
            return H.ioore(inverseAlphabet, char0);
          value = inverseAlphabet[char0];
          if (value >= 0) {
            char0 = C.JSString_methods.codeUnitAt$1("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t2 = buffer == null ? null : buffer._contents.length;
                if (t2 == null)
                  t2 = 0;
                firstPadding = t2 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null) {
              buffer = new P.StringBuffer("");
              t2 = buffer;
            } else
              t2 = buffer;
            t3 = t2._contents += C.JSString_methods.substring$2(source, sliceStart, i);
            t2._contents = t3 + H.Primitives_stringFromCharCode(char);
            sliceStart = i0;
            continue;
          }
        }
        throw H.wrapException(P.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = buffer._contents += t1.substring$2(source, sliceStart, end);
        t2 = t1.length;
        if (firstPadding >= 0)
          P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = C.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw H.wrapException(P.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return C.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = C.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw H.wrapException(P.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = t1.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    }
  };
  P.Base64Encoder.prototype = {};
  P.Codec.prototype = {};
  P.Converter.prototype = {};
  P.Encoding.prototype = {};
  P.JsonCodec.prototype = {
    decode$1(_, source) {
      var t1 = P._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    get$decoder() {
      return C.JsonDecoder_null;
    }
  };
  P.JsonDecoder.prototype = {};
  P.Utf8Codec.prototype = {
    get$encoder() {
      return C.C_Utf8Encoder;
    }
  };
  P.Utf8Encoder.prototype = {
    convert$1(string) {
      var t1, encoder,
        end = P.RangeError_checkValidRange(0, null, string.length),
        $length = end - 0;
      if ($length === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array($length * 3);
      encoder = new P._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end) {
        J.codeUnitAt$1$s(string, end - 1);
        encoder._writeReplacementCharacter$0();
      }
      return C.NativeUint8List_methods.sublist$2(t1, 0, encoder._bufferIndex);
    }
  };
  P._Utf8Encoder.prototype = {
    _writeReplacementCharacter$0() {
      var _this = this,
        t1 = _this._convert$_buffer,
        t2 = _this._bufferIndex,
        t3 = _this._bufferIndex = t2 + 1,
        t4 = t1.length;
      if (t2 >= t4)
        return H.ioore(t1, t2);
      t1[t2] = 239;
      t2 = _this._bufferIndex = t3 + 1;
      if (t3 >= t4)
        return H.ioore(t1, t3);
      t1[t3] = 191;
      _this._bufferIndex = t2 + 1;
      if (t2 >= t4)
        return H.ioore(t1, t2);
      t1[t2] = 189;
    },
    _writeSurrogate$2(leadingSurrogate, nextCodeUnit) {
      var rune, t1, t2, t3, t4, _this = this;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        t1 = _this._convert$_buffer;
        t2 = _this._bufferIndex;
        t3 = _this._bufferIndex = t2 + 1;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = rune >>> 18 | 240;
        t2 = _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = rune >>> 12 & 63 | 128;
        t3 = _this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = rune >>> 6 & 63 | 128;
        _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = rune & 63 | 128;
        return true;
      } else {
        _this._writeReplacementCharacter$0();
        return false;
      }
    },
    _fillBuffer$3(str, start, end) {
      var t1, t2, stringIndex, codeUnit, t3, stringIndex0, t4, _this = this;
      if (start !== end && (C.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
        --end;
      for (t1 = _this._convert$_buffer, t2 = t1.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        codeUnit = C.JSString_methods._codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t3 = _this._bufferIndex;
          if (t3 >= t2)
            break;
          _this._bufferIndex = t3 + 1;
          t1[t3] = codeUnit;
        } else {
          t3 = codeUnit & 64512;
          if (t3 === 55296) {
            if (_this._bufferIndex + 4 > t2)
              break;
            stringIndex0 = stringIndex + 1;
            if (_this._writeSurrogate$2(codeUnit, C.JSString_methods._codeUnitAt$1(str, stringIndex0)))
              stringIndex = stringIndex0;
          } else if (t3 === 56320) {
            if (_this._bufferIndex + 3 > t2)
              break;
            _this._writeReplacementCharacter$0();
          } else if (codeUnit <= 2047) {
            t3 = _this._bufferIndex;
            t4 = t3 + 1;
            if (t4 >= t2)
              break;
            _this._bufferIndex = t4;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            t1[t3] = codeUnit >>> 6 | 192;
            _this._bufferIndex = t4 + 1;
            t1[t4] = codeUnit & 63 | 128;
          } else {
            t3 = _this._bufferIndex;
            if (t3 + 2 >= t2)
              break;
            t4 = _this._bufferIndex = t3 + 1;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            t1[t3] = codeUnit >>> 12 | 224;
            t3 = _this._bufferIndex = t4 + 1;
            if (t4 >= t2)
              return H.ioore(t1, t4);
            t1[t4] = codeUnit >>> 6 & 63 | 128;
            _this._bufferIndex = t3 + 1;
            if (t3 >= t2)
              return H.ioore(t1, t3);
            t1[t3] = codeUnit & 63 | 128;
          }
        }
      }
      return stringIndex;
    }
  };
  P.Utf8Decoder.prototype = {
    convert$3(codeUnits, start, end) {
      var t1, result;
      type$.List_int._as(codeUnits);
      t1 = this._allowMalformed;
      result = P.Utf8Decoder__convertIntercepted(t1, codeUnits, start, end);
      if (result != null)
        return result;
      return new P._Utf8Decoder(t1).convertGeneral$4(codeUnits, start, end, true);
    },
    convert$1(codeUnits) {
      return this.convert$3(codeUnits, 0, null);
    }
  };
  P._Utf8Decoder.prototype = {
    convertGeneral$4(codeUnits, start, maybeEnd, single) {
      var end, bytes, result, t1, message, _this = this;
      type$.List_int._as(codeUnits);
      end = P.RangeError_checkValidRange(start, maybeEnd, J.get$length$asx(codeUnits));
      if (start === end)
        return "";
      bytes = P._Utf8Decoder__makeUint8List(codeUnits, start, end);
      result = _this._convertRecursive$4(bytes, 0, end - start, true);
      t1 = _this._convert$_state;
      if ((t1 & 1) !== 0) {
        message = P._Utf8Decoder_errorDescription(t1);
        _this._convert$_state = 0;
        throw H.wrapException(P.FormatException$(message, codeUnits, start + _this._charOrIndex));
      }
      return result;
    },
    _convertRecursive$4(bytes, start, end, single) {
      var mid, s1, _this = this;
      if (end - start > 1000) {
        mid = C.JSInt_methods._tdivFast$1(start + end, 2);
        s1 = _this._convertRecursive$4(bytes, start, mid, false);
        if ((_this._convert$_state & 1) !== 0)
          return s1;
        return s1 + _this._convertRecursive$4(bytes, mid, end, single);
      }
      return _this.decodeGeneral$4(bytes, start, end, single);
    },
    decodeGeneral$4(bytes, start, end, single) {
      var byte, t2, type, t3, i0, markEnd, i1, m, _this = this, _65533 = 65533,
        state = _this._convert$_state,
        char = _this._charOrIndex,
        buffer = new P.StringBuffer(""),
        i = start + 1,
        t1 = bytes.length;
      if (start < 0 || start >= t1)
        return H.ioore(bytes, start);
      byte = bytes[start];
      $label0$0:
        for (t2 = _this.allowMalformed; true;) {
          for (; true; i = i0) {
            type = C.JSString_methods._codeUnitAt$1("AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFFFFFFFFFFFFFFFFGGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHHHHHHIHHHJEEBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBKCCCCCCCCCCCCDCLONNNMEEEEEEEEEEE", byte) & 31;
            char = state <= 32 ? byte & 61694 >>> type : (byte & 63 | char << 6) >>> 0;
            state = C.JSString_methods._codeUnitAt$1(" \x000:XECCCCCN:lDb \x000:XECCCCCNvlDb \x000:XECCCCCN:lDb AAAAA\x00\x00\x00\x00\x00AAAAA00000AAAAA:::::AAAAAGG000AAAAA00KKKAAAAAG::::AAAAA:IIIIAAAAA000\x800AAAAA\x00\x00\x00\x00 AAAAA", state + type);
            if (state === 0) {
              buffer._contents += H.Primitives_stringFromCharCode(char);
              if (i === end)
                break $label0$0;
              break;
            } else if ((state & 1) !== 0) {
              if (t2)
                switch (state) {
                  case 69:
                  case 67:
                    buffer._contents += H.Primitives_stringFromCharCode(_65533);
                    break;
                  case 65:
                    buffer._contents += H.Primitives_stringFromCharCode(_65533);
                    --i;
                    break;
                  default:
                    t3 = buffer._contents += H.Primitives_stringFromCharCode(_65533);
                    buffer._contents = t3 + H.Primitives_stringFromCharCode(_65533);
                    break;
                }
              else {
                _this._convert$_state = state;
                _this._charOrIndex = i - 1;
                return "";
              }
              state = 0;
            }
            if (i === end)
              break $label0$0;
            i0 = i + 1;
            if (i < 0 || i >= t1)
              return H.ioore(bytes, i);
            byte = bytes[i];
          }
          i0 = i + 1;
          if (i < 0 || i >= t1)
            return H.ioore(bytes, i);
          byte = bytes[i];
          if (byte < 128) {
            while (true) {
              if (!(i0 < end)) {
                markEnd = end;
                break;
              }
              i1 = i0 + 1;
              if (i0 < 0 || i0 >= t1)
                return H.ioore(bytes, i0);
              byte = bytes[i0];
              if (byte >= 128) {
                markEnd = i1 - 1;
                i0 = i1;
                break;
              }
              i0 = i1;
            }
            if (markEnd - i < 20)
              for (m = i; m < markEnd; ++m) {
                if (m >= t1)
                  return H.ioore(bytes, m);
                buffer._contents += H.Primitives_stringFromCharCode(bytes[m]);
              }
            else
              buffer._contents += P.String_String$fromCharCodes(bytes, i, markEnd);
            if (markEnd === end)
              break $label0$0;
            i = i0;
          } else
            i = i0;
        }
      if (single && state > 32)
        if (t2)
          buffer._contents += H.Primitives_stringFromCharCode(_65533);
        else {
          _this._convert$_state = 77;
          _this._charOrIndex = end;
          return "";
        }
      _this._convert$_state = state;
      _this._charOrIndex = char;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  P.NoSuchMethodError_toString_closure.prototype = {
    call$2(key, value) {
      var t1, t2, t3;
      type$.Symbol._as(key);
      t1 = this.sb;
      t2 = this._box_0;
      t1._contents += t2.comma;
      t3 = t1._contents += H.S(key._name);
      t1._contents = t3 + ": ";
      t1._contents += P.Error_safeToString(value);
      t2.comma = ", ";
    },
    $signature: 58
  };
  P.Error.prototype = {
    get$stackTrace() {
      return H.getTraceFromException(this.$thrownJsError);
    }
  };
  P.AssertionError.prototype = {
    toString$0(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Assertion failed: " + P.Error_safeToString(t1);
      return "Assertion failed";
    }
  };
  P.TypeError.prototype = {};
  P.NullThrownError.prototype = {
    toString$0(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation() {
      return "";
    },
    toString$0(_) {
      var explanation, errorValue, _this = this,
        $name = _this.name,
        nameString = $name == null ? "" : " (" + $name + ")",
        message = _this.message,
        messageString = message == null ? "" : ": " + H.S(message),
        prefix = _this.get$_errorName() + nameString + messageString;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    }
  };
  P.RangeError.prototype = {
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var explanation,
        start = this.start,
        end = this.end;
      if (start == null)
        explanation = end != null ? ": Not less than or equal to " + H.S(end) : "";
      else if (end == null)
        explanation = ": Not greater than or equal to " + H.S(start);
      else if (end > start)
        explanation = ": Not in inclusive range " + H.S(start) + ".." + H.S(end);
      else
        explanation = end < start ? ": Valid value range is empty" : ": Only valid value is " + H.S(start);
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName() {
      return "RangeError";
    },
    get$_errorExplanation() {
      var t1,
        invalidValue = H._asIntS(this.invalidValue);
      if (typeof invalidValue !== "number")
        return invalidValue.$lt();
      if (invalidValue < 0)
        return ": index must not be negative";
      t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + H.S(t1);
    },
    get$length(receiver) {
      return this.length;
    }
  };
  P.NoSuchMethodError.prototype = {
    toString$0(_) {
      var $arguments, t1, _i, t2, t3, argument, memberName, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new P.StringBuffer("");
      _box_0.comma = "";
      $arguments = _this._core$_arguments;
      for (t1 = $arguments.length, _i = 0, t2 = "", t3 = ""; _i < t1; ++_i, t3 = ", ") {
        argument = $arguments[_i];
        sb._contents = t2 + t3;
        t2 = sb._contents += P.Error_safeToString(argument);
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(_box_0, sb));
      memberName = _this._memberName._name;
      receiverText = P.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      t1 = "NoSuchMethodError: method not found: '" + H.S(memberName) + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
      return t1;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0(_) {
      var message = this.message;
      return message != null ? "UnimplementedError: " + message : "UnimplementedError";
    }
  };
  P.StateError.prototype = {
    toString$0(_) {
      return "Bad state: " + this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.OutOfMemoryError.prototype = {
    toString$0(_) {
      return "Out of Memory";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  P.StackOverflowError.prototype = {
    toString$0(_) {
      return "Stack Overflow";
    },
    get$stackTrace() {
      return null;
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0(_) {
      var variableName = this.variableName;
      return variableName == null ? "Reading static variable during its initialization" : "Reading static variable '" + variableName + "' during its initialization";
    }
  };
  P._Exception.prototype = {
    toString$0(_) {
      return "Exception: " + this.message;
    },
    $isException: 1
  };
  P.FormatException.prototype = {
    toString$0(_) {
      var t1, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, start, prefix, postfix, slice,
        message = this.message,
        report = message != null && "" !== message ? "FormatException: " + H.S(message) : "FormatException",
        offset = this.offset,
        source = this.source;
      if (typeof source == "string") {
        if (offset != null)
          t1 = offset < 0 || offset > source.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          if (source.length > 78)
            source = C.JSString_methods.substring$2(source, 0, 75) + "...";
          return report + "\n" + source;
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = C.JSString_methods._codeUnitAt$1(source, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = source.length;
        for (i = offset; i < lineEnd; ++i) {
          char = C.JSString_methods.codeUnitAt$1(source, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = C.JSString_methods.substring$2(source, start, end);
        return report + prefix + slice + postfix + "\n" + C.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
    },
    $isException: 1
  };
  P.Iterable.prototype = {
    map$1$1(_, toElement, $T) {
      var t1 = H._instanceType(this);
      return H.MappedIterable_MappedIterable(this, t1._bind$1($T)._eval$1("1(Iterable.E)")._as(toElement), t1._eval$1("Iterable.E"), $T);
    },
    forEach$1(_, action) {
      var t1;
      H._instanceType(this)._eval$1("~(Iterable.E)")._as(action);
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        action.call$1(t1.get$current());
    },
    toList$1$growable(_, growable) {
      return P.List_List$of(this, true, H._instanceType(this)._eval$1("Iterable.E"));
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$first(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    get$last(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    elementAt$1(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.Iterator.prototype = {};
  P.MapEntry.prototype = {
    toString$0(_) {
      return "MapEntry(" + H.S(this.key) + ": " + H.S(this.value) + ")";
    }
  };
  P.Null.prototype = {
    get$hashCode(_) {
      return P.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0(_) {
      return "null";
    }
  };
  P.Object.prototype = {$isObject: 1,
    $eq(_, other) {
      return this === other;
    },
    get$hashCode(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0(_) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(this)) + "'";
    },
    noSuchMethod$1(_, invocation) {
      type$.Invocation._as(invocation);
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType(_) {
      return H.getRuntimeType(this);
    },
    toString() {
      return this.toString$0(this);
    }
  };
  P._StringStackTrace.prototype = {
    toString$0(_) {
      return "";
    },
    $isStackTrace: 1
  };
  P.Runes.prototype = {
    get$iterator(_) {
      return new P.RuneIterator(this.string);
    }
  };
  P.RuneIterator.prototype = {
    get$current() {
      return this._currentCodePoint;
    },
    moveNext$0() {
      var codeUnit, nextPosition, nextCodeUnit, _this = this,
        t1 = _this._position = _this._nextPosition,
        t2 = _this.string,
        t3 = t2.length;
      if (t1 === t3) {
        _this._currentCodePoint = -1;
        return false;
      }
      codeUnit = C.JSString_methods._codeUnitAt$1(t2, t1);
      nextPosition = t1 + 1;
      if ((codeUnit & 64512) === 55296 && nextPosition < t3) {
        nextCodeUnit = C.JSString_methods._codeUnitAt$1(t2, nextPosition);
        if ((nextCodeUnit & 64512) === 56320) {
          _this._nextPosition = nextPosition + 1;
          _this._currentCodePoint = P._combineSurrogatePair(codeUnit, nextCodeUnit);
          return true;
        }
      }
      _this._nextPosition = nextPosition;
      _this._currentCodePoint = codeUnit;
      return true;
    },
    $isIterator: 1
  };
  P.StringBuffer.prototype = {
    get$length(_) {
      return this._contents.length;
    },
    writeln$1(obj) {
      this._contents += H.S(obj) + "\n";
    },
    writeln$0() {
      return this.writeln$1("");
    },
    toString$0(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  P.Uri__parseIPv4Address_error.prototype = {
    call$2(msg, position) {
      throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 79
  };
  P.Uri_parseIPv6Address_error.prototype = {
    call$2(msg, position) {
      throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    call$1(msg) {
      return this.call$2(msg, null);
    },
    $signature: 80
  };
  P.Uri_parseIPv6Address_parseHex.prototype = {
    call$2(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = P.int_parse(C.JSString_methods.substring$2(this.host, start, end), 16);
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 81
  };
  P._Uri.prototype = {
    get$_core$_text() {
      var t2, t3, t4, _this = this,
        t1 = _this.___Uri__text;
      if (t1 === $) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? t1 + ":" : "";
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + t2 + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._port;
          if (t2 != null)
            t1 = t1 + ":" + H.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
        if (_this.___Uri__text === $)
          _this.___Uri__text = t1;
        else
          t1 = H.throwExpression(H.LateError$fieldADI("_text"));
      }
      return t1;
    },
    get$pathSegments() {
      var pathToSplit, _this = this,
        t1 = _this.___Uri_pathSegments;
      if (t1 === $) {
        pathToSplit = _this.path;
        if (pathToSplit.length !== 0 && C.JSString_methods._codeUnitAt$1(pathToSplit, 0) === 47)
          pathToSplit = C.JSString_methods.substring$1(pathToSplit, 1);
        t1 = pathToSplit.length === 0 ? C.List_empty1 : P.List_List$unmodifiable(new H.MappedListIterable(H._setArrayType(pathToSplit.split("/"), type$.JSArray_String), type$.dynamic_Function_String._as(P.core_Uri_decodeComponent$closure()), type$.MappedListIterable_String_dynamic), type$.String);
        if (_this.___Uri_pathSegments === $)
          _this.set$___Uri_pathSegments(t1);
        else
          t1 = H.throwExpression(H.LateError$fieldADI("pathSegments"));
      }
      return t1;
    },
    get$hashCode(_) {
      var _this = this,
        t1 = _this.___Uri_hashCode;
      if (t1 === $) {
        t1 = J.get$hashCode$(_this.get$_core$_text());
        if (_this.___Uri_hashCode === $)
          _this.___Uri_hashCode = t1;
        else
          t1 = H.throwExpression(H.LateError$fieldADI("hashCode"));
      }
      return t1;
    },
    get$userInfo() {
      return this._userInfo;
    },
    get$host(_) {
      var host = this._host;
      if (host == null)
        return "";
      if (C.JSString_methods.startsWith$1(host, "["))
        return C.JSString_methods.substring$2(host, 1, host.length - 1);
      return host;
    },
    get$port(_) {
      var t1 = this._port;
      return t1 == null ? P._Uri__defaultPort(this.scheme) : t1;
    },
    get$query() {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    isScheme$1(scheme) {
      var thisScheme = this.scheme;
      if (scheme.length !== thisScheme.length)
        return false;
      return P._Uri__compareScheme(scheme, thisScheme);
    },
    _mergePaths$2(base, reference) {
      var backCount, refStart, baseEnd, newEnd, delta, t1;
      for (backCount = 0, refStart = 0; C.JSString_methods.startsWith$2(reference, "../", refStart);) {
        refStart += 3;
        ++backCount;
      }
      baseEnd = C.JSString_methods.lastIndexOf$1(base, "/");
      while (true) {
        if (!(baseEnd > 0 && backCount > 0))
          break;
        newEnd = C.JSString_methods.lastIndexOf$2(base, "/", baseEnd - 1);
        if (newEnd < 0)
          break;
        delta = baseEnd - newEnd;
        t1 = delta !== 2;
        if (!t1 || delta === 3)
          if (C.JSString_methods.codeUnitAt$1(base, newEnd + 1) === 46)
            t1 = !t1 || C.JSString_methods.codeUnitAt$1(base, newEnd + 2) === 46;
          else
            t1 = false;
        else
          t1 = false;
        if (t1)
          break;
        --backCount;
        baseEnd = newEnd;
      }
      return C.JSString_methods.replaceRange$3(base, baseEnd + 1, null, C.JSString_methods.substring$1(reference, refStart - 3 * backCount));
    },
    resolve$1(reference) {
      return this.resolveUri$1(P.Uri_parse(reference));
    },
    resolveUri$1(reference) {
      var targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, packageNameEnd, packageName, mergedPath, t1, _this = this, _null = null;
      if (reference.get$scheme().length !== 0) {
        targetScheme = reference.get$scheme();
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host(reference);
          targetPort = reference.get$hasPort() ? reference.get$port(reference) : _null;
        } else {
          targetPort = _null;
          targetHost = targetPort;
          targetUserInfo = "";
        }
        targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
        targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
      } else {
        targetScheme = _this.scheme;
        if (reference.get$hasAuthority()) {
          targetUserInfo = reference.get$userInfo();
          targetHost = reference.get$host(reference);
          targetPort = P._Uri__makePort(reference.get$hasPort() ? reference.get$port(reference) : _null, targetScheme);
          targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
          targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
        } else {
          targetUserInfo = _this._userInfo;
          targetHost = _this._host;
          targetPort = _this._port;
          targetPath = _this.path;
          if (reference.get$path(reference) === "")
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _this._query;
          else {
            packageNameEnd = P._Uri__packageNameEnd(_this, targetPath);
            if (packageNameEnd > 0) {
              packageName = C.JSString_methods.substring$2(targetPath, 0, packageNameEnd);
              targetPath = reference.get$hasAbsolutePath() ? packageName + P._Uri__removeDotSegments(reference.get$path(reference)) : packageName + P._Uri__removeDotSegments(_this._mergePaths$2(C.JSString_methods.substring$1(targetPath, packageName.length), reference.get$path(reference)));
            } else if (reference.get$hasAbsolutePath())
              targetPath = P._Uri__removeDotSegments(reference.get$path(reference));
            else if (targetPath.length === 0)
              if (targetHost == null)
                targetPath = targetScheme.length === 0 ? reference.get$path(reference) : P._Uri__removeDotSegments(reference.get$path(reference));
              else
                targetPath = P._Uri__removeDotSegments("/" + reference.get$path(reference));
            else {
              mergedPath = _this._mergePaths$2(targetPath, reference.get$path(reference));
              t1 = targetScheme.length === 0;
              if (!t1 || targetHost != null || C.JSString_methods.startsWith$1(targetPath, "/"))
                targetPath = P._Uri__removeDotSegments(mergedPath);
              else
                targetPath = P._Uri__normalizeRelativePath(mergedPath, !t1 || targetHost != null);
            }
            targetQuery = reference.get$hasQuery() ? reference.get$query() : _null;
          }
        }
      }
      return P._Uri$_internal(targetScheme, targetUserInfo, targetHost, targetPort, targetPath, targetQuery, reference.get$hasFragment() ? reference.get$fragment() : _null);
    },
    get$hasAuthority() {
      return this._host != null;
    },
    get$hasPort() {
      return this._port != null;
    },
    get$hasQuery() {
      return this._query != null;
    },
    get$hasFragment() {
      return this._fragment != null;
    },
    get$hasAbsolutePath() {
      return C.JSString_methods.startsWith$1(this.path, "/");
    },
    toFilePath$0() {
      var pathSegments, _this = this,
        t1 = _this.scheme;
      if (t1 !== "" && t1 !== "file")
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a " + t1 + " URI"));
      t1 = _this._query;
      if ((t1 == null ? "" : t1) !== "")
        throw H.wrapException(P.UnsupportedError$(string$.Cannotfq));
      t1 = _this._fragment;
      if ((t1 == null ? "" : t1) !== "")
        throw H.wrapException(P.UnsupportedError$(string$.Cannotff));
      t1 = $.$get$_Uri__isWindowsCached();
      if (H.boolConversionCheck(t1))
        t1 = P._Uri__toWindowsFilePath(_this);
      else {
        if (_this._host != null && _this.get$host(_this) !== "")
          H.throwExpression(P.UnsupportedError$(string$.Cannotn));
        pathSegments = _this.get$pathSegments();
        P._Uri__checkNonWindowsPathReservedCharacters(pathSegments, false);
        t1 = P.StringBuffer__writeAll(C.JSString_methods.startsWith$1(_this.path, "/") ? "/" : "", pathSegments, "/");
        t1 = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return t1;
    },
    toString$0(_) {
      return this.get$_core$_text();
    },
    $eq(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (type$.Uri._is(other))
        if (_this.scheme === other.get$scheme())
          if (_this._host != null === other.get$hasAuthority())
            if (_this._userInfo === other.get$userInfo())
              if (_this.get$host(_this) === other.get$host(other))
                if (_this.get$port(_this) === other.get$port(other))
                  if (_this.path === other.get$path(other)) {
                    t1 = _this._query;
                    t2 = t1 == null;
                    if (!t2 === other.get$hasQuery()) {
                      if (t2)
                        t1 = "";
                      if (t1 === other.get$query()) {
                        t1 = _this._fragment;
                        t2 = t1 == null;
                        if (!t2 === other.get$hasFragment()) {
                          if (t2)
                            t1 = "";
                          t1 = t1 === other.get$fragment();
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    set$___Uri_pathSegments(___Uri_pathSegments) {
      this.___Uri_pathSegments = type$.nullable_List_String._as(___Uri_pathSegments);
    },
    $isUri: 1,
    get$scheme() {
      return this.scheme;
    },
    get$path(receiver) {
      return this.path;
    }
  };
  P._Uri__makePath_closure.prototype = {
    call$1(s) {
      return P._Uri__uriEncode(C.List_qg40, H._asStringS(s), C.C_Utf8Codec, false);
    },
    $signature: 3
  };
  P.UriData.prototype = {
    get$uri() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 == null) {
        t1 = _this._separatorIndices;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t2 = _this._core$_text;
        t1 = t1[0] + 1;
        queryIndex = C.JSString_methods.indexOf$2(t2, "?", t1);
        end = t2.length;
        if (queryIndex >= 0) {
          query = P._Uri__normalizeOrSubstring(t2, queryIndex + 1, end, C.List_CVk, false);
          end = queryIndex;
        } else
          query = _null;
        t1 = _this._uriCache = new P._DataUri(_this, "data", "", _null, _null, P._Uri__normalizeOrSubstring(t2, t1, end, C.List_qg4, false), query, _null);
      }
      return t1;
    },
    toString$0(_) {
      var t2,
        t1 = this._separatorIndices;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = this._core$_text;
      return t1[0] === -1 ? "data:" + t2 : t2;
    }
  };
  P._createTables_build.prototype = {
    call$2(state, defaultTransition) {
      var t1 = this.tables;
      if (state >= t1.length)
        return H.ioore(t1, state);
      t1 = t1[state];
      C.NativeUint8List_methods.fillRange$3(t1, 0, 96, defaultTransition);
      return t1;
    },
    $signature: 96
  };
  P._createTables_setChars.prototype = {
    call$3(target, chars, transition) {
      var t1, i, t2;
      for (t1 = chars.length, i = 0; i < t1; ++i) {
        t2 = C.JSString_methods._codeUnitAt$1(chars, i) ^ 96;
        if (t2 >= 96)
          return H.ioore(target, t2);
        target[t2] = transition;
      }
    },
    $signature: 16
  };
  P._createTables_setRange.prototype = {
    call$3(target, range, transition) {
      var i, n, t1;
      for (i = C.JSString_methods._codeUnitAt$1(range, 0), n = C.JSString_methods._codeUnitAt$1(range, 1); i <= n; ++i) {
        t1 = (i ^ 96) >>> 0;
        if (t1 >= 96)
          return H.ioore(target, t1);
        target[t1] = transition;
      }
    },
    $signature: 16
  };
  P._SimpleUri.prototype = {
    get$hasAuthority() {
      return this._hostStart > 0;
    },
    get$hasPort() {
      return this._hostStart > 0 && this._portStart + 1 < this._pathStart;
    },
    get$hasQuery() {
      return this._queryStart < this._fragmentStart;
    },
    get$hasFragment() {
      return this._fragmentStart < this._uri.length;
    },
    get$hasAbsolutePath() {
      return C.JSString_methods.startsWith$2(this._uri, "/", this._pathStart);
    },
    get$scheme() {
      var t1 = this._schemeCache;
      return t1 == null ? this._schemeCache = this._computeScheme$0() : t1;
    },
    _computeScheme$0() {
      var t2, _this = this,
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = t1 === 4;
      if (t2 && C.JSString_methods.startsWith$1(_this._uri, "http"))
        return "http";
      if (t1 === 5 && C.JSString_methods.startsWith$1(_this._uri, "https"))
        return "https";
      if (t2 && C.JSString_methods.startsWith$1(_this._uri, "file"))
        return "file";
      if (t1 === 7 && C.JSString_methods.startsWith$1(_this._uri, "package"))
        return "package";
      return C.JSString_methods.substring$2(_this._uri, 0, t1);
    },
    get$userInfo() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? C.JSString_methods.substring$2(this._uri, t2, t1 - 1) : "";
    },
    get$host(_) {
      var t1 = this._hostStart;
      return t1 > 0 ? C.JSString_methods.substring$2(this._uri, t1, this._portStart) : "";
    },
    get$port(_) {
      var t1, _this = this;
      if (_this.get$hasPort())
        return P.int_parse(C.JSString_methods.substring$2(_this._uri, _this._portStart + 1, _this._pathStart), null);
      t1 = _this._schemeEnd;
      if (t1 === 4 && C.JSString_methods.startsWith$1(_this._uri, "http"))
        return 80;
      if (t1 === 5 && C.JSString_methods.startsWith$1(_this._uri, "https"))
        return 443;
      return 0;
    },
    get$path(_) {
      return C.JSString_methods.substring$2(this._uri, this._pathStart, this._queryStart);
    },
    get$query() {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      return t1 < t2 ? C.JSString_methods.substring$2(this._uri, t1 + 1, t2) : "";
    },
    get$fragment() {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? C.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    get$pathSegments() {
      var parts, i,
        start = this._pathStart,
        end = this._queryStart,
        t1 = this._uri;
      if (C.JSString_methods.startsWith$2(t1, "/", start))
        ++start;
      if (start === end)
        return C.List_empty1;
      parts = H._setArrayType([], type$.JSArray_String);
      for (i = start; i < end; ++i)
        if (C.JSString_methods.codeUnitAt$1(t1, i) === 47) {
          C.JSArray_methods.add$1(parts, C.JSString_methods.substring$2(t1, start, i));
          start = i + 1;
        }
      C.JSArray_methods.add$1(parts, C.JSString_methods.substring$2(t1, start, end));
      return P.List_List$unmodifiable(parts, type$.String);
    },
    _isPort$1(port) {
      var portDigitStart = this._portStart + 1;
      return portDigitStart + port.length === this._pathStart && C.JSString_methods.startsWith$2(this._uri, port, portDigitStart);
    },
    removeFragment$0() {
      var _this = this,
        t1 = _this._fragmentStart,
        t2 = _this._uri;
      if (t1 >= t2.length)
        return _this;
      return new P._SimpleUri(C.JSString_methods.substring$2(t2, 0, t1), _this._schemeEnd, _this._hostStart, _this._portStart, _this._pathStart, _this._queryStart, t1, _this._schemeCache);
    },
    resolve$1(reference) {
      return this.resolveUri$1(P.Uri_parse(reference));
    },
    resolveUri$1(reference) {
      if (reference instanceof P._SimpleUri)
        return this._simpleMerge$2(this, reference);
      return this._toNonSimple$0().resolveUri$1(reference);
    },
    _simpleMerge$2(base, ref) {
      var t2, t3, t4, isSimple, delta, refStart, basePathStart, packageNameEnd, basePathStart0, baseStart, baseEnd, baseUri, baseStart0, backCount, refStart0, insert,
        t1 = ref._schemeEnd;
      if (t1 > 0)
        return ref;
      t2 = ref._hostStart;
      if (t2 > 0) {
        t3 = base._schemeEnd;
        if (t3 <= 0)
          return ref;
        t4 = t3 === 4;
        if (t4 && C.JSString_methods.startsWith$1(base._uri, "file"))
          isSimple = ref._pathStart !== ref._queryStart;
        else if (t4 && C.JSString_methods.startsWith$1(base._uri, "http"))
          isSimple = !ref._isPort$1("80");
        else
          isSimple = !(t3 === 5 && C.JSString_methods.startsWith$1(base._uri, "https")) || !ref._isPort$1("443");
        if (isSimple) {
          delta = t3 + 1;
          return new P._SimpleUri(C.JSString_methods.substring$2(base._uri, 0, delta) + C.JSString_methods.substring$1(ref._uri, t1 + 1), t3, t2 + delta, ref._portStart + delta, ref._pathStart + delta, ref._queryStart + delta, ref._fragmentStart + delta, base._schemeCache);
        } else
          return this._toNonSimple$0().resolveUri$1(ref);
      }
      refStart = ref._pathStart;
      t1 = ref._queryStart;
      if (refStart === t1) {
        t2 = ref._fragmentStart;
        if (t1 < t2) {
          t3 = base._queryStart;
          delta = t3 - t1;
          return new P._SimpleUri(C.JSString_methods.substring$2(base._uri, 0, t3) + C.JSString_methods.substring$1(ref._uri, t1), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, t1 + delta, t2 + delta, base._schemeCache);
        }
        t1 = ref._uri;
        if (t2 < t1.length) {
          t3 = base._fragmentStart;
          return new P._SimpleUri(C.JSString_methods.substring$2(base._uri, 0, t3) + C.JSString_methods.substring$1(t1, t2), base._schemeEnd, base._hostStart, base._portStart, base._pathStart, base._queryStart, t2 + (t3 - t2), base._schemeCache);
        }
        return base.removeFragment$0();
      }
      t2 = ref._uri;
      if (C.JSString_methods.startsWith$2(t2, "/", refStart)) {
        basePathStart = base._pathStart;
        packageNameEnd = P._SimpleUri__packageNameEnd(this);
        basePathStart0 = packageNameEnd > 0 ? packageNameEnd : basePathStart;
        delta = basePathStart0 - refStart;
        return new P._SimpleUri(C.JSString_methods.substring$2(base._uri, 0, basePathStart0) + C.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, basePathStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseStart = base._pathStart;
      baseEnd = base._queryStart;
      if (baseStart === baseEnd && base._hostStart > 0) {
        for (; C.JSString_methods.startsWith$2(t2, "../", refStart);)
          refStart += 3;
        delta = baseStart - refStart + 1;
        return new P._SimpleUri(C.JSString_methods.substring$2(base._uri, 0, baseStart) + "/" + C.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
      }
      baseUri = base._uri;
      packageNameEnd = P._SimpleUri__packageNameEnd(this);
      if (packageNameEnd >= 0)
        baseStart0 = packageNameEnd;
      else
        for (baseStart0 = baseStart; C.JSString_methods.startsWith$2(baseUri, "../", baseStart0);)
          baseStart0 += 3;
      backCount = 0;
      while (true) {
        refStart0 = refStart + 3;
        if (!(refStart0 <= t1 && C.JSString_methods.startsWith$2(t2, "../", refStart)))
          break;
        ++backCount;
        refStart = refStart0;
      }
      for (insert = ""; baseEnd > baseStart0;) {
        --baseEnd;
        if (C.JSString_methods.codeUnitAt$1(baseUri, baseEnd) === 47) {
          if (backCount === 0) {
            insert = "/";
            break;
          }
          --backCount;
          insert = "/";
        }
      }
      if (baseEnd === baseStart0 && base._schemeEnd <= 0 && !C.JSString_methods.startsWith$2(baseUri, "/", baseStart)) {
        refStart -= backCount * 3;
        insert = "";
      }
      delta = baseEnd - refStart + insert.length;
      return new P._SimpleUri(C.JSString_methods.substring$2(baseUri, 0, baseEnd) + insert + C.JSString_methods.substring$1(t2, refStart), base._schemeEnd, base._hostStart, base._portStart, baseStart, t1 + delta, ref._fragmentStart + delta, base._schemeCache);
    },
    toFilePath$0() {
      var t2, t3, _this = this,
        t1 = _this._schemeEnd;
      if (t1 >= 0) {
        t2 = !(t1 === 4 && C.JSString_methods.startsWith$1(_this._uri, "file"));
        t1 = t2;
      } else
        t1 = false;
      if (t1)
        throw H.wrapException(P.UnsupportedError$("Cannot extract a file path from a " + _this.get$scheme() + " URI"));
      t1 = _this._queryStart;
      t2 = _this._uri;
      if (t1 < t2.length) {
        if (t1 < _this._fragmentStart)
          throw H.wrapException(P.UnsupportedError$(string$.Cannotfq));
        throw H.wrapException(P.UnsupportedError$(string$.Cannotff));
      }
      t3 = $.$get$_Uri__isWindowsCached();
      if (H.boolConversionCheck(t3))
        t1 = P._Uri__toWindowsFilePath(_this);
      else {
        if (_this._hostStart < _this._portStart)
          H.throwExpression(P.UnsupportedError$(string$.Cannotn));
        t1 = C.JSString_methods.substring$2(t2, _this._pathStart, t1);
      }
      return t1;
    },
    get$hashCode(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = C.JSString_methods.get$hashCode(this._uri) : t1;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return type$.Uri._is(other) && this._uri === other.toString$0(0);
    },
    _toNonSimple$0() {
      var _this = this, _null = null,
        t1 = _this.get$scheme(),
        t2 = _this.get$userInfo(),
        t3 = _this._hostStart > 0 ? _this.get$host(_this) : _null,
        t4 = _this.get$hasPort() ? _this.get$port(_this) : _null,
        t5 = _this._uri,
        t6 = _this._queryStart,
        t7 = C.JSString_methods.substring$2(t5, _this._pathStart, t6),
        t8 = _this._fragmentStart;
      t6 = t6 < t8 ? _this.get$query() : _null;
      return P._Uri$_internal(t1, t2, t3, t4, t7, t6, t8 < t5.length ? _this.get$fragment() : _null);
    },
    toString$0(_) {
      return this._uri;
    },
    $isUri: 1
  };
  P._DataUri.prototype = {};
  W.HtmlElement.prototype = {};
  W.AnchorElement.prototype = {
    toString$0(receiver) {
      return String(receiver);
    }
  };
  W.AreaElement.prototype = {
    toString$0(receiver) {
      return String(receiver);
    }
  };
  W.DomException.prototype = {
    toString$0(receiver) {
      return String(receiver);
    }
  };
  W.Element.prototype = {
    toString$0(receiver) {
      return receiver.localName;
    },
    get$onClick(receiver) {
      return new W._ElementEventStreamImpl(receiver, "click", false, type$._ElementEventStreamImpl_legacy_MouseEvent);
    },
    $isElement: 1
  };
  W.Event.prototype = {$isEvent: 1};
  W.EventTarget.prototype = {
    addEventListener$3(receiver, type, listener, useCapture) {
      type$.nullable_dynamic_Function_Event._as(listener);
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, false);
    },
    _addEventListener$3(receiver, type, listener, options) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(type$.nullable_dynamic_Function_Event._as(listener), 1), false);
    },
    _removeEventListener$3(receiver, type, listener, options) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(type$.nullable_dynamic_Function_Event._as(listener), 1), false);
    },
    $isEventTarget: 1
  };
  W.FormElement.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  W.InputElement.prototype = {$isTextInputElement: 1};
  W.MouseEvent.prototype = {$isMouseEvent: 1};
  W.Node0.prototype = {
    toString$0(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    set$text(receiver, value) {
      receiver.textContent = value;
    }
  };
  W.SelectElement.prototype = {
    get$length(receiver) {
      return receiver.length;
    }
  };
  W.TextAreaElement.prototype = {$isTextAreaElement: 1};
  W.UIEvent.prototype = {};
  W.EventStreamProvider.prototype = {};
  W._EventStream.prototype = {};
  W._ElementEventStreamImpl.prototype = {};
  W._EventStreamSubscription.prototype = {
    cancel$0() {
      var _this = this;
      if (_this._target == null)
        return $.$get$nullFuture();
      _this._unlisten$0();
      _this._target = null;
      _this.set$_onData(null);
      return $.$get$nullFuture();
    },
    onData$1(handleData) {
      var t1, _this = this;
      _this.$ti._eval$1("~(1)?")._as(handleData);
      if (_this._target == null)
        throw H.wrapException(P.StateError$("Subscription has been canceled."));
      _this._unlisten$0();
      t1 = W._wrapZone(new W._EventStreamSubscription_onData_closure(handleData), type$.Event);
      _this.set$_onData(t1);
      _this._tryResume$0();
    },
    _tryResume$0() {
      var t2,
        t1 = this._onData;
      if (t1 != null && true) {
        t2 = this._target;
        t2.toString;
        J.addEventListener$3$x(t2, this._eventType, t1, false);
      }
    },
    _unlisten$0() {
      var t2,
        t1 = this._onData;
      if (t1 != null) {
        t2 = this._target;
        t2.toString;
        J._removeEventListener$3$x(t2, this._eventType, type$.nullable_dynamic_Function_Event._as(t1), false);
      }
    },
    set$_onData(_onData) {
      this._onData = type$.nullable_dynamic_Function_Event._as(_onData);
    }
  };
  W._EventStreamSubscription_closure.prototype = {
    call$1(e) {
      return this.onData.call$1(type$.Event._as(e));
    },
    $signature: 17
  };
  W._EventStreamSubscription_onData_closure.prototype = {
    call$1(e) {
      return this.handleData.call$1(type$.Event._as(e));
    },
    $signature: 17
  };
  P.SvgElement.prototype = {
    get$onClick(receiver) {
      return new W._ElementEventStreamImpl(receiver, "click", false, type$._ElementEventStreamImpl_legacy_MouseEvent);
    }
  };
  A.ErrorCode.prototype = {
    get$correction() {
      C.Map_empty.$index(0, this.uniqueName);
      return this._correction;
    },
    get$message(_) {
      C.Map_empty.$index(0, this.uniqueName);
      return this._errors$_message;
    },
    toString$0(_) {
      return this.uniqueName;
    }
  };
  A.ErrorSeverity.prototype = {
    get$hashCode(_) {
      return this.ordinal;
    },
    toString$0(_) {
      return this.name;
    }
  };
  A.ErrorType.prototype = {
    get$hashCode(_) {
      return this.ordinal;
    },
    toString$0(_) {
      return this.name;
    }
  };
  Z.Code.prototype = {
    toString$0(_) {
      return this.name;
    }
  };
  Z.Message.prototype = {
    toString$0(_) {
      var _this = this;
      return "Message[" + _this.code.toString$0(0) + ", " + _this.message + ", " + H.S(_this.tip) + ", " + _this.$arguments.toString$0(0) + "]";
    },
    get$code(receiver) {
      return this.code;
    },
    get$message(receiver) {
      return this.message;
    },
    get$$arguments() {
      return this.$arguments;
    }
  };
  Z.MessageCode.prototype = {
    get$$arguments() {
      return C.Map_empty0;
    },
    get$code(_) {
      return this;
    },
    $isMessage: 1,
    get$message(receiver) {
      return this.message;
    }
  };
  Z.Template.prototype = {};
  Z.applyArgumentsToTemplate_closure.prototype = {
    call$1(match) {
      return J.toString$0$(this.$arguments.$index(0, match.group$1(1)));
    },
    $signature: 18
  };
  N.Severity.prototype = {
    toString$0(_) {
      return this._severity$_name;
    }
  };
  D.Assert.prototype = {
    toString$0(_) {
      return this._assert$_name;
    }
  };
  E.AsyncModifier.prototype = {
    toString$0(_) {
      return this._async_modifier$_name;
    }
  };
  U.BlockKind.prototype = {
    toString$0(_) {
      return "BlockKind(" + this.name + ")";
    }
  };
  E.ConstructorReferenceContext.prototype = {
    toString$0(_) {
      return this._constructor_reference_context$_name;
    }
  };
  S.DeclarationKind.prototype = {
    toString$0(_) {
      return this._declaration_kind$_name;
    }
  };
  A.DirectiveContext.prototype = {
    checkScriptTag$2(parser, token) {
      if (this.state === C.DirectiveState_0) {
        this.state = C.DirectiveState_1;
        return;
      }
      throw H.wrapException("Internal error: Unexpected script tag.");
    },
    checkExport$2(parser, token) {
      var t1 = this.state;
      if (t1.index <= 3) {
        this.state = C.DirectiveState_3;
        return;
      }
      if (t1 === C.DirectiveState_4) {
        token = N.findNonZeroLengthToken(token);
        parser.listener.handleRecoverableError$3(C.MessageCode_AGi, token, token);
      } else if (t1 === C.DirectiveState_5) {
        token = N.findNonZeroLengthToken(token);
        parser.listener.handleRecoverableError$3(C.MessageCode_WXJ, token, token);
      } else {
        token = N.findNonZeroLengthToken(token);
        parser.listener.handleRecoverableError$3(C.MessageCode_Uhj, token, token);
      }
    },
    checkImport$2(parser, token) {
      var t1 = this.state;
      if (t1.index <= 3) {
        this.state = C.DirectiveState_3;
        return;
      }
      if (t1 === C.DirectiveState_4) {
        token = N.findNonZeroLengthToken(token);
        parser.listener.handleRecoverableError$3(C.MessageCode_Tbc0, token, token);
      } else if (t1 === C.DirectiveState_5) {
        token = N.findNonZeroLengthToken(token);
        parser.listener.handleRecoverableError$3(C.MessageCode_WXJ, token, token);
      } else {
        token = N.findNonZeroLengthToken(token);
        parser.listener.handleRecoverableError$3(C.MessageCode_Uhj, token, token);
      }
    },
    checkLibrary$2(parser, token) {
      var t1 = this.state;
      if (t1.index < 2) {
        this.state = C.DirectiveState_2;
        return;
      }
      if (t1 === C.DirectiveState_2) {
        token = N.findNonZeroLengthToken(token);
        parser.listener.handleRecoverableError$3(C.MessageCode_23h, token, token);
      } else if (t1 === C.DirectiveState_5) {
        token = N.findNonZeroLengthToken(token);
        parser.listener.handleRecoverableError$3(C.MessageCode_WXJ, token, token);
      } else {
        token = N.findNonZeroLengthToken(token);
        parser.listener.handleRecoverableError$3(C.MessageCode_ww80, token, token);
      }
    },
    checkPart$2(parser, token) {
      var t1 = this.state;
      if (t1.index <= 4) {
        this.state = C.DirectiveState_4;
        return;
      }
      if (t1 === C.DirectiveState_5) {
        token = N.findNonZeroLengthToken(token);
        parser.listener.handleRecoverableError$3(C.MessageCode_WXJ, token, token);
      } else {
        token = N.findNonZeroLengthToken(token);
        parser.listener.handleRecoverableError$3(C.MessageCode_Uhj, token, token);
      }
    },
    checkPartOf$2(parser, token) {
      var t1 = this.state;
      if (t1 === C.DirectiveState_0) {
        this.state = C.DirectiveState_5;
        return;
      }
      if (t1 === C.DirectiveState_5) {
        token = N.findNonZeroLengthToken(token);
        parser.listener.handleRecoverableError$3(C.MessageCode_9Rf, token, token);
      } else {
        token = N.findNonZeroLengthToken(token);
        parser.listener.handleRecoverableError$3(C.MessageCode_WXJ, token, token);
      }
    }
  };
  A.DirectiveState.prototype = {
    toString$0(_) {
      return this._directive_context$_name;
    }
  };
  M.FormalParameterKind.prototype = {
    toString$0(_) {
      return this._formal_parameter_kind$_name;
    }
  };
  Y.ForwardingListener.prototype = {
    beginArguments$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginArguments$1(token);
    },
    beginAssert$2(assertKeyword, kind) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginAssert$2(assertKeyword, kind);
    },
    beginAwaitExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginAwaitExpression$1(token);
    },
    beginBinaryExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginBinaryExpression$1(token);
    },
    beginBlock$2(token, blockKind) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginBlock$2(token, blockKind);
    },
    beginBlockFunctionBody$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginBlockFunctionBody$1(token);
    },
    beginCascade$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginCascade$1(token);
    },
    beginCaseExpression$1(caseKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginCaseExpression$1(caseKeyword);
    },
    beginCatchClause$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginCatchClause$1(token);
    },
    beginClassDeclaration$3(begin, abstractToken, $name) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginClassDeclaration$3(begin, abstractToken, $name);
    },
    beginClassOrMixinBody$2(kind, token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginClassOrMixinBody$2(kind, token);
    },
    beginClassOrNamedMixinApplicationPrelude$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginClassOrNamedMixinApplicationPrelude$1(token);
    },
    beginCombinators$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginCombinators$1(token);
    },
    beginCompilationUnit$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginCompilationUnit$1(token);
    },
    beginConditionalExpression$1(question) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginConditionalExpression$1(question);
    },
    beginConditionalUri$1(ifKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginConditionalUri$1(ifKeyword);
    },
    beginConditionalUris$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginConditionalUris$1(token);
    },
    beginConstExpression$1(constKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginConstExpression$1(constKeyword);
    },
    beginConstLiteral$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginConstLiteral$1(token);
    },
    beginConstructorReference$1(start) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginConstructorReference$1(start);
    },
    beginDoWhileStatement$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginDoWhileStatement$1(token);
    },
    beginDoWhileStatementBody$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginDoWhileStatementBody$1(token);
    },
    beginElseStatement$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginElseStatement$1(token);
    },
    beginEnum$1(enumKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginEnum$1(enumKeyword);
    },
    beginExport$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginExport$1(token);
    },
    beginUncategorizedTopLevelDeclaration$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginUncategorizedTopLevelDeclaration$1(token);
    },
    beginExtensionDeclarationPrelude$1(extensionKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginExtensionDeclarationPrelude$1(extensionKeyword);
    },
    beginExtensionDeclaration$2(extensionKeyword, $name) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginExtensionDeclaration$2(extensionKeyword, $name);
    },
    beginFactoryMethod$3(lastConsumed, externalToken, constToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginFactoryMethod$3(lastConsumed, externalToken, constToken);
    },
    beginFieldInitializer$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginFieldInitializer$1(token);
    },
    beginForControlFlow$2(awaitToken, forToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginForControlFlow$2(awaitToken, forToken);
    },
    beginForInBody$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginForInBody$1(token);
    },
    beginForInExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginForInExpression$1(token);
    },
    beginFormalParameter$5(token, kind, requiredToken, covariantToken, varFinalOrConst) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginFormalParameter$5(token, kind, requiredToken, covariantToken, varFinalOrConst);
    },
    beginFormalParameterDefaultValueExpression$0() {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginFormalParameterDefaultValueExpression$0();
    },
    beginFormalParameters$2(token, kind) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginFormalParameters$2(token, kind);
    },
    beginForStatement$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginForStatement$1(token);
    },
    beginForStatementBody$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginForStatementBody$1(token);
    },
    beginFunctionExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginFunctionExpression$1(token);
    },
    beginFunctionName$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginFunctionName$1(token);
    },
    beginFunctionType$1(beginToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginFunctionType$1(beginToken);
    },
    beginFunctionTypeAlias$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginFunctionTypeAlias$1(token);
    },
    beginFunctionTypedFormalParameter$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginFunctionTypedFormalParameter$1(token);
    },
    beginHide$1(hideKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginHide$1(hideKeyword);
    },
    beginIfControlFlow$1(ifToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginIfControlFlow$1(ifToken);
    },
    beginIfStatement$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginIfStatement$1(token);
    },
    beginImplicitCreationExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginImplicitCreationExpression$1(token);
    },
    beginImport$1(importKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginImport$1(importKeyword);
    },
    beginInitializedIdentifier$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginInitializedIdentifier$1(token);
    },
    beginInitializer$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginInitializer$1(token);
    },
    beginInitializers$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginInitializers$1(token);
    },
    beginLabeledStatement$2(token, labelCount) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginLabeledStatement$2(token, labelCount);
    },
    beginLibraryName$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginLibraryName$1(token);
    },
    beginLiteralString$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginLiteralString$1(token);
    },
    beginLiteralSymbol$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginLiteralSymbol$1(token);
    },
    beginLocalFunctionDeclaration$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginLocalFunctionDeclaration$1(token);
    },
    beginMember$0() {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginMember$0();
    },
    beginMetadata$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginMetadata$1(token);
    },
    beginMetadataStar$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginMetadataStar$1(token);
    },
    beginMethod$6(externalToken, staticToken, covariantToken, varFinalOrConst, getOrSet, $name) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginMethod$6(externalToken, staticToken, covariantToken, varFinalOrConst, getOrSet, $name);
    },
    beginMixinDeclaration$2(mixinKeyword, $name) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginMixinDeclaration$2(mixinKeyword, $name);
    },
    beginNamedFunctionExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginNamedFunctionExpression$1(token);
    },
    beginNamedMixinApplication$3(begin, abstractToken, $name) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginNamedMixinApplication$3(begin, abstractToken, $name);
    },
    beginNewExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginNewExpression$1(token);
    },
    beginOptionalFormalParameters$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginOptionalFormalParameters$1(token);
    },
    beginPart$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginPart$1(token);
    },
    beginPartOf$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginPartOf$1(token);
    },
    beginRedirectingFactoryBody$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginRedirectingFactoryBody$1(token);
    },
    beginRethrowStatement$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginRethrowStatement$1(token);
    },
    beginReturnStatement$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginReturnStatement$1(token);
    },
    beginShow$1(showKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginShow$1(showKeyword);
    },
    beginSwitchBlock$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginSwitchBlock$1(token);
    },
    beginSwitchCase$3(labelCount, expressionCount, firstToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginSwitchCase$3(labelCount, expressionCount, firstToken);
    },
    beginSwitchStatement$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginSwitchStatement$1(token);
    },
    handleThenControlFlow$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleThenControlFlow$1(token);
    },
    beginThenStatement$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginThenStatement$1(token);
    },
    beginTopLevelMember$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginTopLevelMember$1(token);
    },
    beginTopLevelMethod$2(lastConsumed, externalToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginTopLevelMethod$2(lastConsumed, externalToken);
    },
    beginTryStatement$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginTryStatement$1(token);
    },
    beginTypeArguments$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginTypeArguments$1(token);
    },
    beginTypeList$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginTypeList$1(token);
    },
    beginTypeVariable$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginTypeVariable$1(token);
    },
    beginTypeVariables$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginTypeVariables$1(token);
    },
    beginVariableInitializer$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginVariableInitializer$1(token);
    },
    beginVariablesDeclaration$3(token, lateToken, varFinalOrConst) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginVariablesDeclaration$3(token, lateToken, varFinalOrConst);
    },
    beginWhileStatement$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginWhileStatement$1(token);
    },
    beginWhileStatementBody$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginWhileStatementBody$1(token);
    },
    beginYieldStatement$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginYieldStatement$1(token);
    },
    endArguments$3(count, beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endArguments$3(count, beginToken, endToken);
    },
    endAssert$5(assertKeyword, kind, leftParenthesis, commaToken, semicolonToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endAssert$5(assertKeyword, kind, leftParenthesis, commaToken, semicolonToken);
    },
    endAwaitExpression$2(beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endAwaitExpression$2(beginToken, endToken);
    },
    endBinaryExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endBinaryExpression$1(token);
    },
    handleEndingBinaryExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleEndingBinaryExpression$1(token);
    },
    endBlock$4(count, beginToken, endToken, blockKind) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endBlock$4(count, beginToken, endToken, blockKind);
    },
    endBlockFunctionBody$3(count, beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endBlockFunctionBody$3(count, beginToken, endToken);
    },
    endCascade$0() {
      var t1 = this.listener;
      if (t1 != null)
        t1.endCascade$0();
    },
    endCaseExpression$1(colon) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endCaseExpression$1(colon);
    },
    endCatchClause$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endCatchClause$1(token);
    },
    endClassConstructor$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endClassConstructor$5(getOrSet, beginToken, beginParam, beginInitializers, endToken);
    },
    endClassDeclaration$2(beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endClassDeclaration$2(beginToken, endToken);
    },
    endClassFactoryMethod$3(beginToken, factoryKeyword, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endClassFactoryMethod$3(beginToken, factoryKeyword, endToken);
    },
    endClassFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endClassFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken);
    },
    endClassMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endClassMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken);
    },
    endClassOrMixinBody$4(kind, memberCount, beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endClassOrMixinBody$4(kind, memberCount, beginToken, endToken);
    },
    endCombinators$1(count) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endCombinators$1(count);
    },
    endCompilationUnit$2(count, token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endCompilationUnit$2(count, token);
    },
    endConditionalExpression$2(question, colon) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endConditionalExpression$2(question, colon);
    },
    endConditionalUri$3(ifKeyword, leftParen, equalSign) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endConditionalUri$3(ifKeyword, leftParen, equalSign);
    },
    endConditionalUris$1(count) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endConditionalUris$1(count);
    },
    endConstExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endConstExpression$1(token);
    },
    endConstLiteral$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endConstLiteral$1(token);
    },
    endConstructorReference$4(start, periodBeforeName, endToken, constructorReferenceContext) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endConstructorReference$4(start, periodBeforeName, endToken, constructorReferenceContext);
    },
    endDoWhileStatement$3(doKeyword, whileKeyword, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endDoWhileStatement$3(doKeyword, whileKeyword, endToken);
    },
    endDoWhileStatementBody$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endDoWhileStatementBody$1(token);
    },
    endElseStatement$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endElseStatement$1(token);
    },
    endEnum$3(enumKeyword, leftBrace, count) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endEnum$3(enumKeyword, leftBrace, count);
    },
    endExport$2(exportKeyword, semicolon) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endExport$2(exportKeyword, semicolon);
    },
    endExtensionConstructor$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endExtensionConstructor$5(getOrSet, beginToken, beginParam, beginInitializers, endToken);
    },
    endExtensionDeclaration$6(extensionKeyword, typeKeyword, onKeyword, showKeyword, hideKeyword, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endExtensionDeclaration$6(extensionKeyword, typeKeyword, onKeyword, showKeyword, hideKeyword, endToken);
    },
    endExtensionFactoryMethod$3(beginToken, factoryKeyword, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endExtensionFactoryMethod$3(beginToken, factoryKeyword, endToken);
    },
    endExtensionFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endExtensionFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken);
    },
    endExtensionMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endExtensionMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken);
    },
    endFieldInitializer$2(assignment, token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endFieldInitializer$2(assignment, token);
    },
    endForControlFlow$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endForControlFlow$1(token);
    },
    endForIn$1(endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endForIn$1(endToken);
    },
    endForInBody$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endForInBody$1(token);
    },
    endForInControlFlow$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endForInControlFlow$1(token);
    },
    endForInExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endForInExpression$1(token);
    },
    endFormalParameter$7(thisKeyword, periodAfterThis, nameToken, initializerStart, initializerEnd, kind, memberKind) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endFormalParameter$7(thisKeyword, periodAfterThis, nameToken, initializerStart, initializerEnd, kind, memberKind);
    },
    endFormalParameterDefaultValueExpression$0() {
      var t1 = this.listener;
      if (t1 != null)
        t1.endFormalParameterDefaultValueExpression$0();
    },
    endFormalParameters$4(count, beginToken, endToken, kind) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endFormalParameters$4(count, beginToken, endToken, kind);
    },
    endForStatement$1(endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endForStatement$1(endToken);
    },
    endForStatementBody$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endForStatementBody$1(token);
    },
    endFunctionExpression$2(beginToken, token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endFunctionExpression$2(beginToken, token);
    },
    endFunctionName$2(beginToken, token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endFunctionName$2(beginToken, token);
    },
    endFunctionType$2(functionToken, questionMark) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endFunctionType$2(functionToken, questionMark);
    },
    endFunctionTypeAlias$3(typedefKeyword, equals, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endFunctionTypeAlias$3(typedefKeyword, equals, endToken);
    },
    endFunctionTypedFormalParameter$2(nameToken, question) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endFunctionTypedFormalParameter$2(nameToken, question);
    },
    handleTypeArgumentApplication$1(openAngleBracket) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleTypeArgumentApplication$1(openAngleBracket);
    },
    endHide$1(hideKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endHide$1(hideKeyword);
    },
    endIfControlFlow$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endIfControlFlow$1(token);
    },
    endIfElseControlFlow$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endIfElseControlFlow$1(token);
    },
    endIfStatement$2(ifToken, elseToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endIfStatement$2(ifToken, elseToken);
    },
    endImplicitCreationExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endImplicitCreationExpression$1(token);
    },
    endImport$2(importKeyword, semicolon) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endImport$2(importKeyword, semicolon);
    },
    endInitializedIdentifier$1(nameToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endInitializedIdentifier$1(nameToken);
    },
    endInitializer$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endInitializer$1(token);
    },
    endInitializers$3(count, beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endInitializers$3(count, beginToken, endToken);
    },
    endInvalidAwaitExpression$3(beginToken, endToken, errorCode) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endInvalidAwaitExpression$3(beginToken, endToken, errorCode);
    },
    endInvalidYieldStatement$4(beginToken, starToken, endToken, errorCode) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endInvalidYieldStatement$4(beginToken, starToken, endToken, errorCode);
    },
    endLabeledStatement$1(labelCount) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endLabeledStatement$1(labelCount);
    },
    endLibraryName$2(libraryKeyword, semicolon) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endLibraryName$2(libraryKeyword, semicolon);
    },
    endLiteralString$2(interpolationCount, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endLiteralString$2(interpolationCount, endToken);
    },
    endLiteralSymbol$2(hashToken, identifierCount) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endLiteralSymbol$2(hashToken, identifierCount);
    },
    endLocalFunctionDeclaration$1(endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endLocalFunctionDeclaration$1(endToken);
    },
    endMember$0() {
      var t1 = this.listener;
      if (t1 != null)
        t1.endMember$0();
    },
    endMetadata$3(beginToken, periodBeforeName, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endMetadata$3(beginToken, periodBeforeName, endToken);
    },
    endMetadataStar$1(count) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endMetadataStar$1(count);
    },
    endMixinConstructor$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endMixinConstructor$5(getOrSet, beginToken, beginParam, beginInitializers, endToken);
    },
    endMixinDeclaration$2(mixinKeyword, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endMixinDeclaration$2(mixinKeyword, endToken);
    },
    endMixinFactoryMethod$3(beginToken, factoryKeyword, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endMixinFactoryMethod$3(beginToken, factoryKeyword, endToken);
    },
    endMixinFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endMixinFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken);
    },
    endMixinMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endMixinMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken);
    },
    endNamedFunctionExpression$1(endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endNamedFunctionExpression$1(endToken);
    },
    endNamedMixinApplication$5(begin, classKeyword, equals, implementsKeyword, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endNamedMixinApplication$5(begin, classKeyword, equals, implementsKeyword, endToken);
    },
    endNewExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endNewExpression$1(token);
    },
    endOptionalFormalParameters$3(count, beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endOptionalFormalParameters$3(count, beginToken, endToken);
    },
    endPart$2(partKeyword, semicolon) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endPart$2(partKeyword, semicolon);
    },
    endPartOf$4(partKeyword, ofKeyword, semicolon, hasName) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endPartOf$4(partKeyword, ofKeyword, semicolon, hasName);
    },
    endRedirectingFactoryBody$2(beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endRedirectingFactoryBody$2(beginToken, endToken);
    },
    endRethrowStatement$2(rethrowToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endRethrowStatement$2(rethrowToken, endToken);
    },
    endReturnStatement$3(hasExpression, beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endReturnStatement$3(hasExpression, beginToken, endToken);
    },
    endShow$1(showKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endShow$1(showKeyword);
    },
    endSwitchBlock$3(caseCount, beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endSwitchBlock$3(caseCount, beginToken, endToken);
    },
    endSwitchCase$7(labelCount, expressionCount, defaultKeyword, colonAfterDefault, statementCount, firstToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endSwitchCase$7(labelCount, expressionCount, defaultKeyword, colonAfterDefault, statementCount, firstToken, endToken);
    },
    endSwitchStatement$2(switchKeyword, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endSwitchStatement$2(switchKeyword, endToken);
    },
    endThenStatement$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endThenStatement$1(token);
    },
    endTopLevelDeclaration$1(nextToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endTopLevelDeclaration$1(nextToken);
    },
    beginFields$1(lastConsumed) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginFields$1(lastConsumed);
    },
    endTopLevelFields$8(externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endTopLevelFields$8(externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken);
    },
    endTopLevelMethod$3(beginToken, getOrSet, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endTopLevelMethod$3(beginToken, getOrSet, endToken);
    },
    endTryStatement$3(catchCount, tryKeyword, finallyKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endTryStatement$3(catchCount, tryKeyword, finallyKeyword);
    },
    endTypeArguments$3(count, beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endTypeArguments$3(count, beginToken, endToken);
    },
    endTypeList$1(count) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endTypeList$1(count);
    },
    endTypeVariable$4(token, index, extendsOrSuper, variance) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endTypeVariable$4(token, index, extendsOrSuper, variance);
    },
    endTypeVariables$2(beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endTypeVariables$2(beginToken, endToken);
    },
    endVariableInitializer$1(assignmentOperator) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endVariableInitializer$1(assignmentOperator);
    },
    endVariablesDeclaration$2(count, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endVariablesDeclaration$2(count, endToken);
    },
    endWhileStatement$2(whileKeyword, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endWhileStatement$2(whileKeyword, endToken);
    },
    endWhileStatementBody$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endWhileStatementBody$1(token);
    },
    endYieldStatement$3(yieldToken, starToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endYieldStatement$3(yieldToken, starToken, endToken);
    },
    beginAsOperatorType$1(operator) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginAsOperatorType$1(operator);
    },
    endAsOperatorType$1(operator) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endAsOperatorType$1(operator);
    },
    handleAsOperator$1(operator) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleAsOperator$1(operator);
    },
    handleAssignmentExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleAssignmentExpression$1(token);
    },
    handleAsyncModifier$2(asyncToken, starToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleAsyncModifier$2(asyncToken, starToken);
    },
    handleBreakStatement$3(hasTarget, breakKeyword, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleBreakStatement$3(hasTarget, breakKeyword, endToken);
    },
    handleCaseMatch$2(caseKeyword, colon) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleCaseMatch$2(caseKeyword, colon);
    },
    handleCatchBlock$3(onKeyword, catchKeyword, comma) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleCatchBlock$3(onKeyword, catchKeyword, comma);
    },
    handleClassExtends$2(extendsKeyword, typeCount) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleClassExtends$2(extendsKeyword, typeCount);
    },
    handleClassHeader$3(begin, classKeyword, nativeToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleClassHeader$3(begin, classKeyword, nativeToken);
    },
    handleClassNoWithClause$0() {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleClassNoWithClause$0();
    },
    handleClassOrMixinImplements$2(implementsKeyword, interfacesCount) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleClassOrMixinImplements$2(implementsKeyword, interfacesCount);
    },
    handleExtensionShowHide$4(showKeyword, showElementCount, hideKeyword, hideElementCount) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleExtensionShowHide$4(showKeyword, showElementCount, hideKeyword, hideElementCount);
    },
    handleClassWithClause$1(withKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleClassWithClause$1(withKeyword);
    },
    handleCommentReference$4(newKeyword, prefix, period, token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleCommentReference$4(newKeyword, prefix, period, token);
    },
    handleCommentReferenceText$2(referenceSource, referenceOffset) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleCommentReferenceText$2(referenceSource, referenceOffset);
    },
    handleConditionalExpressionColon$0() {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleConditionalExpressionColon$0();
    },
    handleConstFactory$1(constKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleConstFactory$1(constKeyword);
    },
    handleContinueStatement$3(hasTarget, continueKeyword, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleContinueStatement$3(hasTarget, continueKeyword, endToken);
    },
    handleDottedName$2(count, firstIdentifier) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleDottedName$2(count, firstIdentifier);
    },
    handleElseControlFlow$1(elseToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleElseControlFlow$1(elseToken);
    },
    handleEmptyFunctionBody$1(semicolon) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleEmptyFunctionBody$1(semicolon);
    },
    handleEmptyStatement$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleEmptyStatement$1(token);
    },
    handleErrorToken$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleErrorToken$1(token);
    },
    handleExpressionFunctionBody$2(arrowToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleExpressionFunctionBody$2(arrowToken, endToken);
    },
    handleExpressionStatement$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleExpressionStatement$1(token);
    },
    handleFinallyBlock$1(finallyKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleFinallyBlock$1(finallyKeyword);
    },
    handleForInitializerEmptyStatement$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleForInitializerEmptyStatement$1(token);
    },
    handleForInitializerExpressionStatement$2(token, forIn) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleForInitializerExpressionStatement$2(token, forIn);
    },
    handleForInitializerLocalVariableDeclaration$2(token, forIn) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleForInitializerLocalVariableDeclaration$2(token, forIn);
    },
    handleForInLoopParts$4(awaitToken, forToken, leftParenthesis, inKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleForInLoopParts$4(awaitToken, forToken, leftParenthesis, inKeyword);
    },
    handleForLoopParts$4(forKeyword, leftParen, leftSeparator, updateExpressionCount) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleForLoopParts$4(forKeyword, leftParen, leftSeparator, updateExpressionCount);
    },
    handleFormalParameterWithoutValue$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleFormalParameterWithoutValue$1(token);
    },
    handleShowHideIdentifier$2(modifier, identifier) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleShowHideIdentifier$2(modifier, identifier);
    },
    handleIdentifier$2(token, context) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleIdentifier$2(token, context);
    },
    handleIdentifierList$1(count) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleIdentifierList$1(count);
    },
    handleImportPrefix$2(deferredKeyword, asKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleImportPrefix$2(deferredKeyword, asKeyword);
    },
    handleIndexedExpression$3(question, openSquareBracket, closeSquareBracket) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleIndexedExpression$3(question, openSquareBracket, closeSquareBracket);
    },
    handleInterpolationExpression$2(leftBracket, rightBracket) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleInterpolationExpression$2(leftBracket, rightBracket);
    },
    handleInvalidFunctionBody$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleInvalidFunctionBody$1(token);
    },
    handleInvalidMember$1(endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleInvalidMember$1(endToken);
    },
    handleInvalidOperatorName$2(operatorKeyword, token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleInvalidOperatorName$2(operatorKeyword, token);
    },
    handleInvalidStatement$2(token, message) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleInvalidStatement$2(token, message);
    },
    handleInvalidTopLevelBlock$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleInvalidTopLevelBlock$1(token);
    },
    handleInvalidTopLevelDeclaration$1(endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleInvalidTopLevelDeclaration$1(endToken);
    },
    handleInvalidTypeArguments$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleInvalidTypeArguments$1(token);
    },
    beginIsOperatorType$1(operator) {
      var t1 = this.listener;
      if (t1 != null)
        t1.beginIsOperatorType$1(operator);
    },
    endIsOperatorType$1(operator) {
      var t1 = this.listener;
      if (t1 != null)
        t1.endIsOperatorType$1(operator);
    },
    handleIsOperator$2(isOperator, not) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleIsOperator$2(isOperator, not);
    },
    handleLabel$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleLabel$1(token);
    },
    handleLiteralBool$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleLiteralBool$1(token);
    },
    handleLiteralDouble$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleLiteralDouble$1(token);
    },
    handleLiteralInt$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleLiteralInt$1(token);
    },
    handleLiteralList$4(count, beginToken, constKeyword, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleLiteralList$4(count, beginToken, constKeyword, endToken);
    },
    handleLiteralMapEntry$2(colon, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleLiteralMapEntry$2(colon, endToken);
    },
    handleLiteralNull$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleLiteralNull$1(token);
    },
    handleLiteralSetOrMap$5(count, leftBrace, constKeyword, rightBrace, hasSetEntry) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleLiteralSetOrMap$5(count, leftBrace, constKeyword, rightBrace, hasSetEntry);
    },
    handleMixinHeader$1(mixinKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleMixinHeader$1(mixinKeyword);
    },
    handleMixinOn$2(onKeyword, typeCount) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleMixinOn$2(onKeyword, typeCount);
    },
    handleNamedArgument$1(colon) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNamedArgument$1(colon);
    },
    handleNamedMixinApplicationWithClause$1(withKeyword) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNamedMixinApplicationWithClause$1(withKeyword);
    },
    handleNativeClause$2(nativeToken, hasName) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNativeClause$2(nativeToken, hasName);
    },
    handleNativeFunctionBody$2(nativeToken, semicolon) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNativeFunctionBody$2(nativeToken, semicolon);
    },
    handleNativeFunctionBodyIgnored$2(nativeToken, semicolon) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNativeFunctionBodyIgnored$2(nativeToken, semicolon);
    },
    handleNewAsIdentifier$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNewAsIdentifier$1(token);
    },
    handleNoArguments$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNoArguments$1(token);
    },
    handleNoCommentReference$0() {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNoCommentReference$0();
    },
    handleNoConstructorReferenceContinuationAfterTypeArguments$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNoConstructorReferenceContinuationAfterTypeArguments$1(token);
    },
    handleNoFieldInitializer$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNoFieldInitializer$1(token);
    },
    handleNoFormalParameters$2(token, kind) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNoFormalParameters$2(token, kind);
    },
    handleNoInitializers$0() {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNoInitializers$0();
    },
    handleNoName$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNoName$1(token);
    },
    handleNonNullAssertExpression$1(bang) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNonNullAssertExpression$1(bang);
    },
    handleNoType$1(lastConsumed) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNoType$1(lastConsumed);
    },
    handleNoTypeArguments$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNoTypeArguments$1(token);
    },
    handleNoTypeVariables$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNoTypeVariables$1(token);
    },
    handleNoVariableInitializer$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleNoVariableInitializer$1(token);
    },
    handleOperator$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleOperator$1(token);
    },
    handleOperatorName$2(operatorKeyword, token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleOperatorName$2(operatorKeyword, token);
    },
    handleParenthesizedCondition$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleParenthesizedCondition$1(token);
    },
    handleParenthesizedExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleParenthesizedExpression$1(token);
    },
    handleQualified$1(period) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleQualified$1(period);
    },
    handleRecoverableError$3(message, startToken, endToken) {
      var t1;
      if (this.forwardErrors) {
        t1 = this.listener;
        if (t1 != null)
          t1.handleRecoverableError$3(message, startToken, endToken);
      }
    },
    handleRecoverClassHeader$0() {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleRecoverClassHeader$0();
    },
    handleRecoverImport$1(semicolon) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleRecoverImport$1(semicolon);
    },
    handleRecoverMixinHeader$0() {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleRecoverMixinHeader$0();
    },
    handleScript$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleScript$1(token);
    },
    handleSend$2(beginToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleSend$2(beginToken, endToken);
    },
    handleSpreadExpression$1(spreadToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleSpreadExpression$1(spreadToken);
    },
    handleStringJuxtaposition$2(startToken, literalCount) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleStringJuxtaposition$2(startToken, literalCount);
    },
    handleStringPart$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleStringPart$1(token);
    },
    handleSuperExpression$2(token, context) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleSuperExpression$2(token, context);
    },
    handleSymbolVoid$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleSymbolVoid$1(token);
    },
    handleThisExpression$2(token, context) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleThisExpression$2(token, context);
    },
    handleThrowExpression$2(throwToken, endToken) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleThrowExpression$2(throwToken, endToken);
    },
    handleType$2(beginToken, questionMark) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleType$2(beginToken, questionMark);
    },
    handleTypeVariablesDefined$2(token, count) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleTypeVariablesDefined$2(token, count);
    },
    handleUnaryPostfixAssignmentExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleUnaryPostfixAssignmentExpression$1(token);
    },
    handleUnaryPrefixAssignmentExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleUnaryPrefixAssignmentExpression$1(token);
    },
    handleUnaryPrefixExpression$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleUnaryPrefixExpression$1(token);
    },
    handleValuedFormalParameter$2(equals, token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleValuedFormalParameter$2(equals, token);
    },
    handleVoidKeyword$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleVoidKeyword$1(token);
    },
    handleVoidKeywordWithTypeArguments$1(token) {
      var t1 = this.listener;
      if (t1 != null)
        t1.handleVoidKeywordWithTypeArguments$1(token);
    },
    $isListener: 1
  };
  Y.NullListener.prototype = {
    handleRecoverableError$3(message, startToken, endToken) {
      this.hasErrors = true;
    }
  };
  D.IdentifierContext.prototype = {
    toString$0(_) {
      return this._identifier_context$_name;
    },
    get$allowsNewAsIdentifier() {
      return false;
    }
  };
  G.CatchParameterIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var token0,
        identifier = token.next;
      if (identifier.get$isIdentifier()) {
        G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
        return identifier;
      }
      token0 = N.findNonZeroLengthToken(identifier);
      parser.listener.handleRecoverableError$3(C.MessageCode_72A, token0, token0);
      if (N.isOneOfOrEof(identifier, C.List_vjM) || N.isOneOfOrEof(identifier, C.List_QYh))
        return parser.get$rewriter().insertSyntheticIdentifier$1(token);
      else if (!identifier.get$isKeywordOrIdentifier())
        return parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      return identifier;
    }
  };
  G.ClassOrMixinOrExtensionIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var t2,
        identifier = token.next,
        t1 = identifier.type;
      if (t1.get$isPseudo())
        return identifier;
      if (t1 !== C.TokenType_Emx) {
        if (t1.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul)) {
          t2 = identifier.next;
          t2 = t2 == null || !N.isOneOfOrEof(t2, C.List_6T6);
        } else
          t2 = false;
        if (!t2)
          if (N.isOneOfOrEof(identifier, C.List_6T6)) {
            t2 = identifier.next;
            t2 = t2 == null || !N.isOneOfOrEof(t2, C.List_6T6);
          } else
            t2 = false;
        else
          t2 = true;
      } else
        t2 = true;
      if (t2)
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else if (t1.get$isBuiltIn())
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_gA4);
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.CombinatorIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var t1,
        identifier = token.next;
      if (identifier.get$isIdentifier()) {
        if (identifier.type.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul)) {
          t1 = identifier.next;
          t1.toString;
          t1 = N.isOneOfOrEof(t1, C.List_Kp9);
        } else
          t1 = true;
        if (t1)
          return identifier;
      }
      if (N.isOneOfOrEof(identifier, C.List_Kp9) || identifier.type.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul))
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.ConstructorReferenceIdentifierContext.prototype = {
    get$allowsNewAsIdentifier() {
      return this.isContinuation;
    },
    ensureIdentifier$2(token, parser) {
      var identifier = token.next;
      if (identifier.get$isIdentifier()) {
        G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
        return identifier;
      }
      if (!identifier.get$isKeywordOrIdentifier())
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.DottedNameIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var t1,
        identifier = token.next;
      if (identifier.get$isIdentifier()) {
        if (identifier.type.isTopLevelKeyword) {
          t1 = identifier.next;
          t1.toString;
          t1 = N.isOneOfOrEof(t1, C.List_6z6);
        } else
          t1 = true;
        if (t1)
          return identifier;
      }
      if (identifier.type.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul) || N.isOneOfOrEof(identifier, C.List_6z6))
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.EnumDeclarationIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var identifier = token.next,
        t1 = identifier.type;
      if (t1.get$isPseudo())
        return identifier;
      if (t1.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul) || N.isOneOfOrEof(identifier, C.List_wsa))
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else if (t1.get$isBuiltIn())
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_gA4);
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.EnumValueDeclarationIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var identifier = token.next;
      if (identifier.get$isIdentifier())
        return identifier;
      if (identifier.type.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul) || N.isOneOfOrEof(identifier, C.List_CpJ)) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        return parser.get$rewriter().insertSyntheticIdentifier$1(token);
      } else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        return parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.ExpressionIdentifierContext.prototype = {
    get$allowsNewAsIdentifier() {
      return this.isContinuation;
    },
    ensureIdentifier$2(token, parser) {
      var t1,
        identifier = token.next;
      if (identifier.get$isIdentifier()) {
        if ("await" === identifier.type.stringValue && identifier.next.get$isIdentifier()) {
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template__withArgumentsUnexpectedToken);
          t1 = identifier.next;
          t1.toString;
          return t1;
        } else
          G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
        return identifier;
      }
      if ("$" === token.type.stringValue && identifier.get$isKeyword() && identifier.next.type.kind === 39) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
        return identifier;
      } else if (!N.isOneOfOrEof(identifier, C.List_vjM))
        if (identifier.get$isKeywordOrIdentifier()) {
          if (this.isContinuation || !N.isOneOfOrEof(identifier, C.List_as_is)) {
            parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
            return identifier;
          }
        } else if (!identifier.type.isOperator && !N.isOneOfOrEof(identifier, C.List_CO9)) {
          identifier.next.toString;
          token = identifier;
        }
      parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
      return parser.get$rewriter().insertSyntheticIdentifier$1(token);
    }
  };
  G.ExtensionShowHideElementIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var t1,
        identifier = token.next;
      if (!identifier.get$isIdentifier())
        t1 = this._identifier_context_impl$_kind === 2 && identifier.type.isOperator;
      else
        t1 = true;
      if (t1)
        return identifier;
      t1 = identifier.type;
      if (t1 !== C.TokenType_Emx) {
        if (t1.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul)) {
          t1 = identifier.next;
          t1 = t1 == null || !N.isOneOfOrEof(t1, C.List_6T6);
        } else
          t1 = false;
        if (!t1)
          if (N.isOneOfOrEof(identifier, C.List_6T6)) {
            t1 = identifier.next;
            t1 = t1 == null || !N.isOneOfOrEof(t1, C.List_6T6);
          } else
            t1 = false;
        else
          t1 = true;
      } else
        t1 = true;
      if (t1)
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof G.ExtensionShowHideElementIdentifierContext && this._identifier_context_impl$_kind === other._identifier_context_impl$_kind;
    }
  };
  G.FieldDeclarationIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var identifier = token.next;
      if (identifier.get$isIdentifier())
        return identifier;
      if (N.isOneOfOrEof(identifier, C.List_NMh) || identifier.type.isModifier || N.isOneOfOrEof(identifier, C.List_xV7))
        return parser.insertSyntheticIdentifier$2(token, this);
      else if (!identifier.get$isKeywordOrIdentifier())
        return parser.insertSyntheticIdentifier$4$message$messageOnToken(identifier, this, Z._withArgumentsExpectedIdentifier(identifier), identifier);
      else {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
        return identifier;
      }
    },
    ensureIdentifierPotentiallyRecovered$3(token, parser, isRecovered) {
      var identifier = token.next;
      if (identifier.get$isIdentifier())
        return identifier;
      if (!isRecovered || !identifier.get$isKeywordOrIdentifier())
        return this.ensureIdentifier$2(token, parser);
      parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.FieldInitializerIdentifierContext.prototype = {
    get$allowsNewAsIdentifier() {
      return true;
    },
    ensureIdentifier$2(token, parser) {
      var identifier = token.next;
      if (identifier.get$isIdentifier())
        return identifier;
      parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
      return parser.get$rewriter().insertSyntheticIdentifier$1(token);
    }
  };
  G.FormalParameterDeclarationIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var t1,
        identifier = token.next;
      if (identifier.get$isIdentifier()) {
        G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
        return identifier;
      }
      t1 = identifier.type;
      if (!(t1.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul)))
        t1 = t1.isModifier || N.isOneOfOrEof(identifier, C.List_xV7) || N.isOneOfOrEof(identifier, C.List_vjM);
      else
        t1 = true;
      if (t1) {
        t1 = identifier.next;
        t1.toString;
        t1 = !N.isOneOf(t1, C.List_egL);
      } else
        t1 = false;
      if (t1 || N.isOneOfOrEof(identifier, C.List_EBV))
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.ImportPrefixIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var t2,
        identifier = token.next,
        t1 = identifier.type;
      if (t1.get$isPseudo())
        return identifier;
      if (t1.get$isBuiltIn()) {
        t2 = identifier.next;
        t2.toString;
        t2 = N.isOneOfOrEof(t2, C.List_YwG);
      } else
        t2 = false;
      if (t2)
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_gA4);
      else if (t1.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul) || N.isOneOfOrEof(identifier, C.List_YwG))
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.LiteralSymbolIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var identifier = token.next;
      if (identifier.get$isIdentifier())
        return identifier;
      if (!identifier.get$isKeywordOrIdentifier())
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.LocalFunctionDeclarationIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var identifier = token.next;
      if (identifier.get$isIdentifier()) {
        G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
        return identifier;
      }
      if (N.isOneOfOrEof(identifier, C.List_8eb) || N.isOneOfOrEof(identifier, C.List_vjM))
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.LabelDeclarationIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var identifier = token.next;
      if (identifier.get$isIdentifier()) {
        G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
        return identifier;
      }
      if (N.isOneOfOrEof(identifier, C.List_PHH) || N.isOneOfOrEof(identifier, C.List_vjM))
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.LabelReferenceIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var identifier = token.next;
      if (identifier.get$isIdentifier()) {
        G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
        return identifier;
      }
      if (N.isOneOfOrEof(identifier, C.List_oKf))
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.LibraryIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var t1,
        identifier = token.next;
      if (identifier.get$isIdentifier()) {
        t1 = identifier.next;
        t1.toString;
        if (!(identifier.type.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul)) || N.isOneOfOrEof(t1, C.List_aFE))
          return identifier;
      }
      if (N.isOneOfOrEof(identifier, C.List_aFE) || identifier.type.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul))
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.LocalVariableDeclarationIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var identifier = token.next;
      if (identifier.get$isIdentifier()) {
        G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
        return identifier;
      }
      if (N.isOneOfOrEof(identifier, C.List_qTx) || N.isOneOfOrEof(identifier, C.List_vjM) || identifier.type.kind === 39)
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.MetadataReferenceIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var t1,
        identifier = token.next;
      if (identifier.get$isIdentifier()) {
        G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
        return identifier;
      }
      if (!N.isOneOfOrEof(identifier, C.List_sv1)) {
        t1 = identifier.type;
        if (!(t1.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul)))
          t1 = t1.isModifier || N.isOneOfOrEof(identifier, C.List_xV7) || N.isOneOfOrEof(identifier, C.List_vjM);
        else
          t1 = true;
      } else
        t1 = true;
      if (t1)
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.MethodDeclarationIdentifierContext.prototype = {
    get$allowsNewAsIdentifier() {
      return this.isContinuation;
    },
    ensureIdentifier$2(token, parser) {
      var t1, _this = this,
        identifier = token.next;
      if (identifier.get$isIdentifier())
        return identifier;
      t1 = identifier.type;
      if (t1.isUserDefinableOperator && !_this.isContinuation)
        return parser.insertSyntheticIdentifier$4$message$messageOnToken(identifier, _this, C.MessageCode_a5W, identifier);
      else if (N.isOneOfOrEof(identifier, C.List_Dnn) || t1.isModifier || N.isOneOfOrEof(identifier, C.List_xV7))
        return parser.insertSyntheticIdentifier$2(token, _this);
      else if (!identifier.get$isKeywordOrIdentifier())
        return parser.insertSyntheticIdentifier$4$message$messageOnToken(identifier, _this, Z._withArgumentsExpectedIdentifier(identifier), identifier);
      else {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
        return identifier;
      }
    },
    ensureIdentifierPotentiallyRecovered$3(token, parser, isRecovered) {
      var identifier = token.next;
      if (identifier.get$isIdentifier())
        return identifier;
      if (!isRecovered || !identifier.get$isKeywordOrIdentifier())
        return this.ensureIdentifier$2(token, parser);
      parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.NamedArgumentReferenceIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var identifier = token.next;
      if (identifier.get$isIdentifier()) {
        G.checkAsyncAwaitYieldAsIdentifier(identifier, parser);
        return identifier;
      }
      if (N.isOneOfOrEof(identifier, C.List_PHH))
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.TopLevelDeclarationIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var t1,
        identifier = token.next;
      if (identifier.get$isIdentifier()) {
        t1 = identifier.next;
        t1.toString;
        if (!(identifier.type.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul)) || N.isOneOfOrEof(t1, this.followingValues))
          return identifier;
      }
      t1 = identifier.type;
      if (t1.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul) || N.isOneOfOrEof(identifier, this.followingValues))
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else if (t1.get$isBuiltIn())
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_gA4);
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    },
    ensureIdentifierPotentiallyRecovered$3(token, parser, isRecovered) {
      var t1,
        identifier = token.next;
      if (identifier.get$isIdentifier()) {
        t1 = identifier.next;
        t1.toString;
        if (!(identifier.type.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul)) || N.isOneOfOrEof(t1, this.followingValues))
          return identifier;
      }
      if (!isRecovered || !identifier.get$isKeywordOrIdentifier())
        return this.ensureIdentifier$2(token, parser);
      parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.TypedefDeclarationIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var t2,
        identifier = token.next,
        t1 = identifier.type;
      if (t1.get$isPseudo()) {
        if ("Function" === t1.stringValue)
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
        return identifier;
      }
      if (t1.get$isBuiltIn()) {
        t2 = identifier.next;
        t2.toString;
        t2 = N.isOneOfOrEof(t2, C.List_aTZ);
      } else
        t2 = false;
      if (t2)
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_gA4);
      else if (t1.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul) || N.isOneOfOrEof(identifier, C.List_aTZ))
        identifier = parser.insertSyntheticIdentifier$3$message(token, this, Z._withArgumentsExpectedIdentifier(identifier));
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    },
    ensureIdentifierPotentiallyRecovered$3(token, parser, isRecovered) {
      var identifier = token.next,
        t1 = identifier.type;
      if (t1.get$isPseudo()) {
        if ("Function" === t1.stringValue)
          parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
        return identifier;
      }
      if (!isRecovered || !identifier.get$isKeywordOrIdentifier())
        return this.ensureIdentifier$2(token, parser);
      parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  G.TypeReferenceIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var t2, t3,
        t1 = token.next;
      t1.toString;
      if (M.isValidTypeReference(t1))
        return t1;
      else if (t1.get$isKeywordOrIdentifier()) {
        t2 = t1.type;
        t3 = t2.stringValue;
        if ("void" === t3) {
          token = N.findNonZeroLengthToken(t1);
          parser.listener.handleRecoverableError$3(C.MessageCode_wWe, token, token);
        } else if (t2.get$isBuiltIn()) {
          if (!this.isBuiltInIdentifierAllowed)
            parser.reportRecoverableErrorWithToken$2(t1, C.Template_ak7);
        } else if ("var" === t3) {
          token = N.findNonZeroLengthToken(t1);
          parser.listener.handleRecoverableError$3(C.MessageCode_4IJ, token, token);
        } else
          parser.reportRecoverableErrorWithToken$2(t1, C.Template__withArgumentsExpectedType);
        return t1;
      }
      parser.reportRecoverableErrorWithToken$2(t1, C.Template__withArgumentsExpectedType);
      if (!N.isOneOfOrEof(t1, C.List_bnB)) {
        t1.next.toString;
        token = t1;
      }
      return parser.get$rewriter().insertSyntheticIdentifier$1(token);
    }
  };
  G.TypeVariableDeclarationIdentifierContext.prototype = {
    ensureIdentifier$2(token, parser) {
      var t2,
        identifier = token.next,
        t1 = identifier.type;
      if (t1.get$isPseudo())
        return identifier;
      if (!(t1.isTopLevelKeyword || N.isOneOfOrEof(identifier, C.List_Xul)))
        t2 = t1.isModifier || N.isOneOfOrEof(identifier, C.List_xV7) || N.isOneOfOrEof(identifier, C.List_vjM) || N.isOneOfOrEof(identifier, C.List_Jcu);
      else
        t2 = true;
      if (t2) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(token);
      } else if (t1.get$isBuiltIn())
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_gA4);
      else if (!identifier.get$isKeywordOrIdentifier()) {
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
        identifier = parser.get$rewriter().insertSyntheticIdentifier$1(identifier);
      } else
        parser.reportRecoverableErrorWithToken$2(identifier, C.Template_CKH);
      return identifier;
    }
  };
  L.Listener.prototype = {
    beginArguments$1(token) {
    },
    endArguments$3(count, beginToken, endToken) {
      this.logEvent$1("Arguments");
    },
    handleAsyncModifier$2(asyncToken, starToken) {
      this.logEvent$1("AsyncModifier");
    },
    beginAwaitExpression$1(token) {
    },
    endAwaitExpression$2(beginToken, endToken) {
      this.logEvent$1("AwaitExpression");
    },
    endInvalidAwaitExpression$3(beginToken, endToken, errorCode) {
      this.logEvent$1("InvalidAwaitExpression");
    },
    beginBlock$2(token, blockKind) {
    },
    endBlock$4(count, beginToken, endToken, blockKind) {
      this.logEvent$1("Block");
    },
    handleInvalidTopLevelBlock$1(token) {
    },
    beginCascade$1(token) {
    },
    endCascade$0() {
      this.logEvent$1("Cascade");
    },
    beginCaseExpression$1(caseKeyword) {
    },
    endCaseExpression$1(colon) {
      this.logEvent$1("CaseExpression");
    },
    beginClassOrMixinBody$2(kind, token) {
    },
    endClassOrMixinBody$4(kind, memberCount, beginToken, endToken) {
      this.logEvent$1("ClassOrMixinBody");
    },
    beginClassOrNamedMixinApplicationPrelude$1(token) {
    },
    beginClassDeclaration$3(begin, abstractToken, $name) {
    },
    handleClassExtends$2(extendsKeyword, typeCount) {
      this.logEvent$1("ClassExtends");
    },
    handleClassOrMixinImplements$2(implementsKeyword, interfacesCount) {
      this.logEvent$1("ClassImplements");
    },
    handleExtensionShowHide$4(showKeyword, showElementCount, hideKeyword, hideElementCount) {
      this.logEvent$1("ExtensionShowHide");
    },
    handleClassHeader$3(begin, classKeyword, nativeToken) {
      this.logEvent$1("ClassHeader");
    },
    handleRecoverClassHeader$0() {
      this.logEvent$1("RecoverClassHeader");
    },
    endClassDeclaration$2(beginToken, endToken) {
      this.logEvent$1("ClassDeclaration");
    },
    beginMixinDeclaration$2(mixinKeyword, $name) {
    },
    handleMixinOn$2(onKeyword, typeCount) {
      this.logEvent$1("MixinOn");
    },
    handleMixinHeader$1(mixinKeyword) {
      this.logEvent$1("MixinHeader");
    },
    handleRecoverMixinHeader$0() {
      this.logEvent$1("RecoverMixinHeader");
    },
    endMixinDeclaration$2(mixinKeyword, endToken) {
      this.logEvent$1("MixinDeclaration");
    },
    beginUncategorizedTopLevelDeclaration$1(token) {
    },
    beginExtensionDeclarationPrelude$1(extensionKeyword) {
    },
    beginExtensionDeclaration$2(extensionKeyword, $name) {
    },
    endExtensionDeclaration$6(extensionKeyword, typeKeyword, onKeyword, showKeyword, hideKeyword, endToken) {
      this.logEvent$1("ExtensionDeclaration");
    },
    beginCombinators$1(token) {
    },
    endCombinators$1(count) {
      this.logEvent$1("Combinators");
    },
    beginCompilationUnit$1(token) {
    },
    endCompilationUnit$2(count, token) {
      this.logEvent$1("CompilationUnit");
    },
    beginConstLiteral$1(token) {
    },
    endConstLiteral$1(token) {
      this.logEvent$1("ConstLiteral");
    },
    beginConstructorReference$1(start) {
    },
    endConstructorReference$4(start, periodBeforeName, endToken, constructorReferenceContext) {
      this.logEvent$1("ConstructorReference");
    },
    beginDoWhileStatement$1(token) {
    },
    endDoWhileStatement$3(doKeyword, whileKeyword, endToken) {
      this.logEvent$1("DoWhileStatement");
    },
    beginDoWhileStatementBody$1(token) {
    },
    endDoWhileStatementBody$1(token) {
      this.logEvent$1("DoWhileStatementBody");
    },
    beginWhileStatementBody$1(token) {
    },
    endWhileStatementBody$1(token) {
      this.logEvent$1("WhileStatementBody");
    },
    beginEnum$1(enumKeyword) {
    },
    endEnum$3(enumKeyword, leftBrace, count) {
      this.logEvent$1("Enum");
    },
    beginExport$1(token) {
    },
    endExport$2(exportKeyword, semicolon) {
      this.logEvent$1("Export");
    },
    handleExpressionStatement$1(token) {
      this.logEvent$1("ExpressionStatement");
    },
    beginFactoryMethod$3(lastConsumed, externalToken, constToken) {
    },
    endClassFactoryMethod$3(beginToken, factoryKeyword, endToken) {
      this.logEvent$1("ClassFactoryMethod");
    },
    endMixinFactoryMethod$3(beginToken, factoryKeyword, endToken) {
      this.endClassFactoryMethod$3(beginToken, factoryKeyword, endToken);
    },
    endExtensionFactoryMethod$3(beginToken, factoryKeyword, endToken) {
      this.endClassFactoryMethod$3(beginToken, factoryKeyword, endToken);
    },
    beginFormalParameter$5(token, kind, requiredToken, covariantToken, varFinalOrConst) {
    },
    endFormalParameter$7(thisKeyword, periodAfterThis, nameToken, initializerStart, initializerEnd, kind, memberKind) {
      this.logEvent$1("FormalParameter");
    },
    handleNoFormalParameters$2(token, kind) {
      this.logEvent$1("NoFormalParameters");
    },
    beginFormalParameters$2(token, kind) {
    },
    endFormalParameters$4(count, beginToken, endToken, kind) {
      this.logEvent$1("FormalParameters");
    },
    endClassFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken) {
      this.logEvent$1("Fields");
    },
    endMixinFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken) {
      this.endClassFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken);
    },
    endExtensionFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken) {
      this.endClassFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken);
    },
    handleForInitializerEmptyStatement$1(token) {
      this.logEvent$1("ForInitializerEmptyStatement");
    },
    handleForInitializerExpressionStatement$2(token, forIn) {
      this.logEvent$1("ForInitializerExpressionStatement");
    },
    handleForInitializerLocalVariableDeclaration$2(token, forIn) {
      this.logEvent$1("ForInitializerLocalVariableDeclaration");
    },
    beginForStatement$1(token) {
    },
    handleForLoopParts$4(forKeyword, leftParen, leftSeparator, updateExpressionCount) {
    },
    endForStatement$1(endToken) {
      this.logEvent$1("ForStatement");
    },
    beginForStatementBody$1(token) {
    },
    endForStatementBody$1(token) {
      this.logEvent$1("ForStatementBody");
    },
    handleForInLoopParts$4(awaitToken, forToken, leftParenthesis, inKeyword) {
    },
    endForIn$1(endToken) {
      this.logEvent$1("ForIn");
    },
    beginForInExpression$1(token) {
    },
    endForInExpression$1(token) {
      this.logEvent$1("ForInExpression");
    },
    beginForInBody$1(token) {
    },
    endForInBody$1(token) {
      this.logEvent$1("ForInBody");
    },
    beginNamedFunctionExpression$1(token) {
    },
    endNamedFunctionExpression$1(endToken) {
      this.logEvent$1("NamedFunctionExpression");
    },
    beginLocalFunctionDeclaration$1(token) {
    },
    endLocalFunctionDeclaration$1(endToken) {
      this.logEvent$1("FunctionDeclaration");
    },
    beginBlockFunctionBody$1(token) {
    },
    endBlockFunctionBody$3(count, beginToken, endToken) {
      this.logEvent$1("BlockFunctionBody");
    },
    beginFunctionName$1(token) {
    },
    endFunctionName$2(beginToken, token) {
      this.logEvent$1("FunctionName");
    },
    beginFunctionTypeAlias$1(token) {
    },
    endFunctionTypeAlias$3(typedefKeyword, equals, endToken) {
      this.logEvent$1("FunctionTypeAlias");
    },
    handleClassWithClause$1(withKeyword) {
      this.logEvent$1("ClassWithClause");
    },
    handleClassNoWithClause$0() {
      this.logEvent$1("ClassNoWithClause");
    },
    beginNamedMixinApplication$3(begin, abstractToken, $name) {
    },
    handleNamedMixinApplicationWithClause$1(withKeyword) {
      this.logEvent$1("NamedMixinApplicationWithClause");
    },
    endNamedMixinApplication$5(begin, classKeyword, equals, implementsKeyword, endToken) {
      this.logEvent$1("NamedMixinApplication");
    },
    beginHide$1(hideKeyword) {
    },
    endHide$1(hideKeyword) {
      this.logEvent$1("Hide");
    },
    handleIdentifierList$1(count) {
      this.logEvent$1("IdentifierList");
    },
    beginTypeList$1(token) {
    },
    endTypeList$1(count) {
      this.logEvent$1("TypeList");
    },
    beginIfStatement$1(token) {
    },
    endIfStatement$2(ifToken, elseToken) {
      this.logEvent$1("IfStatement");
    },
    beginThenStatement$1(token) {
    },
    endThenStatement$1(token) {
      this.logEvent$1("ThenStatement");
    },
    beginElseStatement$1(token) {
    },
    endElseStatement$1(token) {
      this.logEvent$1("ElseStatement");
    },
    beginImport$1(importKeyword) {
    },
    handleImportPrefix$2(deferredKeyword, asKeyword) {
      this.logEvent$1("ImportPrefix");
    },
    endImport$2(importKeyword, semicolon) {
      this.logEvent$1("Import");
    },
    handleRecoverImport$1(semicolon) {
      this.logEvent$1("ImportRecovery");
    },
    beginConditionalUris$1(token) {
    },
    endConditionalUris$1(count) {
      this.logEvent$1("ConditionalUris");
    },
    beginConditionalUri$1(ifKeyword) {
    },
    endConditionalUri$3(ifKeyword, leftParen, equalSign) {
      this.logEvent$1("ConditionalUri");
    },
    handleDottedName$2(count, firstIdentifier) {
      this.logEvent$1("DottedName");
    },
    beginImplicitCreationExpression$1(token) {
    },
    endImplicitCreationExpression$1(token) {
      this.logEvent$1("ImplicitCreationExpression");
    },
    beginInitializedIdentifier$1(token) {
    },
    endInitializedIdentifier$1(nameToken) {
      this.logEvent$1("InitializedIdentifier");
    },
    beginFieldInitializer$1(token) {
    },
    endFieldInitializer$2(assignment, token) {
      this.logEvent$1("FieldInitializer");
    },
    handleNoFieldInitializer$1(token) {
      this.logEvent$1("NoFieldInitializer");
    },
    beginVariableInitializer$1(token) {
    },
    endVariableInitializer$1(assignmentOperator) {
      this.logEvent$1("VariableInitializer");
    },
    handleNoVariableInitializer$1(token) {
      this.logEvent$1("NoVariableInitializer");
    },
    beginInitializer$1(token) {
    },
    endInitializer$1(token) {
      this.logEvent$1("ConstructorInitializer");
    },
    beginInitializers$1(token) {
    },
    endInitializers$3(count, beginToken, endToken) {
      this.logEvent$1("Initializers");
    },
    handleNoInitializers$0() {
      this.logEvent$1("NoInitializers");
    },
    handleInvalidFunctionBody$1(token) {
      this.logEvent$1("InvalidFunctionBody");
    },
    handleLabel$1(token) {
      this.logEvent$1("Label");
    },
    beginLabeledStatement$2(token, labelCount) {
    },
    endLabeledStatement$1(labelCount) {
      this.logEvent$1("LabeledStatement");
    },
    beginLibraryName$1(token) {
    },
    endLibraryName$2(libraryKeyword, semicolon) {
      this.logEvent$1("LibraryName");
    },
    handleLiteralMapEntry$2(colon, endToken) {
      this.logEvent$1("LiteralMapEntry");
    },
    beginLiteralString$1(token) {
    },
    handleInterpolationExpression$2(leftBracket, rightBracket) {
    },
    endLiteralString$2(interpolationCount, endToken) {
      this.logEvent$1("LiteralString");
    },
    handleStringJuxtaposition$2(startToken, literalCount) {
      this.logEvent$1("StringJuxtaposition");
    },
    beginMember$0() {
    },
    handleInvalidMember$1(endToken) {
      this.logEvent$1("InvalidMember");
    },
    endMember$0() {
      this.logEvent$1("Member");
    },
    beginMethod$6(externalToken, staticToken, covariantToken, varFinalOrConst, getOrSet, $name) {
    },
    endClassMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      this.logEvent$1("ClassMethod");
    },
    endMixinMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      this.endClassMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken);
    },
    endExtensionMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      this.endClassMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken);
    },
    endClassConstructor$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      this.endClassMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken);
    },
    endMixinConstructor$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      this.endClassMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken);
    },
    endExtensionConstructor$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      this.endClassMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken);
    },
    beginMetadataStar$1(token) {
    },
    endMetadataStar$1(count) {
      this.logEvent$1("MetadataStar");
    },
    beginMetadata$1(token) {
    },
    endMetadata$3(beginToken, periodBeforeName, endToken) {
      this.logEvent$1("Metadata");
    },
    beginOptionalFormalParameters$1(token) {
    },
    endOptionalFormalParameters$3(count, beginToken, endToken) {
      this.logEvent$1("OptionalFormalParameters");
    },
    beginPart$1(token) {
    },
    endPart$2(partKeyword, semicolon) {
      this.logEvent$1("Part");
    },
    beginPartOf$1(token) {
    },
    endPartOf$4(partKeyword, ofKeyword, semicolon, hasName) {
      this.logEvent$1("PartOf");
    },
    beginRedirectingFactoryBody$1(token) {
    },
    endRedirectingFactoryBody$2(beginToken, endToken) {
      this.logEvent$1("RedirectingFactoryBody");
    },
    beginReturnStatement$1(token) {
    },
    handleNativeFunctionBody$2(nativeToken, semicolon) {
      this.logEvent$1("NativeFunctionBody");
    },
    handleNativeFunctionBodyIgnored$2(nativeToken, semicolon) {
      this.logEvent$1("NativeFunctionBodyIgnored");
    },
    handleEmptyFunctionBody$1(semicolon) {
      this.logEvent$1("EmptyFunctionBody");
    },
    handleExpressionFunctionBody$2(arrowToken, endToken) {
      this.logEvent$1("ExpressionFunctionBody");
    },
    endReturnStatement$3(hasExpression, beginToken, endToken) {
      this.logEvent$1("ReturnStatement");
    },
    handleSend$2(beginToken, endToken) {
      this.logEvent$1("Send");
    },
    beginShow$1(showKeyword) {
    },
    endShow$1(showKeyword) {
      this.logEvent$1("Show");
    },
    beginSwitchStatement$1(token) {
    },
    endSwitchStatement$2(switchKeyword, endToken) {
      this.logEvent$1("SwitchStatement");
    },
    beginSwitchBlock$1(token) {
    },
    endSwitchBlock$3(caseCount, beginToken, endToken) {
      this.logEvent$1("SwitchBlock");
    },
    beginLiteralSymbol$1(token) {
    },
    endLiteralSymbol$2(hashToken, identifierCount) {
      this.logEvent$1("LiteralSymbol");
    },
    handleThrowExpression$2(throwToken, endToken) {
      this.logEvent$1("ThrowExpression");
    },
    beginRethrowStatement$1(token) {
    },
    endRethrowStatement$2(rethrowToken, endToken) {
      this.logEvent$1("RethrowStatement");
    },
    endTopLevelDeclaration$1(nextToken) {
      this.logEvent$1("TopLevelDeclaration");
    },
    handleInvalidTopLevelDeclaration$1(endToken) {
      this.logEvent$1("InvalidTopLevelDeclaration");
    },
    beginTopLevelMember$1(token) {
    },
    beginFields$1(lastConsumed) {
    },
    endTopLevelFields$8(externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken) {
      this.logEvent$1("TopLevelFields");
    },
    beginTopLevelMethod$2(lastConsumed, externalToken) {
    },
    endTopLevelMethod$3(beginToken, getOrSet, endToken) {
      this.logEvent$1("TopLevelMethod");
    },
    beginTryStatement$1(token) {
    },
    handleCaseMatch$2(caseKeyword, colon) {
      this.logEvent$1("CaseMatch");
    },
    beginCatchClause$1(token) {
    },
    endCatchClause$1(token) {
      this.logEvent$1("CatchClause");
    },
    handleCatchBlock$3(onKeyword, catchKeyword, comma) {
      this.logEvent$1("CatchBlock");
    },
    handleFinallyBlock$1(finallyKeyword) {
      this.logEvent$1("FinallyBlock");
    },
    endTryStatement$3(catchCount, tryKeyword, finallyKeyword) {
      this.logEvent$1("TryStatement");
    },
    handleType$2(beginToken, questionMark) {
      this.logEvent$1("Type");
    },
    handleNonNullAssertExpression$1(bang) {
      this.logEvent$1("NonNullAssertExpression");
    },
    handleNoName$1(token) {
      this.logEvent$1("NoName");
    },
    beginFunctionType$1(beginToken) {
    },
    endFunctionType$2(functionToken, questionMark) {
      this.logEvent$1("FunctionType");
    },
    beginTypeArguments$1(token) {
    },
    endTypeArguments$3(count, beginToken, endToken) {
      this.logEvent$1("TypeArguments");
    },
    handleInvalidTypeArguments$1(token) {
      this.logEvent$1("NoTypeArguments");
    },
    handleNoTypeArguments$1(token) {
      this.logEvent$1("NoTypeArguments");
    },
    beginTypeVariable$1(token) {
    },
    handleTypeVariablesDefined$2(token, count) {
    },
    endTypeVariable$4(token, index, extendsOrSuper, variance) {
      this.logEvent$1("TypeVariable");
    },
    beginTypeVariables$1(token) {
    },
    endTypeVariables$2(beginToken, endToken) {
      this.logEvent$1("TypeVariables");
    },
    beginFunctionExpression$1(token) {
    },
    endFunctionExpression$2(beginToken, token) {
      this.logEvent$1("FunctionExpression");
    },
    beginVariablesDeclaration$3(token, lateToken, varFinalOrConst) {
    },
    endVariablesDeclaration$2(count, endToken) {
      this.logEvent$1("VariablesDeclaration");
    },
    beginWhileStatement$1(token) {
    },
    endWhileStatement$2(whileKeyword, endToken) {
      this.logEvent$1("WhileStatement");
    },
    beginAsOperatorType$1(operator) {
    },
    endAsOperatorType$1(operator) {
      this.logEvent$1("AsOperatorType");
    },
    handleAsOperator$1(operator) {
      this.logEvent$1("AsOperator");
    },
    handleAssignmentExpression$1(token) {
      this.logEvent$1("AssignmentExpression");
    },
    beginBinaryExpression$1(token) {
    },
    endBinaryExpression$1(token) {
      this.logEvent$1("BinaryExpression");
    },
    handleEndingBinaryExpression$1(token) {
      this.endBinaryExpression$1(token);
    },
    beginConditionalExpression$1(question) {
    },
    handleConditionalExpressionColon$0() {
    },
    endConditionalExpression$2(question, colon) {
      this.logEvent$1("ConditionalExpression");
    },
    beginConstExpression$1(constKeyword) {
    },
    endConstExpression$1(token) {
      this.logEvent$1("ConstExpression");
    },
    handleConstFactory$1(constKeyword) {
      this.logEvent$1("ConstFactory");
    },
    beginForControlFlow$2(awaitToken, forToken) {
    },
    endForControlFlow$1(token) {
      this.logEvent$1("endForControlFlow");
    },
    endForInControlFlow$1(token) {
      this.logEvent$1("endForInControlFlow");
    },
    beginIfControlFlow$1(ifToken) {
    },
    handleThenControlFlow$1(token) {
    },
    handleElseControlFlow$1(elseToken) {
      this.logEvent$1("ElseControlFlow");
    },
    endIfControlFlow$1(token) {
      this.logEvent$1("endIfControlFlow");
    },
    endIfElseControlFlow$1(token) {
      this.logEvent$1("endIfElseControlFlow");
    },
    handleSpreadExpression$1(spreadToken) {
      this.logEvent$1("SpreadExpression");
    },
    beginFunctionTypedFormalParameter$1(token) {
    },
    endFunctionTypedFormalParameter$2(nameToken, question) {
      this.logEvent$1("FunctionTypedFormalParameter");
    },
    handleIdentifier$2(token, context) {
      this.logEvent$1("Identifier");
    },
    handleShowHideIdentifier$2(modifier, identifier) {
      this.logEvent$1("ShowHideIdentifier");
    },
    handleIndexedExpression$3(question, openSquareBracket, closeSquareBracket) {
      this.logEvent$1("IndexedExpression");
    },
    beginIsOperatorType$1(operator) {
    },
    endIsOperatorType$1(operator) {
      this.logEvent$1("IsOperatorType");
    },
    handleIsOperator$2(isOperator, not) {
      this.logEvent$1("IsOperator");
    },
    handleLiteralBool$1(token) {
      this.logEvent$1("LiteralBool");
    },
    handleBreakStatement$3(hasTarget, breakKeyword, endToken) {
      this.logEvent$1("BreakStatement");
    },
    handleContinueStatement$3(hasTarget, continueKeyword, endToken) {
      this.logEvent$1("ContinueStatement");
    },
    handleEmptyStatement$1(token) {
      this.logEvent$1("EmptyStatement");
    },
    beginAssert$2(assertKeyword, kind) {
    },
    endAssert$5(assertKeyword, kind, leftParenthesis, commaToken, semicolonToken) {
      this.logEvent$1("Assert");
    },
    handleLiteralDouble$1(token) {
      this.logEvent$1("LiteralDouble");
    },
    handleLiteralInt$1(token) {
      this.logEvent$1("LiteralInt");
    },
    handleLiteralList$4(count, leftBracket, constKeyword, rightBracket) {
      this.logEvent$1("LiteralList");
    },
    handleLiteralSetOrMap$5(count, leftBrace, constKeyword, rightBrace, hasSetEntry) {
      this.logEvent$1("LiteralSetOrMap");
    },
    handleLiteralNull$1(token) {
      this.logEvent$1("LiteralNull");
    },
    handleNativeClause$2(nativeToken, hasName) {
      this.logEvent$1("NativeClause");
    },
    handleNamedArgument$1(colon) {
      this.logEvent$1("NamedArgument");
    },
    beginNewExpression$1(token) {
    },
    endNewExpression$1(token) {
      this.logEvent$1("NewExpression");
    },
    handleNoArguments$1(token) {
      this.logEvent$1("NoArguments");
    },
    handleNoConstructorReferenceContinuationAfterTypeArguments$1(token) {
      this.logEvent$1("NoConstructorReferenceContinuationAfterTypeArguments");
    },
    handleNoType$1(lastConsumed) {
      this.logEvent$1("NoType");
    },
    handleNoTypeVariables$1(token) {
      this.logEvent$1("NoTypeVariables");
    },
    handleOperator$1(token) {
      this.logEvent$1("Operator");
    },
    handleSymbolVoid$1(token) {
      this.logEvent$1("SymbolVoid");
    },
    handleOperatorName$2(operatorKeyword, token) {
      this.logEvent$1("OperatorName");
    },
    handleInvalidOperatorName$2(operatorKeyword, token) {
      this.logEvent$1("InvalidOperatorName");
    },
    handleParenthesizedCondition$1(token) {
      this.logEvent$1("ParenthesizedCondition");
    },
    handleParenthesizedExpression$1(token) {
      this.logEvent$1("ParenthesizedExpression");
    },
    handleQualified$1(period) {
      this.logEvent$1("Qualified");
    },
    handleStringPart$1(token) {
      this.logEvent$1("StringPart");
    },
    handleSuperExpression$2(token, context) {
      this.logEvent$1("SuperExpression");
    },
    beginSwitchCase$3(labelCount, expressionCount, firstToken) {
    },
    endSwitchCase$7(labelCount, expressionCount, defaultKeyword, colonAfterDefault, statementCount, firstToken, endToken) {
      this.logEvent$1("SwitchCase");
    },
    handleThisExpression$2(token, context) {
      this.logEvent$1("ThisExpression");
    },
    handleUnaryPostfixAssignmentExpression$1(token) {
      this.logEvent$1("UnaryPostfixAssignmentExpression");
    },
    handleUnaryPrefixExpression$1(token) {
      this.logEvent$1("UnaryPrefixExpression");
    },
    handleUnaryPrefixAssignmentExpression$1(token) {
      this.logEvent$1("UnaryPrefixAssignmentExpression");
    },
    beginFormalParameterDefaultValueExpression$0() {
    },
    endFormalParameterDefaultValueExpression$0() {
      this.logEvent$1("FormalParameterDefaultValueExpression");
    },
    handleValuedFormalParameter$2(equals, token) {
      this.logEvent$1("ValuedFormalParameter");
    },
    handleFormalParameterWithoutValue$1(token) {
      this.logEvent$1("FormalParameterWithoutValue");
    },
    handleVoidKeyword$1(token) {
      this.logEvent$1("VoidKeyword");
    },
    handleVoidKeywordWithTypeArguments$1(token) {
      this.logEvent$1("handleVoidKeywordWithTypeArguments");
    },
    beginYieldStatement$1(token) {
    },
    endYieldStatement$3(yieldToken, starToken, endToken) {
      this.logEvent$1("YieldStatement");
    },
    endInvalidYieldStatement$4(beginToken, starToken, endToken, errorCode) {
      this.logEvent$1("InvalidYieldStatement");
    },
    handleRecoverableError$3(message, startToken, endToken) {
    },
    handleErrorToken$1(token) {
      this.handleRecoverableError$3(token.get$assertionMessage(), token, token);
    },
    handleInvalidStatement$2(token, message) {
      this.handleRecoverableError$3(message, token, token);
    },
    handleScript$1(token) {
      this.logEvent$1("Script");
    },
    handleCommentReferenceText$2(referenceSource, referenceOffset) {
      this.logEvent$1("CommentReferenceText");
    },
    handleCommentReference$4(newKeyword, prefix, period, token) {
    },
    handleNoCommentReference$0() {
    },
    handleTypeArgumentApplication$1(openAngleBracket) {
    },
    handleNewAsIdentifier$1(token) {
    }
  };
  N.LiteralEntryInfo.prototype = {
    parse$2(token, parser) {
      throw H.wrapException(this.get$hasEntry() ? "Internal Error: should not call parse" : "Internal Error: " + H.getRuntimeType(this).toString$0(0) + " should implement parse");
    },
    computeNext$1(token) {
      return null;
    },
    get$hasEntry() {
      return this.hasEntry;
    }
  };
  R.ForCondition.prototype = {
    parse$2(token, parser) {
      var t1, awaitToken, t2,
        next = token.next;
      if ("await" === next.type.stringValue) {
        t1 = next.next;
        t1.toString;
        awaitToken = next;
        next = t1;
      } else
        awaitToken = null;
      parser.listener.beginForControlFlow$2(awaitToken, next);
      token = parser.parseForLoopPartsStart$2(awaitToken, next);
      t1 = token.next;
      t1.toString;
      token = parser.parseForLoopPartsMid$3(token, awaitToken, next);
      t2 = token.next.type.stringValue;
      if ("in" === t2 || ":" === t2) {
        this._inStyle = true;
        token = parser.parseForInLoopPartsRest$4(token, awaitToken, next, t1);
      } else {
        this._inStyle = false;
        token = parser.parseForLoopPartsRest$3(token, next, awaitToken);
      }
      return token;
    },
    computeNext$1(token) {
      var t2, _this = this,
        next = token.next,
        t1 = next.type.stringValue;
      if ("for" !== t1)
        t2 = "await" === t1 && "for" === next.next.type.stringValue;
      else
        t2 = true;
      if (t2) {
        t1 = _this._inStyle ? C.ForInComplete_false_0 : C.ForComplete_false_0;
        return new R.Nested(new R.ForCondition(false, 0), t1, false, 0);
      } else if ("if" === t1)
        return new R.Nested(C.IfCondition_false_1, _this._inStyle ? C.ForInComplete_false_0 : C.ForComplete_false_0, false, 0);
      else if ("..." === t1 || "...?" === t1)
        return _this._inStyle ? C.ForInSpread_false_0 : C.ForSpread_false_0;
      return _this._inStyle ? C.ForInEntry_true_0 : C.ForEntry_true_0;
    }
  };
  R.ForSpread.prototype = {
    computeNext$1(token) {
      return C.ForComplete_false_0;
    }
  };
  R.ForInSpread.prototype = {
    computeNext$1(token) {
      return C.ForInComplete_false_0;
    }
  };
  R.ForEntry.prototype = {
    computeNext$1(token) {
      return C.ForComplete_false_0;
    }
  };
  R.ForInEntry.prototype = {
    computeNext$1(token) {
      return C.ForInComplete_false_0;
    }
  };
  R.ForComplete.prototype = {
    parse$2(token, parser) {
      parser.listener.endForControlFlow$1(token);
      return token;
    }
  };
  R.ForInComplete.prototype = {
    parse$2(token, parser) {
      parser.listener.endForInControlFlow$1(token);
      return token;
    }
  };
  R.IfCondition.prototype = {
    parse$2(token, parser) {
      var result,
        t1 = token.next;
      t1.toString;
      parser.listener.beginIfControlFlow$1(t1);
      result = parser.ensureParenthesizedCondition$1(t1);
      parser.listener.handleThenControlFlow$1(result);
      return result;
    },
    computeNext$1(token) {
      var t2,
        next = token.next,
        t1 = next.type.stringValue;
      if ("for" !== t1)
        t2 = "await" === t1 && "for" === next.next.type.stringValue;
      else
        t2 = true;
      if (t2)
        return new R.Nested(new R.ForCondition(false, 0), C.IfComplete_false_0, false, 0);
      else if ("if" === t1)
        return new R.Nested(C.IfCondition_false_1, C.IfComplete_false_0, false, 0);
      else if ("..." === t1 || "...?" === t1)
        return C.IfSpread_false_0;
      return C.IfEntry_true_0;
    }
  };
  R.IfSpread.prototype = {
    computeNext$1(token) {
      return C.IfComplete_false_0;
    }
  };
  R.IfEntry.prototype = {
    computeNext$1(token) {
      return C.IfComplete_false_0;
    }
  };
  R.IfComplete.prototype = {
    parse$2(token, parser) {
      if ("else" !== token.next.type.stringValue)
        parser.listener.endIfControlFlow$1(token);
      return token;
    },
    computeNext$1(token) {
      return "else" === token.next.type.stringValue ? C.IfElse_false_m1 : null;
    }
  };
  R.IfElse.prototype = {
    parse$2(token, parser) {
      var t1 = token.next;
      t1.toString;
      parser.listener.handleElseControlFlow$1(t1);
      return t1;
    },
    computeNext$1(token) {
      var t2,
        next = token.next,
        t1 = next.type.stringValue;
      if ("for" !== t1)
        t2 = "await" === t1 && "for" === next.next.type.stringValue;
      else
        t2 = true;
      if (t2)
        return new R.Nested(new R.ForCondition(false, 0), C.IfElseComplete_false_0, false, 0);
      else if ("if" === t1)
        return new R.Nested(C.IfCondition_false_1, C.IfElseComplete_false_0, false, 0);
      else if ("..." === t1 || "...?" === t1)
        return C.ElseSpread_false_0;
      return C.ElseEntry_true_0;
    }
  };
  R.ElseSpread.prototype = {
    computeNext$1(token) {
      return C.IfElseComplete_false_0;
    }
  };
  R.ElseEntry.prototype = {
    computeNext$1(token) {
      return C.IfElseComplete_false_0;
    }
  };
  R.IfElseComplete.prototype = {
    parse$2(token, parser) {
      parser.listener.endIfElseControlFlow$1(token);
      return token;
    }
  };
  R.SpreadOperator.prototype = {
    parse$2(token, parser) {
      var t1 = token.next;
      t1.toString;
      token = parser.parseExpression$1(t1);
      parser.listener.handleSpreadExpression$1(t1);
      return token;
    }
  };
  R.Nested.prototype = {
    get$hasEntry() {
      return this.nestedStep.get$hasEntry();
    },
    parse$2(token, parser) {
      return this.nestedStep.parse$2(token, parser);
    },
    computeNext$1(token) {
      var _this = this,
        t1 = _this.nestedStep.computeNext$1(token);
      _this.nestedStep = t1;
      return t1 != null ? _this : _this.lastStep;
    }
  };
  Q.LoopState.prototype = {
    toString$0(_) {
      return this._loop_state$_name;
    }
  };
  A.MemberKind.prototype = {
    toString$0(_) {
      return this._member_kind$_name;
    }
  };
  X.ModifierRecoveryContext.prototype = {
    get$varFinalOrConst() {
      var t1 = this.varToken;
      if (t1 == null)
        t1 = this.finalToken;
      return t1 == null ? this.constToken : t1;
    },
    set$varFinalOrConst(varFinalOrConst) {
      var t1, _this = this;
      if (varFinalOrConst == null)
        _this.constToken = _this.finalToken = _this.varToken = null;
      else {
        t1 = varFinalOrConst.type.stringValue;
        if ("var" === t1) {
          _this.varToken = varFinalOrConst;
          _this.constToken = _this.finalToken = null;
        } else if ("final" === t1) {
          _this.varToken = null;
          _this.finalToken = varFinalOrConst;
          _this.constToken = null;
        } else if ("const" === t1) {
          _this.finalToken = _this.varToken = null;
          _this.constToken = varFinalOrConst;
        } else
          throw H.wrapException("Internal error: Unexpected varFinalOrConst '" + varFinalOrConst.toString$0(0) + "'.");
      }
    },
    parseVariableDeclarationModifiers$1(token) {
      var t1, _this = this;
      token = _this.parseModifiers$1(token);
      t1 = _this.abstractToken;
      if (t1 != null)
        _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_lnn);
      t1 = _this.covariantToken;
      if (t1 != null)
        _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_lnn);
      t1 = _this.externalToken;
      if (t1 != null)
        _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_lnn);
      t1 = _this.requiredToken;
      if (t1 != null)
        _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_lnn);
      t1 = _this.staticToken;
      if (t1 != null)
        _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_lnn);
      return token;
    },
    parseModifiers$1(token) {
      var t2, t3, next, value, _this = this,
        t1 = token.next;
      t1.toString;
      for (t2 = _this.parser, t3 = type$.Template_of_Message_Function_Token, next = t1; true; next = t1) {
        value = next.type.stringValue;
        if (X.isModifier(next))
          if ("abstract" === value)
            token = _this.parseAbstract$1(token);
          else if ("const" === value)
            token = _this.parseConst$1(token);
          else if ("covariant" === value)
            token = _this.parseCovariant$1(token);
          else if ("external" === value)
            token = _this.parseExternal$1(token);
          else if ("final" === value)
            token = _this.parseFinal$1(token);
          else if ("late" === value)
            token = _this.parseLate$1(token);
          else if ("required" === value)
            token = _this.parseRequired$1(token);
          else if ("static" === value)
            token = _this.parseStatic$1(token);
          else if ("var" === value)
            token = _this.parseVar$1(token);
          else
            throw H.wrapException("Internal Error: Unhandled modifier: " + H.S(value));
        else {
          if (_this.afterFactory && "factory" === value) {
            t3._as(C.Template_86y);
            token = N.findNonZeroLengthToken(next);
            t2.listener.handleRecoverableError$3(C.Template_86y.withArguments.call$1(token), token, token);
          } else
            break;
          token = next;
        }
        t1 = token.next;
        t1.toString;
      }
      return token;
    },
    parseAbstract$1(token) {
      var t2, _this = this,
        t1 = token.next;
      t1.toString;
      if (_this.abstractToken == null) {
        _this.abstractToken = t1;
        if (_this.get$varFinalOrConst() != null)
          _this.reportModifierOutOfOrder$2(t1, _this.get$varFinalOrConst().get$lexeme());
        else {
          t2 = _this.covariantToken;
          if (t2 != null)
            _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
        }
        return t1;
      }
      _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_86y);
      return t1;
    },
    parseConst$1(token) {
      var t2, _this = this,
        t1 = token.next;
      t1.toString;
      if (_this.get$varFinalOrConst() == null && _this.covariantToken == null) {
        _this.constToken = t1;
        if (_this.afterFactory)
          _this.reportModifierOutOfOrder$2(t1, "factory");
        else {
          t2 = _this.lateToken;
          if (t2 != null)
            _this.reportConflictingModifiers$2(t1, t2);
        }
        return t1;
      }
      if (_this.constToken != null)
        _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_86y);
      else {
        t2 = _this.covariantToken;
        if (t2 != null)
          _this.reportConflictingModifiers$2(t1, t2);
        else if (_this.finalToken != null) {
          token = N.findNonZeroLengthToken(t1);
          _this.parser.listener.handleRecoverableError$3(C.MessageCode_wEo, token, token);
        } else {
          t2 = _this.varToken;
          if (t2 != null)
            _this.reportConflictingModifiers$2(t1, t2);
          else
            throw H.wrapException(string$.Intern + H.S(_this.get$varFinalOrConst()));
        }
      }
      return t1;
    },
    parseCovariant$1(token) {
      var t2, t3, _this = this,
        t1 = token.next;
      t1.toString;
      t2 = _this.constToken;
      t3 = t2 == null;
      if (t3 && _this.covariantToken == null && _this.staticToken == null && !_this.afterFactory) {
        _this.covariantToken = t1;
        t2 = _this.varToken;
        if (t2 != null)
          _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
        else {
          t2 = _this.finalToken;
          if (t2 != null)
            _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
          else {
            t2 = _this.lateToken;
            if (t2 != null)
              _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
          }
        }
        return t1;
      }
      if (_this.covariantToken != null)
        _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_86y);
      else if (_this.afterFactory)
        _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_lnn);
      else if (!t3)
        _this.reportConflictingModifiers$2(t1, t2);
      else if (_this.staticToken != null) {
        token = N.findNonZeroLengthToken(t1);
        _this.parser.listener.handleRecoverableError$3(C.MessageCode_AFW, token, token);
      } else
        throw H.wrapException("Internal Error: Unhandled recovery: " + t1.toString$0(0));
      return t1;
    },
    parseExternal$1(token) {
      var t2, _this = this,
        t1 = token.next;
      t1.toString;
      if (_this.externalToken == null) {
        _this.externalToken = t1;
        if (_this.afterFactory)
          _this.reportModifierOutOfOrder$2(t1, "factory");
        else {
          t2 = _this.constToken;
          if (t2 != null)
            _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
          else {
            t2 = _this.staticToken;
            if (t2 != null)
              _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
            else {
              t2 = _this.lateToken;
              if (t2 != null)
                _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
              else if (_this.get$varFinalOrConst() != null)
                _this.reportModifierOutOfOrder$2(t1, _this.get$varFinalOrConst().get$lexeme());
              else {
                t2 = _this.covariantToken;
                if (t2 != null)
                  _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
              }
            }
          }
        }
        return t1;
      }
      _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_86y);
      return t1;
    },
    parseFinal$1(token) {
      var t2, _this = this,
        t1 = token.next;
      t1.toString;
      if (_this.get$varFinalOrConst() == null && !_this.afterFactory)
        return _this.finalToken = t1;
      if (_this.finalToken != null)
        _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_86y);
      else if (_this.afterFactory)
        _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_lnn);
      else if (_this.constToken != null) {
        token = N.findNonZeroLengthToken(t1);
        _this.parser.listener.handleRecoverableError$3(C.MessageCode_wEo, token, token);
      } else if (_this.varToken != null) {
        token = N.findNonZeroLengthToken(t1);
        _this.parser.listener.handleRecoverableError$3(C.MessageCode_IF2, token, token);
      } else {
        t2 = _this.lateToken;
        if (t2 != null)
          _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
        else
          throw H.wrapException(string$.Intern + H.S(_this.get$varFinalOrConst()));
      }
      return t1;
    },
    parseLate$1(token) {
      var t2, _this = this,
        t1 = token.next;
      t1.toString;
      if (_this.lateToken == null) {
        _this.lateToken = t1;
        t2 = _this.constToken;
        if (t2 != null)
          _this.reportConflictingModifiers$2(t1, t2);
        else {
          t2 = _this.varToken;
          if (t2 != null)
            _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
          else {
            t2 = _this.finalToken;
            if (t2 != null)
              _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
          }
        }
        return t1;
      }
      _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_86y);
      return t1;
    },
    parseRequired$1(token) {
      var t2, _this = this,
        t1 = token.next;
      t1.toString;
      if (_this.requiredToken == null) {
        _this.requiredToken = t1;
        t2 = _this.constToken;
        if (t2 != null)
          _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
        else {
          t2 = _this.covariantToken;
          if (t2 != null)
            _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
          else {
            t2 = _this.finalToken;
            if (t2 != null)
              _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
            else {
              t2 = _this.varToken;
              if (t2 != null)
                _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
            }
          }
        }
        return t1;
      }
      _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_86y);
      return t1;
    },
    parseStatic$1(token) {
      var t2, _this = this,
        t1 = token.next;
      t1.toString;
      t2 = _this.covariantToken == null;
      if (t2 && _this.staticToken == null && !_this.afterFactory) {
        _this.staticToken = t1;
        t2 = _this.constToken;
        if (t2 != null)
          _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
        else {
          t2 = _this.finalToken;
          if (t2 != null)
            _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
          else {
            t2 = _this.varToken;
            if (t2 != null)
              _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
            else {
              t2 = _this.lateToken;
              if (t2 != null)
                _this.reportModifierOutOfOrder$2(t1, t2.get$lexeme());
            }
          }
        }
        return t1;
      }
      if (!t2) {
        token = N.findNonZeroLengthToken(t1);
        _this.parser.listener.handleRecoverableError$3(C.MessageCode_AFW, token, token);
      } else if (_this.staticToken != null)
        _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_86y);
      else if (_this.afterFactory)
        _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_lnn);
      else
        throw H.wrapException("Internal Error: Unhandled recovery: " + t1.toString$0(0));
      return t1;
    },
    parseVar$1(token) {
      var t2, _this = this,
        t1 = token.next;
      t1.toString;
      if (_this.get$varFinalOrConst() == null && !_this.afterFactory)
        return _this.varToken = t1;
      if (_this.varToken != null)
        _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_86y);
      else if (_this.afterFactory)
        _this.parser.reportRecoverableErrorWithToken$2(t1, C.Template_lnn);
      else {
        t2 = _this.constToken;
        if (t2 != null)
          _this.reportConflictingModifiers$2(t1, t2);
        else if (_this.finalToken != null) {
          token = N.findNonZeroLengthToken(t1);
          _this.parser.listener.handleRecoverableError$3(C.MessageCode_IF2, token, token);
        } else
          throw H.wrapException(string$.Intern + H.S(_this.get$varFinalOrConst()));
      }
      return t1;
    },
    reportConflictingModifiers$2(modifier, earlierModifier) {
      var t1 = type$.Message._as(Z._withArgumentsConflictingModifiers(modifier.get$lexeme(), earlierModifier.get$lexeme())),
        token = N.findNonZeroLengthToken(modifier);
      this.parser.listener.handleRecoverableError$3(t1, token, token);
    },
    reportModifierOutOfOrder$2(modifier, beforeModifier) {
      var t1 = type$.Message._as(Z._withArgumentsModifierOutOfOrder(modifier.get$lexeme(), beforeModifier)),
        token = N.findNonZeroLengthToken(modifier);
      this.parser.listener.handleRecoverableError$3(t1, token, token);
    }
  };
  N.Parser1.prototype = {
    get$rewriter() {
      var t1 = this.cachedRewriter;
      return t1 == null ? this.cachedRewriter = new R.TokenStreamRewriterImpl() : t1;
    },
    parseUnit$1(token) {
      var directiveState, t1, count, t2, t3, t4, _this = this,
        token0 = _this.skipErrorTokens$1(token);
      _this.listener.beginCompilationUnit$1(token0);
      directiveState = new A.DirectiveContext(C.DirectiveState_0);
      token0 = _this.syntheticPreviousToken$1(token0);
      t1 = token0.next;
      if (t1.type === C.TokenType_oZ3) {
        directiveState.checkScriptTag$2(_this, t1);
        t1 = token0.next;
        t1.toString;
        _this.listener.handleScript$1(t1);
        token0 = t1;
      }
      for (t1 = type$.Template_of_Message_Function_Token, count = 0; t2 = token0.next, t2.type !== C.TokenType_Emx;) {
        token0 = _this.parseTopLevelDeclarationImpl$2(token0, directiveState);
        t3 = _this.listener;
        t4 = token0.next;
        t4.toString;
        t3.endTopLevelDeclaration$1(t4);
        ++count;
        t3 = token0.next;
        t3.toString;
        if (t2 === t3) {
          _this.listener.beginMetadataStar$1(t3);
          _this.listener.endMetadataStar$1(0);
          t1._as(C.Template_gsT);
          token0 = N.findNonZeroLengthToken(t3);
          _this.listener.handleRecoverableError$3(C.Template_gsT.withArguments.call$1(token0), token0, token0);
          _this.listener.handleInvalidTopLevelDeclaration$1(t3);
          t2 = _this.listener;
          t4 = t3.next;
          t4.toString;
          t2.endTopLevelDeclaration$1(t4);
          ++count;
          token0 = t3;
        }
      }
      _this.reportAllErrorTokens$1(token);
      _this.listener.endCompilationUnit$2(count, t2);
      _this.cachedRewriter = null;
      return t2;
    },
    parseTopLevelDeclarationImpl$2(token, directiveState) {
      var next, t1, token0, token1, _this = this;
      token = _this.parseMetadataStar$1(token);
      next = token.next;
      t1 = next.type;
      if (t1.isTopLevelKeyword)
        return _this.parseTopLevelKeywordDeclaration$3(token, next, directiveState);
      if (t1.isModifier) {
        t1 = t1.stringValue;
        if ("var" !== t1)
          if ("late" !== t1)
            t1 = ("const" === t1 || "final" === t1) && "class" !== next.next.type.stringValue;
          else
            t1 = true;
        else
          t1 = true;
        if (t1) {
          if (directiveState.state !== C.DirectiveState_5)
            directiveState.state = C.DirectiveState_6;
          return _this.parseTopLevelMemberImpl$1(token);
        }
        for (token0 = token; token1 = token0.next, token1.type.isModifier; token0 = token1)
          ;
      } else
        token0 = token;
      next = token0.next;
      t1 = next.type;
      if (t1.isTopLevelKeyword)
        return _this.parseTopLevelKeywordDeclaration$3(token, next, directiveState);
      else if (next.get$isKeywordOrIdentifier()) {
        if (directiveState.state !== C.DirectiveState_5)
          directiveState.state = C.DirectiveState_6;
        return _this.parseTopLevelMemberImpl$1(token);
      } else if (token.next != next) {
        if (directiveState.state !== C.DirectiveState_5)
          directiveState.state = C.DirectiveState_6;
        return _this.parseTopLevelMemberImpl$1(token);
      }
      if (t1.isOperator && "(" === next.next.type.stringValue) {
        token = N.findNonZeroLengthToken(next);
        _this.listener.handleRecoverableError$3(C.MessageCode_Lg7, token, token);
        _this.get$rewriter().insertSyntheticIdentifier$2(next, "#synthetic_function_" + next.offset);
        return _this.parseTopLevelMemberImpl$1(next);
      }
      _this.listener.beginTopLevelMember$1(next);
      return _this.parseInvalidTopLevelDeclaration$1(token0);
    },
    parseClassDeclarationModifiers$2(start, keyword) {
      var modifier,
        t1 = start.next;
      t1.toString;
      for (modifier = t1; modifier !== keyword; modifier = t1) {
        if ("abstract" === modifier.type.stringValue) {
          this.parseTopLevelKeywordModifiers$2(modifier, keyword);
          return modifier;
        } else
          this.reportTopLevelModifierError$2(modifier, keyword);
        t1 = modifier.next;
        t1.toString;
      }
      return null;
    },
    parseTopLevelKeywordModifiers$2(start, keyword) {
      var modifier,
        t1 = start.next;
      t1.toString;
      for (modifier = t1; modifier !== keyword; modifier = t1) {
        this.reportTopLevelModifierError$2(modifier, keyword);
        t1 = modifier.next;
        t1.toString;
      }
    },
    reportTopLevelModifierError$2(modifier, afterModifiers) {
      var token, _this = this,
        t1 = modifier.type.stringValue;
      if ("const" === t1 && "class" === afterModifiers.type.stringValue) {
        token = N.findNonZeroLengthToken(modifier);
        _this.listener.handleRecoverableError$3(C.MessageCode_D1h, token, token);
      } else if ("external" === t1) {
        t1 = afterModifiers.type.stringValue;
        if ("class" === t1) {
          token = N.findNonZeroLengthToken(modifier);
          _this.listener.handleRecoverableError$3(C.MessageCode_ESD, token, token);
        } else if ("enum" === t1) {
          token = N.findNonZeroLengthToken(modifier);
          _this.listener.handleRecoverableError$3(C.MessageCode_gsm, token, token);
        } else if ("typedef" === t1) {
          token = N.findNonZeroLengthToken(modifier);
          _this.listener.handleRecoverableError$3(C.MessageCode_BuK, token, token);
        } else
          _this.reportRecoverableErrorWithToken$2(modifier, C.Template_lnn);
      } else
        _this.reportRecoverableErrorWithToken$2(modifier, C.Template_lnn);
    },
    parseTopLevelKeywordDeclaration$3(start, keyword, directiveState) {
      var t1, nextValue, endGroup, token, typeInfo, typeParam, next, type, skippedType, functionToken, t2, recover, equals, $name, headerStart, _this = this,
        _s8_ = "Function",
        value = keyword.type.stringValue;
      if (value === "class") {
        if (directiveState.state !== C.DirectiveState_5)
          directiveState.state = C.DirectiveState_6;
        return _this.parseClassOrNamedMixinApplication$2(_this.parseClassDeclarationModifiers$2(start, keyword), keyword);
      } else if (value === "enum") {
        if (directiveState.state !== C.DirectiveState_5)
          directiveState.state = C.DirectiveState_6;
        _this.parseTopLevelKeywordModifiers$2(start, keyword);
        return _this.parseEnum$1(keyword);
      } else {
        t1 = keyword.next;
        nextValue = t1.type.stringValue;
        if (nextValue === "(" || nextValue === ".") {
          if (directiveState.state !== C.DirectiveState_5)
            directiveState.state = C.DirectiveState_6;
          return _this.parseTopLevelMemberImpl$1(start);
        } else if (nextValue === "<") {
          if (value === "extension") {
            endGroup = t1.get$endGroup();
            if (endGroup != null && "on" === endGroup.next.type.stringValue) {
              if (directiveState.state !== C.DirectiveState_5)
                directiveState.state = C.DirectiveState_6;
              return _this.parseExtension$1(keyword);
            }
          }
          if (directiveState.state !== C.DirectiveState_5)
            directiveState.state = C.DirectiveState_6;
          return _this.parseTopLevelMemberImpl$1(start);
        } else {
          _this.parseTopLevelKeywordModifiers$2(start, keyword);
          if (value === "import") {
            directiveState.checkImport$2(_this, keyword);
            return _this.parseImport$1(keyword);
          } else if (value === "export") {
            directiveState.checkExport$2(_this, keyword);
            _this.listener.beginUncategorizedTopLevelDeclaration$1(keyword);
            _this.listener.beginExport$1(keyword);
            token = _this.ensureSemicolon$1(_this.parseCombinatorStar$1(_this.parseConditionalUriStar$1(_this.ensureLiteralString$1(keyword))));
            _this.listener.endExport$2(keyword, token);
            return token;
          } else if (value === "typedef") {
            if (directiveState.state !== C.DirectiveState_5)
              directiveState.state = C.DirectiveState_6;
            _this.listener.beginUncategorizedTopLevelDeclaration$1(keyword);
            _this.listener.beginFunctionTypeAlias$1(keyword);
            typeInfo = M.computeType(keyword, false, false, false);
            token = typeInfo.skipType$1(keyword);
            t1 = token.next;
            t1.toString;
            typeParam = M.computeTypeParamOrArg(t1, true, false);
            if (typeInfo === C.C_NoType && "=" === typeParam.skip$1(0, t1).next.type.stringValue) {
              next = typeParam.parseVariables$2(_this.ensureIdentifierPotentiallyRecovered$3(token, C.TypedefDeclarationIdentifierContext_UAO, true), _this).next;
              if ("=" !== next.type.stringValue && "=" === next.next.type.stringValue) {
                t1 = next.next;
                t1.toString;
                next = t1;
              }
              if ("=" === next.type.stringValue) {
                type = M.computeType(next, true, false, false);
                if (!type.get$isFunctionType()) {
                  skippedType = type.skipType$1(next);
                  t1 = skippedType.next;
                  if ("(" === t1.type.stringValue && t1.get$endGroup() != null && ";" === skippedType.next.get$endGroup().next.type.stringValue) {
                    functionToken = _this.get$rewriter().insertToken$2(skippedType, L.SyntheticKeywordToken$(C.Keyword_2No, skippedType.next.offset));
                    t1 = type$.Message._as(Z._withArgumentsExpectedButGot(_s8_));
                    token = N.findNonZeroLengthToken(functionToken);
                    _this.listener.handleRecoverableError$3(t1, token, token);
                    type = M.computeType(next, true, false, false);
                  } else {
                    if (type instanceof V.NoType) {
                      t1 = skippedType.next;
                      t1 = "<" === t1.type.stringValue && t1.get$endGroup() != null;
                    } else
                      t1 = false;
                    if (t1) {
                      endGroup = skippedType.next.get$endGroup();
                      t1 = endGroup.next;
                      t2 = t1.type.stringValue;
                      if (";" === t2) {
                        t1 = _this.missingParameterMessage$1(C.MemberKind_2);
                        token = N.findNonZeroLengthToken(endGroup);
                        _this.listener.handleRecoverableError$3(t1, token, token);
                        _this.get$rewriter().insertParens$2(endGroup, false);
                        recover = true;
                      } else
                        recover = "(" === t2 && t1.get$endGroup() != null && ";" === endGroup.next.get$endGroup().next.type.stringValue && true;
                      if (recover) {
                        functionToken = _this.get$rewriter().insertToken$2(next, L.SyntheticKeywordToken$(C.Keyword_2No, next.next.offset));
                        t1 = type$.Message._as(Z._withArgumentsExpectedButGot(_s8_));
                        token = N.findNonZeroLengthToken(functionToken);
                        _this.listener.handleRecoverableError$3(t1, token, token);
                        type = M.computeType(next, true, false, false);
                      }
                    }
                  }
                }
                token = type.ensureTypeOrVoid$2(next, _this);
                equals = next;
              } else {
                token = _this.parseFormalParametersRequiredOpt$2(next, C.MemberKind_2);
                equals = null;
              }
            } else {
              token = typeInfo.parseType$2(keyword, _this);
              next = token.next;
              token = _this.parseFormalParametersRequiredOpt$2(typeParam.parseVariables$2(_this.ensureIdentifierPotentiallyRecovered$3(token, C.TypedefDeclarationIdentifierContext_UAO, next.type.kind !== 97 && "(" === typeParam.skip$1(0, next).next.type.stringValue && true), _this), C.MemberKind_2);
              equals = null;
            }
            token = _this.ensureSemicolon$1(token);
            _this.listener.endFunctionTypeAlias$3(keyword, equals, token);
            return token;
          } else if (value === "mixin") {
            if (directiveState.state !== C.DirectiveState_5)
              directiveState.state = C.DirectiveState_6;
            _this.listener.beginClassOrNamedMixinApplicationPrelude$1(keyword);
            $name = _this.ensureIdentifier$2(keyword, C.ClassOrMixinOrExtensionIdentifierContext_ww8);
            headerStart = M.computeTypeParamOrArg($name, true, true).parseVariables$2($name, _this);
            _this.listener.beginMixinDeclaration$2(keyword, $name);
            token = _this.parseMixinHeaderOpt$2(headerStart, keyword);
            if ("{" !== token.next.type.stringValue) {
              token = _this.parseMixinHeaderRecovery$3(token, keyword, headerStart);
              _this.ensureBlock$3(token, null, "mixin declaration");
            }
            token = _this.parseClassOrMixinOrExtensionBody$3(token, C.DeclarationKind_2, $name.get$lexeme());
            _this.listener.endMixinDeclaration$2(keyword, token);
            return token;
          } else if (value === "extension") {
            if (directiveState.state !== C.DirectiveState_5)
              directiveState.state = C.DirectiveState_6;
            return _this.parseExtension$1(keyword);
          } else if (value === "part")
            return _this.parsePartOrPartOf$2(keyword, directiveState);
          else if (value === "library") {
            directiveState.checkLibrary$2(_this, keyword);
            _this.listener.beginUncategorizedTopLevelDeclaration$1(keyword);
            _this.listener.beginLibraryName$1(keyword);
            token = _this.ensureSemicolon$1(_this.parseQualified$3(keyword, C.LibraryIdentifierContext_yLN, C.LibraryIdentifierContext_GEU));
            _this.listener.endLibraryName$2(keyword, token);
            return token;
          }
        }
      }
      throw H.wrapException("Internal error: Unhandled top level keyword '" + H.S(value) + "'.");
    },
    parseImportPrefixOpt$1(token) {
      var _this = this,
        next = token.next,
        t1 = next.type.stringValue;
      if ("deferred" === t1 && "as" === next.next.type.stringValue) {
        t1 = next.next;
        t1.toString;
        token = _this.ensureIdentifier$2(t1, C.ImportPrefixIdentifierContext_CxF);
        _this.listener.handleImportPrefix$2(next, t1);
      } else if ("as" === t1) {
        token = _this.ensureIdentifier$2(next, C.ImportPrefixIdentifierContext_CxF);
        _this.listener.handleImportPrefix$2(null, next);
      } else
        _this.listener.handleImportPrefix$2(null, null);
      return token;
    },
    parseImport$1(importKeyword) {
      var token, token0, t1, t2, _this = this;
      _this.listener.beginUncategorizedTopLevelDeclaration$1(importKeyword);
      _this.listener.beginImport$1(importKeyword);
      token = _this.ensureLiteralString$1(importKeyword);
      token0 = _this.parseCombinatorStar$1(_this.parseImportPrefixOpt$1(_this.parseConditionalUriStar$1(token))).next;
      t1 = token0.type.stringValue;
      t2 = _this.listener;
      if (";" === t1) {
        t2.endImport$2(importKeyword, token0);
        return token0;
      } else {
        t2.endImport$2(importKeyword, null);
        return _this.parseImportRecovery$1(token);
      }
    },
    parseImportRecovery$1(token) {
      var firstDeferredKeyword, hasPrefix, hasCombinator, semicolon, t1, t2, token0, semicolon0, _this = this,
        primaryListener = _this.listener,
        recoveryListener = _this.listener = new R.ImportRecoveryListener(null);
      token = _this.parseCombinatorStar$1(_this.parseImportPrefixOpt$1(_this.parseConditionalUriStar$1(token)));
      firstDeferredKeyword = recoveryListener.deferredKeyword;
      hasPrefix = recoveryListener.asKeyword != null;
      hasCombinator = recoveryListener.hasCombinator;
      recoveryListener.listener = primaryListener;
      semicolon = null;
      do {
        t1 = token.next;
        t1.toString;
        token = _this.skipUnexpectedTokenOpt$2(token, C.List_apY);
        recoveryListener.ifKeyword = recoveryListener.deferredKeyword = recoveryListener.asKeyword = null;
        recoveryListener.hasCombinator = false;
        token = _this.parseConditionalUriStar$1(token);
        if (recoveryListener.ifKeyword != null)
          if (firstDeferredKeyword == null)
            hasPrefix;
        t2 = token.next;
        if ("deferred" === t2.type.stringValue && "as" !== t2.next.type.stringValue) {
          _this.listener.handleImportPrefix$2(t2, null);
          t2 = token.next;
          t2.toString;
          token = t2;
        } else
          token = _this.parseImportPrefixOpt$1(token);
        t2 = recoveryListener.deferredKeyword;
        if (t2 != null)
          if (firstDeferredKeyword != null) {
            token0 = N.findNonZeroLengthToken(t2);
            _this.listener.handleRecoverableError$3(C.MessageCode_fg9, token0, token0);
          } else {
            if (hasPrefix) {
              token0 = N.findNonZeroLengthToken(t2);
              _this.listener.handleRecoverableError$3(C.MessageCode_Y8v, token0, token0);
            }
            firstDeferredKeyword = recoveryListener.deferredKeyword;
          }
        t2 = recoveryListener.asKeyword;
        if (t2 != null)
          if (hasPrefix) {
            token0 = N.findNonZeroLengthToken(t2);
            _this.listener.handleRecoverableError$3(C.MessageCode_43h, token0, token0);
          } else {
            if (hasCombinator) {
              token0 = N.findNonZeroLengthToken(t2);
              _this.listener.handleRecoverableError$3(C.MessageCode_i0N, token0, token0);
            }
            hasPrefix = true;
          }
        token = _this.parseCombinatorStar$1(token);
        hasCombinator = hasCombinator || recoveryListener.hasCombinator;
        semicolon0 = token.next;
        if (";" === semicolon0.type.stringValue)
          semicolon = semicolon0;
        else if (t1 === semicolon0)
          semicolon = _this.ensureSemicolon$1(token);
        _this.listener.handleRecoverImport$1(semicolon);
      } while (semicolon == null);
      if (firstDeferredKeyword != null && !hasPrefix) {
        token = N.findNonZeroLengthToken(firstDeferredKeyword);
        _this.listener.handleRecoverableError$3(C.MessageCode_oyU, token, token);
      }
      return semicolon;
    },
    parseConditionalUriStar$1(token) {
      var count, t3, leftParen, t4, next, equalitySign, endGroup, _this = this,
        t1 = _this.listener,
        t2 = token.next;
      t2.toString;
      t1.beginConditionalUris$1(t2);
      for (t1 = type$.Message, t2 = type$.Template_of_Message_Function_Token, count = 0; t3 = token.next, "if" === t3.type.stringValue;) {
        ++count;
        _this.listener.beginConditionalUri$1(t3);
        leftParen = t3.next;
        if ("(" !== leftParen.type.stringValue) {
          t4 = t1._as(Z._withArgumentsExpectedButGot("("));
          token = N.findNonZeroLengthToken(leftParen);
          _this.listener.handleRecoverableError$3(t4, token, token);
          t4 = _this.cachedRewriter;
          leftParen = (t4 == null ? _this.cachedRewriter = new R.TokenStreamRewriterImpl() : t4).insertParens$2(t3, true);
        }
        token = _this.parseDottedName$1(leftParen);
        next = token.next;
        if ("==" === next.type.stringValue) {
          token = _this.ensureLiteralString$1(next);
          t4 = token.next;
          t4.toString;
          equalitySign = next;
          next = t4;
        } else
          equalitySign = null;
        if (next !== leftParen.get$endGroup()) {
          endGroup = leftParen.get$endGroup();
          if (endGroup.get$isSynthetic()) {
            t4 = _this.cachedRewriter;
            next = (t4 == null ? _this.cachedRewriter = new R.TokenStreamRewriterImpl() : t4).moveSynthetic$2(token, endGroup);
          } else {
            t2._as(C.Template__withArgumentsUnexpectedToken);
            token = N.findNonZeroLengthToken(next);
            _this.listener.handleRecoverableError$3(C.Template__withArgumentsUnexpectedToken.withArguments.call$1(token), token, token);
            next = endGroup;
          }
        }
        token = _this.ensureLiteralString$1(next);
        _this.listener.endConditionalUri$3(t3, leftParen, equalitySign);
      }
      _this.listener.endConditionalUris$1(count);
      return token;
    },
    parseDottedName$1(token) {
      var token0, count, t1;
      token = this.ensureIdentifier$2(token, C.DottedNameIdentifierContext_w5d);
      for (token0 = token, count = 1; t1 = token0.next, "." === t1.type.stringValue;) {
        token0 = this.ensureIdentifier$2(t1, C.DottedNameIdentifierContext_idk);
        ++count;
      }
      this.listener.handleDottedName$2(count, token);
      return token0;
    },
    parseCombinatorStar$1(token) {
      var next, count, value, t2, _this = this,
        t1 = token.next;
      t1.toString;
      _this.listener.beginCombinators$1(t1);
      for (next = t1, count = 0; true; next = t1) {
        value = next.type.stringValue;
        if ("hide" === value) {
          t1 = token.next;
          t1.toString;
          _this.listener.beginHide$1(t1);
          token = _this.parseIdentifierList$1(t1);
          _this.listener.endHide$1(t1);
        } else {
          t1 = _this.listener;
          if ("show" === value) {
            t2 = token.next;
            t2.toString;
            t1.beginShow$1(t2);
            token = _this.parseIdentifierList$1(t2);
            _this.listener.endShow$1(t2);
          } else {
            t1.endCombinators$1(count);
            break;
          }
        }
        t1 = token.next;
        t1.toString;
        ++count;
      }
      return token;
    },
    parseIdentifierList$1(token) {
      var count, t1;
      token = this.ensureIdentifier$2(token, C.CombinatorIdentifierContext_7Mr);
      for (count = 1; t1 = token.next, "," === t1.type.stringValue;) {
        token = this.ensureIdentifier$2(t1, C.CombinatorIdentifierContext_7Mr);
        ++count;
      }
      this.listener.handleIdentifierList$1(count);
      return token;
    },
    parseTypeList$1(token) {
      var count, _this = this,
        t1 = _this.listener,
        t2 = token.next;
      t2.toString;
      t1.beginTypeList$1(t2);
      token = M.computeType(token, true, false, false).ensureTypeOrVoid$2(token, _this);
      for (count = 1; t1 = token.next, "," === t1.type.stringValue;) {
        t1 = M.computeType(t1, true, false, false);
        t2 = token.next;
        t2.toString;
        token = t1.ensureTypeOrVoid$2(t2, _this);
        ++count;
      }
      _this.listener.endTypeList$1(count);
      return token;
    },
    parsePartOrPartOf$2(partKeyword, directiveState) {
      var t1, hasName, token, _this = this;
      _this.listener.beginUncategorizedTopLevelDeclaration$1(partKeyword);
      if ("of" === partKeyword.next.type.stringValue) {
        directiveState.checkPartOf$2(_this, partKeyword);
        t1 = partKeyword.next;
        t1.toString;
        _this.listener.beginPartOf$1(partKeyword);
        hasName = t1.next.get$isIdentifier();
        token = _this.ensureSemicolon$1(hasName ? _this.parseQualified$3(t1, C.LibraryIdentifierContext_yH6, C.LibraryIdentifierContext_E9d) : _this.ensureLiteralString$1(t1));
        _this.listener.endPartOf$4(partKeyword, t1, token, hasName);
        return token;
      } else {
        directiveState.checkPart$2(_this, partKeyword);
        _this.listener.beginPart$1(partKeyword);
        token = _this.ensureSemicolon$1(_this.ensureLiteralString$1(partKeyword));
        _this.listener.endPart$2(partKeyword, token);
        return token;
      }
    },
    parseMetadataStar$1(token) {
      var count, period, token0, t3, _this = this,
        t1 = _this.listener,
        t2 = token.next;
      t2.toString;
      t1.beginMetadataStar$1(t2);
      for (count = 0; t1 = token.next, "@" === t1.type.stringValue;) {
        _this.listener.beginMetadata$1(t1);
        token = _this.parseQualifiedRestOpt$2(_this.ensureIdentifier$2(t1, C.MetadataReferenceIdentifierContext_OGH), C.MetadataReferenceIdentifierContext_ZKG);
        t2 = token.next.type.stringValue;
        token = M.computeTypeParamOrArg(token, false, false).parseArguments$2(token, _this);
        period = token.next;
        if ("." === period.type.stringValue)
          token = _this.ensureIdentifier$2(period, C.MetadataReferenceIdentifierContext_H1G);
        else
          period = null;
        if ("<" === t2 && "(" !== token.next.type.stringValue) {
          token0 = N.findNonZeroLengthToken(token);
          _this.listener.handleRecoverableError$3(C.MessageCode_Tvq, token0, token0);
        }
        token = _this.parseArgumentsOpt$1(token);
        t2 = _this.listener;
        t3 = token.next;
        t3.toString;
        t2.endMetadata$3(t1, period, t3);
        ++count;
      }
      _this.listener.endMetadataStar$1(count);
      return token;
    },
    parseWithClauseOpt$1(token) {
      var withKeyword = token.next;
      if ("with" === withKeyword.type.stringValue) {
        token = this.parseTypeList$1(withKeyword);
        this.listener.handleClassWithClause$1(withKeyword);
      } else
        this.listener.handleClassNoWithClause$0();
      return token;
    },
    parseGetterOrFormalParameters$4(token, $name, isGetter, kind) {
      var token0, t1, _this = this,
        next = token.next;
      if ("(" === next.type.stringValue) {
        if (isGetter) {
          token0 = N.findNonZeroLengthToken(next);
          _this.listener.handleRecoverableError$3(C.MessageCode_QcT, token0, token0);
        }
        t1 = token.next;
        t1.toString;
        token = _this.parseFormalParametersRest$2(t1, kind);
      } else if (isGetter)
        _this.listener.handleNoFormalParameters$2(next, kind);
      else {
        if ("operator" === $name.type.stringValue) {
          next = $name.next;
          if (next.type.isOperator)
            $name = next;
          else if (_this.isUnaryMinus$1(next)) {
            t1 = next.next;
            t1.toString;
            $name = t1;
          }
        }
        t1 = _this.missingParameterMessage$1(kind);
        token0 = N.findNonZeroLengthToken($name);
        _this.listener.handleRecoverableError$3(t1, token0, token0);
        token = _this.parseFormalParametersRest$2(_this.get$rewriter().insertParens$2(token, false), kind);
      }
      return token;
    },
    parseFormalParametersRequiredOpt$2(token, kind) {
      var t1, token0, _this = this,
        next = token.next;
      if ("(" !== next.type.stringValue) {
        t1 = _this.missingParameterMessage$1(kind);
        token0 = N.findNonZeroLengthToken(next);
        _this.listener.handleRecoverableError$3(t1, token0, token0);
        next = _this.get$rewriter().insertParens$2(token, false);
      }
      return _this.parseFormalParametersRest$2(next, kind);
    },
    parseFormalParametersRest$2(token, kind) {
      var t1, token0, parameterCount, next, t2, t3, token1, token2, _this = this;
      _this.listener.beginFormalParameters$2(token, kind);
      for (t1 = type$.Message, token0 = token, parameterCount = 0; true;) {
        next = token0.next;
        t2 = next.type.stringValue;
        if (")" === t2) {
          token0 = next;
          break;
        }
        ++parameterCount;
        if (t2 === "[") {
          token0 = _this.ensureCloseParen$2(_this.parseOptionalPositionalParameters$2(token0, kind), token);
          break;
        } else if (t2 === "{") {
          token0 = _this.ensureCloseParen$2(_this.parseOptionalNamedParameters$2(token0, kind), token);
          break;
        } else if (t2 === "[]") {
          token0 = _this.ensureCloseParen$2(_this.parseOptionalPositionalParameters$2(_this.rewriteSquareBrackets$1(token0), kind), token);
          break;
        }
        token0 = _this.parseFormalParameter$3(token0, C.FormalParameterKind_0, kind);
        next = token0.next;
        t2 = next.type;
        t3 = t2.stringValue;
        if ("," !== t3) {
          if (")" === t3)
            token0 = next;
          else if (token.get$endGroup().get$isSynthetic()) {
            t1 = _this.cachedRewriter;
            if (t1 == null)
              t1 = _this.cachedRewriter = new R.TokenStreamRewriterImpl();
            t2 = token.get$endGroup();
            t2.toString;
            token0 = t1.moveSynthetic$2(token0, t2);
          } else if (t2.kind === 97 && next.next.type.kind === 97) {
            t2 = Z._withArgumentsExpectedButGot(",");
            token1 = new L.SyntheticToken(C.TokenType_O55, next.offset, null);
            token1._setCommentParent$1(null);
            t1._as(t2);
            t3 = token0.next;
            t3.toString;
            token2 = N.findNonZeroLengthToken(t3);
            _this.listener.handleRecoverableError$3(t2, token2, token2);
            t2 = _this.cachedRewriter;
            if (t2 == null)
              t2 = _this.cachedRewriter = new R.TokenStreamRewriterImpl();
            if (!(token0.type !== C.TokenType_Emx || token0.offset < 0))
              H.throwExpression("Internal Error: Rewriting at eof.");
            t3 = token0.next;
            t3.toString;
            t2._setNext$2(token1, t3);
            t2._setNext$2(token0, token1);
            token0 = token1;
            continue;
          } else
            token0 = _this.ensureCloseParen$2(token0, token);
          break;
        }
        token0 = next;
      }
      _this.listener.endFormalParameters$4(parameterCount, token, token0, kind);
      return token0;
    },
    missingParameterMessage$1(kind) {
      if (kind === C.MemberKind_2)
        return C.MessageCode_ww8;
      else if (kind === C.MemberKind_6 || kind === C.MemberKind_7)
        return C.MessageCode_6Vn;
      return C.MessageCode_2Hq;
    },
    _isUseOfRequiredInNonNNBD$1(token) {
      var next, typeInfoAlternative,
        t1 = token.next;
      if (type$.StringToken._is(t1) && t1.value$0(0) === "required") {
        token = token.next;
        t1 = token.next;
        t1.toString;
        for (next = t1; next.type.isModifier; token = next, next = t1) {
          t1 = next.next;
          t1.toString;
        }
        typeInfoAlternative = M.computeType(token, false, true, false);
        t1 = typeInfoAlternative.skipType$1(token).next;
        t1.toString;
        if (typeInfoAlternative !== C.C_NoType)
          if (t1.get$isIdentifier()) {
            t1 = t1.next.type.stringValue;
            t1 = "," === t1 || "}" === t1;
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          return true;
      }
      return false;
    },
    parseFormalParameter$3(token, parameterKind, memberKind) {
      var t1, t2, skippedNonRequiredRequired, inFunctionType, requiredToken, next, covariantToken, varFinalOrConst, context, token0, typeInfo, isNamedParameter, next0, periodAfterThis, thisKeyword, nameContext, typeParam, closer, token1, beforeInlineFunctionType, endInlineFunctionType, t3, t4, endInlineFunctionType0, question, nameToken, value, initializerEnd, initializerStart, _this = this, _null = null;
      token = _this.parseMetadataStar$1(token);
      if (_this._isUseOfRequiredInNonNNBD$1(token)) {
        t1 = token.next;
        t1.toString;
        _this.reportRecoverableErrorWithToken$2(t1, C.Template_int);
        t2 = token.next;
        t2.toString;
        skippedNonRequiredRequired = t1;
        token = t2;
      } else
        skippedNonRequiredRequired = _null;
      t1 = token.next;
      t1.toString;
      inFunctionType = memberKind === C.MemberKind_4;
      if (X.isModifier(t1)) {
        if ("required" === t1.type.stringValue)
          if (parameterKind === C.FormalParameterKind_1) {
            t2 = t1.next;
            t2.toString;
            requiredToken = t1;
            next = t2;
            token = requiredToken;
          } else {
            requiredToken = _null;
            next = t1;
          }
        else {
          requiredToken = _null;
          next = t1;
        }
        if (X.isModifier(next)) {
          if ("covariant" === next.type.stringValue)
            if (memberKind !== C.MemberKind_7 && memberKind !== C.MemberKind_8 && memberKind !== C.MemberKind_9 && memberKind !== C.MemberKind_10) {
              t2 = next.next;
              t2.toString;
              covariantToken = next;
              next = t2;
              token = covariantToken;
            } else
              covariantToken = _null;
          else
            covariantToken = _null;
          if (X.isModifier(next)) {
            if (!inFunctionType) {
              t2 = next.type.stringValue;
              if ("var" === t2) {
                t2 = next.next;
                t2.toString;
                varFinalOrConst = next;
                next = t2;
                token = varFinalOrConst;
              } else if ("final" === t2) {
                t2 = next.next;
                t2.toString;
                varFinalOrConst = next;
                next = t2;
                token = varFinalOrConst;
              } else
                varFinalOrConst = _null;
            } else
              varFinalOrConst = _null;
            if (X.isModifier(next)) {
              context = new X.ModifierRecoveryContext(_this);
              context.covariantToken = covariantToken;
              context.requiredToken = requiredToken;
              context.set$varFinalOrConst(varFinalOrConst);
              token = context.parseModifiers$1(token);
              if (parameterKind !== C.FormalParameterKind_1) {
                t2 = context.requiredToken;
                if (t2 != null)
                  _this.reportRecoverableErrorWithToken$2(t2, C.Template_lnn);
              }
              if (memberKind === C.MemberKind_7 || memberKind === C.MemberKind_8) {
                t2 = context.covariantToken;
                if (t2 != null)
                  _this.reportRecoverableErrorWithToken$2(t2, C.Template_lnn);
              } else if (memberKind === C.MemberKind_9 || memberKind === C.MemberKind_10) {
                t2 = context.covariantToken;
                if (t2 != null)
                  _this.reportRecoverableErrorWithToken$2(t2, C.Template_Y7N);
              }
              t2 = context.constToken;
              if (t2 != null)
                _this.reportRecoverableErrorWithToken$2(t2, C.Template_lnn);
              else if (inFunctionType)
                if (context.get$varFinalOrConst() != null) {
                  t2 = context.get$varFinalOrConst();
                  t2.toString;
                  token0 = N.findNonZeroLengthToken(t2);
                  _this.listener.handleRecoverableError$3(C.MessageCode_Vav, token0, token0);
                }
              t2 = context.abstractToken;
              if (t2 != null)
                _this.reportRecoverableErrorWithToken$2(t2, C.Template_lnn);
              t2 = context.externalToken;
              if (t2 != null)
                _this.reportRecoverableErrorWithToken$2(t2, C.Template_lnn);
              t2 = context.lateToken;
              if (t2 != null)
                _this.reportRecoverableErrorWithToken$2(t2, C.Template_lnn);
              t2 = context.staticToken;
              if (t2 != null)
                _this.reportRecoverableErrorWithToken$2(t2, C.Template_lnn);
              token.next.toString;
              covariantToken = context.covariantToken;
              requiredToken = context.requiredToken;
              varFinalOrConst = context.get$varFinalOrConst();
            }
          } else
            varFinalOrConst = _null;
        } else {
          varFinalOrConst = _null;
          covariantToken = varFinalOrConst;
        }
      } else {
        varFinalOrConst = _null;
        covariantToken = varFinalOrConst;
        requiredToken = covariantToken;
      }
      if (requiredToken == null)
        requiredToken = skippedNonRequiredRequired;
      _this.listener.beginFormalParameter$5(t1, memberKind, requiredToken, covariantToken, varFinalOrConst);
      typeInfo = M.computeType(token, inFunctionType, false, true);
      token0 = typeInfo.skipType$1(token);
      t1 = token0.next;
      t1.toString;
      if (typeInfo === C.C_NoType)
        if ("." !== t1.type.stringValue)
          t2 = t1.get$isIdentifier() && "." === t1.next.type.stringValue;
        else
          t2 = true;
      else
        t2 = false;
      if (t2) {
        typeInfo = M.computeType(token, true, false, false);
        token0 = typeInfo.skipType$1(token);
        t1 = token0.next;
        t1.toString;
        next = t1;
      } else
        next = t1;
      isNamedParameter = parameterKind === C.FormalParameterKind_1;
      t1 = !inFunctionType;
      if (t1 && "this" === next.type.stringValue) {
        next0 = next.next;
        if ("." !== next0.type.stringValue)
          if (N.isOneOf(next0, C.List_egL)) {
            t2 = token0.next;
            t2.toString;
            periodAfterThis = _null;
            thisKeyword = periodAfterThis;
            next = t2;
            nameContext = C.FormalParameterDeclarationIdentifierContext_al8;
          } else {
            next0 = _this.rewriteAndRecover$3(next, Z._withArgumentsExpectedButGot("."), L.SyntheticToken$(C.TokenType_wCI, next0.offset));
            t2 = next0.next;
            t2.toString;
            periodAfterThis = next0;
            thisKeyword = next;
            next = t2;
            token0 = periodAfterThis;
            nameContext = C.FieldInitializerIdentifierContext_adz;
          }
        else {
          t2 = next0.next;
          t2.toString;
          periodAfterThis = next0;
          thisKeyword = next;
          next = t2;
          token0 = periodAfterThis;
          nameContext = C.FieldInitializerIdentifierContext_adz;
        }
      } else {
        periodAfterThis = _null;
        thisKeyword = periodAfterThis;
        nameContext = C.FormalParameterDeclarationIdentifierContext_al8;
      }
      if (next.get$isIdentifier()) {
        t2 = next.next;
        t2.toString;
        token0 = next;
        next = t2;
      }
      t2 = next.type.stringValue;
      if ("<" === t2) {
        typeParam = M.computeTypeParamOrArg(token0, false, false);
        if (typeParam !== C.C_NoTypeParamOrArg) {
          closer = typeParam.skip$1(0, token0);
          if ("(" === closer.next.type.stringValue) {
            if (varFinalOrConst != null) {
              token1 = N.findNonZeroLengthToken(varFinalOrConst);
              _this.listener.handleRecoverableError$3(C.MessageCode_Vav, token1, token1);
            }
            closer.next.get$endGroup().next.toString;
            beforeInlineFunctionType = token0;
          } else
            beforeInlineFunctionType = _null;
        } else
          beforeInlineFunctionType = _null;
      } else {
        if ("(" === t2) {
          if (varFinalOrConst != null) {
            token1 = N.findNonZeroLengthToken(varFinalOrConst);
            _this.listener.handleRecoverableError$3(C.MessageCode_Vav, token1, token1);
          }
          next.get$endGroup().next.toString;
          beforeInlineFunctionType = token0;
        } else
          beforeInlineFunctionType = _null;
        typeParam = C.C_NoTypeParamOrArg;
      }
      if (typeInfo !== C.C_NoType && varFinalOrConst != null && "var" === varFinalOrConst.type.stringValue) {
        token0 = N.findNonZeroLengthToken(varFinalOrConst);
        _this.listener.handleRecoverableError$3(C.MessageCode_sx4, token0, token0);
      }
      t2 = beforeInlineFunctionType == null;
      if (!t2) {
        endInlineFunctionType = typeParam.parseVariables$2(beforeInlineFunctionType, _this);
        t3 = _this.listener;
        t4 = beforeInlineFunctionType.next;
        t4.toString;
        t3.beginFunctionTypedFormalParameter$1(t4);
        token = typeInfo.parseType$2(token, _this);
        endInlineFunctionType = _this.parseFormalParametersRequiredOpt$2(endInlineFunctionType, C.MemberKind_3);
        endInlineFunctionType0 = endInlineFunctionType.next;
        if ("?" === endInlineFunctionType0.type.stringValue) {
          question = endInlineFunctionType0;
          endInlineFunctionType = question;
        } else
          question = _null;
        _this.listener.endFunctionTypedFormalParameter$2(beforeInlineFunctionType, question);
        if (inFunctionType) {
          t3 = beforeInlineFunctionType.next;
          t3.toString;
          token0 = N.findNonZeroLengthToken(t3);
          _this.listener.handleRecoverableError$3(C.MessageCode_6nc, token0, token0);
        }
      } else {
        token = inFunctionType ? typeInfo.ensureTypeOrVoid$2(token, _this) : typeInfo.parseType$2(token, _this);
        endInlineFunctionType = _null;
      }
      if (periodAfterThis != null)
        token = periodAfterThis;
      t3 = token.next;
      t3.toString;
      if (inFunctionType && !isNamedParameter && !t3.get$isKeywordOrIdentifier() && t2) {
        t2 = token.next;
        t2.toString;
        _this.listener.handleNoName$1(t2);
        nameToken = t2;
      } else {
        token = _this.ensureIdentifier$2(token, nameContext);
        if (isNamedParameter && J.startsWith$1$s(token.get$lexeme(), "_")) {
          token0 = N.findNonZeroLengthToken(token);
          _this.listener.handleRecoverableError$3(C.MessageCode_Tbc, token0, token0);
        }
        nameToken = token;
      }
      if (endInlineFunctionType != null)
        token = endInlineFunctionType;
      next = token.next;
      value = next.type.stringValue;
      t2 = "=" === value || ":" === value;
      t3 = _this.listener;
      if (t2) {
        t2 = next.next;
        t2.toString;
        t3.beginFormalParameterDefaultValueExpression$0();
        initializerEnd = _this.parseExpression$1(next);
        t3 = initializerEnd.next;
        t3.toString;
        _this.listener.endFormalParameterDefaultValueExpression$0();
        _this.listener.handleValuedFormalParameter$2(next, t3);
        if (C.FormalParameterKind_0 === parameterKind) {
          token = N.findNonZeroLengthToken(next);
          _this.listener.handleRecoverableError$3(C.MessageCode_Q49, token, token);
        } else if (C.FormalParameterKind_2 === parameterKind && ":" === value) {
          token = N.findNonZeroLengthToken(next);
          _this.listener.handleRecoverableError$3(C.MessageCode_EO3, token, token);
        } else if (!t1 || memberKind === C.MemberKind_2 || memberKind === C.MemberKind_3) {
          token = N.findNonZeroLengthToken(next);
          _this.listener.handleRecoverableError$3(C.MessageCode_KNu, token, token);
        }
        initializerStart = t2;
        token = initializerEnd;
      } else {
        t3.handleFormalParameterWithoutValue$1(next);
        initializerEnd = _null;
        initializerStart = initializerEnd;
      }
      _this.listener.endFormalParameter$7(thisKeyword, periodAfterThis, nameToken, initializerStart, initializerEnd, parameterKind, memberKind);
      return token;
    },
    parseOptionalPositionalParameters$2(token, kind) {
      var parameterCount, next, t2, token0, t3, _this = this,
        t1 = token.next;
      t1.toString;
      _this.listener.beginOptionalFormalParameters$1(t1);
      for (token = t1, parameterCount = 0; true; token = next) {
        if ("]" === token.next.type.stringValue)
          break;
        token = _this.parseFormalParameter$3(token, C.FormalParameterKind_2, kind);
        next = token.next;
        ++parameterCount;
        t2 = next.type.stringValue;
        if ("," !== t2) {
          if ("]" !== t2) {
            t2 = type$.Message._as(Z._withArgumentsExpectedButGot("]"));
            token0 = N.findNonZeroLengthToken(next);
            _this.listener.handleRecoverableError$3(t2, token0, token0);
            t2 = t1.get$endGroup();
            t2.toString;
            for (; t3 = token.next, t3 !== t2; token = t3)
              t3.toString;
          }
          break;
        }
      }
      if (parameterCount === 0) {
        _this.rewriteAndRecover$3(token, C.MessageCode_89U, L.SyntheticStringToken$(C.TokenType_IQp, "", token.next.offset, 0));
        token = _this.parseFormalParameter$3(token, C.FormalParameterKind_2, kind);
        ++parameterCount;
      }
      t2 = token.next;
      t2.toString;
      _this.listener.endOptionalFormalParameters$3(parameterCount, t1, t2);
      return t2;
    },
    parseOptionalNamedParameters$2(token, kind) {
      var parameterCount, next, t2, token0, t3, _this = this,
        t1 = token.next;
      t1.toString;
      _this.listener.beginOptionalFormalParameters$1(t1);
      for (token = t1, parameterCount = 0; true; token = next) {
        if ("}" === token.next.type.stringValue)
          break;
        token = _this.parseFormalParameter$3(token, C.FormalParameterKind_1, kind);
        next = token.next;
        ++parameterCount;
        t2 = next.type.stringValue;
        if ("," !== t2) {
          if ("}" !== t2) {
            t2 = type$.Message._as(Z._withArgumentsExpectedButGot("}"));
            token0 = N.findNonZeroLengthToken(next);
            _this.listener.handleRecoverableError$3(t2, token0, token0);
            t2 = t1.get$endGroup();
            t2.toString;
            for (; t3 = token.next, t3 !== t2; token = t3)
              t3.toString;
          }
          break;
        }
      }
      if (parameterCount === 0) {
        _this.rewriteAndRecover$3(token, C.MessageCode_VsD, L.SyntheticStringToken$(C.TokenType_IQp, "", token.next.offset, 0));
        token = _this.parseFormalParameter$3(token, C.FormalParameterKind_1, kind);
        ++parameterCount;
      }
      t2 = token.next;
      t2.toString;
      _this.listener.endOptionalFormalParameters$3(parameterCount, t1, t2);
      return t2;
    },
    parseQualified$3(token, context, continuationContext) {
      var t1, _this = this;
      token = _this.ensureIdentifier$2(token, context);
      for (; t1 = token.next, "." === t1.type.stringValue;) {
        _this._tryRewriteNewToIdentifier$2(t1, continuationContext);
        token = _this.ensureIdentifier$2(t1, continuationContext);
        _this.listener.handleQualified$1(t1);
      }
      return token;
    },
    parseQualifiedRestOpt$2(token, continuationContext) {
      if ("." === token.next.type.stringValue)
        return this.parseQualifiedRest$2(token, continuationContext);
      else
        return token;
    },
    parseQualifiedRest$2(token, context) {
      var t1 = token.next;
      t1.toString;
      this._tryRewriteNewToIdentifier$2(t1, context);
      token = this.ensureIdentifier$2(t1, context);
      this.listener.handleQualified$1(t1);
      return token;
    },
    parseEnum$1(enumKeyword) {
      var token, leftBrace, t1, count, next, t2, endGroup, token0, _this = this;
      _this.listener.beginUncategorizedTopLevelDeclaration$1(enumKeyword);
      _this.listener.beginEnum$1(enumKeyword);
      token = _this.ensureIdentifier$2(enumKeyword, C.EnumDeclarationIdentifierContext_aTW);
      leftBrace = token.next;
      if ("{" === leftBrace.type.stringValue)
        for (t1 = type$.Message, token = leftBrace, count = 0; true;) {
          next = token.next;
          if ("}" === next.type.stringValue) {
            if (count === 0) {
              token = N.findNonZeroLengthToken(next);
              _this.listener.handleRecoverableError$3(C.MessageCode_FCG, token, token);
            }
            token = next;
            break;
          }
          token = _this.ensureIdentifier$2(_this.parseMetadataStar$1(token), C.EnumValueDeclarationIdentifierContext_0qv);
          next = token.next;
          ++count;
          t2 = next.type.stringValue;
          if ("," === t2)
            token = next;
          else if ("}" === t2) {
            token = next;
            break;
          } else {
            endGroup = leftBrace.get$endGroup();
            if (endGroup.get$isSynthetic()) {
              t1 = _this.cachedRewriter;
              token = (t1 == null ? _this.cachedRewriter = new R.TokenStreamRewriterImpl() : t1).moveSynthetic$2(token, endGroup);
              break;
            } else if (next.get$isIdentifier()) {
              t2 = t1._as(Z._withArgumentsExpectedButGot(","));
              token0 = N.findNonZeroLengthToken(next);
              _this.listener.handleRecoverableError$3(t2, token0, token0);
            } else {
              t2 = t1._as(Z._withArgumentsExpectedButGot("}"));
              token = N.findNonZeroLengthToken(next);
              _this.listener.handleRecoverableError$3(t2, token, token);
              t2 = leftBrace.get$endGroup();
              t2.toString;
              token = t2;
              break;
            }
          }
        }
      else {
        leftBrace = _this.ensureBlock$3(token, C.Template__withArgumentsExpectedEnumBody, null);
        t1 = leftBrace.get$endGroup();
        t1.toString;
        token = t1;
        count = 0;
      }
      _this.listener.endEnum$3(enumKeyword, leftBrace, count);
      return token;
    },
    parseClassOrNamedMixinApplication$2(abstractToken, classKeyword) {
      var $name, token, t1, t2, withKeyword, token0, implementsKeyword, _this = this,
        begin = abstractToken == null ? classKeyword : abstractToken;
      _this.listener.beginClassOrNamedMixinApplicationPrelude$1(begin);
      $name = _this.ensureIdentifier$2(classKeyword, C.ClassOrMixinOrExtensionIdentifierContext_ww8);
      token = M.computeTypeParamOrArg($name, true, true).parseVariables$2($name, _this);
      t1 = token.next.type.stringValue;
      t2 = _this.listener;
      if ("=" === t1) {
        t2.beginNamedMixinApplication$3(begin, abstractToken, $name);
        t1 = token.next;
        t1.toString;
        token = M.computeType(t1, true, false, false).ensureTypeNotVoid$2(t1, _this);
        withKeyword = token.next;
        if ("with" !== withKeyword.type.stringValue) {
          t2 = type$.Message._as(Z._withArgumentsExpectedButGot("with"));
          token0 = N.findNonZeroLengthToken(withKeyword);
          _this.listener.handleRecoverableError$3(t2, token0, token0);
          withKeyword = _this.get$rewriter().insertToken$2(token, L.SyntheticKeywordToken$(C.Keyword_Lt0, token.next.offset));
          t2 = withKeyword.next;
          t2.toString;
          if (!M.isValidTypeReference(t2))
            _this.get$rewriter().insertSyntheticIdentifier$1(withKeyword);
        }
        token = _this.parseTypeList$1(withKeyword);
        _this.listener.handleNamedMixinApplicationWithClause$1(withKeyword);
        implementsKeyword = token.next;
        if ("implements" === implementsKeyword.type.stringValue)
          token = _this.parseTypeList$1(implementsKeyword);
        else
          implementsKeyword = null;
        token = _this.ensureSemicolon$1(token);
        _this.listener.endNamedMixinApplication$5(begin, classKeyword, t1, implementsKeyword, token);
        return token;
      } else {
        t2.beginClassDeclaration$3(begin, abstractToken, $name);
        t1 = $name.get$lexeme();
        token0 = _this.parseClassHeaderOpt$3(token, begin, classKeyword);
        if ("{" !== token0.next.type.stringValue) {
          token = _this.parseClassHeaderRecovery$3(token, begin, classKeyword);
          _this.ensureBlock$3(token, null, "class declaration");
        } else
          token = token0;
        token = _this.parseClassOrMixinOrExtensionBody$3(token, C.DeclarationKind_1, t1);
        _this.listener.endClassDeclaration$2(begin, token);
        return token;
      }
    },
    parseClassHeaderOpt$3(token, begin, classKeyword) {
      var nativeToken, _this = this;
      token = _this.parseClassOrMixinImplementsOpt$1(_this.parseWithClauseOpt$1(_this.parseClassExtendsOpt$1(token)));
      nativeToken = token.next;
      if ("native" === nativeToken.type.stringValue)
        token = _this.parseNativeClause$1(token);
      else
        nativeToken = null;
      _this.listener.handleClassHeader$3(begin, classKeyword, nativeToken);
      return token;
    },
    parseClassHeaderRecovery$3(token, begin, classKeyword) {
      var hasExtends, hasImplements, hasWith, t1, token0, t2, t3, token1, _this = this,
        primaryListener = _this.listener,
        recoveryListener = _this.listener = new R.ClassHeaderRecoveryListener(null);
      token = _this.parseClassHeaderOpt$3(token, begin, classKeyword);
      hasExtends = recoveryListener.extendsKeyword != null;
      hasImplements = recoveryListener.implementsKeyword != null;
      hasWith = recoveryListener.withKeyword != null;
      recoveryListener.listener = primaryListener;
      t1 = type$.Message;
      do {
        token0 = _this.skipUnexpectedTokenOpt$2(token, C.List_gkc);
        recoveryListener.withKeyword = recoveryListener.implementsKeyword = recoveryListener.extendsKeyword = null;
        if (token0.next.get$isKeywordOrIdentifier() && C.JSArray_methods.contains$1(C.List_extend_on, token0.next.get$lexeme())) {
          t2 = token0.next;
          t2.toString;
          t3 = t1._as(Z._withArgumentsExpectedInstead("extends"));
          token1 = N.findNonZeroLengthToken(t2);
          _this.listener.handleRecoverableError$3(t3, token1, token1);
          t3 = token0.next;
          t3.toString;
          token0 = _this.parseClassExtendsSeenExtendsClause$2(t3, token0);
        } else
          token0 = _this.parseClassExtendsOpt$1(token0);
        t2 = recoveryListener.extendsKeyword;
        if (t2 != null)
          if (hasExtends) {
            token1 = N.findNonZeroLengthToken(t2);
            _this.listener.handleRecoverableError$3(C.MessageCode_p8L, token1, token1);
          } else {
            if (hasWith) {
              token1 = N.findNonZeroLengthToken(t2);
              _this.listener.handleRecoverableError$3(C.MessageCode_qM8, token1, token1);
            } else if (hasImplements) {
              token1 = N.findNonZeroLengthToken(t2);
              _this.listener.handleRecoverableError$3(C.MessageCode_aZ8, token1, token1);
            }
            hasExtends = true;
          }
        token0 = _this.parseWithClauseOpt$1(token0);
        t2 = recoveryListener.withKeyword;
        if (t2 != null)
          if (hasWith) {
            token1 = N.findNonZeroLengthToken(t2);
            _this.listener.handleRecoverableError$3(C.MessageCode_wJZ, token1, token1);
          } else {
            if (hasImplements) {
              token1 = N.findNonZeroLengthToken(t2);
              _this.listener.handleRecoverableError$3(C.MessageCode_uPs, token1, token1);
            }
            hasWith = true;
          }
        token0 = _this.parseClassOrMixinImplementsOpt$1(token0);
        t2 = recoveryListener.implementsKeyword;
        if (t2 != null)
          if (hasImplements) {
            token1 = N.findNonZeroLengthToken(t2);
            _this.listener.handleRecoverableError$3(C.MessageCode_Djl, token1, token1);
          } else
            hasImplements = true;
        _this.listener.handleRecoverClassHeader$0();
        if ("{" !== token0.next.type.stringValue && token !== token0) {
          token = token0;
          continue;
        } else
          break;
      } while (true);
      _this.listener = primaryListener;
      return token0;
    },
    parseClassExtendsOpt$1(token) {
      var next = token.next;
      if ("extends" === next.type.stringValue)
        token = this.parseClassExtendsSeenExtendsClause$2(next, token);
      else {
        this.listener.handleNoType$1(token);
        this.listener.handleClassExtends$2(null, 1);
      }
      return token;
    },
    parseClassExtendsSeenExtendsClause$2(extendsKeyword, token) {
      var t1, token0, count, _this = this;
      token = M.computeType(extendsKeyword, true, false, false).ensureTypeNotVoid$2(extendsKeyword, _this);
      t1 = token.next;
      if ("," === t1.type.stringValue) {
        token0 = N.findNonZeroLengthToken(t1);
        _this.listener.handleRecoverableError$3(C.MessageCode_p8L, token0, token0);
        for (count = 1; t1 = token.next, "," === t1.type.stringValue;) {
          token = M.computeType(t1, true, false, false).ensureTypeNotVoid$2(t1, _this);
          ++count;
        }
      } else
        count = 1;
      _this.listener.handleClassExtends$2(extendsKeyword, count);
      return token;
    },
    parseClassOrMixinImplementsOpt$1(token) {
      var interfacesCount, t1, t2,
        implementsKeyword = token.next;
      if ("implements" === implementsKeyword.type.stringValue) {
        interfacesCount = 0;
        do {
          t1 = token.next;
          t1.toString;
          t1 = M.computeType(t1, true, false, false);
          t2 = token.next;
          t2.toString;
          token = t1.ensureTypeNotVoid$2(t2, this);
          ++interfacesCount;
        } while ("," === token.next.type.stringValue);
      } else {
        implementsKeyword = null;
        interfacesCount = 0;
      }
      this.listener.handleClassOrMixinImplements$2(implementsKeyword, interfacesCount);
      return token;
    },
    parseMixinHeaderOpt$2(token, mixinKeyword) {
      token = this.parseClassOrMixinImplementsOpt$1(this.parseMixinOnOpt$1(token));
      this.listener.handleMixinHeader$1(mixinKeyword);
      return token;
    },
    parseMixinHeaderRecovery$3(token, mixinKeyword, headerStart) {
      var hasOn, hasImplements, t1, token0, t2, t3, token1, _this = this,
        primaryListener = _this.listener,
        recoveryListener = _this.listener = new R.MixinHeaderRecoveryListener(null);
      token = _this.parseMixinHeaderOpt$2(headerStart, mixinKeyword);
      hasOn = recoveryListener.onKeyword != null;
      hasImplements = recoveryListener.implementsKeyword != null;
      recoveryListener.listener = primaryListener;
      t1 = type$.Message;
      do {
        token0 = _this.skipUnexpectedTokenOpt$2(token, C.List_cKo);
        recoveryListener.implementsKeyword = recoveryListener.onKeyword = null;
        if (token0.next.get$isKeywordOrIdentifier() && C.JSArray_methods.contains$1(C.List_extend_extends, token0.next.get$lexeme())) {
          t2 = token0.next;
          t2.toString;
          t3 = t1._as(Z._withArgumentsExpectedInstead("on"));
          token1 = N.findNonZeroLengthToken(t2);
          _this.listener.handleRecoverableError$3(t3, token1, token1);
          token0 = _this.parseMixinOn$1(token0);
        } else
          token0 = _this.parseMixinOnOpt$1(token0);
        t2 = recoveryListener.onKeyword;
        if (t2 != null)
          if (hasOn) {
            token1 = N.findNonZeroLengthToken(t2);
            _this.listener.handleRecoverableError$3(C.MessageCode_EBn, token1, token1);
          } else {
            if (hasImplements) {
              token1 = N.findNonZeroLengthToken(t2);
              _this.listener.handleRecoverableError$3(C.MessageCode_X7q, token1, token1);
            }
            hasOn = true;
          }
        token0 = _this.parseClassOrMixinImplementsOpt$1(token0);
        t2 = recoveryListener.implementsKeyword;
        if (t2 != null)
          if (hasImplements) {
            token1 = N.findNonZeroLengthToken(t2);
            _this.listener.handleRecoverableError$3(C.MessageCode_Djl, token1, token1);
          } else
            hasImplements = true;
        _this.listener.handleRecoverMixinHeader$0();
        if ("{" !== token0.next.type.stringValue && token !== token0) {
          token = token0;
          continue;
        } else
          break;
      } while (true);
      _this.listener = primaryListener;
      return token0;
    },
    parseMixinOnOpt$1(token) {
      if ("on" !== token.next.type.stringValue) {
        this.listener.handleMixinOn$2(null, 0);
        return token;
      }
      return this.parseMixinOn$1(token);
    },
    parseMixinOn$1(token) {
      var typeCount, t2, t3,
        t1 = token.next;
      t1.toString;
      typeCount = 0;
      do {
        t2 = token.next;
        t2.toString;
        t2 = M.computeType(t2, true, false, false);
        t3 = token.next;
        t3.toString;
        token = t2.ensureTypeNotVoid$2(t3, this);
        ++typeCount;
      } while ("," === token.next.type.stringValue);
      this.listener.handleMixinOn$2(t1, typeCount);
      return token;
    },
    parseExtension$1(extensionKeyword) {
      var $name, t1, t2, typeKeyword, token, onKeyword, token0, handleShowHideElements, showKeyword, showElementCount, hideKeyword, hideElementCount, next, _this = this, _null = null, _box_0 = {};
      _box_0.token = extensionKeyword;
      _this.listener.beginExtensionDeclarationPrelude$1(extensionKeyword);
      $name = extensionKeyword.next;
      if ($name.get$isIdentifier() && $name.get$lexeme() === "type" && $name.next.get$isIdentifier() && "on" !== $name.next.type.stringValue) {
        t1 = extensionKeyword.next;
        t1.toString;
        _box_0.token = t1;
        t2 = t1.next;
        t2.toString;
        typeKeyword = $name;
        $name = t2;
      } else {
        t1 = extensionKeyword;
        typeKeyword = _null;
      }
      if ($name.get$isIdentifier() && "on" !== $name.type.stringValue) {
        _box_0.token = $name;
        if ($name.type.get$isBuiltIn())
          _this.reportRecoverableErrorWithToken$2($name, C.Template_gA4);
        t1 = $name;
      } else
        $name = _null;
      token = _box_0.token = M.computeTypeParamOrArg(t1, true, false).parseVariables$2(t1, _this);
      _this.listener.beginExtensionDeclaration$2(extensionKeyword, $name);
      onKeyword = token.next;
      t1 = onKeyword.type.stringValue;
      if ("on" !== t1) {
        t1 = "extends" === t1 || "implements" === t1 || "with" === t1;
        t2 = type$.Message;
        if (t1) {
          t1 = t2._as(Z._withArgumentsExpectedInstead("on"));
          token = N.findNonZeroLengthToken(onKeyword);
          _this.listener.handleRecoverableError$3(t1, token, token);
        } else {
          t1 = t2._as(Z._withArgumentsExpectedAfterButGot("on"));
          token0 = N.findNonZeroLengthToken(token);
          _this.listener.handleRecoverableError$3(t1, token0, token0);
          onKeyword = _this.get$rewriter().insertToken$2(token, L.SyntheticKeywordToken$(C.Keyword_0, token.next.offset));
        }
      }
      token = M.computeType(onKeyword, true, false, false).ensureTypeOrVoid$2(onKeyword, _this);
      _box_0.token = token;
      handleShowHideElements = new N.Parser_parseExtension_handleShowHideElements(_box_0, _this);
      showKeyword = token.next;
      if ("show" === showKeyword.type.stringValue)
        showElementCount = handleShowHideElements.call$0();
      else {
        showKeyword = _null;
        showElementCount = 0;
      }
      hideKeyword = _box_0.token.next;
      if ("hide" === hideKeyword.type.stringValue)
        hideElementCount = handleShowHideElements.call$0();
      else {
        hideKeyword = _null;
        hideElementCount = 0;
      }
      _this.listener.handleExtensionShowHide$4(showKeyword, showElementCount, hideKeyword, hideElementCount);
      next = _box_0.token.next;
      if ("{" !== next.type.stringValue) {
        for (t1 = type$.Template_of_Message_Function_Token; t2 = next.type, t2 !== C.TokenType_Emx;) {
          t2 = t2.stringValue;
          if ("," === t2 || "extends" === t2 || "implements" === t2 || "on" === t2 || "with" === t2) {
            t1._as(C.Template__withArgumentsUnexpectedToken);
            token = N.findNonZeroLengthToken(next);
            _this.listener.handleRecoverableError$3(C.Template__withArgumentsUnexpectedToken.withArguments.call$1(token), token, token);
            _box_0.token = next;
            next = next.next;
            if (next.get$isIdentifier()) {
              _box_0.token = next;
              t2 = next.next;
              t2.toString;
              next = t2;
            }
          } else
            break;
        }
        _this.ensureBlock$3(_box_0.token, _null, "extension declaration");
      }
      t1 = _box_0.token;
      token = _this.parseClassOrMixinOrExtensionBody$3(t1, C.DeclarationKind_3, $name == null ? _null : $name.get$lexeme());
      _box_0.token = token;
      _this.listener.endExtensionDeclaration$6(extensionKeyword, typeKeyword, onKeyword, showKeyword, hideKeyword, token);
      return _box_0.token;
    },
    insertSyntheticIdentifier$4$message$messageOnToken(token, context, message, messageOnToken) {
      var t2, token0,
        t1 = token.next;
      t1.toString;
      if (messageOnToken == null)
        t2 = t1;
      else
        t2 = messageOnToken;
      t1 = message == null ? context.recoveryTemplate.withArguments.call$1(t1) : message;
      type$.Message._as(t1);
      token0 = N.findNonZeroLengthToken(t2);
      this.listener.handleRecoverableError$3(t1, token0, token0);
      return this.get$rewriter().insertSyntheticIdentifier$1(token);
    },
    insertSyntheticIdentifier$2(token, context) {
      return this.insertSyntheticIdentifier$4$message$messageOnToken(token, context, null, null);
    },
    insertSyntheticIdentifier$3$message(token, context, message) {
      return this.insertSyntheticIdentifier$4$message$messageOnToken(token, context, message, null);
    },
    ensureIdentifier$2(token, context) {
      var identifier;
      this._tryRewriteNewToIdentifier$2(token, context);
      identifier = token.next;
      if (identifier.type.kind !== 97)
        identifier = context.ensureIdentifier$2(token, this);
      this.listener.handleIdentifier$2(identifier, context);
      return identifier;
    },
    _isNewOrIdentifier$1(token) {
      var t1;
      if (token.get$isIdentifier())
        return true;
      t1 = token.type;
      if (t1.kind === 107)
        if (t1.stringValue === "new")
          return true;
      return false;
    },
    _tryRewriteNewToIdentifier$2(token, context) {
      var identifier, t1, replacementToken;
      if (!context.get$allowsNewAsIdentifier())
        return;
      identifier = token.next;
      t1 = identifier.type;
      if (t1.kind === 107)
        if (t1.stringValue === "new") {
          replacementToken = this.get$rewriter().replaceTokenFollowing$2(token, L.StringToken$(C.TokenType_IQp, identifier.get$lexeme(), token.next.offset));
          this.listener.handleNewAsIdentifier$1(replacementToken);
        }
    },
    isNextIdentifier$1(token) {
      var t1 = token.next;
      return (t1 == null ? null : t1.type.kind) === 97;
    },
    ensureIdentifierPotentiallyRecovered$3(token, context, isRecovered) {
      var identifier = token.next;
      if (identifier.type.kind !== 97)
        identifier = context.ensureIdentifierPotentiallyRecovered$3(token, this, isRecovered);
      this.listener.handleIdentifier$2(identifier, context);
      return identifier;
    },
    _isUseOfLateInNonNNBD$1(token) {
      var t1, next, typeInfoAlternative;
      if (type$.StringToken._is(token) && token.value$0(0) === "late") {
        t1 = token.next;
        t1.toString;
        for (next = t1; next.type.isModifier; token = next, next = t1) {
          t1 = next.next;
          t1.toString;
        }
        typeInfoAlternative = M.computeType(token, false, true, false);
        t1 = typeInfoAlternative.skipType$1(token).next;
        t1.toString;
        if (typeInfoAlternative !== C.C_NoType)
          if (t1.get$isIdentifier()) {
            t1 = t1.next;
            t1.toString;
            t1 = this.indicatesMethodOrField$1(t1);
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          return true;
      }
      return false;
    },
    parseTopLevelMemberImpl$1(token) {
      var t2, skippedNonLateLate, next, beforeStart, externalToken, varFinalOrConst, lateToken, next0, context, typeInfo, token0, value, getOrSet, nameIsRecovered, token1, $name, isGetter, t3, savedAsyncModifier, isExternal, _this = this, _null = null,
        t1 = token.next;
      t1.toString;
      _this.listener.beginTopLevelMember$1(t1);
      if (_this._isUseOfLateInNonNNBD$1(t1)) {
        _this.reportRecoverableErrorWithToken$2(t1, C.Template_int);
        token = token.next;
        t2 = token.next;
        t2.toString;
        skippedNonLateLate = t1;
        next = t2;
        beforeStart = token;
      } else {
        skippedNonLateLate = _null;
        next = t1;
        beforeStart = token;
      }
      if (X.isModifier(next)) {
        if ("external" === next.type.stringValue) {
          t1 = next.next;
          t1.toString;
          externalToken = next;
          next = t1;
          token = externalToken;
        } else
          externalToken = _null;
        if (X.isModifier(next)) {
          t1 = next.type.stringValue;
          if ("final" === t1) {
            t1 = next.next;
            t1.toString;
            varFinalOrConst = next;
            next = t1;
            lateToken = _null;
            token = varFinalOrConst;
          } else if ("var" === t1) {
            t1 = next.next;
            t1.toString;
            varFinalOrConst = next;
            next = t1;
            lateToken = _null;
            token = varFinalOrConst;
          } else if ("const" === t1) {
            t1 = next.next;
            t1.toString;
            varFinalOrConst = next;
            next = t1;
            lateToken = _null;
            token = varFinalOrConst;
          } else if ("late" === t1) {
            t1 = next.next;
            t1.toString;
            if (X.isModifier(t1) && "final" === t1.type.stringValue) {
              t2 = t1.next;
              t2.toString;
              varFinalOrConst = t1;
              next0 = t2;
              token = varFinalOrConst;
            } else {
              varFinalOrConst = _null;
              next0 = t1;
              token = next;
            }
            lateToken = next;
            next = next0;
          } else {
            varFinalOrConst = _null;
            lateToken = varFinalOrConst;
          }
          if (X.isModifier(next)) {
            if (varFinalOrConst != null) {
              t1 = next.type.stringValue;
              t1 = "final" === t1 || "var" === t1 || "const" === t1;
            } else
              t1 = false;
            if (!t1) {
              context = new X.ModifierRecoveryContext(_this);
              context.externalToken = externalToken;
              context.lateToken = lateToken;
              context.set$varFinalOrConst(varFinalOrConst);
              token = context.parseModifiers$1(token);
              t1 = context.abstractToken;
              if (t1 != null)
                _this.reportRecoverableErrorWithToken$2(t1, C.Template_lnn);
              t1 = context.covariantToken;
              if (t1 != null)
                _this.reportRecoverableErrorWithToken$2(t1, C.Template_lnn);
              t1 = context.requiredToken;
              if (t1 != null)
                _this.reportRecoverableErrorWithToken$2(t1, C.Template_lnn);
              t1 = context.staticToken;
              if (t1 != null)
                _this.reportRecoverableErrorWithToken$2(t1, C.Template_lnn);
              token.next.toString;
              externalToken = context.externalToken;
              lateToken = context.lateToken;
              varFinalOrConst = context.get$varFinalOrConst();
            }
          }
        } else {
          varFinalOrConst = _null;
          lateToken = varFinalOrConst;
        }
      } else {
        varFinalOrConst = _null;
        lateToken = varFinalOrConst;
        externalToken = lateToken;
      }
      if (lateToken == null)
        lateToken = skippedNonLateLate;
      typeInfo = M.computeType(token, false, true, false);
      token0 = typeInfo.skipType$1(token);
      next = token0.next;
      value = next.type.stringValue;
      if (value === "get" || value === "set")
        if (next.next.get$isIdentifier()) {
          t1 = next.next;
          t1.toString;
          getOrSet = next;
          next = t1;
          token0 = getOrSet;
        } else
          getOrSet = _null;
      else
        getOrSet = _null;
      if (typeInfo === C.C_NoType)
        if (varFinalOrConst == null) {
          t1 = next.next;
          t1.toString;
          if (_this.isReservedKeyword$1(t1)) {
            t1 = next.next.next;
            t1.toString;
            t1 = _this.indicatesMethodOrField$1(t1);
          } else
            t1 = false;
        } else
          t1 = false;
      else
        t1 = false;
      if (t1) {
        typeInfo = M.computeType(token0, true, true, false);
        token0 = typeInfo.skipType$1(token0);
        t1 = token0.next;
        t1.toString;
        next = t1;
        nameIsRecovered = true;
      } else
        nameIsRecovered = false;
      t1 = next.type;
      if (t1 !== C.TokenType_IQp) {
        value = t1.stringValue;
        t1 = value === "factory";
        if (t1 || value === "operator") {
          value = next.next.type.stringValue;
          if (getOrSet == null && value !== "(" && value !== "{" && value !== "<" && value !== "=>" && value !== "=" && value !== ";" && value !== ",") {
            if (t1) {
              token = N.findNonZeroLengthToken(next);
              _this.listener.handleRecoverableError$3(C.MessageCode_1Ae, token, token);
            } else {
              token = N.findNonZeroLengthToken(next);
              _this.listener.handleRecoverableError$3(C.MessageCode_Lg7, token, token);
              next0 = next.next;
              if (next0.type.isOperator) {
                if ("(" === next0.next.type.stringValue)
                  _this.get$rewriter().insertSyntheticIdentifier$2(next0, "#synthetic_identifier_" + next0.offset);
                next = next0;
              }
            }
            _this.listener.handleInvalidTopLevelDeclaration$1(next);
            return next;
          }
        } else if (!next.get$isIdentifier())
          if (!next.get$isKeyword()) {
            if (token0 === beforeStart)
              return _this.parseInvalidTopLevelDeclaration$1(token0);
            else {
              _this.insertSyntheticIdentifier$2(token0, C.MethodDeclarationIdentifierContext_e0h);
              t1 = token0.next;
              t1.toString;
            }
            next = t1;
          }
      }
      next0 = next.next;
      value = ("!" === next0.type.stringValue ? next0 : next).next.type.stringValue;
      t1 = getOrSet == null;
      if (!t1 || value === "(" || value === "{" || value === "<" || value === "." || value === "=>") {
        if (varFinalOrConst != null)
          if ("var" === varFinalOrConst.type.stringValue) {
            token1 = N.findNonZeroLengthToken(varFinalOrConst);
            _this.listener.handleRecoverableError$3(C.MessageCode_gMT, token1, token1);
          } else
            _this.reportRecoverableErrorWithToken$2(varFinalOrConst, C.Template_lnn);
        else if (lateToken != null)
          _this.reportRecoverableErrorWithToken$2(lateToken, C.Template_lnn);
        token0.next.toString;
        _this.listener.beginTopLevelMethod$2(beforeStart, externalToken);
        token = typeInfo.parseType$2(token, _this);
        $name = _this.ensureIdentifierPotentiallyRecovered$3(t1 ? token : getOrSet, C.TopLevelDeclarationIdentifierContext_ssl, nameIsRecovered);
        if (t1) {
          token = _this.parseMethodTypeVar$1($name);
          isGetter = false;
        } else {
          isGetter = "get" === getOrSet.type.stringValue;
          t2 = _this.listener;
          t3 = $name.next;
          t3.toString;
          t2.handleNoTypeVariables$1(t3);
          token = $name;
        }
        token = _this.parseGetterOrFormalParameters$4(token, $name, isGetter, C.MemberKind_8);
        savedAsyncModifier = _this.asyncState;
        t2 = token.next;
        t2.toString;
        token = _this.parseAsyncModifierOpt$1(token);
        if (!t1 && _this.asyncState !== C.AsyncModifier_0 && "set" === getOrSet.type.stringValue) {
          token0 = N.findNonZeroLengthToken(t2);
          _this.listener.handleRecoverableError$3(C.MessageCode_gya, token0, token0);
        }
        if (externalToken != null) {
          if (";" !== token.next.type.stringValue) {
            token0 = N.findNonZeroLengthToken(externalToken);
            _this.listener.handleRecoverableError$3(C.MessageCode_k2M, token0, token0);
          }
          isExternal = true;
        } else
          isExternal = false;
        token = _this.parseFunctionBody$3(token, false, isExternal);
        _this.asyncState = savedAsyncModifier;
        t1 = _this.listener;
        t2 = beforeStart.next;
        t2.toString;
        t1.endTopLevelMethod$3(t2, getOrSet, token);
        return token;
      }
      if (!t1)
        _this.reportRecoverableErrorWithToken$2(getOrSet, C.Template_lnn);
      t1 = token0.next;
      t1.toString;
      return _this.parseFields$13(beforeStart, _null, externalToken, _null, _null, lateToken, varFinalOrConst, token, typeInfo, t1, C.DeclarationKind_0, _null, nameIsRecovered);
    },
    parseFields$13(beforeStart, abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, beforeType, typeInfo, $name, kind, enclosingDeclarationName, nameIsRecovered) {
      var token, t1, t2, context, fieldCount, token0, t3, name0, _this = this;
      _this.listener.beginFields$1(beforeStart);
      if (covariantToken != null && lateToken == null)
        if (varFinalOrConst != null && "final" === varFinalOrConst.type.stringValue) {
          token = N.findNonZeroLengthToken(covariantToken);
          _this.listener.handleRecoverableError$3(C.MessageCode_DHo, token, token);
          covariantToken = null;
        }
      if (typeInfo === C.C_NoType) {
        if (varFinalOrConst == null) {
          token = N.findNonZeroLengthToken($name);
          _this.listener.handleRecoverableError$3(C.MessageCode_TSy, token, token);
        }
      } else if (varFinalOrConst != null && "var" === varFinalOrConst.type.stringValue) {
        token = N.findNonZeroLengthToken(varFinalOrConst);
        _this.listener.handleRecoverableError$3(C.MessageCode_sx4, token, token);
      }
      t1 = abstractToken != null;
      if (t1 && externalToken != null) {
        token = N.findNonZeroLengthToken(abstractToken);
        _this.listener.handleRecoverableError$3(C.MessageCode_mfL, token, token);
      }
      token = typeInfo.parseType$2(beforeType, _this);
      t2 = kind === C.DeclarationKind_0;
      context = t2 ? C.TopLevelDeclarationIdentifierContext_yXb : C.FieldDeclarationIdentifierContext_KiL;
      $name = _this.ensureIdentifierPotentiallyRecovered$3(token, context, nameIsRecovered);
      if (covariantToken != null && lateToken != null)
        if (varFinalOrConst != null && "final" === varFinalOrConst.type.stringValue)
          if ("=" === $name.next.type.stringValue) {
            token = N.findNonZeroLengthToken(covariantToken);
            _this.listener.handleRecoverableError$3(C.MessageCode_dg3, token, token);
            covariantToken = null;
          }
      token = _this.parseFieldInitializerOpt$8($name, $name, lateToken, abstractToken, externalToken, varFinalOrConst, kind, enclosingDeclarationName);
      for (fieldCount = 1; token0 = token.next, t3 = token0.type.stringValue, "," === t3;) {
        name0 = _this.ensureIdentifier$2(token0, context);
        token = _this.parseFieldInitializerOpt$8(name0, name0, lateToken, abstractToken, externalToken, varFinalOrConst, kind, enclosingDeclarationName);
        ++fieldCount;
      }
      if (";" === t3)
        token = token0;
      else if (t2 && beforeType.next.get$isIdentifier() && beforeType.next.get$lexeme() === "extension") {
        t2 = beforeType.next;
        t2.toString;
        t3 = type$.Message._as(Z._withArgumentsExperimentNotEnabled("extension-methods", "2.6"));
        token0 = N.findNonZeroLengthToken(t2);
        _this.listener.handleRecoverableError$3(t3, token0, token0);
        token = _this.get$rewriter().insertToken$2(token, L.SyntheticToken$(C.TokenType_FmR, token.next.offset));
      } else
        token = _this.ensureSemicolon$1(token);
      switch (kind) {
        case C.DeclarationKind_0:
          t1 = _this.listener;
          t2 = beforeStart.next;
          t2.toString;
          t1.endTopLevelFields$8(externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, fieldCount, t2, token);
          break;
        case C.DeclarationKind_1:
          t1 = _this.listener;
          t2 = beforeStart.next;
          t2.toString;
          t1.endClassFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, fieldCount, t2, token);
          break;
        case C.DeclarationKind_2:
          t1 = _this.listener;
          t2 = beforeStart.next;
          t2.toString;
          t1.endMixinFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, fieldCount, t2, token);
          break;
        case C.DeclarationKind_3:
          if (t1) {
            token0 = N.findNonZeroLengthToken($name);
            _this.listener.handleRecoverableError$3(C.MessageCode_2bx, token0, token0);
          }
          if (staticToken == null && externalToken == null) {
            token0 = N.findNonZeroLengthToken($name);
            _this.listener.handleRecoverableError$3(C.MessageCode_Au4, token0, token0);
          }
          t1 = _this.listener;
          t2 = beforeStart.next;
          t2.toString;
          t1.endExtensionFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, fieldCount, t2, token);
          break;
        default:
          throw H.wrapException(H.ReachabilityError$(string$.x60null_c));
      }
      return token;
    },
    parseMethodTypeVar$1($name) {
      var t1, token, token0, _this = this,
        name0 = $name.next;
      if ("!" === name0.type.stringValue) {
        _this.reportRecoverableErrorWithToken$2(name0, C.Template__withArgumentsUnexpectedToken);
        $name = name0;
      }
      t1 = $name.next;
      if ("<" !== t1.type.stringValue) {
        _this.listener.handleNoTypeVariables$1(t1);
        return $name;
      }
      token = M.computeTypeParamOrArg($name, true, false).parseVariables$2($name, _this);
      token0 = token.next;
      if ("=" === token0.type.stringValue) {
        _this.reportRecoverableErrorWithToken$2(token0, C.Template__withArgumentsUnexpectedToken);
        token = token0;
      }
      return token;
    },
    parseFieldInitializerOpt$8(token, $name, lateToken, abstractToken, externalToken, varFinalOrConst, kind, enclosingDeclarationName) {
      var token0, next, t1, t2, _this = this;
      if ($name.get$lexeme() == enclosingDeclarationName) {
        token0 = N.findNonZeroLengthToken($name);
        _this.listener.handleRecoverableError$3(C.MessageCode_QZl, token0, token0);
      }
      next = token.next;
      if ("=" === next.type.stringValue) {
        _this.listener.beginFieldInitializer$1(next);
        token = _this.parseExpression$1(next);
        t1 = _this.listener;
        t2 = token.next;
        t2.toString;
        t1.endFieldInitializer$2(next, t2);
      } else {
        if (varFinalOrConst != null && !$name.get$isSynthetic()) {
          t1 = varFinalOrConst.type.stringValue;
          if ("const" === t1) {
            t1 = type$.Message._as(Z._withArgumentsConstFieldWithoutInitializer($name.get$lexeme()));
            token0 = N.findNonZeroLengthToken($name);
            _this.listener.handleRecoverableError$3(t1, token0, token0);
          } else if (kind === C.DeclarationKind_0 && "final" === t1 && lateToken == null && abstractToken == null && externalToken == null) {
            t1 = type$.Message._as(Z._withArgumentsFinalFieldWithoutInitializer($name.get$lexeme()));
            token0 = N.findNonZeroLengthToken($name);
            _this.listener.handleRecoverableError$3(t1, token0, token0);
          }
        }
        t1 = _this.listener;
        t2 = token.next;
        t2.toString;
        t1.handleNoFieldInitializer$1(t2);
      }
      return token;
    },
    parseVariableInitializerOpt$1(token) {
      var t1 = token.next,
        t2 = t1.type.stringValue,
        t3 = this.listener;
      if ("=" === t2) {
        t3.beginVariableInitializer$1(t1);
        token = this.parseExpression$1(t1);
        this.listener.endVariableInitializer$1(t1);
      } else
        t3.handleNoVariableInitializer$1(token);
      return token;
    },
    parseInitializersOpt$1(token) {
      var t1 = token.next;
      if (":" === t1.type.stringValue)
        return this.parseInitializers$1(t1);
      else {
        this.listener.handleNoInitializers$0();
        return token;
      }
    },
    parseInitializers$1(token) {
      var old, t1, next, token0, count, t2, token1, t3, _this = this;
      _this.listener.beginInitializers$1(token);
      old = _this.mayParseFunctionExpressions;
      _this.mayParseFunctionExpressions = false;
      for (t1 = type$.Message, next = token, token0 = next, count = 0; true;) {
        token0 = _this.parseInitializer$1(next);
        ++count;
        next = token0.next;
        t2 = next.type.stringValue;
        if ("," !== t2) {
          if ("assert" === t2) {
            if ("(" !== next.next.type.stringValue)
              break;
          } else if (!next.get$isIdentifier() && "this" !== t2)
            break;
          else {
            if ("this" === t2) {
              next = next.next;
              if ("." !== next.type.stringValue)
                break;
              next = next.next;
              if (!next.get$isIdentifier() && "assert" !== next.type.stringValue)
                break;
            }
            if ("=" !== next.next.type.stringValue)
              break;
          }
          t2 = t1._as(Z._withArgumentsExpectedAfterButGot(","));
          token1 = N.findNonZeroLengthToken(token0);
          _this.listener.handleRecoverableError$3(t2, token1, token1);
          t2 = _this.cachedRewriter;
          if (t2 == null)
            t2 = _this.cachedRewriter = new R.TokenStreamRewriterImpl();
          next = new L.SyntheticToken(C.TokenType_O55, token0.next.offset, null);
          next._setCommentParent$1(null);
          if (!(token0.type !== C.TokenType_Emx || token0.offset < 0))
            H.throwExpression("Internal Error: Rewriting at eof.");
          t3 = token0.next;
          t3.toString;
          t2._setNext$2(next, t3);
          t2._setNext$2(token0, next);
        }
      }
      _this.mayParseFunctionExpressions = old;
      t1 = _this.listener;
      t2 = token0.next;
      t2.toString;
      t1.endInitializers$3(count, token, t2);
      return token0;
    },
    parseInitializer$1(token) {
      var t2, token0, next, next0, token1, afterIdentifier, t3, _this = this,
        t1 = token.next;
      t1.toString;
      _this.listener.beginInitializer$1(t1);
      t2 = t1.type.stringValue;
      if ("assert" === t2) {
        token = _this.parseAssert$2(token, C.Assert_1);
        t1 = _this.listener;
        t2 = token.next;
        t2.toString;
        t1.endInitializer$1(t2);
        return token;
      } else if ("super" === t2) {
        token0 = token.next;
        next = token0.next;
        if ("." === next.type.stringValue) {
          _this._tryRewriteNewToIdentifier$2(next, C.ConstructorReferenceIdentifierContext_Ru4);
          next0 = next.next;
          next = next0.type.kind !== 97 ? C.ExpressionIdentifierContext_cW1.ensureIdentifier$2(next, _this) : next0;
          t1 = next.next;
          t1.toString;
          token0 = next;
          next = t1;
        }
        t1 = next.type.stringValue;
        if ("(" !== t1) {
          if ("?." === t1) {
            next0 = next.next;
            next = !next0.get$isIdentifier() ? _this.get$rewriter().insertSyntheticIdentifier$1(next) : next0;
            t1 = next.next;
            t1.toString;
            token0 = next;
            next = t1;
          }
          t1 = next.type.stringValue;
          if ("=" === t1) {
            if ("super" !== token0.type.stringValue) {
              token0 = N.findNonZeroLengthToken(token0);
              _this.listener.handleRecoverableError$3(C.MessageCode_twx, token0, token0);
            }
          } else if ("(" !== t1) {
            t1 = type$.Message._as(Z._withArgumentsExpectedAfterButGot("("));
            token1 = N.findNonZeroLengthToken(next);
            _this.listener.handleRecoverableError$3(t1, token1, token1);
            _this.get$rewriter().insertParens$2(token0, false);
          }
        }
        return _this.parseInitializerExpressionRest$1(token);
      } else if ("this" === t2) {
        next = t1.next;
        if ("." === next.type.stringValue) {
          afterIdentifier = next.next.next;
          if (afterIdentifier != null && "(" === afterIdentifier.type.stringValue)
            _this._tryRewriteNewToIdentifier$2(next, C.FieldInitializerIdentifierContext_adz);
          next0 = next.next;
          token0 = next0.get$isIdentifier() ? next0 : _this.insertSyntheticIdentifier$2(next, C.FieldInitializerIdentifierContext_adz);
          next = token0.next;
          if ("=" === next.type.stringValue)
            return _this.parseInitializerExpressionRest$1(token);
        } else
          token0 = t1;
        if ("(" === next.type.stringValue) {
          token = _this.parseInitializerExpressionRest$1(token);
          next = token.next;
          t1 = next.type.stringValue;
          if ("{" === t1 || "=>" === t1) {
            token0 = N.findNonZeroLengthToken(next);
            _this.listener.handleRecoverableError$3(C.MessageCode_3Zi, token0, token0);
          }
          return token;
        }
        if ("this" === token0.type.stringValue) {
          t1 = type$.Message._as(Z._withArgumentsExpectedButGot("."));
          token1 = N.findNonZeroLengthToken(next);
          _this.listener.handleRecoverableError$3(t1, token1, token1);
          _this.get$rewriter().insertToken$2(token0, L.SyntheticToken$(C.TokenType_wCI, token0.next.offset));
          t1 = _this.get$rewriter();
          t2 = token0.next;
          t2.toString;
          t1.insertSyntheticIdentifier$1(t2).next.toString;
        }
      } else if (t1.get$isIdentifier()) {
        t2 = t1.next.type;
        t3 = t2.stringValue;
        if ("=" === t3)
          return _this.parseInitializerExpressionRest$1(token);
        if (!t2.isOperator && "." !== t3) {
          _this.insertSyntheticIdentifier$4$message$messageOnToken(_this.get$rewriter().insertToken$2(t1, L.SyntheticToken$(C.TokenType_tca, t1.next.offset)), C.ExpressionIdentifierContext_H5Y, C.MessageCode_Cfu, t1);
          return _this.parseInitializerExpressionRest$1(token);
        }
      } else {
        token0 = _this.insertSyntheticIdentifier$4$message$messageOnToken(token, C.FieldInitializerIdentifierContext_adz, C.MessageCode_IY4, token);
        token0 = _this.get$rewriter().insertToken$2(token0, L.SyntheticToken$(C.TokenType_tca, token0.next.offset));
        _this.get$rewriter().insertSyntheticIdentifier$1(token0);
        return _this.parseInitializerExpressionRest$1(token);
      }
      token0 = _this.insertSyntheticIdentifier$3$message(token, C.FieldInitializerIdentifierContext_adz, C.MessageCode_Cfu);
      _this.get$rewriter().insertToken$2(token0, L.SyntheticToken$(C.TokenType_tca, token0.next.offset));
      return _this.parseInitializerExpressionRest$1(token);
    },
    parseInitializerExpressionRest$1(token) {
      var t1, t2;
      token = this.parseExpression$1(token);
      t1 = this.listener;
      t2 = token.next;
      t2.toString;
      t1.endInitializer$1(t2);
      return token;
    },
    ensureBlock$3(token, template, missingBlockName) {
      var next, t1, token0, beginGroup, _this = this;
      type$.nullable_Template_of_Message_Function_Token._as(template);
      next = token.next;
      if ("{" === next.type.stringValue)
        return next;
      if (template == null) {
        t1 = type$.Message;
        if (missingBlockName == null) {
          t1 = t1._as(Z._withArgumentsExpectedButGot("{"));
          token0 = N.findNonZeroLengthToken(next);
          _this.listener.handleRecoverableError$3(t1, token0, token0);
        } else {
          t1 = t1._as(Z._withArgumentsExpectedClassOrMixinBody(missingBlockName));
          token0 = N.findNonZeroLengthToken(token);
          _this.listener.handleRecoverableError$3(t1, token0, token0);
        }
      } else {
        t1 = type$.Message._as(template.withArguments.call$1(next));
        token0 = N.findNonZeroLengthToken(next);
        _this.listener.handleRecoverableError$3(t1, token0, token0);
      }
      t1 = token.next;
      t1.toString;
      beginGroup = type$.BeginToken._as(_this.get$rewriter().insertToken$2(token, L.SyntheticBeginToken$(C.TokenType_cOk, t1.offset, null)));
      beginGroup.endToken = _this.get$rewriter().insertToken$2(beginGroup, L.SyntheticToken$(C.TokenType_2ty, t1.offset));
      return beginGroup;
    },
    ensureCloseParen$2(token, openParen) {
      var t1, t2,
        next = token.next;
      if (")" === next.type.stringValue)
        return next;
      if (openParen.get$endGroup().get$isSynthetic()) {
        t1 = this.get$rewriter();
        t2 = openParen.get$endGroup();
        t2.toString;
        return t1.moveSynthetic$2(token, t2);
      }
      t1 = type$.Message._as(Z._withArgumentsExpectedButGot(")"));
      token = N.findNonZeroLengthToken(next);
      this.listener.handleRecoverableError$3(t1, token, token);
      t1 = openParen.get$endGroup();
      t1.toString;
      return t1;
    },
    ensureColon$1(token) {
      var next = token.next;
      if (":" === next.type.stringValue)
        return next;
      return this.rewriteAndRecover$3(token, Z._withArgumentsExpectedButGot(":"), L.SyntheticToken$(C.TokenType_gg4, next.offset));
    },
    ensureLiteralString$1(token) {
      var next = token.next;
      if (next.type.kind !== 39)
        this.rewriteAndRecover$3(token, Z._withArgumentsExpectedString(next), L.SyntheticStringToken$(C.TokenType_86y, '""', next.offset, 0));
      return this.parseLiteralString$1(token);
    },
    ensureSemicolon$1(token) {
      var t1, t2, token0,
        next = token.next;
      if (";" === next.type.stringValue)
        return next;
      t1 = N.findPreviousNonZeroLengthToken(token);
      t2 = type$.Message._as(Z._withArgumentsExpectedAfterButGot(";"));
      token0 = N.findNonZeroLengthToken(t1);
      this.listener.handleRecoverableError$3(t2, token0, token0);
      return this.get$rewriter().insertToken$2(token, L.SyntheticToken$(C.TokenType_FmR, token.next.offset));
    },
    rewriteAndRecover$3(token, message, newToken) {
      var token0,
        t1 = token.next;
      t1.toString;
      token0 = N.findNonZeroLengthToken(t1);
      this.listener.handleRecoverableError$3(message, token0, token0);
      return this.get$rewriter().insertToken$2(token, newToken);
    },
    rewriteSquareBrackets$1(token) {
      var replacement,
        next = token.next,
        t1 = next.get$isSynthetic(),
        t2 = next.offset,
        t3 = next._precedingComment;
      if (t1) {
        replacement = L.SyntheticBeginToken$(C.TokenType_AGi, t2, t3);
        t1 = L.SyntheticToken$(C.TokenType_zra, next.offset);
        replacement.setNext$1(t1);
        replacement.endToken = t1;
      } else {
        replacement = L.BeginToken$(C.TokenType_AGi, t2, t3);
        t1 = L.SimpleToken$(C.TokenType_zra, next.offset + 1, null);
        replacement.setNext$1(t1);
        replacement.endToken = t1;
      }
      this.get$rewriter().replaceTokenFollowing$2(token, replacement);
      return token;
    },
    skipUnexpectedTokenOpt$2(token, expectedNext) {
      var next, nextValue, t1, _i;
      type$.List_String._as(expectedNext);
      next = token.next;
      if (next.get$keyword() == null) {
        nextValue = next.next.type.stringValue;
        for (t1 = expectedNext.length, _i = 0; _i < t1; ++_i)
          if (nextValue === expectedNext[_i]) {
            type$.Template_of_Message_Function_Token._as(C.Template__withArgumentsUnexpectedToken);
            token = N.findNonZeroLengthToken(next);
            this.listener.handleRecoverableError$3(C.Template__withArgumentsUnexpectedToken.withArguments.call$1(token), token, token);
            return next;
          }
      }
      return token;
    },
    parseNativeClause$1(token) {
      var token0, hasName;
      token = token.next;
      if (token.next.type.kind === 39) {
        token0 = this.parseLiteralString$1(token);
        hasName = true;
      } else {
        token0 = token;
        hasName = false;
      }
      this.listener.handleNativeClause$2(token, hasName);
      token = N.findNonZeroLengthToken(token);
      this.listener.handleRecoverableError$3(C.MessageCode_Qy4, token, token);
      return token0;
    },
    parseClassOrMixinOrExtensionBody$3(token, kind, enclosingDeclarationName) {
      var count, t2, t3,
        t1 = token.next;
      t1.toString;
      this.listener.beginClassOrMixinBody$2(kind, t1);
      token = t1;
      count = 0;
      while (true) {
        t2 = token.next;
        t3 = t2.type;
        if (!(t3.kind !== 0 && "}" !== t3.stringValue))
          break;
        token = this.parseClassOrMixinOrExtensionMemberImpl$3(token, kind, enclosingDeclarationName);
        ++count;
      }
      this.listener.endClassOrMixinBody$4(kind, count, t1, t2);
      return t2;
    },
    isUnaryMinus$1(token) {
      return token.type.kind === 97 && token.get$lexeme() === "unary" && "-" === token.next.type.stringValue;
    },
    isReservedKeyword$1(token) {
      if (!token.get$isKeyword())
        return false;
      return token.type.get$isReservedWord();
    },
    indicatesMethodOrField$1(token) {
      var value = token.type.stringValue;
      if (value === ";" || value === "=" || value === "(" || value === "{" || value === "=>" || value === "<")
        return true;
      return false;
    },
    parseClassOrMixinOrExtensionMemberImpl$3(token, kind, enclosingDeclarationName) {
      var t1, t2, skippedNonLateLate, beforeStart, next, externalToken, abstractToken, staticToken, covariantToken, varFinalOrConst, lateToken, next0, context, typeInfo, token0, value, getOrSet, nameIsRecovered, next2, staticOrCovariant, token1, typeParam, t3, _this = this, _null = null;
      token = _this.parseMetadataStar$1(token);
      t1 = token.next;
      t1.toString;
      if (_this._isUseOfLateInNonNNBD$1(t1)) {
        t1 = token.next;
        t1.toString;
        _this.reportRecoverableErrorWithToken$2(t1, C.Template_int);
        t2 = token.next;
        t2.toString;
        skippedNonLateLate = t1;
        beforeStart = t2;
        token = beforeStart;
      } else {
        skippedNonLateLate = _null;
        beforeStart = token;
      }
      t1 = token.next;
      t1.toString;
      if (X.isModifier(t1)) {
        t2 = t1.type.stringValue;
        if ("external" === t2) {
          t2 = t1.next;
          t2.toString;
          next = t2;
          externalToken = t1;
          abstractToken = _null;
          token = externalToken;
        } else {
          if ("abstract" === t2) {
            t2 = t1.next;
            t2.toString;
            next = t2;
            abstractToken = t1;
            token = abstractToken;
          } else {
            next = t1;
            abstractToken = _null;
          }
          externalToken = _null;
        }
        if (X.isModifier(next)) {
          t1 = next.type.stringValue;
          if ("static" === t1) {
            t1 = next.next;
            t1.toString;
            staticToken = next;
            next = t1;
            covariantToken = _null;
            token = staticToken;
          } else {
            if ("covariant" === t1) {
              t1 = next.next;
              t1.toString;
              covariantToken = next;
              next = t1;
              token = covariantToken;
            } else
              covariantToken = _null;
            staticToken = _null;
          }
          if (X.isModifier(next)) {
            t1 = next.type.stringValue;
            if ("final" === t1) {
              t1 = next.next;
              t1.toString;
              varFinalOrConst = next;
              next = t1;
              lateToken = _null;
              token = varFinalOrConst;
            } else if ("var" === t1) {
              t1 = next.next;
              t1.toString;
              varFinalOrConst = next;
              next = t1;
              lateToken = _null;
              token = varFinalOrConst;
            } else if ("const" === t1 && covariantToken == null) {
              t1 = next.next;
              t1.toString;
              varFinalOrConst = next;
              next = t1;
              lateToken = _null;
              token = varFinalOrConst;
            } else if ("late" === t1) {
              t1 = next.next;
              t1.toString;
              if (X.isModifier(t1) && "final" === t1.type.stringValue) {
                t2 = t1.next;
                t2.toString;
                next0 = t2;
                varFinalOrConst = t1;
                token = varFinalOrConst;
              } else {
                next0 = t1;
                varFinalOrConst = _null;
                token = next;
              }
              lateToken = next;
              next = next0;
            } else {
              varFinalOrConst = _null;
              lateToken = varFinalOrConst;
            }
            if (X.isModifier(next)) {
              context = new X.ModifierRecoveryContext(_this);
              context.covariantToken = covariantToken;
              context.externalToken = externalToken;
              context.lateToken = lateToken;
              context.staticToken = staticToken;
              context.set$varFinalOrConst(varFinalOrConst);
              context.abstractToken = abstractToken;
              token = context.parseModifiers$1(token);
              t1 = context.requiredToken;
              if (t1 != null)
                _this.reportRecoverableErrorWithToken$2(t1, C.Template_lnn);
              token.next.toString;
              covariantToken = context.covariantToken;
              externalToken = context.externalToken;
              lateToken = context.lateToken;
              staticToken = context.staticToken;
              varFinalOrConst = context.get$varFinalOrConst();
              abstractToken = context.abstractToken;
            }
          } else {
            varFinalOrConst = _null;
            lateToken = varFinalOrConst;
          }
        } else {
          varFinalOrConst = _null;
          staticToken = varFinalOrConst;
          lateToken = staticToken;
          covariantToken = lateToken;
        }
      } else {
        varFinalOrConst = _null;
        staticToken = varFinalOrConst;
        lateToken = staticToken;
        externalToken = lateToken;
        abstractToken = externalToken;
        covariantToken = abstractToken;
      }
      if (lateToken == null)
        lateToken = skippedNonLateLate;
      _this.listener.beginMember$0();
      typeInfo = M.computeType(token, false, true, false);
      token0 = typeInfo.skipType$1(token);
      next = token0.next;
      t1 = next.type;
      if (t1 !== C.TokenType_IQp) {
        value = t1.stringValue;
        if (value === "get" || value === "set")
          if (next.next.get$isIdentifier()) {
            t1 = next.next;
            t1.toString;
            getOrSet = next;
            next = t1;
            token0 = getOrSet;
            nameIsRecovered = false;
          } else {
            t1 = next.next;
            t1.toString;
            if (_this.isReservedKeyword$1(t1)) {
              t1 = next.next.next;
              t1.toString;
              t1 = _this.indicatesMethodOrField$1(t1);
            } else
              t1 = false;
            if (t1) {
              t1 = next.next;
              t1.toString;
              getOrSet = next;
              next = t1;
              token0 = getOrSet;
              nameIsRecovered = true;
            } else {
              getOrSet = _null;
              nameIsRecovered = false;
            }
          }
        else {
          if (value === "factory") {
            next2 = next.next;
            if (next2.get$isIdentifier() || next2.type.isModifier) {
              if (token !== token0) {
                token = N.findNonZeroLengthToken(token0);
                _this.listener.handleRecoverableError$3(C.MessageCode_8o8, token, token);
              }
              if (abstractToken != null) {
                token = N.findNonZeroLengthToken(abstractToken);
                _this.listener.handleRecoverableError$3(C.MessageCode_4CA, token, token);
              }
              staticOrCovariant = staticToken == null ? covariantToken : staticToken;
              token = token0.next;
              t1 = token.next;
              t1.toString;
              if (!M.isValidTypeReference(t1)) {
                context = new X.ModifierRecoveryContext(_this);
                context.externalToken = externalToken;
                if (staticOrCovariant != null) {
                  t1 = staticOrCovariant.type.stringValue;
                  if ("covariant" === t1)
                    context.covariantToken = staticOrCovariant;
                  else if ("static" === t1)
                    context.staticToken = staticOrCovariant;
                  else
                    H.throwExpression("Internal error: Unexpected staticOrCovariant '" + staticOrCovariant.toString$0(0) + "'.");
                }
                context.set$varFinalOrConst(varFinalOrConst);
                context.afterFactory = true;
                token0 = context.parseModifiers$1(token);
                t1 = context.abstractToken;
                if (t1 != null) {
                  token1 = N.findNonZeroLengthToken(t1);
                  _this.listener.handleRecoverableError$3(C.MessageCode_4CA, token1, token1);
                }
                t1 = context.lateToken;
                if (t1 != null)
                  _this.reportRecoverableErrorWithToken$2(t1, C.Template_lnn);
                t1 = context.requiredToken;
                if (t1 != null)
                  _this.reportRecoverableErrorWithToken$2(t1, C.Template_lnn);
                externalToken = context.externalToken;
                staticOrCovariant = context.staticToken;
                if (staticOrCovariant == null)
                  staticOrCovariant = context.covariantToken;
                varFinalOrConst = context.get$varFinalOrConst();
              } else
                token0 = token;
              if (staticOrCovariant != null)
                _this.reportRecoverableErrorWithToken$2(staticOrCovariant, C.Template_lnn);
              if (varFinalOrConst != null && "const" !== varFinalOrConst.type.stringValue) {
                _this.reportRecoverableErrorWithToken$2(varFinalOrConst, C.Template_lnn);
                varFinalOrConst = _null;
              }
              _this.listener.beginFactoryMethod$3(beforeStart, externalToken, varFinalOrConst);
              token0 = _this.parseFormalParametersRequiredOpt$2(_this.parseMethodTypeVar$1(_this.parseQualifiedRestOpt$2(_this.ensureIdentifier$2(token0, C.MethodDeclarationIdentifierContext_e0h), C.MethodDeclarationIdentifierContext_2fF)), C.MemberKind_1);
              t1 = token0.next;
              t1.toString;
              token0 = _this.parseAsyncModifierOpt$1(token0);
              t2 = token0.next;
              t2.toString;
              if (_this.asyncState !== C.AsyncModifier_0) {
                token1 = N.findNonZeroLengthToken(t1);
                _this.listener.handleRecoverableError$3(C.MessageCode_zPZ, token1, token1);
              }
              t1 = t2.type.stringValue;
              if ("=" === t1) {
                if (externalToken != null) {
                  token1 = N.findNonZeroLengthToken(t2);
                  _this.listener.handleRecoverableError$3(C.MessageCode_5Fg, token1, token1);
                }
                token0 = _this.parseRedirectingFactoryBody$1(token0);
              } else if (externalToken != null) {
                if (";" !== t1) {
                  token1 = N.findNonZeroLengthToken(t2);
                  _this.listener.handleRecoverableError$3(C.MessageCode_LBt, token1, token1);
                }
                token0 = _this.parseFunctionBody$3(token0, false, true);
              } else {
                if (varFinalOrConst != null && "native" !== t1)
                  if ("const" === varFinalOrConst.type.stringValue)
                    _this.listener.handleConstFactory$1(varFinalOrConst);
                token0 = _this.parseFunctionBody$3(token0, false, false);
              }
              switch (kind) {
                case C.DeclarationKind_1:
                  t1 = _this.listener;
                  t2 = beforeStart.next;
                  t2.toString;
                  t1.endClassFactoryMethod$3(t2, token, token0);
                  break;
                case C.DeclarationKind_2:
                  token1 = N.findNonZeroLengthToken(token);
                  _this.listener.handleRecoverableError$3(C.MessageCode_lJ4, token1, token1);
                  t1 = _this.listener;
                  t2 = beforeStart.next;
                  t2.toString;
                  t1.endMixinFactoryMethod$3(t2, token, token0);
                  break;
                case C.DeclarationKind_3:
                  token1 = N.findNonZeroLengthToken(token);
                  _this.listener.handleRecoverableError$3(C.MessageCode_zrt, token1, token1);
                  t1 = _this.listener;
                  t2 = beforeStart.next;
                  t2.toString;
                  t1.endExtensionFactoryMethod$3(t2, token, token0);
                  break;
                case C.DeclarationKind_0:
                  H.throwExpression("Internal error: TopLevel factory.");
                  break;
                default:
                  H.throwExpression(H.ReachabilityError$(string$.x60null_c));
              }
              _this.listener.endMember$0();
              return token0;
            }
          } else if (value === "operator") {
            t1 = next.next;
            t1.toString;
            typeParam = M.computeTypeParamOrArg(next, false, false);
            t2 = t1.type;
            if (t2.isUserDefinableOperator && typeParam === C.C_NoTypeParamOrArg) {
              t1 = token0.next;
              t1.toString;
              token = _this.parseMethod$14(beforeStart, abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, token, typeInfo, _null, t1, kind, enclosingDeclarationName, false);
              _this.listener.endMember$0();
              return token;
            } else {
              t3 = t2.stringValue;
              if ("===" !== t3)
                if ("!==" !== t3)
                  t2 = t2.isOperator && "=" !== t3 && "<" !== t3;
                else
                  t2 = true;
              else
                t2 = true;
              if (t2)
                return _this.parseInvalidOperatorDeclaration$10(beforeStart, abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, token, kind, enclosingDeclarationName);
              else if (_this.isUnaryMinus$1(t1)) {
                t1 = token0.next;
                t1.toString;
                token = _this.parseMethod$14(beforeStart, abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, token, typeInfo, _null, t1, kind, enclosingDeclarationName, false);
                _this.listener.endMember$0();
                return token;
              }
            }
          } else {
            if (next.get$isIdentifier())
              t1 = value === "typedef" && token0 === beforeStart && next.next.get$isIdentifier();
            else
              t1 = true;
            if (t1) {
              if (abstractToken != null) {
                token1 = N.findNonZeroLengthToken(abstractToken);
                _this.listener.handleRecoverableError$3(C.MessageCode_4CA, token1, token1);
              }
              return _this.recoverFromInvalidMember$13(token0, beforeStart, abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, token, typeInfo, _null, kind, enclosingDeclarationName);
            }
          }
          getOrSet = _null;
          nameIsRecovered = false;
        }
      } else {
        if (typeInfo === C.C_NoType && varFinalOrConst == null) {
          next2 = next.next;
          if (next2.type.isUserDefinableOperator && next2.get$endGroup() == null) {
            value = next2.next.type.stringValue;
            if (value === "(" || value === "{" || value === "=>")
              return _this.parseInvalidOperatorDeclaration$10(beforeStart, abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, token, kind, enclosingDeclarationName);
            nameIsRecovered = false;
          } else {
            if (_this.isReservedKeyword$1(next2)) {
              t1 = next2.next;
              t1.toString;
              t1 = _this.indicatesMethodOrField$1(t1);
            } else
              t1 = false;
            if (t1) {
              typeInfo = M.computeType(token0, true, true, false);
              token0 = typeInfo.skipType$1(token0);
              t1 = token0.next;
              t1.toString;
              next = t1;
              nameIsRecovered = true;
            } else
              nameIsRecovered = false;
          }
        } else
          nameIsRecovered = false;
        getOrSet = _null;
      }
      value = next.next.type.stringValue;
      t1 = getOrSet == null;
      if (!t1 || value === "(" || value === "{" || value === "<" || value === "." || value === "=>") {
        t1 = token0.next;
        t1.toString;
        token = _this.parseMethod$14(beforeStart, abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, token, typeInfo, getOrSet, t1, kind, enclosingDeclarationName, nameIsRecovered);
      } else {
        if (!t1)
          _this.reportRecoverableErrorWithToken$2(getOrSet, C.Template_lnn);
        t1 = token0.next;
        t1.toString;
        token = _this.parseFields$13(beforeStart, abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, token, typeInfo, t1, kind, enclosingDeclarationName, nameIsRecovered);
      }
      _this.listener.endMember$0();
      return token;
    },
    parseMethod$14(beforeStart, abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, beforeType, typeInfo, getOrSet, $name, kind, enclosingDeclarationName, nameIsRecovered) {
      var token, t1, operator, t2, t3, isOperator, hasQualifiedName, qualified, isConsideredGetter, beforeInitializers, token0, savedAsyncModifier, token1, t4, t5, isConstructor, _this = this, _null = null,
        _s80_ = string$.x60null_c;
      if (abstractToken != null) {
        token = N.findNonZeroLengthToken(abstractToken);
        _this.listener.handleRecoverableError$3(C.MessageCode_4CA, token, token);
      }
      if (lateToken != null)
        _this.reportRecoverableErrorWithToken$2(lateToken, C.Template_lnn);
      t1 = getOrSet == null;
      if (t1 && "operator" === $name.type.stringValue) {
        operator = $name.next;
        t2 = operator.type;
        if (!t2.isOperator) {
          t3 = t2.kind;
          t3 = t3 === 134 || t3 === 142 || _this.isUnaryMinus$1(operator);
        } else
          t3 = true;
        if (t3) {
          if (">>" === t2.stringValue && ">" === operator.next.type.stringValue && operator.offset + operator.get$length(operator) === operator.next.offset) {
            t2 = operator.next;
            t2.toString;
            t3 = type$.Message._as(Z._withArgumentsExperimentNotEnabled("triple-shift", "2.14"));
            _this.listener.handleRecoverableError$3(t3, operator, t2);
            _this.get$rewriter().replaceNextTokensWithSyntheticToken$3($name, 2, C.TokenType_mRX);
          }
          isOperator = true;
        } else
          isOperator = false;
      } else
        isOperator = false;
      if (staticToken != null) {
        if (isOperator) {
          token = N.findNonZeroLengthToken(staticToken);
          _this.listener.handleRecoverableError$3(C.MessageCode_oex, token, token);
          staticToken = _null;
        }
      } else if (covariantToken != null)
        if (t1 || "get" === getOrSet.type.stringValue) {
          token = N.findNonZeroLengthToken(covariantToken);
          _this.listener.handleRecoverableError$3(C.MessageCode_66f, token, token);
          covariantToken = _null;
        }
      if (varFinalOrConst != null) {
        t2 = varFinalOrConst.type.stringValue;
        if ("const" === t2) {
          if (!t1) {
            _this.reportRecoverableErrorWithToken$2(varFinalOrConst, C.Template_lnn);
            varFinalOrConst = _null;
          }
        } else {
          if ("var" === t2) {
            token = N.findNonZeroLengthToken(varFinalOrConst);
            _this.listener.handleRecoverableError$3(C.MessageCode_gMT, token, token);
          } else
            _this.reportRecoverableErrorWithToken$2(varFinalOrConst, C.Template_lnn);
          varFinalOrConst = _null;
        }
      }
      _this.listener.beginMethod$6(externalToken, staticToken, covariantToken, varFinalOrConst, getOrSet, $name);
      token = typeInfo.parseType$2(beforeType, _this);
      token = t1 ? token : getOrSet;
      if (isOperator) {
        token = _this.parseOperatorName$1(token);
        hasQualifiedName = false;
      } else {
        token = _this.ensureIdentifierPotentiallyRecovered$3(token, C.MethodDeclarationIdentifierContext_e0h, nameIsRecovered);
        qualified = _this.parseQualifiedRestOpt$2(token, C.MethodDeclarationIdentifierContext_2fF);
        hasQualifiedName = token !== qualified && true;
        token = qualified;
      }
      if (t1) {
        token = _this.parseMethodTypeVar$1(token);
        isConsideredGetter = false;
      } else {
        isConsideredGetter = "get" === getOrSet.type.stringValue;
        t2 = _this.listener;
        t3 = token.next;
        t3.toString;
        t2.handleNoTypeVariables$1(t3);
        if (hasQualifiedName)
          isConsideredGetter = false;
        else if (isConsideredGetter && ":" === token.next.type.stringValue)
          isConsideredGetter = false;
        else if (isConsideredGetter)
          $name.get$lexeme();
      }
      if (kind === C.DeclarationKind_3)
        t2 = staticToken != null ? C.MemberKind_10 : C.MemberKind_9;
      else
        t2 = staticToken != null ? C.MemberKind_7 : C.MemberKind_6;
      beforeInitializers = _this.parseGetterOrFormalParameters$4(token, $name, isConsideredGetter, t2);
      token0 = _this.parseInitializersOpt$1(beforeInitializers);
      if (token0 === beforeInitializers)
        beforeInitializers = _null;
      savedAsyncModifier = _this.asyncState;
      t2 = token0.next;
      t2.toString;
      token0 = _this.parseAsyncModifierOpt$1(token0);
      t1 = !t1;
      if (t1 && _this.asyncState !== C.AsyncModifier_0 && "set" === getOrSet.type.stringValue) {
        token1 = N.findNonZeroLengthToken(t2);
        _this.listener.handleRecoverableError$3(C.MessageCode_gya, token1, token1);
      }
      t2 = token0.next;
      t2.toString;
      t3 = externalToken == null;
      t4 = !t3;
      if (t4)
        if (";" !== t2.type.stringValue) {
          token1 = N.findNonZeroLengthToken(t2);
          _this.listener.handleRecoverableError$3(C.MessageCode_k2M, token1, token1);
        }
      t5 = t2.type.stringValue;
      if ("=" === t5) {
        token1 = N.findNonZeroLengthToken(t2);
        _this.listener.handleRecoverableError$3(C.MessageCode_ssX, token1, token1);
        token0 = _this.parseRedirectingFactoryBody$1(token0);
      } else
        token0 = _this.parseFunctionBody$3(token0, false, (staticToken == null || t4) && _this.asyncState === C.AsyncModifier_0);
      _this.asyncState = savedAsyncModifier;
      if ("." === $name.next.type.stringValue || beforeInitializers != null)
        isConstructor = true;
      else if ($name.get$lexeme() == enclosingDeclarationName)
        if (t1) {
          token1 = N.findNonZeroLengthToken($name);
          _this.listener.handleRecoverableError$3(C.MessageCode_QZl, token1, token1);
          isConstructor = false;
        } else
          isConstructor = true;
      else
        isConstructor = false;
      if (isConstructor) {
        if ($name.get$lexeme() != enclosingDeclarationName) {
          token1 = N.findNonZeroLengthToken($name);
          _this.listener.handleRecoverableError$3(C.MessageCode_UGD, token1, token1);
        }
        if (staticToken != null) {
          token1 = N.findNonZeroLengthToken(staticToken);
          _this.listener.handleRecoverableError$3(C.MessageCode_Uyh, token1, token1);
        }
        if (t1)
          if ("get" === getOrSet.type.stringValue) {
            token1 = N.findNonZeroLengthToken(getOrSet);
            _this.listener.handleRecoverableError$3(C.MessageCode_E6Z, token1, token1);
          } else {
            token1 = N.findNonZeroLengthToken(getOrSet);
            _this.listener.handleRecoverableError$3(C.MessageCode_myU, token1, token1);
          }
        if (typeInfo !== C.C_NoType) {
          t1 = beforeType.next;
          t1.toString;
          token1 = N.findNonZeroLengthToken(t1);
          _this.listener.handleRecoverableError$3(C.MessageCode_enX, token1, token1);
        }
        t1 = beforeInitializers == null;
        if (!t1 && t4) {
          t2 = beforeInitializers.next;
          t2.toString;
          token1 = N.findNonZeroLengthToken(t2);
          _this.listener.handleRecoverableError$3(C.MessageCode_acK, token1, token1);
        }
        switch (kind) {
          case C.DeclarationKind_1:
            t2 = _this.listener;
            t3 = beforeStart.next;
            t3.toString;
            t4 = token.next;
            t4.toString;
            t2.endClassConstructor$5(getOrSet, t3, t4, t1 ? _null : beforeInitializers.next, token0);
            break;
          case C.DeclarationKind_2:
            token1 = N.findNonZeroLengthToken($name);
            _this.listener.handleRecoverableError$3(C.MessageCode_lJ4, token1, token1);
            t2 = _this.listener;
            t3 = beforeStart.next;
            t3.toString;
            t4 = token.next;
            t4.toString;
            t2.endMixinConstructor$5(getOrSet, t3, t4, t1 ? _null : beforeInitializers.next, token0);
            break;
          case C.DeclarationKind_3:
            token1 = N.findNonZeroLengthToken($name);
            _this.listener.handleRecoverableError$3(C.MessageCode_zrt, token1, token1);
            t2 = _this.listener;
            t3 = beforeStart.next;
            t3.toString;
            t4 = token.next;
            t4.toString;
            t2.endExtensionConstructor$5(getOrSet, t3, t4, t1 ? _null : beforeInitializers.next, token0);
            break;
          case C.DeclarationKind_0:
            throw H.wrapException("Internal error: TopLevel constructor.");
          default:
            throw H.wrapException(H.ReachabilityError$(_s80_));
        }
      } else {
        if (varFinalOrConst != null) {
          token1 = N.findNonZeroLengthToken(varFinalOrConst);
          _this.listener.handleRecoverableError$3(C.MessageCode_sD6, token1, token1);
        }
        switch (kind) {
          case C.DeclarationKind_1:
            t1 = _this.listener;
            t2 = beforeStart.next;
            t2.toString;
            t3 = token.next;
            t3.toString;
            t1.endClassMethod$5(getOrSet, t2, t3, beforeInitializers == null ? _null : beforeInitializers.next, token0);
            break;
          case C.DeclarationKind_2:
            t1 = _this.listener;
            t2 = beforeStart.next;
            t2.toString;
            t3 = token.next;
            t3.toString;
            t1.endMixinMethod$5(getOrSet, t2, t3, beforeInitializers == null ? _null : beforeInitializers.next, token0);
            break;
          case C.DeclarationKind_3:
            if (";" === t5 && t3) {
              if (isOperator) {
                t1 = $name.next;
                t1.toString;
              } else
                t1 = $name;
              token1 = N.findNonZeroLengthToken(t1);
              _this.listener.handleRecoverableError$3(C.MessageCode_2rX, token1, token1);
            }
            t1 = _this.listener;
            t2 = beforeStart.next;
            t2.toString;
            t3 = token.next;
            t3.toString;
            t1.endExtensionMethod$5(getOrSet, t2, t3, beforeInitializers == null ? _null : beforeInitializers.next, token0);
            break;
          case C.DeclarationKind_0:
            throw H.wrapException("Internal error: TopLevel method.");
          default:
            throw H.wrapException(H.ReachabilityError$(_s80_));
        }
      }
      return token0;
    },
    parseOperatorName$1(token) {
      var t2, _this = this,
        token0 = token.next,
        next = token0.next,
        t1 = next.type;
      if (t1.isUserDefinableOperator) {
        t1 = M.computeTypeParamOrArg(token0, false, false);
        t2 = _this.listener;
        if (t1 !== C.C_NoTypeParamOrArg) {
          t2.handleIdentifier$2(token0, C.MethodDeclarationIdentifierContext_e0h);
          return token0;
        } else {
          t2.handleOperatorName$2(token0, next);
          return next;
        }
      } else if ("(" === t1.stringValue)
        return _this.ensureIdentifier$2(token, C.MethodDeclarationIdentifierContext_2fF);
      else if (_this.isUnaryMinus$1(next)) {
        _this.reportRecoverableErrorWithToken$2(next, C.Template__withArgumentsUnexpectedToken);
        t1 = next.next;
        t1.toString;
        _this.listener.handleOperatorName$2(token0, t1);
        return t1;
      } else {
        if (t1 !== C.TokenType_sxw && t1 !== C.TokenType_xgG)
          _this.reportRecoverableErrorWithToken$2(next, C.Template__withArgumentsInvalidOperator);
        _this.listener.handleInvalidOperatorName$2(token0, next);
        return next;
      }
    },
    parseFunctionExpression$1(token) {
      var t2, t3, _this = this,
        t1 = token.next;
      t1.toString;
      _this.listener.beginFunctionExpression$1(t1);
      token = _this.parseAsyncOptBody$3(_this.parseFormalParametersRequiredOpt$2(token, C.MemberKind_5), true, false);
      t2 = _this.listener;
      t3 = token.next;
      t3.toString;
      t2.endFunctionExpression$2(t1, t3);
      return token;
    },
    parseNamedFunctionRest$4(beforeName, begin, formals, isFunctionExpression) {
      var t2, token, _this = this,
        t1 = beforeName.next;
      t1.toString;
      _this.listener.beginFunctionName$1(t1);
      t1 = _this.ensureIdentifier$2(beforeName, C.LocalFunctionDeclarationIdentifierContext_8pl).next;
      t1.toString;
      if (isFunctionExpression) {
        t2 = beforeName.next;
        t2.toString;
        token = N.findNonZeroLengthToken(t2);
        _this.listener.handleRecoverableError$3(C.MessageCode_Gwk, token, token);
      }
      _this.listener.endFunctionName$2(begin, t1);
      token = _this.parseAsyncOptBody$3(_this.parseInitializersOpt$1(_this.parseFormalParametersRequiredOpt$2(formals, C.MemberKind_5)), isFunctionExpression, false);
      t1 = _this.listener;
      if (isFunctionExpression)
        t1.endNamedFunctionExpression$1(token);
      else
        t1.endLocalFunctionDeclaration$1(token);
      return token;
    },
    parseAsyncOptBody$3(token, ofFunctionExpression, allowAbstract) {
      var _this = this,
        savedAsyncModifier = _this.asyncState;
      token = _this.parseFunctionBody$3(_this.parseAsyncModifierOpt$1(token), ofFunctionExpression, false);
      _this.asyncState = savedAsyncModifier;
      return token;
    },
    parseConstructorReference$3(token, constructorReferenceContext, typeArg) {
      var period, t1, t2, _this = this,
        start = _this.ensureIdentifier$2(token, C.ConstructorReferenceIdentifierContext_LOq);
      _this.listener.beginConstructorReference$1(start);
      token = _this.parseQualifiedRestOpt$2(start, C.ConstructorReferenceIdentifierContext_Ru4);
      token = (typeArg == null ? M.computeTypeParamOrArg(token, false, false) : typeArg).parseArguments$2(token, _this);
      period = token.next;
      if ("." === period.type.stringValue)
        token = _this.ensureIdentifier$2(period, C.ConstructorReferenceIdentifierContext_qhc);
      else {
        _this.listener.handleNoConstructorReferenceContinuationAfterTypeArguments$1(period);
        period = null;
      }
      t1 = _this.listener;
      t2 = token.next;
      t2.toString;
      t1.endConstructorReference$4(start, period, t2, constructorReferenceContext);
      return token;
    },
    parseConstructorReference$2(token, constructorReferenceContext) {
      return this.parseConstructorReference$3(token, constructorReferenceContext, null);
    },
    parseRedirectingFactoryBody$1(token) {
      var _this = this,
        t1 = token.next;
      t1.toString;
      _this.listener.beginRedirectingFactoryBody$1(t1);
      token = _this.ensureSemicolon$1(_this.parseConstructorReference$2(t1, C.ConstructorReferenceContext_3));
      _this.listener.endRedirectingFactoryBody$2(t1, token);
      return token;
    },
    parseFunctionBody$3(token, ofFunctionExpression, allowAbstract) {
      var next0, token0, t1, begin, savedLoopState, statementCount, t2, t3, _this = this,
        next = token.next;
      if ("native" === next.type.stringValue) {
        token = _this.parseNativeClause$1(token);
        next0 = token.next;
        if (";" === next0.type.stringValue) {
          _this.listener.handleNativeFunctionBody$2(next, next0);
          return next0;
        }
        token0 = N.findNonZeroLengthToken(next0);
        _this.listener.handleRecoverableError$3(C.MessageCode_k2M, token0, token0);
        _this.listener.handleNativeFunctionBodyIgnored$2(next, next0);
        next = next0;
      }
      t1 = next.type.stringValue;
      if (";" === t1) {
        if (!allowAbstract) {
          token = N.findNonZeroLengthToken(next);
          _this.listener.handleRecoverableError$3(C.MessageCode_466, token, token);
        }
        _this.listener.handleEmptyFunctionBody$1(next);
        return next;
      } else if ("=>" === t1)
        return _this.parseExpressionFunctionBody$2(next, ofFunctionExpression);
      else if ("=" === t1) {
        token = N.findNonZeroLengthToken(next);
        _this.listener.handleRecoverableError$3(C.MessageCode_466, token, token);
        next = _this.get$rewriter().insertToken$2(next, L.SyntheticToken$(C.TokenType_ECn, next.next.offset));
        token = _this.parseExpression$1(next);
        if (!ofFunctionExpression) {
          token = _this.ensureSemicolon$1(token);
          _this.listener.handleExpressionFunctionBody$2(next, token);
        } else
          _this.listener.handleExpressionFunctionBody$2(next, null);
        return token;
      }
      if ("{" !== t1) {
        if ("return" === t1) {
          token = N.findNonZeroLengthToken(next);
          _this.listener.handleRecoverableError$3(C.MessageCode_466, token, token);
          return _this.parseExpressionFunctionBody$2(_this.get$rewriter().insertToken$2(next, L.SyntheticToken$(C.TokenType_ECn, next.next.offset)), ofFunctionExpression);
        }
        if (next.get$isKeywordOrIdentifier() && "=>" === next.next.type.stringValue) {
          _this.reportRecoverableErrorWithToken$2(next, C.Template__withArgumentsUnexpectedToken);
          t1 = next.next;
          t1.toString;
          return _this.parseExpressionFunctionBody$2(t1, ofFunctionExpression);
        }
        if (next.get$isKeywordOrIdentifier() && "{" === next.next.type.stringValue) {
          _this.reportRecoverableErrorWithToken$2(next, C.Template__withArgumentsUnexpectedToken);
          t1 = next.next;
          t1.toString;
        } else {
          token = _this.ensureBlock$3(token, C.Template_qiR, null);
          _this.listener.handleInvalidFunctionBody$1(token);
          t1 = token.get$endGroup();
          t1.toString;
          return t1;
        }
        begin = t1;
        next = begin;
      } else
        begin = next;
      savedLoopState = _this.loopState;
      _this.loopState = C.LoopState_0;
      _this.listener.beginBlockFunctionBody$1(begin);
      t1 = type$.Message;
      token = next;
      statementCount = 0;
      while (true) {
        t2 = token.next;
        t3 = t2.type;
        if (!(t3.kind !== 0 && "}" !== t3.stringValue))
          break;
        token = _this.parseStatement$1(token);
        t3 = token.next;
        t3.toString;
        if (t3 === t2) {
          t2 = t1._as(Z._withArgumentsUnexpectedToken(token));
          token0 = N.findNonZeroLengthToken(token);
          _this.listener.handleRecoverableError$3(t2, token0, token0);
          t2 = token.next;
          t2.toString;
          token = t2;
        }
        ++statementCount;
      }
      _this.listener.endBlockFunctionBody$3(statementCount, begin, t2);
      _this.loopState = savedLoopState;
      return t2;
    },
    parseExpressionFunctionBody$2(token, ofFunctionExpression) {
      var t1, _this = this,
        token0 = _this.parseExpression$1(token);
      if (!ofFunctionExpression) {
        token0 = _this.ensureSemicolon$1(token0);
        _this.listener.handleExpressionFunctionBody$2(token, token0);
      } else
        _this.listener.handleExpressionFunctionBody$2(token, null);
      t1 = _this.asyncState;
      if (t1 === C.AsyncModifier_3 || t1 === C.AsyncModifier_1)
        _this.listener.handleInvalidStatement$2(token, C.MessageCode_IJC);
      return token0;
    },
    parseAsyncModifierOpt$1(token) {
      var next, t1, next0, star, async, token0, _this = this, _null = null;
      _this.asyncState = C.AsyncModifier_0;
      next = token.next;
      t1 = next.type.stringValue;
      if ("async" === t1) {
        next0 = next.next;
        if ("*" === next0.type.stringValue) {
          _this.asyncState = C.AsyncModifier_3;
          star = next0;
          token = star;
        } else {
          _this.asyncState = C.AsyncModifier_2;
          star = _null;
          token = next;
        }
        async = next;
      } else if ("sync" === t1) {
        next0 = next.next;
        if ("*" === next0.type.stringValue) {
          _this.asyncState = C.AsyncModifier_1;
          star = next0;
          token = star;
        } else {
          token = N.findNonZeroLengthToken(next);
          _this.listener.handleRecoverableError$3(C.MessageCode_EYo, token, token);
          star = _null;
          token = next;
        }
        async = next;
      } else {
        star = _null;
        async = star;
      }
      _this.listener.handleAsyncModifier$2(async, star);
      if (_this.asyncState !== C.AsyncModifier_0 && ";" === token.next.type.stringValue) {
        t1 = token.next;
        t1.toString;
        token0 = N.findNonZeroLengthToken(t1);
        _this.listener.handleRecoverableError$3(C.MessageCode_8Wd, token0, token0);
      }
      return token;
    },
    parseStatement$1(token) {
      var result, _this = this;
      if (_this.statementDepth++ > 500)
        return _this.recoverFromStackOverflow$1(token);
      result = _this.parseStatementX$1(token);
      --_this.statementDepth;
      return result;
    },
    parseStatementX$1(token) {
      var value, t2, elseToken, savedLoopState, whileToken, token1, hasTarget, _this = this, _null = null,
        token0 = token.next,
        t1 = token0.type;
      if (t1.kind === 97) {
        if (":" === token0.next.type.stringValue)
          return _this.parseLabeledStatement$1(token);
        return _this.parseExpressionStatementOrDeclarationAfterModifiers$6(token, token, _null, _null, _null, false);
      }
      value = t1.stringValue;
      if (value === "{")
        return _this.parseBlock$2(token, C.BlockKind_statement_false);
      else if (value === "return")
        return _this.parseReturnStatement$1(token);
      else if (value === "var" || value === "final") {
        t1 = token0.next;
        t1.toString;
        if (!X.isModifier(t1))
          return _this.parseExpressionStatementOrDeclarationAfterModifiers$6(token0, token, _null, token0, _null, false);
        return _this.parseExpressionStatementOrDeclaration$1(token);
      } else if (value === "if") {
        _this.listener.beginIfStatement$1(token0);
        token = _this.ensureParenthesizedCondition$1(token0);
        t1 = _this.listener;
        t2 = token.next;
        t2.toString;
        t1.beginThenStatement$1(t2);
        token = _this.parseStatement$1(token);
        _this.listener.endThenStatement$1(token);
        elseToken = token.next;
        if ("else" === elseToken.type.stringValue) {
          _this.listener.beginElseStatement$1(elseToken);
          token = _this.parseStatement$1(elseToken);
          _this.listener.endElseStatement$1(elseToken);
        } else
          elseToken = _null;
        _this.listener.endIfStatement$2(token0, elseToken);
        return token;
      } else {
        t1 = value === "await";
        if (t1 && "for" === token0.next.type.stringValue)
          return _this.parseForStatement$2(token0, token0);
        else if (value === "for")
          return _this.parseForStatement$2(token, _null);
        else if (value === "rethrow") {
          _this.listener.beginRethrowStatement$1(token0);
          token = _this.ensureSemicolon$1(token0);
          _this.listener.endRethrowStatement$2(token0, token);
          return token;
        } else if (value === "while") {
          _this.listener.beginWhileStatement$1(token0);
          token = _this.ensureParenthesizedCondition$1(token0);
          t1 = _this.listener;
          t2 = token.next;
          t2.toString;
          t1.beginWhileStatementBody$1(t2);
          savedLoopState = _this.loopState;
          _this.loopState = C.LoopState_2;
          token = _this.parseStatement$1(token);
          _this.loopState = savedLoopState;
          t2 = _this.listener;
          t1 = token.next;
          t1.toString;
          t2.endWhileStatementBody$1(t1);
          t1 = _this.listener;
          t2 = token.next;
          t2.toString;
          t1.endWhileStatement$2(token0, t2);
          return token;
        } else if (value === "do") {
          _this.listener.beginDoWhileStatement$1(token0);
          t1 = _this.listener;
          t2 = token0.next;
          t2.toString;
          t1.beginDoWhileStatementBody$1(t2);
          savedLoopState = _this.loopState;
          _this.loopState = C.LoopState_2;
          token = _this.parseStatement$1(token0);
          _this.loopState = savedLoopState;
          _this.listener.endDoWhileStatementBody$1(token);
          whileToken = token.next;
          if ("while" !== whileToken.type.stringValue) {
            t1 = type$.Message._as(Z._withArgumentsExpectedButGot("while"));
            token1 = N.findNonZeroLengthToken(whileToken);
            _this.listener.handleRecoverableError$3(t1, token1, token1);
            whileToken = _this.get$rewriter().insertToken$2(token, L.SyntheticKeywordToken$(C.Keyword_sJO, token.next.offset));
          }
          token = _this.ensureSemicolon$1(_this.ensureParenthesizedCondition$1(whileToken));
          _this.listener.endDoWhileStatement$3(token0, whileToken, token);
          return token;
        } else if (value === "try")
          return _this.parseTryStatement$1(token);
        else if (value === "switch") {
          _this.listener.beginSwitchStatement$1(token0);
          token = _this.ensureParenthesizedCondition$1(token0);
          savedLoopState = _this.loopState;
          if (savedLoopState === C.LoopState_0)
            _this.loopState = C.LoopState_1;
          token = _this.parseSwitchBlock$1(token);
          _this.loopState = savedLoopState;
          _this.listener.endSwitchStatement$2(token0, token);
          return token;
        } else if (value === "break") {
          if (token0.next.get$isIdentifier()) {
            token = _this.ensureIdentifier$2(token0, C.LabelReferenceIdentifierContext_z5f);
            hasTarget = true;
          } else {
            if (_this.loopState === C.LoopState_0) {
              token = N.findNonZeroLengthToken(token0);
              _this.listener.handleRecoverableError$3(C.MessageCode_wsa, token, token);
            }
            token = token0;
            hasTarget = false;
          }
          token = _this.ensureSemicolon$1(token);
          _this.listener.handleBreakStatement$3(hasTarget, token0, token);
          return token;
        } else if (value === "continue") {
          if (token0.next.get$isIdentifier()) {
            token = _this.ensureIdentifier$2(token0, C.LabelReferenceIdentifierContext_z5f);
            if (_this.loopState === C.LoopState_0) {
              token1 = N.findNonZeroLengthToken(token0);
              _this.listener.handleRecoverableError$3(C.MessageCode_8aB, token1, token1);
            }
            hasTarget = true;
          } else {
            t1 = _this.loopState;
            if (t1 !== C.LoopState_2) {
              t1 = t1 === C.LoopState_1 ? C.MessageCode_iV0 : C.MessageCode_8aB;
              token = N.findNonZeroLengthToken(token0);
              _this.listener.handleRecoverableError$3(t1, token, token);
            }
            token = token0;
            hasTarget = false;
          }
          token = _this.ensureSemicolon$1(token);
          _this.listener.handleContinueStatement$3(hasTarget, token0, token);
          return token;
        } else if (value === "assert") {
          t1 = _this.parseAssert$2(token, C.Assert_2).next;
          t1.toString;
          return t1;
        } else if (value === ";")
          return _this.parseEmptyStatement$1(token);
        else if (value === "yield")
          switch (_this.asyncState) {
            case C.AsyncModifier_0:
              if (":" === token0.next.type.stringValue)
                return _this.parseLabeledStatement$1(token);
              if (_this.looksLikeExpression$1(token0))
                return _this.parseYieldStatement$1(token);
              return _this.parseExpressionStatementOrDeclaration$1(token);
            case C.AsyncModifier_1:
            case C.AsyncModifier_3:
              return _this.parseYieldStatement$1(token);
            case C.AsyncModifier_2:
              token0 = N.findNonZeroLengthToken(token0);
              _this.listener.handleRecoverableError$3(C.MessageCode_sbZ, token0, token0);
              return _this.parseYieldStatement$1(token);
            default:
              throw H.wrapException(H.ReachabilityError$(string$.x60null_c));
          }
        else if (value === "const")
          return _this.parseExpressionStatementOrConstDeclaration$1(token);
        else if (t1) {
          if (_this.asyncState === C.AsyncModifier_0)
            if (!_this.looksLikeExpression$1(token0))
              return _this.parseExpressionStatementOrDeclaration$1(token);
          return _this.parseExpressionStatement$1(token);
        } else if (value === "set" && token0.next.get$isIdentifier()) {
          t1 = token.next;
          t1.toString;
          _this.reportRecoverableErrorWithToken$2(t1, C.Template__withArgumentsUnexpectedToken);
          t1 = token.next;
          t1.toString;
          return _this.parseStatementX$1(t1);
        } else if (token.next.get$isIdentifier()) {
          if (":" === token.next.next.type.stringValue)
            return _this.parseLabeledStatement$1(token);
          return _this.parseExpressionStatementOrDeclaration$1(token);
        } else
          return _this.parseExpressionStatementOrDeclaration$1(token);
      }
    },
    parseYieldStatement$1(token) {
      var starToken, token0, _this = this,
        t1 = token.next;
      t1.toString;
      _this.listener.beginYieldStatement$1(t1);
      token = t1.next;
      if ("*" === token.type.stringValue)
        starToken = token;
      else {
        token = t1;
        starToken = null;
      }
      token = _this.ensureSemicolon$1(_this.parseExpression$1(token));
      if (_this.asyncState === C.AsyncModifier_0) {
        token0 = N.findNonZeroLengthToken(t1);
        _this.listener.handleRecoverableError$3(C.MessageCode_sbZ, token0, token0);
        _this.listener.endInvalidYieldStatement$4(t1, starToken, token, C.MessageCode_sbZ);
      } else
        _this.listener.endYieldStatement$3(t1, starToken, token);
      return token;
    },
    parseReturnStatement$1(token) {
      var next, t2, _this = this,
        t1 = token.next;
      t1.toString;
      _this.listener.beginReturnStatement$1(t1);
      next = t1.next;
      if (";" === next.type.stringValue) {
        _this.listener.endReturnStatement$3(false, t1, next);
        return next;
      }
      token = _this.ensureSemicolon$1(_this.parseExpression$1(t1));
      _this.listener.endReturnStatement$3(true, t1, token);
      t2 = _this.asyncState;
      if (t2 === C.AsyncModifier_3 || t2 === C.AsyncModifier_1)
        _this.listener.handleInvalidStatement$2(t1, C.MessageCode_IJC);
      return token;
    },
    parseLabel$1(token) {
      var t1 = this.ensureIdentifier$2(token, C.LabelDeclarationIdentifierContext_Wxi).next;
      t1.toString;
      this.listener.handleLabel$1(t1);
      return t1;
    },
    parseLabeledStatement$1(token) {
      var labelCount, next, _this = this;
      token.next.toString;
      labelCount = 0;
      do {
        token = _this.parseLabel$1(token);
        next = token.next;
        ++labelCount;
      } while (next.get$isIdentifier() && ":" === next.next.type.stringValue);
      _this.listener.beginLabeledStatement$2(next, labelCount);
      token = _this.parseStatement$1(token);
      _this.listener.endLabeledStatement$1(labelCount);
      return token;
    },
    parseExpressionStatement$1(token) {
      token = this.ensureSemicolon$1(this.parseExpression$1(token));
      this.listener.handleExpressionStatement$1(token);
      return token;
    },
    parseExpression$1(token) {
      var t1, token0, endGroup, next, _this = this;
      if (_this.expressionDepth++ > 500) {
        t1 = token.next;
        t1.toString;
        token0 = N.findNonZeroLengthToken(t1);
        _this.listener.handleRecoverableError$3(C.MessageCode_3hr, token0, token0);
        endGroup = t1.get$endGroup();
        if (endGroup != null) {
          next = t1;
          while (true) {
            if (!(next.type !== C.TokenType_Emx && next !== endGroup))
              break;
            t1 = next.next;
            t1.toString;
            token = next;
            next = t1;
          }
        } else
          for (next = t1; !N.isOneOf(next, C.List_oqK); token = next, next = t1) {
            t1 = next.next;
            t1.toString;
          }
        if (token.type !== C.TokenType_Emx) {
          token = _this.get$rewriter().insertSyntheticIdentifier$1(token);
          _this.listener.handleIdentifier$2(token, C.ExpressionIdentifierContext_H5Y);
        }
      } else
        token = "throw" === token.next.type.stringValue ? _this.parseThrowExpression$2(token, true) : _this.parsePrecedenceExpression$3(token, 1, true);
      --_this.expressionDepth;
      return token;
    },
    parseExpressionWithoutCascade$1(token) {
      return "throw" === token.next.type.stringValue ? this.parseThrowExpression$2(token, false) : this.parsePrecedenceExpression$3(token, 1, false);
    },
    canParseAsConditional$1(question) {
      var afterExpression1, t1, isConditional, _this = this,
        originalListener = _this.listener,
        originalRewriter = _this.cachedRewriter,
        nullListener = _this.listener = new Y.NullListener(null),
        undoableTokenStreamRewriter = new R.UndoableTokenStreamRewriter(H._setArrayType([], type$.JSArray_TokenStreamChange));
      _this.cachedRewriter = undoableTokenStreamRewriter;
      afterExpression1 = _this.parseExpressionWithoutCascade$1(question);
      if (!nullListener.hasErrors && ":" === afterExpression1.next.type.stringValue) {
        t1 = afterExpression1.next;
        t1.toString;
        _this.parseExpressionWithoutCascade$1(t1);
        isConditional = !nullListener.hasErrors && true;
      } else
        isConditional = false;
      undoableTokenStreamRewriter.undo$0();
      _this.listener = originalListener;
      _this.cachedRewriter = originalRewriter;
      return isConditional;
    },
    parsePrecedenceExpression$3(token, precedence, allowCascades) {
      var bangToken, typeArg, t1, t2, _this = this;
      token = _this.parseUnaryExpression$2(token, allowCascades);
      bangToken = token.next;
      bangToken = "!" === bangToken.type.stringValue ? bangToken : token;
      typeArg = M.computeMethodTypeArguments(bangToken);
      if (typeArg !== C.C_NoTypeParamOrArg) {
        if ("!" === bangToken.type.stringValue)
          _this.listener.handleNonNullAssertExpression$1(bangToken);
        token = typeArg.parseArguments$2(bangToken, _this);
        if ("(" !== token.next.type.stringValue) {
          t1 = _this.listener;
          t2 = bangToken.next;
          t2.toString;
          t1.handleTypeArgumentApplication$1(t2);
          typeArg = C.C_NoTypeParamOrArg;
        }
      }
      return _this._parsePrecedenceExpressionLoop$4(precedence, allowCascades, typeArg, token);
    },
    _parsePrecedenceExpressionLoop$4(precedence, allowCascades, typeArg, token) {
      var t1, t2, t3, level, enteredLoop, level0, t4, t5, lastBinaryExpressionLevel, lastCascade, token0, next0, t6, t7, operator, bangToken, not, typeInfo, colon, _this = this,
        _s12_ = "triple-shift",
        next = token.next,
        type = next.type,
        tokenLevel = _this._computePrecedence$1(next);
      for (t1 = type$.Message, t2 = type$.Template_of_Message_Function_Token, t3 = !allowCascades, level = tokenLevel, enteredLoop = false; level >= precedence; --level) {
        for (level0 = level + 1, t4 = level !== 7, t5 = level === 8, lastBinaryExpressionLevel = -1, lastCascade = null; tokenLevel === level; enteredLoop = true) {
          if (tokenLevel === 2) {
            if (t3)
              return token;
            else if (lastCascade != null && "?.." === next.type.stringValue) {
              token0 = N.findNonZeroLengthToken(next);
              _this.listener.handleRecoverableError$3(C.MessageCode_L5J, token0, token0);
            }
            token = _this.parseCascadeExpression$1(token);
            lastCascade = next;
          } else if (tokenLevel === 1) {
            next0 = token.next;
            t6 = next0.next;
            if (">=" === t6.type.stringValue) {
              t7 = t1._as(Z._withArgumentsExperimentNotEnabled(_s12_, "2.14"));
              _this.listener.handleRecoverableError$3(t7, next0, t6);
              t6 = _this.cachedRewriter;
              next = (t6 == null ? _this.cachedRewriter = new R.TokenStreamRewriterImpl() : t6).replaceNextTokensWithSyntheticToken$3(token, 2, C.TokenType_kr3);
              operator = next;
            } else {
              operator = next;
              next = next0;
            }
            token = "throw" === next.next.type.stringValue ? _this.parseThrowExpression$2(next, false) : _this.parsePrecedenceExpression$3(next, level, allowCascades);
            _this.listener.handleAssignmentExpression$1(operator);
          } else if (tokenLevel === 16) {
            if (type === C.TokenType_GNi || type === C.TokenType_jTn) {
              t6 = _this.listener;
              t7 = token.next;
              t7.toString;
              t6.handleUnaryPostfixAssignmentExpression$1(t7);
              token = next;
            } else if (type === C.TokenType_cYV) {
              _this.listener.handleNonNullAssertExpression$1(next);
              token = next;
            }
          } else if (tokenLevel === 17)
            if (type === C.TokenType_wCI || type === C.TokenType_ifb) {
              t6 = token.next;
              t6.toString;
              token = _this.parsePrimary$2(t6, C.ExpressionIdentifierContext_cW1);
              _this.listener.handleEndingBinaryExpression$1(next);
              bangToken = token.next;
              bangToken = "!" === bangToken.type.stringValue ? bangToken : token;
              typeArg = M.computeTypeParamOrArg(bangToken, false, false);
              t6 = typeArg.skip$1(0, bangToken).next;
              t6.toString;
              typeArg = M.mayFollowTypeArgs(t6) && !typeArg.get$recovered() ? typeArg : C.C_NoTypeParamOrArg;
              if (typeArg !== C.C_NoTypeParamOrArg) {
                if ("!" === bangToken.type.stringValue)
                  _this.listener.handleNonNullAssertExpression$1(bangToken);
                token = typeArg.parseArguments$2(bangToken, _this);
                if ("(" !== token.next.type.stringValue) {
                  t6 = _this.listener;
                  t7 = bangToken.next;
                  t7.toString;
                  t6.handleTypeArgumentApplication$1(t7);
                  typeArg = C.C_NoTypeParamOrArg;
                }
              }
            } else if (type === C.TokenType_5uk || type === C.TokenType_AGi)
              token = _this.parseArgumentOrIndexStar$3(token, typeArg, false);
            else if (type === C.TokenType_V43)
              token = _this.parseArgumentOrIndexStar$3(token, typeArg, true);
            else if (type === C.TokenType_Qq8) {
              _this.rewriteSquareBrackets$1(token);
              token = _this.parseArgumentOrIndexStar$3(token, C.C_NoTypeParamOrArg, false);
            } else {
              t6 = token.next;
              if (type === C.TokenType_cYV) {
                t7 = _this.listener;
                t6.toString;
                t7.handleNonNullAssertExpression$1(t6);
              } else {
                t6.toString;
                t2._as(C.Template__withArgumentsUnexpectedToken);
                token = N.findNonZeroLengthToken(t6);
                _this.listener.handleRecoverableError$3(C.Template__withArgumentsUnexpectedToken.withArguments.call$1(token), token, token);
              }
              token = next;
            }
          else if (type === C.Keyword_GVQ) {
            token = token.next;
            token0 = token.next;
            if ("!" === token0.type.stringValue)
              not = token0;
            else {
              token0 = token;
              not = null;
            }
            _this.listener.beginIsOperatorType$1(token);
            typeInfo = M.computeType(token0, true, false, false);
            if (typeInfo.get$isNullable()) {
              t6 = typeInfo.skipType$1(token0).next;
              t6.toString;
              if (!N.isOneOfOrEof(t6, C.List_IXH))
                typeInfo = typeInfo.get$asNonNullable();
            }
            token0 = typeInfo.ensureTypeNotVoid$2(token0, _this);
            _this.listener.endIsOperatorType$1(token);
            _this.listener.handleIsOperator$2(token, not);
            token = _this.skipChainedAsIsOperators$1(token0);
          } else if (type === C.Keyword_2jk) {
            t6 = token.next;
            t6.toString;
            _this.listener.beginAsOperatorType$1(t6);
            typeInfo = M.computeType(t6, true, false, false);
            if (typeInfo.get$isNullable()) {
              t7 = typeInfo.skipType$1(t6).next;
              t7.toString;
              if (!N.isOneOfOrEof(t7, C.List_IXH))
                typeInfo = typeInfo.get$asNonNullable();
            }
            token = typeInfo.ensureTypeNotVoid$2(t6, _this);
            _this.listener.endAsOperatorType$1(t6);
            _this.listener.handleAsOperator$1(t6);
            token = _this.skipChainedAsIsOperators$1(token);
          } else if (type === C.TokenType_V43) {
            t6 = token.next;
            t6.toString;
            _this.listener.beginConditionalExpression$1(t6);
            colon = _this.ensureColon$1("throw" === t6.next.type.stringValue ? _this.parseThrowExpression$2(t6, false) : _this.parsePrecedenceExpression$3(t6, 1, false));
            _this.listener.handleConditionalExpressionColon$0();
            token = "throw" === colon.next.type.stringValue ? _this.parseThrowExpression$2(colon, false) : _this.parsePrecedenceExpression$3(colon, 1, false);
            _this.listener.endConditionalExpression$2(t6, colon);
          } else {
            if (!t4 || t5)
              if (lastBinaryExpressionLevel === level) {
                token0 = N.findNonZeroLengthToken(next);
                _this.listener.handleRecoverableError$3(C.MessageCode_d4d, token0, token0);
              } else
                lastBinaryExpressionLevel = level;
            if (">>" === next.type.stringValue && next.offset + next.get$length(next) === next.next.offset) {
              t6 = next.next;
              if (">" === t6.type.stringValue) {
                t7 = t1._as(Z._withArgumentsExperimentNotEnabled(_s12_, "2.14"));
                _this.listener.handleRecoverableError$3(t7, next, t6);
                t6 = _this.cachedRewriter;
                next = (t6 == null ? _this.cachedRewriter = new R.TokenStreamRewriterImpl() : t6).replaceNextTokensWithSyntheticToken$3(token, 2, C.TokenType_mRX);
                operator = next;
              } else
                operator = next;
            } else
              operator = next;
            _this.listener.beginBinaryExpression$1(next);
            t6 = token.next;
            t6.toString;
            token = _this.parsePrecedenceExpression$3(t6, level0, allowCascades);
            _this.listener.endBinaryExpression$1(operator);
          }
          next = token.next;
          type = next.type;
          tokenLevel = _this._computePrecedence$1(next);
        }
        if (_this._recoverAtPrecedenceLevel && !_this._currentlyRecovering)
          if (_this._attemptPrecedenceLevelRecovery$5(token, precedence, level, allowCascades, typeArg)) {
            next = token.next;
            type = next.type;
            tokenLevel = _this._computePrecedence$1(next);
            level = level0;
          }
      }
      if (!enteredLoop && _this._recoverAtPrecedenceLevel && !_this._currentlyRecovering)
        if (_this._attemptPrecedenceLevelRecovery$5(token, precedence, -1, allowCascades, typeArg))
          return _this._parsePrecedenceExpressionLoop$4(precedence, allowCascades, typeArg, token);
      return token;
    },
    _attemptPrecedenceLevelRecovery$5(token, precedence, currentLevel, allowCascades, typeArg) {
      var replacements, t1, t2, t3, t4, i, replacement, originalListener, originalRewriter, nullListener, undoableTokenStreamRewriter, t5, replacement0, afterExpression, acceptRecovery, token0, _this = this,
        _s33_ = "Internal Error: Rewriting at eof.";
      _this._recoverAtPrecedenceLevel = false;
      replacements = C.Map_ATX1g.$index(0, token.next.get$lexeme());
      for (t1 = replacements.length, t2 = token.type === C.TokenType_Emx, t3 = type$.JSArray_TokenStreamChange, t4 = currentLevel >= 0, i = 0; i < t1; ++i) {
        replacement = replacements[i];
        if (t4)
          if (replacement.precedence > currentLevel)
            continue;
        _this._currentlyRecovering = true;
        originalListener = _this.listener;
        originalRewriter = _this.cachedRewriter;
        nullListener = new Y.NullListener(null);
        _this.listener = nullListener;
        undoableTokenStreamRewriter = _this.cachedRewriter = new R.UndoableTokenStreamRewriter(H._setArrayType([], t3));
        t5 = token.next;
        t5.toString;
        replacement0 = L.ReplacementToken$(replacement, t5);
        if (!(!t2 || token.offset < 0))
          H.throwExpression(_s33_);
        t5 = token.next;
        t5.toString;
        undoableTokenStreamRewriter._setNext$2(replacement0, t5);
        undoableTokenStreamRewriter._setNext$2(token, replacement0);
        t5 = replacement0.next.next;
        t5.toString;
        undoableTokenStreamRewriter._setNext$2(replacement0, t5);
        afterExpression = _this._parsePrecedenceExpressionLoop$4(precedence, allowCascades, typeArg, token);
        t5 = afterExpression.next;
        t5.toString;
        if (!nullListener.hasErrors)
          if (token !== afterExpression)
            if (!N.isOneOfOrEof(t5, C.List_cdS))
              t5 = t5.type === C.TokenType_IQp && C.Map_ATX1g.containsKey$1(t5.get$lexeme());
            else
              t5 = true;
          else
            t5 = false;
        else
          t5 = false;
        acceptRecovery = t5 && true;
        _this._currentlyRecovering = false;
        undoableTokenStreamRewriter.undo$0();
        _this.listener = originalListener;
        _this.cachedRewriter = originalRewriter;
        if (acceptRecovery) {
          t1 = token.next;
          t3 = type$.Message._as(Z._withArgumentsBinaryOperatorWrittenOut(t1.get$lexeme(), replacement.lexeme));
          token0 = N.findNonZeroLengthToken(t1);
          _this.listener.handleRecoverableError$3(t3, token0, token0);
          t3 = _this.cachedRewriter;
          t1 = t3 == null ? _this.cachedRewriter = new R.TokenStreamRewriterImpl() : t3;
          t3 = token.next;
          t3.toString;
          replacement = L.ReplacementToken$(replacement, t3);
          if (!(!t2 || token.offset < 0))
            H.throwExpression(_s33_);
          t2 = token.next;
          t2.toString;
          t1._setNext$2(replacement, t2);
          t1._setNext$2(token, replacement);
          t2 = replacement.next.next;
          t2.toString;
          t1._setNext$2(replacement, t2);
          return true;
        }
      }
      return false;
    },
    _computePrecedence$1(token) {
      var nextType,
        type = token.type;
      if (type === C.TokenType_cYV) {
        nextType = token.next.type;
        if (nextType === C.TokenType_wCI || nextType === C.TokenType_V43 || nextType === C.TokenType_5uk || nextType === C.TokenType_AGi || nextType === C.TokenType_ifb)
          return 17;
        return 16;
      } else if (type === C.TokenType_4XV) {
        if (token.next.type === C.TokenType_0Ef && token.offset + token.get$length(token) === token.next.offset)
          return 1;
      } else if (type === C.TokenType_V43 && "[" === token.next.type.stringValue) {
        if (!this.canParseAsConditional$1(token))
          return 17;
      } else if (type === C.TokenType_IQp)
        if (!this._currentlyRecovering && C.Map_ATX1g.containsKey$1(token.get$lexeme()))
          this._recoverAtPrecedenceLevel = true;
      return type.precedence;
    },
    parseCascadeExpression$1(token) {
      var next, token0, typeArg, _this = this,
        t1 = token.next;
      t1.toString;
      _this.listener.beginCascade$1(t1);
      if ("[" === t1.next.type.stringValue)
        token = _this.parseArgumentOrIndexStar$3(t1, C.C_NoTypeParamOrArg, false);
      else {
        token = _this.parseSend$2(t1, C.ExpressionIdentifierContext_cW1);
        _this.listener.handleEndingBinaryExpression$1(t1);
      }
      t1 = token.next;
      t1.toString;
      next = t1;
      do {
        t1 = next.type.stringValue;
        if ("." === t1 || "?." === t1) {
          token0 = _this.parseSend$2(next, C.ExpressionIdentifierContext_cW1);
          t1 = token0.next;
          t1.toString;
          _this.listener.handleEndingBinaryExpression$1(next);
          next = t1;
        } else if ("!" === t1) {
          _this.listener.handleNonNullAssertExpression$1(next);
          t1 = next.next;
          t1.toString;
          token0 = next;
          next = t1;
        } else
          token0 = token;
        typeArg = M.computeMethodTypeArguments(token0);
        if (typeArg !== C.C_NoTypeParamOrArg) {
          token0 = typeArg.parseArguments$2(token0, _this);
          next = token0.next;
          if ("(" !== next.type.stringValue) {
            _this.listener.handleTypeArgumentApplication$1(next);
            typeArg = C.C_NoTypeParamOrArg;
          }
        }
        if (next.type === C.TokenType_Qq8)
          _this.rewriteSquareBrackets$1(token0);
        token0 = _this.parseArgumentOrIndexStar$3(token0, typeArg, false);
        t1 = token0.next;
        t1.toString;
        if (token !== token0) {
          next = t1;
          token = token0;
          continue;
        } else
          break;
      } while (true);
      if (t1.type.precedence === 1) {
        token = _this.parseExpressionWithoutCascade$1(t1);
        _this.listener.handleAssignmentExpression$1(t1);
      } else
        token = token0;
      _this.listener.endCascade$0();
      return token;
    },
    parseUnaryExpression$2(token, allowCascades) {
      var t2, t3, token0, identifier, typeArg, afterTypeArguments, _this = this,
        t1 = token.next,
        value = t1.type.stringValue;
      if (value === "await") {
        if (_this.asyncState === C.AsyncModifier_0)
          if (!_this.looksLikeExpression$1(t1))
            return _this.parsePrimary$2(token, C.ExpressionIdentifierContext_H5Y);
        t1 = token.next;
        t1.toString;
        _this.listener.beginAwaitExpression$1(t1);
        token = _this.parsePrecedenceExpression$3(t1, 16, allowCascades);
        t2 = _this.asyncState;
        if (t2 === C.AsyncModifier_2 || t2 === C.AsyncModifier_3) {
          t2 = _this.listener;
          t3 = token.next;
          t3.toString;
          t2.endAwaitExpression$2(t1, t3);
        } else {
          token0 = N.findNonZeroLengthToken(t1);
          _this.listener.handleRecoverableError$3(C.MessageCode_t2b, token0, token0);
          t2 = _this.listener;
          t3 = token.next;
          t3.toString;
          t2.endInvalidAwaitExpression$3(t1, t3, C.MessageCode_t2b);
        }
        return token;
      } else if (value === "+") {
        _this.rewriteAndRecover$3(token, C.MessageCode_UxB, L.SyntheticStringToken$(C.TokenType_IQp, "", t1.offset, null));
        return _this.parsePrimary$2(token, C.ExpressionIdentifierContext_H5Y);
      } else if (value === "!" || value === "-" || value === "~") {
        token = _this.parsePrecedenceExpression$3(t1, 16, allowCascades);
        _this.listener.handleUnaryPrefixExpression$1(t1);
        return token;
      } else if (value === "++" || value === "--") {
        token = _this.parsePrecedenceExpression$3(t1, 16, allowCascades);
        _this.listener.handleUnaryPrefixAssignmentExpression$1(t1);
        return token;
      } else {
        t1 = t1.get$isIdentifier();
        if (t1) {
          identifier = token.next;
          t1 = identifier.next;
          if ("." === t1.type.stringValue) {
            t1 = t1.next;
            t1.toString;
            identifier = t1;
          }
          if (identifier.get$isIdentifier())
            if ("<" === identifier.next.type.stringValue) {
              typeArg = M.computeTypeParamOrArg(identifier, false, false);
              if (typeArg !== C.C_NoTypeParamOrArg) {
                afterTypeArguments = typeArg.skip$1(0, identifier).next;
                if ("." === afterTypeArguments.type.stringValue) {
                  t1 = afterTypeArguments.next;
                  t1.toString;
                  if (_this._isNewOrIdentifier$1(t1) && "(" === t1.next.type.stringValue) {
                    _this.listener.beginImplicitCreationExpression$1(token);
                    token0 = _this.parseConstructorInvocationArguments$1(_this.parseConstructorReference$3(token, C.ConstructorReferenceContext_2, typeArg));
                    _this.listener.endImplicitCreationExpression$1(token);
                    return token0;
                  }
                }
              }
            }
        }
      }
      return _this.parsePrimary$2(token, C.ExpressionIdentifierContext_H5Y);
    },
    parseArgumentOrIndexStar$3(token, typeArg, checkedNullAware) {
      var t2, t3, next, t4, t5, potentialNullAware, question, openSquareBracket, t0, old, token0, endGroup, bangToken, _this = this,
        t1 = token.next;
      t1.toString;
      for (t2 = !checkedNullAware, t3 = type$.Message, next = t1; true;) {
        t4 = next.type.stringValue;
        t5 = "?" === t4;
        potentialNullAware = t5 && "[" === next.next.type.stringValue;
        if (potentialNullAware && t2)
          if (_this.canParseAsConditional$1(next))
            potentialNullAware = false;
        if ("[" === t4 || potentialNullAware) {
          if (t5) {
            t4 = next.next;
            t4.toString;
            question = next;
            next = t4;
            openSquareBracket = next;
            t0 = next;
          } else {
            openSquareBracket = next;
            question = null;
          }
          old = _this.mayParseFunctionExpressions;
          _this.mayParseFunctionExpressions = true;
          token = _this.parseExpression$1(next);
          t4 = token.next;
          t4.toString;
          _this.mayParseFunctionExpressions = old;
          if ("]" !== t4.type.stringValue) {
            t5 = t3._as(Z._withArgumentsExpectedButGot("]"));
            token0 = N.findNonZeroLengthToken(t4);
            _this.listener.handleRecoverableError$3(t5, token0, token0);
            endGroup = openSquareBracket.get$endGroup();
            if (endGroup.get$isSynthetic()) {
              t4 = _this.cachedRewriter;
              next = (t4 == null ? _this.cachedRewriter = new R.TokenStreamRewriterImpl() : t4).moveSynthetic$2(token, endGroup);
            } else
              next = endGroup;
          } else
            next = t4;
          _this.listener.handleIndexedExpression$3(question, openSquareBracket, next);
          bangToken = next.next;
          bangToken = "!" === bangToken.type.stringValue ? bangToken : next;
          typeArg = M.computeTypeParamOrArg(bangToken, false, false);
          t4 = typeArg.skip$1(0, bangToken).next;
          t4.toString;
          typeArg = M.mayFollowTypeArgs(t4) && !typeArg.get$recovered() ? typeArg : C.C_NoTypeParamOrArg;
          if (typeArg !== C.C_NoTypeParamOrArg) {
            if ("!" === bangToken.type.stringValue)
              _this.listener.handleNonNullAssertExpression$1(bangToken);
            token = typeArg.parseArguments$2(bangToken, _this);
            if ("(" !== token.next.type.stringValue) {
              t4 = _this.listener;
              t5 = bangToken.next;
              t5.toString;
              t4.handleTypeArgumentApplication$1(t5);
              typeArg = C.C_NoTypeParamOrArg;
            }
          } else
            token = next;
          t4 = token.next;
          t4.toString;
          next = t4;
        } else {
          if ("(" === t4) {
            if (typeArg === C.C_NoTypeParamOrArg)
              _this.listener.handleNoTypeArguments$1(next);
            t4 = token.next;
            t4.toString;
            token = _this.parseArgumentsRest$1(t4);
            _this.listener.handleSend$2(t1, token);
            bangToken = token.next;
            bangToken = "!" === bangToken.type.stringValue ? bangToken : token;
            typeArg = M.computeTypeParamOrArg(bangToken, false, false);
            t4 = typeArg.skip$1(0, bangToken).next;
            t4.toString;
            typeArg = M.mayFollowTypeArgs(t4) && !typeArg.get$recovered() ? typeArg : C.C_NoTypeParamOrArg;
            if (typeArg !== C.C_NoTypeParamOrArg) {
              if ("!" === bangToken.type.stringValue)
                _this.listener.handleNonNullAssertExpression$1(bangToken);
              token = typeArg.parseArguments$2(bangToken, _this);
              if ("(" !== token.next.type.stringValue) {
                t4 = _this.listener;
                t5 = bangToken.next;
                t5.toString;
                t4.handleTypeArgumentApplication$1(t5);
                typeArg = C.C_NoTypeParamOrArg;
              }
            }
            t4 = token.next;
            t4.toString;
          } else
            break;
          next = t4;
        }
      }
      return token;
    },
    parsePrimary$2(token, context) {
      var token0, t1, kind, value, next, t2, _this = this;
      _this._tryRewriteNewToIdentifier$2(token, context);
      token0 = token.next;
      t1 = token0.type;
      kind = t1.kind;
      if (kind === 97)
        return _this.parseSendOrFunctionLiteral$2(token, context);
      else if (kind === 105 || kind === 120) {
        _this.listener.handleLiteralInt$1(token0);
        return token0;
      } else if (kind === 100) {
        _this.listener.handleLiteralDouble$1(token0);
        return token0;
      } else if (kind === 39)
        return _this.parseLiteralString$1(token);
      else if (kind === 35)
        return _this.parseLiteralSymbol$1(token);
      else if (kind === 107) {
        value = t1.stringValue;
        if (value === "true" || value === "false") {
          _this.listener.handleLiteralBool$1(token0);
          return token0;
        } else if (value === "null") {
          _this.listener.handleLiteralNull$1(token0);
          return token0;
        } else if (value === "this") {
          _this.listener.handleThisExpression$2(token0, context);
          next = token0.next;
          if ("(" === next.type.stringValue) {
            _this.listener.handleNoTypeArguments$1(next);
            t1 = token0.next;
            t1.toString;
            token = _this.parseArgumentsRest$1(t1);
            t1 = _this.listener;
            t2 = token.next;
            t2.toString;
            t1.handleSend$2(token0, t2);
          } else
            token = token0;
          return token;
        } else if (value === "super") {
          _this.listener.handleSuperExpression$2(token0, context);
          next = token0.next;
          t1 = next.type.stringValue;
          if ("(" === t1) {
            _this.listener.handleNoTypeArguments$1(next);
            t1 = token0.next;
            t1.toString;
            token = _this.parseArgumentsRest$1(t1);
            t1 = _this.listener;
            t2 = token.next;
            t2.toString;
            t1.handleSend$2(token0, t2);
          } else {
            if ("?." === t1) {
              token = N.findNonZeroLengthToken(next);
              _this.listener.handleRecoverableError$3(C.MessageCode_B8J, token, token);
            }
            token = token0;
          }
          return token;
        } else if (value === "new")
          return _this.parseNewExpression$1(token);
        else if (value === "const")
          return _this.parseConstExpression$1(token);
        else if (value === "void")
          return _this.parseSendOrFunctionLiteral$2(token, context);
        else {
          if (_this.asyncState !== C.AsyncModifier_0)
            t1 = value === "yield" || value === "async";
          else
            t1 = false;
          if (!t1)
            if (value === "assert")
              return _this.parseAssert$2(token, C.Assert_0);
            else if (token0.get$isIdentifier())
              return _this.parseSendOrFunctionLiteral$2(token, context);
            else if (value === "return") {
              t1 = token.next;
              t1.toString;
              _this.reportRecoverableErrorWithToken$2(t1, C.Template__withArgumentsUnexpectedToken);
              return _this.parsePrimary$2(t1, context);
            }
        }
      } else if (kind === 40)
        return _this.parseParenthesizedExpressionOrFunctionLiteral$1(token);
      else if (kind === 91 || "[]" === t1.stringValue) {
        _this.listener.handleNoTypeArguments$1(token0);
        return _this.parseLiteralListSuffix$2(token, null);
      } else if (kind === 123) {
        _this.listener.handleNoTypeArguments$1(token0);
        return _this.parseLiteralSetOrMapSuffix$2(token, null);
      } else if (kind === 60)
        return _this.parseLiteralListSetMapOrFunction$2(token, null);
      return _this.parseSend$2(token, context);
    },
    parseParenthesizedExpressionOrFunctionLiteral$1(token) {
      var _this = this,
        next = token.next,
        nextToken = next.get$endGroup().next,
        t1 = nextToken.type,
        kind = t1.kind,
        t2 = _this.mayParseFunctionExpressions;
      if (t2)
        if (kind === 130 || kind === 123) {
          _this.listener.handleNoTypeVariables$1(next);
          return _this.parseFunctionExpression$1(token);
        } else if (kind === 107 || kind === 97) {
          t1 = t1.stringValue;
          if ("async" === t1 || "sync" === t1) {
            _this.listener.handleNoTypeVariables$1(next);
            return _this.parseFunctionExpression$1(token);
          }
          kind = nextToken.next.type.kind;
          if (kind === 130 || kind === 123) {
            _this.listener.handleNoTypeVariables$1(next);
            return _this.parseFunctionExpression$1(token);
          }
        }
      _this.mayParseFunctionExpressions = true;
      t1 = token.next;
      t1.toString;
      token = _this.parseExpressionInParenthesisRest$1(t1);
      _this.listener.handleParenthesizedExpression$1(t1);
      _this.mayParseFunctionExpressions = t2;
      return token;
    },
    ensureParenthesizedCondition$1(token) {
      var t1, token0, _this = this,
        openParen = token.next;
      if ("(" !== openParen.type.stringValue) {
        t1 = type$.Message._as(Z._withArgumentsExpectedToken("("));
        token0 = N.findNonZeroLengthToken(openParen);
        _this.listener.handleRecoverableError$3(t1, token0, token0);
        openParen = _this.get$rewriter().insertParens$2(token, false);
      }
      token = _this.parseExpressionInParenthesisRest$1(openParen);
      _this.listener.handleParenthesizedCondition$1(openParen);
      return token;
    },
    parseExpressionInParenthesisRest$1(token) {
      type$.BeginToken._as(token);
      return this.ensureCloseParen$2(this.parseExpression$1(token), token);
    },
    parseLiteralListSuffix$2(token, constKeyword) {
      var t1, t2, old, count, next, info, ifCount, comma, message, token1, _this = this,
        token0 = token.next;
      if ("[]" === token0.type.stringValue) {
        token = _this.rewriteSquareBrackets$1(token).next;
        t1 = _this.listener;
        t2 = token.next;
        t2.toString;
        t1.handleLiteralList$4(0, token, constKeyword, t2);
        t2 = token.next;
        t2.toString;
        return t2;
      }
      old = _this.mayParseFunctionExpressions;
      _this.mayParseFunctionExpressions = true;
      for (token = token0, count = 0; true; token = next) {
        next = token.next;
        if ("]" === next.type.stringValue) {
          token = next;
          break;
        }
        info = N.computeLiteralEntry(token);
        for (ifCount = 0; info != null;) {
          token = info.get$hasEntry() ? _this.parseExpression$1(token) : info.parse$2(token, _this);
          ifCount += info.ifConditionDelta;
          info = info.computeNext$1(token);
        }
        next = token.next;
        ++count;
        t1 = next.type.stringValue;
        if ("," !== t1) {
          if ("]" === t1) {
            token = next;
            break;
          }
          if (!N.looksLikeLiteralEntry(next)) {
            if (token0.get$endGroup().get$isSynthetic()) {
              t1 = _this.cachedRewriter;
              if (t1 == null)
                t1 = _this.cachedRewriter = new R.TokenStreamRewriterImpl();
              t2 = token0.get$endGroup();
              t2.toString;
              token = t1.moveSynthetic$2(token, t2);
            } else {
              t1 = type$.Message._as(Z._withArgumentsExpectedButGot("]"));
              token = N.findNonZeroLengthToken(next);
              _this.listener.handleRecoverableError$3(t1, token, token);
              t1 = token0.get$endGroup();
              t1.toString;
              token = t1;
            }
            break;
          }
          comma = new L.SyntheticToken(C.TokenType_O55, next.offset, null);
          comma._setCommentParent$1(null);
          message = ifCount > 0 ? C.MessageCode_M8m : Z._withArgumentsExpectedButGot(",");
          t1 = token.next;
          t1.toString;
          token1 = N.findNonZeroLengthToken(t1);
          _this.listener.handleRecoverableError$3(message, token1, token1);
          t1 = _this.cachedRewriter;
          if (t1 == null)
            t1 = _this.cachedRewriter = new R.TokenStreamRewriterImpl();
          if (!(token.type !== C.TokenType_Emx || token.offset < 0))
            H.throwExpression("Internal Error: Rewriting at eof.");
          t2 = token.next;
          t2.toString;
          t1._setNext$2(comma, t2);
          t1._setNext$2(token, comma);
          next = comma;
        }
      }
      _this.mayParseFunctionExpressions = old;
      _this.listener.handleLiteralList$4(count, token0, constKeyword, token);
      return token;
    },
    parseLiteralSetOrMapSuffix$2(token, constKeyword) {
      var next, old, hasSetEntry, token0, count, info, t1, isMapEntry, t2, t3, ifCount, comma, message, token1, _this = this, _null = null;
      token = token.next;
      next = token.next;
      if ("}" === next.type.stringValue) {
        _this.listener.handleLiteralSetOrMap$5(0, token, constKeyword, next, false);
        return next;
      }
      old = _this.mayParseFunctionExpressions;
      _this.mayParseFunctionExpressions = true;
      for (hasSetEntry = _null, token0 = token, count = 0; true;) {
        info = N.computeLiteralEntry(token0);
        if (info === C.LiteralEntryInfo_true_0) {
          token0 = _this.parseExpression$1(token0);
          t1 = token0.next;
          isMapEntry = ":" === t1.type.stringValue;
          if (hasSetEntry == null)
            hasSetEntry = !isMapEntry;
          if (isMapEntry) {
            token0 = _this.parseExpression$1(t1);
            t2 = _this.listener;
            t3 = token0.next;
            t3.toString;
            t2.handleLiteralMapEntry$2(t1, t3);
          }
          ifCount = 0;
        } else
          for (ifCount = 0; info != null;) {
            if (info.get$hasEntry()) {
              token0 = _this.parseExpression$1(token0);
              t1 = token0.next;
              if (":" === t1.type.stringValue) {
                token0 = _this.parseExpression$1(t1);
                t2 = _this.listener;
                t3 = token0.next;
                t3.toString;
                t2.handleLiteralMapEntry$2(t1, t3);
              }
            } else
              token0 = info.parse$2(token0, _this);
            ifCount += info.ifConditionDelta;
            info = info.computeNext$1(token0);
          }
        ++count;
        next = token0.next;
        if ("," === next.type.stringValue) {
          t1 = next.next;
          t1.toString;
          comma = next;
          next = t1;
          token0 = comma;
        } else
          comma = _null;
        if ("}" === next.type.stringValue) {
          t1 = _this.listener;
          t1.handleLiteralSetOrMap$5(count, token, constKeyword, next, hasSetEntry === true);
          _this.mayParseFunctionExpressions = old;
          return next;
        }
        if (comma == null) {
          if (N.looksLikeLiteralEntry(next)) {
            comma = new L.SyntheticToken(C.TokenType_O55, next.offset, _null);
            comma._setCommentParent$1(_null);
            message = ifCount > 0 ? C.MessageCode_M8m : Z._withArgumentsExpectedButGot(",");
            t1 = token0.next;
            t1.toString;
            token1 = N.findNonZeroLengthToken(t1);
            _this.listener.handleRecoverableError$3(message, token1, token1);
            t1 = _this.cachedRewriter;
            if (t1 == null)
              t1 = _this.cachedRewriter = new R.TokenStreamRewriterImpl();
            if (!(token0.type !== C.TokenType_Emx || token0.offset < 0))
              H.throwExpression("Internal Error: Rewriting at eof.");
            t2 = token0.next;
            t2.toString;
            t1._setNext$2(comma, t2);
            t1._setNext$2(token0, comma);
          } else {
            t1 = type$.Message._as(Z._withArgumentsExpectedButGot("}"));
            token0 = N.findNonZeroLengthToken(next);
            _this.listener.handleRecoverableError$3(t1, token0, token0);
            t1 = token.get$endGroup();
            t1.toString;
            t2 = _this.listener;
            t2.handleLiteralSetOrMap$5(count, token, constKeyword, t1, hasSetEntry === true);
            _this.mayParseFunctionExpressions = old;
            return t1;
          }
          token0 = comma;
        }
      }
    },
    parseLiteralListSetMapOrFunction$2(start, constKeyword) {
      var token, next, t1, kind, token0, _this = this,
        typeParamOrArg = M.computeTypeParamOrArg(start, true, false);
      if ("(" === typeParamOrArg.skip$1(0, start).next.type.stringValue) {
        if (constKeyword != null)
          _this.reportRecoverableErrorWithToken$2(constKeyword, C.Template__withArgumentsUnexpectedToken);
        token = typeParamOrArg.parseVariables$2(start, _this);
        next = token.next.get$endGroup().next;
        t1 = next.type;
        kind = t1.kind;
        if (kind !== 130)
          if (kind !== 123)
            if (kind === 107) {
              t1 = t1.stringValue;
              t1 = "async" !== t1 && "sync" !== t1;
            } else
              t1 = true;
          else
            t1 = false;
        else
          t1 = false;
        if (t1)
          _this.reportRecoverableErrorWithToken$2(next, C.Template__withArgumentsUnexpectedToken);
        return _this.parseFunctionExpression$1(token);
      }
      token = typeParamOrArg.parseArguments$2(start, _this);
      next = token.next;
      t1 = next.type.stringValue;
      if ("{" === t1) {
        if (typeParamOrArg.get$typeArgumentCount() > 2) {
          t1 = start.next;
          t1.toString;
          _this.listener.handleRecoverableError$3(C.MessageCode_gkc, t1, token);
        }
        return _this.parseLiteralSetOrMapSuffix$2(token, constKeyword);
      }
      if ("[" !== t1 && "[]" !== t1) {
        t1 = type$.Message._as(Z._withArgumentsExpectedButGot("["));
        token0 = N.findNonZeroLengthToken(next);
        _this.listener.handleRecoverableError$3(t1, token0, token0);
        _this.get$rewriter().insertToken$2(token, L.SyntheticToken$(C.TokenType_Qq8, token.next.offset));
      }
      return _this.parseLiteralListSuffix$2(token, constKeyword);
    },
    parseSendOrFunctionLiteral$2(token, context) {
      var typeInfo, beforeName, $name, typeParam, next, t1, formals, t2, _this = this;
      if (!_this.mayParseFunctionExpressions)
        return _this.parseSend$2(token, context);
      typeInfo = M.computeType(token, false, false, false);
      beforeName = typeInfo.skipType$1(token);
      $name = beforeName.next;
      if ($name.get$isIdentifier()) {
        typeParam = M.computeTypeParamOrArg($name, false, false);
        next = typeParam.skip$1(0, $name).next;
        if ("(" === next.type.stringValue) {
          t1 = next.get$endGroup().next.type.stringValue;
          if ("{" === t1 || "=>" === t1 || "async" === t1 || "sync" === t1) {
            formals = typeParam.parseVariables$2($name, _this);
            t1 = _this.listener;
            t2 = token.next;
            t2.toString;
            t1.beginNamedFunctionExpression$1(t2);
            typeInfo.parseType$2(token, _this);
            t2 = token.next;
            t2.toString;
            return _this.parseNamedFunctionRest$4(beforeName, t2, formals, true);
          }
        }
      }
      return _this.parseSend$2(token, context);
    },
    parseConstructorInvocationArguments$1(token) {
      var typeArg, t1, token0, _this = this,
        next = token.next;
      if ("(" !== next.type.stringValue) {
        typeArg = M.computeTypeParamOrArg(token, false, false);
        if (typeArg === C.C_NoTypeParamOrArg) {
          t1 = type$.Message._as(Z._withArgumentsExpectedAfterButGot("("));
          token0 = N.findNonZeroLengthToken(token);
          _this.listener.handleRecoverableError$3(t1, token0, token0);
        } else {
          token0 = N.findNonZeroLengthToken(token);
          _this.listener.handleRecoverableError$3(C.MessageCode_Iue, token0, token0);
          token = typeArg.parseArguments$2(token, _this);
          _this.listener.handleInvalidTypeArguments$1(token);
          t1 = token.next;
          t1.toString;
          next = t1;
        }
        if ("(" !== next.type.stringValue)
          next = _this.get$rewriter().insertParens$2(token, false);
      }
      return _this.parseArgumentsRest$1(next);
    },
    parseNewExpression$1(token) {
      var t2, identifier, value, potentialTypeArg, _this = this,
        t1 = token.next;
      t1.toString;
      t2 = _this.isNextIdentifier$1(t1);
      identifier = t1.next;
      if (t2) {
        value = identifier.get$lexeme();
        if ((value === "Map" || value === "Set") && "." !== identifier.next.type.stringValue) {
          potentialTypeArg = M.computeTypeParamOrArg(identifier, false, false);
          if ("{" === potentialTypeArg.skip$1(0, identifier).next.type.stringValue) {
            t2 = type$.Message._as(Z._withArgumentsLiteralWithClassAndNew(value.toLowerCase(), identifier));
            _this.listener.handleRecoverableError$3(t2, t1, identifier);
            return _this.parsePrimary$2(identifier, C.ExpressionIdentifierContext_H5Y);
          }
        } else if (value === "List" && "." !== identifier.next.type.stringValue) {
          potentialTypeArg = M.computeTypeParamOrArg(identifier, false, false);
          t2 = potentialTypeArg.skip$1(0, identifier).next.type.stringValue;
          if ("[" === t2 || "[]" === t2) {
            t2 = type$.Message._as(Z._withArgumentsLiteralWithClassAndNew(value.toLowerCase(), identifier));
            _this.listener.handleRecoverableError$3(t2, t1, identifier);
            return _this.parsePrimary$2(identifier, C.ExpressionIdentifierContext_H5Y);
          }
        } else
          potentialTypeArg = null;
      } else {
        value = identifier.get$lexeme();
        if (value === "<") {
          potentialTypeArg = M.computeTypeParamOrArg(t1, false, false);
          t2 = potentialTypeArg.skip$1(0, t1).next.type.stringValue;
          if ("{" === t2 || "[" === t2 || "[]" === t2) {
            token = N.findNonZeroLengthToken(t1);
            _this.listener.handleRecoverableError$3(C.MessageCode_so3, token, token);
            return _this.parsePrimary$2(t1, C.ExpressionIdentifierContext_H5Y);
          }
        } else {
          if (value === "{" || value === "[" || value === "[]") {
            token = N.findNonZeroLengthToken(t1);
            _this.listener.handleRecoverableError$3(C.MessageCode_so3, token, token);
            return _this.parsePrimary$2(t1, C.ExpressionIdentifierContext_H5Y);
          }
          potentialTypeArg = null;
        }
      }
      _this.listener.beginNewExpression$1(t1);
      token = _this.parseConstructorInvocationArguments$1(_this.parseConstructorReference$3(t1, C.ConstructorReferenceContext_0, potentialTypeArg));
      _this.listener.endNewExpression$1(t1);
      return token;
    },
    parseConstExpression$1(token) {
      var next, value, t1, t2, lexeme, potentialTypeArg, nextValue, token0, _this = this;
      token = token.next;
      next = token.next;
      value = next.type.stringValue;
      if (value === "[" || value === "[]") {
        _this.listener.beginConstLiteral$1(next);
        _this.listener.handleNoTypeArguments$1(next);
        token = _this.parseLiteralListSuffix$2(token, token);
        t1 = _this.listener;
        t2 = token.next;
        t2.toString;
        t1.endConstLiteral$1(t2);
        return token;
      }
      if (value === "{") {
        _this.listener.beginConstLiteral$1(next);
        _this.listener.handleNoTypeArguments$1(next);
        token = _this.parseLiteralSetOrMapSuffix$2(token, token);
        t1 = _this.listener;
        t2 = token.next;
        t2.toString;
        t1.endConstLiteral$1(t2);
        return token;
      }
      if (value === "<") {
        _this.listener.beginConstLiteral$1(next);
        token = _this.parseLiteralListSetMapOrFunction$2(token, token);
        t1 = _this.listener;
        t2 = token.next;
        t2.toString;
        t1.endConstLiteral$1(t2);
        return token;
      }
      lexeme = next.get$lexeme();
      t1 = next.next;
      t1.toString;
      if ((lexeme === "Map" || lexeme === "Set") && "." !== t1.type.stringValue) {
        potentialTypeArg = M.computeTypeParamOrArg(next, false, false);
        if ("{" === potentialTypeArg.skip$1(0, next).next.type.stringValue) {
          nextValue = t1.type.stringValue;
          if (nextValue === "{") {
            t2 = type$.Message._as(Z._withArgumentsLiteralWithClass(lexeme.toLowerCase(), next));
            token0 = N.findNonZeroLengthToken(next);
            _this.listener.handleRecoverableError$3(t2, token0, token0);
            _this.listener.beginConstLiteral$1(t1);
            _this.listener.handleNoTypeArguments$1(t1);
            token = _this.parseLiteralSetOrMapSuffix$2(next, token);
            t1 = _this.listener;
            t2 = token.next;
            t2.toString;
            t1.endConstLiteral$1(t2);
            return token;
          }
          if (nextValue === "<") {
            t2 = type$.Message._as(Z._withArgumentsLiteralWithClass(lexeme.toLowerCase(), next));
            token0 = N.findNonZeroLengthToken(next);
            _this.listener.handleRecoverableError$3(t2, token0, token0);
            _this.listener.beginConstLiteral$1(t1);
            token = _this.parseLiteralListSetMapOrFunction$2(next, token);
            t1 = _this.listener;
            t2 = token.next;
            t2.toString;
            t1.endConstLiteral$1(t2);
            return token;
          }
        }
      } else if (lexeme === "List" && "." !== t1.type.stringValue) {
        potentialTypeArg = M.computeTypeParamOrArg(next, false, false);
        t2 = potentialTypeArg.skip$1(0, next).next.type.stringValue;
        if ("[" === t2 || "[]" === t2) {
          nextValue = t1.type.stringValue;
          if (nextValue === "[" || nextValue === "[]") {
            t2 = type$.Message._as(Z._withArgumentsLiteralWithClass(lexeme.toLowerCase(), next));
            token0 = N.findNonZeroLengthToken(next);
            _this.listener.handleRecoverableError$3(t2, token0, token0);
            _this.listener.beginConstLiteral$1(t1);
            _this.listener.handleNoTypeArguments$1(t1);
            token = _this.parseLiteralListSuffix$2(next, token);
            t1 = _this.listener;
            t2 = token.next;
            t2.toString;
            t1.endConstLiteral$1(t2);
            return token;
          }
          if (nextValue === "<") {
            t2 = type$.Message._as(Z._withArgumentsLiteralWithClass(lexeme.toLowerCase(), next));
            token0 = N.findNonZeroLengthToken(next);
            _this.listener.handleRecoverableError$3(t2, token0, token0);
            _this.listener.beginConstLiteral$1(t1);
            token = _this.parseLiteralListSetMapOrFunction$2(next, token);
            t1 = _this.listener;
            t2 = token.next;
            t2.toString;
            t1.endConstLiteral$1(t2);
            return token;
          }
        }
      } else
        potentialTypeArg = null;
      _this.listener.beginConstExpression$1(token);
      token0 = _this.parseConstructorInvocationArguments$1(_this.parseConstructorReference$3(token, C.ConstructorReferenceContext_1, potentialTypeArg));
      _this.listener.endConstExpression$1(token);
      return token0;
    },
    parseLiteralString$1(token) {
      var token0, count, _this = this,
        old = _this.mayParseFunctionExpressions;
      _this.mayParseFunctionExpressions = true;
      token0 = _this.parseSingleLiteralString$1(token);
      for (count = 1; token0.next.type.kind === 39;) {
        token0 = _this.parseSingleLiteralString$1(token0);
        ++count;
      }
      if (count > 1)
        _this.listener.handleStringJuxtaposition$2(token, count);
      _this.mayParseFunctionExpressions = old;
      return token0;
    },
    parseLiteralSymbol$1(token) {
      var next, t2, count, _this = this,
        t1 = token.next;
      t1.toString;
      _this.listener.beginLiteralSymbol$1(t1);
      next = t1.next;
      t2 = next.type;
      if (t2.isUserDefinableOperator) {
        _this.listener.handleOperator$1(next);
        _this.listener.endLiteralSymbol$2(t1, 1);
        return next;
      } else if ("void" === t2.stringValue) {
        _this.listener.handleSymbolVoid$1(next);
        _this.listener.endLiteralSymbol$2(t1, 1);
        return next;
      } else {
        token = _this.ensureIdentifier$2(t1, C.LiteralSymbolIdentifierContext_aXZ);
        for (count = 1; t2 = token.next, "." === t2.type.stringValue;) {
          ++count;
          token = _this.ensureIdentifier$2(t2, C.LiteralSymbolIdentifierContext_o0o);
        }
        _this.listener.endLiteralSymbol$2(t1, count);
        return token;
      }
    },
    parseSingleLiteralString$1(token) {
      var next, kind, t2, t3, interpolationCount, token0, t4, next0, _this = this, _null = null,
        t1 = token.next;
      t1.toString;
      _this.listener.beginLiteralString$1(t1);
      next = t1.next;
      kind = next.type.kind;
      for (t2 = type$.Message, t3 = type$.Template_of_Message_Function_Token, token = t1, interpolationCount = 0; kind !== 0; token = next, next = next0) {
        if (kind === 128) {
          token = _this.parseExpression$1(next).next;
          if ("}" !== token.type.stringValue) {
            t1 = t2._as(Z._withArgumentsExpectedButGot("}"));
            token = N.findNonZeroLengthToken(token);
            _this.listener.handleRecoverableError$3(t1, token, token);
            t1 = next.get$endGroup();
            t1.toString;
            token = t1;
          }
          _this.listener.handleInterpolationExpression$2(next, token);
        } else if (kind === 161) {
          token = _this.parseIdentifierExpression$1(next);
          _this.listener.handleInterpolationExpression$2(next, _null);
        } else
          break;
        ++interpolationCount;
        next = token.next;
        if (next.type.kind !== 39) {
          t3._as(C.Template__withArgumentsExpectedString);
          token0 = N.findNonZeroLengthToken(next);
          _this.listener.handleRecoverableError$3(C.Template__withArgumentsExpectedString.withArguments.call$1(token0), token0, token0);
          t1 = _this.cachedRewriter;
          if (t1 == null)
            t1 = _this.cachedRewriter = new R.TokenStreamRewriterImpl();
          t4 = next.offset;
          $.$get$StringUtilities_INTERNER().toString;
          next = new L.SyntheticStringToken(_null, "", C.TokenType_86y, t4, _null);
          next._setCommentParent$1(_null);
          if (!(token.type !== C.TokenType_Emx || token.offset < 0))
            H.throwExpression("Internal Error: Rewriting at eof.");
          t4 = token.next;
          t4.toString;
          t1._setNext$2(next, t4);
          t1._setNext$2(token, next);
        }
        _this.listener.handleStringPart$1(next);
        next0 = next.next;
        kind = next0.type.kind;
      }
      _this.listener.endLiteralString$2(interpolationCount, next);
      return token;
    },
    parseIdentifierExpression$1(token) {
      var next = token.next,
        t1 = next.type;
      if (t1.kind === 107 && t1.stringValue === "this") {
        this.listener.handleThisExpression$2(next, C.ExpressionIdentifierContext_H5Y);
        return next;
      } else
        return this.parseSend$2(token, C.ExpressionIdentifierContext_H5Y);
    },
    parseSend$2(token, context) {
      var identifier, value, potentialTypeArg, afterToken, t1, typeArg, token0, t2, _this = this, _null = null;
      if (_this.isNextIdentifier$1(token)) {
        identifier = token.next;
        value = identifier.get$lexeme();
        if (value === "Map" || value === "Set") {
          potentialTypeArg = M.computeTypeParamOrArg(identifier, false, false);
          afterToken = potentialTypeArg.skip$1(0, identifier).next;
          if ("{" === afterToken.type.stringValue) {
            t1 = type$.Message._as(Z._withArgumentsLiteralWithClass(value.toLowerCase(), identifier));
            token = N.findNonZeroLengthToken(identifier);
            _this.listener.handleRecoverableError$3(t1, token, token);
            return _this.parsePrimary$2(identifier, context);
          }
        } else if (value === "List") {
          potentialTypeArg = M.computeTypeParamOrArg(identifier, false, false);
          t1 = potentialTypeArg.skip$1(0, identifier).next;
          t1.toString;
          if (potentialTypeArg !== C.C_NoTypeParamOrArg && "[" === t1.type.stringValue || "[]" === t1.type.stringValue) {
            t1 = type$.Message._as(Z._withArgumentsLiteralWithClass(value.toLowerCase(), identifier));
            token = N.findNonZeroLengthToken(identifier);
            _this.listener.handleRecoverableError$3(t1, token, token);
            return _this.parsePrimary$2(identifier, context);
          }
          afterToken = t1;
        } else {
          afterToken = _null;
          potentialTypeArg = afterToken;
        }
      } else {
        afterToken = _null;
        potentialTypeArg = afterToken;
      }
      token = _this.ensureIdentifier$2(token, context);
      if (potentialTypeArg == null)
        potentialTypeArg = M.computeTypeParamOrArg(token, false, false);
      if (afterToken == null) {
        t1 = potentialTypeArg.skip$1(0, token).next;
        t1.toString;
        afterToken = t1;
      }
      typeArg = "(" === afterToken.type.stringValue && !potentialTypeArg.get$recovered() ? potentialTypeArg : C.C_NoTypeParamOrArg;
      if (typeArg !== C.C_NoTypeParamOrArg)
        token0 = typeArg.parseArguments$2(token, _this);
      else {
        t1 = _this.listener;
        t2 = token.next;
        t2.toString;
        t1.handleNoTypeArguments$1(t2);
        token0 = token;
      }
      token0 = _this.parseArgumentsOpt$1(token0);
      t1 = _this.listener;
      t2 = token0.next;
      t2.toString;
      t1.handleSend$2(token, t2);
      return token0;
    },
    parseArgumentsOpt$1(token) {
      var next = token.next;
      if ("(" !== next.type.stringValue) {
        this.listener.handleNoArguments$1(next);
        return token;
      } else
        return this.parseArgumentsRest$1(next);
    },
    parseArgumentsRest$1(token) {
      var old, t1, token0, argumentCount, hasSeenNamedArgument, next, t2, colon, token1, t3, _this = this;
      _this.listener.beginArguments$1(token);
      old = _this.mayParseFunctionExpressions;
      _this.mayParseFunctionExpressions = true;
      for (t1 = type$.Message, token0 = token, argumentCount = 0, hasSeenNamedArgument = false; true; token0 = next) {
        next = token0.next;
        if (")" === next.type.stringValue) {
          token0 = next;
          break;
        }
        if (":" === next.next.type.stringValue) {
          t2 = _this.ensureIdentifier$2(token0, C.NamedArgumentReferenceIdentifierContext_k8l).next;
          t2.toString;
          colon = t2;
          token0 = colon;
          hasSeenNamedArgument = true;
        } else {
          if (hasSeenNamedArgument) {
            token1 = N.findNonZeroLengthToken(next);
            _this.listener.handleRecoverableError$3(C.MessageCode_Pss, token1, token1);
          }
          colon = null;
        }
        token0 = _this.parseExpression$1(token0);
        t2 = token0.next;
        t2.toString;
        if (colon != null)
          _this.listener.handleNamedArgument$1(colon);
        ++argumentCount;
        t3 = t2.type.stringValue;
        if ("," !== t3) {
          if (")" === t3) {
            token0 = t2;
            break;
          }
          if (D.looksLikeExpressionStart(t2)) {
            t3 = Z._withArgumentsExpectedButGot(",");
            next = new L.SyntheticToken(C.TokenType_O55, t2.offset, null);
            next._setCommentParent$1(null);
            t1._as(t3);
            t2 = token0.next;
            t2.toString;
            token1 = N.findNonZeroLengthToken(t2);
            _this.listener.handleRecoverableError$3(t3, token1, token1);
            t3 = _this.cachedRewriter;
            t2 = t3 == null ? _this.cachedRewriter = new R.TokenStreamRewriterImpl() : t3;
            if (!(token0.type !== C.TokenType_Emx || token0.offset < 0))
              H.throwExpression("Internal Error: Rewriting at eof.");
            t3 = token0.next;
            t3.toString;
            t2._setNext$2(next, t3);
            t2._setNext$2(token0, next);
          } else {
            token0 = _this.ensureCloseParen$2(token0, token);
            break;
          }
        } else
          next = t2;
      }
      _this.mayParseFunctionExpressions = old;
      _this.listener.endArguments$3(argumentCount, token, token0);
      return token0;
    },
    skipChainedAsIsOperators$1(token) {
      var t1, next, value, next0, typeInfo, t2;
      for (t1 = type$.Template_of_Message_Function_Token; true;) {
        next = token.next;
        value = next.type.stringValue;
        if (value !== "is" && value !== "as")
          return token;
        t1._as(C.Template__withArgumentsUnexpectedToken);
        token = N.findNonZeroLengthToken(next);
        this.listener.handleRecoverableError$3(C.Template__withArgumentsUnexpectedToken.withArguments.call$1(token), token, token);
        next0 = next.next;
        if ("!" === next0.type.stringValue)
          next = next0;
        typeInfo = M.computeType(next, true, false, false);
        if (typeInfo.get$isNullable()) {
          t2 = typeInfo.skipType$1(next).next;
          t2.toString;
          if (!N.isOneOfOrEof(t2, C.List_IXH))
            typeInfo = typeInfo.get$asNonNullable();
        }
        token = typeInfo.skipType$1(next);
        token.next.type.toString;
      }
    },
    looksLikeLocalFunction$1(token) {
      var typeParam, t1;
      if (token.get$isIdentifier()) {
        if ("<" === token.next.type.stringValue) {
          typeParam = M.computeTypeParamOrArg(token, false, false);
          if (typeParam === C.C_NoTypeParamOrArg)
            return false;
          token = typeParam.skip$1(0, token);
        }
        token = token.next;
        t1 = token.type.stringValue;
        if ("(" === t1) {
          t1 = token.get$endGroup().next.type.stringValue;
          return "{" === t1 || "=>" === t1 || "async" === t1 || "sync" === t1;
        } else if ("=>" === t1)
          return true;
      }
      return false;
    },
    parseExpressionStatementOrConstDeclaration$1(start) {
      var typeInfo, next, _this = this,
        constToken = start.next,
        t1 = constToken.next;
      t1.toString;
      if (!X.isModifier(t1)) {
        typeInfo = M.computeType(constToken, false, false, false);
        if (typeInfo === C.C_NoType) {
          next = constToken.next;
          if (!next.get$isIdentifier())
            return _this.parseExpressionStatement$1(start);
          next = next.next;
          t1 = next.type.stringValue;
          if (!("=" === t1 || next.get$isKeywordOrIdentifier() || ";" === t1 || "," === t1 || "{" === t1))
            return _this.parseExpressionStatement$1(start);
        }
        return _this.parseExpressionStatementOrDeclarationAfterModifiers$6(constToken, start, null, constToken, typeInfo, false);
      }
      return _this.parseExpressionStatementOrDeclaration$1(start);
    },
    parseExpressionStatementOrDeclaration$2(start, onlyParseVariableDeclarationStart) {
      var token, t1, varFinalOrConst, lateToken, t2, next0, context, _null = null,
        next = start.next;
      if ("@" === next.type.stringValue) {
        token = this.parseMetadataStar$1(start);
        t1 = token.next;
        t1.toString;
        next = t1;
      } else
        token = start;
      if (X.isModifier(next)) {
        t1 = next.type.stringValue;
        if ("var" === t1 || "final" === t1 || "const" === t1) {
          token = token.next;
          t1 = token.next;
          t1.toString;
          varFinalOrConst = token;
          lateToken = _null;
          next = t1;
        } else if ("late" === t1) {
          t1 = next.next;
          t1.toString;
          if (X.isModifier(t1)) {
            t2 = t1.type.stringValue;
            t2 = "var" === t2 || "final" === t2;
          } else
            t2 = false;
          if (t2) {
            t2 = t1.next;
            t2.toString;
            varFinalOrConst = t1;
            next0 = t2;
            token = varFinalOrConst;
          } else {
            varFinalOrConst = _null;
            next0 = t1;
            token = next;
          }
          lateToken = next;
          next = next0;
        } else {
          varFinalOrConst = _null;
          lateToken = varFinalOrConst;
        }
        if (X.isModifier(next)) {
          context = new X.ModifierRecoveryContext(this);
          context.lateToken = lateToken;
          context.set$varFinalOrConst(varFinalOrConst);
          token = context.parseVariableDeclarationModifiers$1(token);
          token.next.toString;
          lateToken = context.lateToken;
          varFinalOrConst = context.get$varFinalOrConst();
        }
      } else {
        varFinalOrConst = _null;
        lateToken = varFinalOrConst;
      }
      return this.parseExpressionStatementOrDeclarationAfterModifiers$6(token, start, lateToken, varFinalOrConst, _null, onlyParseVariableDeclarationStart);
    },
    parseExpressionStatementOrDeclaration$1(start) {
      return this.parseExpressionStatementOrDeclaration$2(start, false);
    },
    parseExpressionStatementOrDeclarationAfterModifiers$6(beforeType, start, lateToken, varFinalOrConst, typeInfo, onlyParseVariableDeclarationStart) {
      var t2, t3, context, token, beforeFormals, token0, next, afterIdentifier, originalListener, kind, _this = this,
        t1 = typeInfo == null;
      if (t1)
        if (lateToken == null)
          if (varFinalOrConst == null)
            if (beforeType === start) {
              t2 = beforeType.next;
              t2.toString;
              t2 = _this._isUseOfLateInNonNNBD$1(t2);
            } else
              t2 = false;
          else
            t2 = false;
        else
          t2 = false;
      else
        t2 = false;
      if (t2) {
        t2 = beforeType.next;
        t2.toString;
        _this.reportRecoverableErrorWithToken$2(t2, C.Template_int);
        t3 = beforeType.next;
        t3.toString;
        context = new X.ModifierRecoveryContext(_this);
        start = context.parseVariableDeclarationModifiers$1(t3);
        varFinalOrConst = context.get$varFinalOrConst();
        lateToken = t2;
        beforeType = start;
      }
      if (t1)
        typeInfo = M.computeType(beforeType, false, false, false);
      token = typeInfo.skipType$1(beforeType);
      t1 = token.next;
      t1.toString;
      if (onlyParseVariableDeclarationStart) {
        if (lateToken != null)
          _this.reportRecoverableErrorWithToken$2(lateToken, C.Template_lnn);
      } else if (_this.looksLikeLocalFunction$1(t1)) {
        if (varFinalOrConst != null)
          _this.reportRecoverableErrorWithToken$2(varFinalOrConst, C.Template_lnn);
        else if (lateToken != null)
          _this.reportRecoverableErrorWithToken$2(lateToken, C.Template_lnn);
        t2 = start.next;
        if ("@" !== t2.type.stringValue) {
          _this.listener.beginMetadataStar$1(t2);
          _this.listener.endMetadataStar$1(0);
        }
        beforeFormals = M.computeTypeParamOrArg(t1, false, false).parseVariables$2(t1, _this);
        t1 = _this.listener;
        t2 = start.next;
        t2.toString;
        t1.beginLocalFunctionDeclaration$1(t2);
        token = typeInfo.parseType$2(beforeType, _this);
        t2 = start.next;
        t2.toString;
        return _this.parseNamedFunctionRest$4(token, t2, beforeFormals, false);
      }
      t2 = beforeType === start;
      if (t2 && typeInfo.get$isNullable() && typeInfo.get$couldBeExpression()) {
        if (!t1.get$isIdentifier()) {
          t3 = type$.Message._as(Z._withArgumentsExpectedIdentifier(t1));
          token0 = N.findNonZeroLengthToken(t1);
          _this.listener.handleRecoverableError$3(t3, token0, token0);
          next = _this.get$rewriter().insertSyntheticIdentifier$1(t1);
        } else
          next = t1;
        afterIdentifier = next.next;
        if ("=" === afterIdentifier.type.stringValue) {
          originalListener = _this.listener;
          _this.listener = new Y.ForwardingListener(null);
          t1 = _this.parseExpressionWithoutCascade$1(afterIdentifier).next;
          t1.toString;
          _this.listener = originalListener;
          if (":" === t1.type.stringValue) {
            t1 = start.next;
            t1.toString;
            next = t1;
            token = start;
            typeInfo = C.C_NoType;
          }
        } else if (!afterIdentifier.get$isKeyword() && !N.isOneOfOrEof(afterIdentifier, C.List_4Cz)) {
          t1 = start.next;
          t1.toString;
          next = t1;
          token = start;
          typeInfo = C.C_NoType;
        }
      } else
        next = t1;
      if (token === start)
        if (onlyParseVariableDeclarationStart)
          return start;
        else
          return _this.parseExpressionStatement$1(start);
      t1 = next.type;
      if (t1.get$isBuiltIn() && t2 && typeInfo.get$couldBeExpression()) {
        t1 = t1.stringValue;
        if ("as" === t1 || "is" === t1) {
          t1 = next.next.type;
          kind = t1.kind;
          if (61 !== kind && 59 !== kind && 44 !== kind)
            if (onlyParseVariableDeclarationStart) {
              if ("in" !== t1.stringValue)
                return start;
            } else
              return _this.parseExpressionStatement$1(start);
        }
      }
      if (next.get$isIdentifier())
        if (varFinalOrConst == null) {
          if (typeInfo === C.C_NoType) {
            token = N.findNonZeroLengthToken(next);
            _this.listener.handleRecoverableError$3(C.MessageCode_TSy, token, token);
          }
        } else if ("var" === varFinalOrConst.type.stringValue)
          if (typeInfo !== C.C_NoType) {
            token = N.findNonZeroLengthToken(varFinalOrConst);
            _this.listener.handleRecoverableError$3(C.MessageCode_sx4, token, token);
          }
      t1 = start.next;
      if ("@" !== t1.type.stringValue) {
        _this.listener.beginMetadataStar$1(t1);
        _this.listener.endMetadataStar$1(0);
      }
      token = typeInfo.parseType$2(beforeType, _this);
      t1 = token.next;
      t1.toString;
      _this.listener.beginVariablesDeclaration$3(t1, lateToken, varFinalOrConst);
      return !onlyParseVariableDeclarationStart ? _this.parseVariablesDeclarationRest$2(token, true) : token;
    },
    parseVariablesDeclarationRest$2(token, endWithSemicolon) {
      var count, t1, nameToken, semicolon, _this = this;
      token = _this.parseOptionallyInitializedIdentifier$1(token);
      for (count = 1; t1 = token.next, "," === t1.type.stringValue;) {
        nameToken = _this.ensureIdentifier$2(t1, C.LocalVariableDeclarationIdentifierContext_vI3);
        _this.listener.beginInitializedIdentifier$1(nameToken);
        token = _this.parseVariableInitializerOpt$1(nameToken);
        _this.listener.endInitializedIdentifier$1(nameToken);
        ++count;
      }
      if (endWithSemicolon) {
        semicolon = _this.ensureSemicolon$1(token);
        _this.listener.endVariablesDeclaration$2(count, semicolon);
        return semicolon;
      } else {
        _this.listener.endVariablesDeclaration$2(count, null);
        return token;
      }
    },
    parseOptionallyInitializedIdentifier$1(token) {
      var t1, t2, t3, _this = this,
        nameToken = _this.ensureIdentifier$2(token, C.LocalVariableDeclarationIdentifierContext_vI3);
      _this.listener.beginInitializedIdentifier$1(nameToken);
      t1 = nameToken.next;
      t2 = t1.type.stringValue;
      t3 = _this.listener;
      if ("=" === t2) {
        t3.beginVariableInitializer$1(t1);
        token = _this.parseExpression$1(t1);
        _this.listener.endVariableInitializer$1(t1);
      } else {
        t3.handleNoVariableInitializer$1(nameToken);
        token = nameToken;
      }
      _this.listener.endInitializedIdentifier$1(nameToken);
      return token;
    },
    parseForStatement$2(token, awaitToken) {
      var t2, t3, savedLoopState, _this = this,
        t1 = token.next;
      t1.toString;
      _this.listener.beginForStatement$1(t1);
      token = _this.parseForLoopPartsStart$2(awaitToken, t1);
      t2 = token.next;
      t2.toString;
      token = _this.parseForLoopPartsMid$3(token, awaitToken, t1);
      t3 = token.next.type.stringValue;
      if ("in" === t3 || ":" === t3) {
        token = _this.parseForInLoopPartsRest$4(token, awaitToken, t1, t2);
        t1 = _this.listener;
        t2 = token.next;
        t2.toString;
        t1.beginForInBody$1(t2);
        savedLoopState = _this.loopState;
        _this.loopState = C.LoopState_2;
        token = _this.parseStatement$1(token);
        _this.loopState = savedLoopState;
        t2 = _this.listener;
        t1 = token.next;
        t1.toString;
        t2.endForInBody$1(t1);
        t1 = _this.listener;
        t2 = token.next;
        t2.toString;
        t1.endForIn$1(t2);
        return token;
      } else {
        token = _this.parseForLoopPartsRest$3(token, t1, awaitToken);
        t1 = _this.listener;
        t2 = token.next;
        t2.toString;
        t1.beginForStatementBody$1(t2);
        savedLoopState = _this.loopState;
        _this.loopState = C.LoopState_2;
        token = _this.parseStatement$1(token);
        _this.loopState = savedLoopState;
        t2 = _this.listener;
        t1 = token.next;
        t1.toString;
        t2.endForStatementBody$1(t1);
        t1 = _this.listener;
        t2 = token.next;
        t2.toString;
        t1.endForStatement$1(t2);
        return token;
      }
    },
    parseForLoopPartsStart$2(awaitToken, forToken) {
      var t1, token, openParen, _this = this,
        leftParenthesis = forToken.next;
      if ("(" !== leftParenthesis.type.stringValue) {
        t1 = type$.Message._as(Z._withArgumentsExpectedButGot("("));
        token = N.findNonZeroLengthToken(leftParenthesis);
        _this.listener.handleRecoverableError$3(t1, token, token);
        openParen = type$.BeginToken._as(_this.get$rewriter().insertToken$2(forToken, L.SyntheticBeginToken$(C.TokenType_5uk, leftParenthesis.offset, null)));
        if (awaitToken != null) {
          token = _this.get$rewriter().insertSyntheticIdentifier$1(openParen);
          token = _this.get$rewriter().insertToken$2(token, L.SyntheticKeywordToken$(C.Keyword_bId, token.next.offset));
          token = _this.get$rewriter().insertSyntheticIdentifier$1(token);
        } else {
          token = _this.get$rewriter().insertToken$2(openParen, L.SyntheticToken$(C.TokenType_FmR, openParen.next.offset));
          token = _this.get$rewriter().insertToken$2(token, L.SyntheticToken$(C.TokenType_FmR, token.next.offset));
        }
        token = _this.get$rewriter().insertToken$2(token, L.SyntheticToken$(C.TokenType_coy, leftParenthesis.offset));
        openParen.endToken = token;
        token = _this.get$rewriter().insertSyntheticIdentifier$1(token);
        _this.get$rewriter().insertToken$2(token, L.SyntheticToken$(C.TokenType_FmR, token.next.offset));
        leftParenthesis = openParen;
      }
      return _this.parseExpressionStatementOrDeclaration$2(leftParenthesis, true);
    },
    parseForLoopPartsMid$3(token, awaitToken, forToken) {
      var t1, t2, next, token0, _this = this;
      if (token !== forToken.next) {
        token = _this.parseVariablesDeclarationRest$2(token, false);
        t1 = _this.listener;
        t2 = token.next.type.stringValue;
        t1.handleForInitializerLocalVariableDeclaration$2(token, "in" === t2 || ":" === t2);
      } else {
        t1 = token.next;
        if (";" === t1.type.stringValue)
          _this.listener.handleForInitializerEmptyStatement$1(t1);
        else {
          token = _this.parseExpression$1(token);
          t1 = _this.listener;
          t2 = token.next.type.stringValue;
          if ("in" !== t2)
            if (":" !== t2)
              t2 = awaitToken != null && ")" === t2;
            else
              t2 = true;
          else
            t2 = true;
          t1.handleForInitializerExpressionStatement$2(token, t2);
        }
      }
      next = token.next;
      t1 = next.type.stringValue;
      if (";" === t1) {
        if (awaitToken != null) {
          token0 = N.findNonZeroLengthToken(awaitToken);
          _this.listener.handleRecoverableError$3(C.MessageCode_dIX, token0, token0);
        }
      } else if ("in" !== t1)
        if (":" === t1) {
          token0 = N.findNonZeroLengthToken(next);
          _this.listener.handleRecoverableError$3(C.MessageCode_Rro, token0, token0);
        } else if (awaitToken != null) {
          t1 = type$.Message._as(Z._withArgumentsExpectedButGot("in"));
          token0 = N.findNonZeroLengthToken(next);
          _this.listener.handleRecoverableError$3(t1, token0, token0);
          t1 = L.SyntheticKeywordToken$(C.Keyword_bId, next.offset);
          t1.setNext$1(next);
          token.setNext$1(t1);
        }
      return token;
    },
    parseForLoopPartsRest$3(token, forToken, awaitToken) {
      var leftSeparator, expressionCount, next, t2, _this = this,
        t1 = forToken.next;
      t1.toString;
      leftSeparator = _this.ensureSemicolon$1(token);
      token = ";" === leftSeparator.next.type.stringValue ? _this.parseEmptyStatement$1(leftSeparator) : _this.parseExpressionStatement$1(leftSeparator);
      for (expressionCount = 0; true;) {
        next = token.next;
        if (")" === next.type.stringValue) {
          token = next;
          break;
        }
        token = _this.parseExpression$1(token).next;
        ++expressionCount;
        if ("," !== token.type.stringValue)
          break;
      }
      if (token != t1.get$endGroup()) {
        _this.reportRecoverableErrorWithToken$2(token, C.Template__withArgumentsUnexpectedToken);
        t2 = t1.get$endGroup();
        t2.toString;
        token = t2;
      }
      _this.listener.handleForLoopParts$4(forToken, t1, leftSeparator, expressionCount);
      return token;
    },
    parseForInLoopPartsRest$4(token, awaitToken, forToken, identifier) {
      var t2, t3, _this = this,
        t1 = token.next;
      t1.toString;
      if (!identifier.get$isIdentifier())
        _this.reportRecoverableErrorWithToken$2(identifier, C.Template_ijv);
      else if (identifier !== token) {
        t2 = identifier.next;
        if ("=" === t2.type.stringValue) {
          token = N.findNonZeroLengthToken(t2);
          _this.listener.handleRecoverableError$3(C.MessageCode_12j, token, token);
        } else
          _this.reportRecoverableErrorWithToken$2(t2, C.Template__withArgumentsUnexpectedToken);
      } else {
        if (awaitToken != null) {
          t2 = _this.asyncState;
          t2 = !(t2 === C.AsyncModifier_2 || t2 === C.AsyncModifier_3);
        } else
          t2 = false;
        if (t2) {
          token = N.findNonZeroLengthToken(t1);
          _this.listener.handleRecoverableError$3(C.MessageCode_AgZ, token, token);
        }
      }
      t2 = _this.listener;
      t3 = t1.next;
      t3.toString;
      t2.beginForInExpression$1(t3);
      token = _this.parseExpression$1(t1);
      t3 = forToken.next;
      t3.toString;
      token = _this.ensureCloseParen$2(token, t3);
      _this.listener.endForInExpression$1(token);
      t3 = _this.listener;
      t2 = forToken.next;
      t2.toString;
      t3.handleForInLoopParts$4(awaitToken, forToken, t2, t1);
      return token;
    },
    parseBlock$2(token, blockKind) {
      var t1, t2, startToken, token0, statementCount, t3, _this = this;
      token = _this.ensureBlock$3(token, null, blockKind.useNameForMissingBlock ? blockKind.name : null);
      _this.listener.beginBlock$2(token, blockKind);
      t1 = token.next;
      t1.toString;
      t2 = type$.Message;
      startToken = t1;
      token0 = token;
      statementCount = 0;
      while (true) {
        t1 = startToken.type;
        if (!(t1.kind !== 0 && "}" !== t1.stringValue))
          break;
        token0 = _this.parseStatement$1(token0);
        t1 = token0.next;
        t1.toString;
        if (t1 === startToken) {
          t3 = t2._as(Z._withArgumentsUnexpectedToken(t1));
          token0 = N.findNonZeroLengthToken(t1);
          _this.listener.handleRecoverableError$3(t3, token0, token0);
          token0 = t1;
        }
        ++statementCount;
        t1 = token0.next;
        t1.toString;
        startToken = t1;
      }
      t1 = token0.next;
      t1.toString;
      _this.listener.endBlock$4(statementCount, token, t1, blockKind);
      return t1;
    },
    looksLikeExpression$1(token) {
      var t1;
      token = token.next;
      if (token.get$isIdentifier()) {
        token = token.next;
        if ("(" === token.type.stringValue) {
          t1 = token.get$endGroup().next;
          t1.toString;
          if (N.isOneOf(t1, H._setArrayType([";", ".", "..", "?", "?."], type$.JSArray_String)))
            return true;
        } else if (N.isOneOf(token, H._setArrayType([".", ")", "]"], type$.JSArray_String)))
          return true;
      }
      return false;
    },
    parseThrowExpression$2(token, allowCascades) {
      var t2, _this = this,
        throwToken = token.next,
        t1 = throwToken.next;
      if (";" === t1.type.stringValue) {
        token = N.findNonZeroLengthToken(t1);
        _this.listener.handleRecoverableError$3(C.MessageCode_w66, token, token);
        _this.get$rewriter().insertToken$2(throwToken, L.SyntheticStringToken$(C.TokenType_86y, '""', throwToken.next.offset, 0));
      }
      token = allowCascades ? _this.parseExpression$1(throwToken) : _this.parseExpressionWithoutCascade$1(throwToken);
      t1 = _this.listener;
      t2 = token.next;
      t2.toString;
      t1.handleThrowExpression$2(throwToken, t2);
      return token;
    },
    parseTryStatement$1(token) {
      var lastConsumed, value, catchCount, token0, onKeyword, openParens, t2, exceptionName, comma, t3, traceName, catchKeyword, finallyKeyword, _this = this, _null = null,
        t1 = token.next;
      t1.toString;
      _this.listener.beginTryStatement$1(t1);
      lastConsumed = _this.parseBlock$2(t1, C.BlockKind_ZGG);
      token = lastConsumed.next;
      value = token.type.stringValue;
      catchCount = 0;
      while (true) {
        if (!(value === "catch" || value === "on"))
          break;
        _this.listener.beginCatchClause$1(token);
        if (value === "on") {
          lastConsumed = M.computeType(token, true, false, false).ensureTypeNotVoid$2(token, _this);
          token0 = lastConsumed.next;
          value = token0.type.stringValue;
          onKeyword = token;
          token = token0;
        } else
          onKeyword = _null;
        if (value === "catch") {
          openParens = token.next;
          if ("(" !== openParens.type.stringValue) {
            token0 = N.findNonZeroLengthToken(openParens);
            _this.listener.handleRecoverableError$3(C.MessageCode_72A, token0, token0);
            t2 = _this.cachedRewriter;
            openParens = (t2 == null ? _this.cachedRewriter = new R.TokenStreamRewriterImpl() : t2).insertParens$2(token, true);
          }
          exceptionName = openParens.next;
          if (exceptionName.type.kind !== 97)
            exceptionName = C.CatchParameterIdentifierContext_mF3.ensureIdentifier$2(openParens, _this);
          comma = exceptionName.next;
          t2 = comma.type.stringValue;
          if (")" === t2)
            comma = _null;
          else {
            if ("," !== t2) {
              if (!exceptionName.get$isSynthetic()) {
                token0 = N.findNonZeroLengthToken(comma);
                _this.listener.handleRecoverableError$3(C.MessageCode_72A, token0, token0);
              }
              t2 = openParens.get$endGroup().get$isSynthetic();
              t3 = _this.cachedRewriter;
              if (t2) {
                t2 = t3 == null ? _this.cachedRewriter = new R.TokenStreamRewriterImpl() : t3;
                t3 = openParens.get$endGroup();
                t3.toString;
                t2.moveSynthetic$2(exceptionName, t3);
                comma = _null;
              } else {
                t2 = t3 == null ? _this.cachedRewriter = new R.TokenStreamRewriterImpl() : t3;
                comma = new L.SyntheticToken(C.TokenType_O55, exceptionName.next.offset, _null);
                comma._setCommentParent$1(_null);
                if (!(exceptionName.type !== C.TokenType_Emx || exceptionName.offset < 0))
                  H.throwExpression("Internal Error: Rewriting at eof.");
                t3 = exceptionName.next;
                t3.toString;
                t2._setNext$2(comma, t3);
                t2._setNext$2(exceptionName, comma);
              }
            }
            if (comma != null) {
              traceName = comma.next;
              if (traceName.type.kind !== 97)
                traceName = C.CatchParameterIdentifierContext_mF3.ensureIdentifier$2(comma, _this);
              if (")" !== traceName.next.type.stringValue) {
                if (!traceName.get$isSynthetic()) {
                  t2 = traceName.next;
                  t2.toString;
                  token0 = N.findNonZeroLengthToken(t2);
                  _this.listener.handleRecoverableError$3(C.MessageCode_BHz, token0, token0);
                }
                if (openParens.get$endGroup().get$isSynthetic()) {
                  t2 = _this.cachedRewriter;
                  if (t2 == null)
                    t2 = _this.cachedRewriter = new R.TokenStreamRewriterImpl();
                  t3 = openParens.get$endGroup();
                  t3.toString;
                  t2.moveSynthetic$2(traceName, t3);
                }
              }
            }
          }
          t2 = token.next;
          t2.toString;
          lastConsumed = _this.parseFormalParametersRest$2(t2, C.MemberKind_0);
          t2 = lastConsumed.next;
          t2.toString;
          catchKeyword = token;
          token = t2;
        } else {
          comma = _null;
          catchKeyword = comma;
        }
        _this.listener.endCatchClause$1(token);
        lastConsumed = _this.parseBlock$2(lastConsumed, C.BlockKind_xcq);
        t2 = lastConsumed.next;
        t2.toString;
        ++catchCount;
        _this.listener.handleCatchBlock$3(onKeyword, catchKeyword, comma);
        value = t2.type.stringValue;
        token = t2;
      }
      if ("finally" === token.type.stringValue) {
        lastConsumed = _this.parseBlock$2(token, C.BlockKind_MqH);
        lastConsumed.next.toString;
        _this.listener.handleFinallyBlock$1(token);
        finallyKeyword = token;
      } else {
        if (catchCount === 0) {
          token = N.findNonZeroLengthToken(t1);
          _this.listener.handleRecoverableError$3(C.MessageCode_xje, token, token);
        }
        finallyKeyword = _null;
      }
      _this.listener.endTryStatement$3(catchCount, t1, finallyKeyword);
      return lastConsumed;
    },
    parseSwitchBlock$1(token) {
      var t1, token0, caseCount, defaultKeyword, colonAfterDefault, t2, t3, peek, expressionCount, labelCount, value, t4, token1, _this = this;
      token = _this.ensureBlock$3(token, null, "switch statement");
      _this.listener.beginSwitchBlock$1(token);
      t1 = type$.Message;
      token0 = token;
      caseCount = 0;
      defaultKeyword = null;
      colonAfterDefault = null;
      while (true) {
        t2 = token0.next;
        t3 = t2.type;
        if (!(t3.kind !== 0 && "}" !== t3.stringValue))
          break;
        peek = _this.peekPastLabels$1(t2);
        for (t3 = defaultKeyword != null, expressionCount = 0, labelCount = 0; true;) {
          value = peek.type.stringValue;
          if (value === "default") {
            while (true) {
              t4 = token0.next;
              t4.toString;
              if (!(t4 !== peek))
                break;
              t4 = _this.ensureIdentifier$2(token0, C.LabelDeclarationIdentifierContext_Wxi).next;
              t4.toString;
              _this.listener.handleLabel$1(t4);
              ++labelCount;
              token0 = t4;
            }
            if (t3) {
              token1 = N.findNonZeroLengthToken(t4);
              _this.listener.handleRecoverableError$3(C.MessageCode_qx4, token1, token1);
            }
            t3 = token0.next;
            t3.toString;
            token0 = _this.ensureColon$1(t3);
            t4 = token0.next;
            t4.toString;
            peek = t4;
            colonAfterDefault = token0;
            defaultKeyword = t3;
            break;
          } else if (value === "case") {
            while (true) {
              t4 = token0.next;
              t4.toString;
              if (!(t4 !== peek))
                break;
              t4 = _this.ensureIdentifier$2(token0, C.LabelDeclarationIdentifierContext_Wxi).next;
              t4.toString;
              _this.listener.handleLabel$1(t4);
              ++labelCount;
              token0 = t4;
            }
            if (t3) {
              token0 = N.findNonZeroLengthToken(t4);
              _this.listener.handleRecoverableError$3(C.MessageCode_Exl, token0, token0);
            }
            _this.listener.beginCaseExpression$1(t4);
            token0 = _this.ensureColon$1(_this.parseExpression$1(t4));
            _this.listener.endCaseExpression$1(token0);
            _this.listener.handleCaseMatch$2(t4, token0);
            ++expressionCount;
            t4 = token0.next;
            t4.toString;
            peek = _this.peekPastLabels$1(t4);
          } else if (expressionCount > 0)
            break;
          else {
            t3 = t1._as(Z._withArgumentsExpectedToken("case"));
            token1 = N.findNonZeroLengthToken(peek);
            _this.listener.handleRecoverableError$3(t3, token1, token1);
            t3 = token.get$endGroup();
            t3.toString;
            for (; t4 = token0.next, t4 !== t3; token0 = t4)
              t4.toString;
            t4.toString;
            peek = _this.peekPastLabels$1(t4);
            break;
          }
        }
        token0 = _this.parseStatementsInSwitchCase$7(token0, peek, t2, labelCount, expressionCount, defaultKeyword, colonAfterDefault);
        ++caseCount;
      }
      _this.listener.endSwitchBlock$3(caseCount, token, t2);
      return t2;
    },
    peekPastLabels$1(token) {
      var t1;
      while (true) {
        if (!(token.get$isIdentifier() && ":" === token.next.type.stringValue))
          break;
        t1 = token.next.next;
        t1.toString;
        token = t1;
      }
      return token;
    },
    parseStatementsInSwitchCase$7(token, peek, begin, labelCount, expressionCount, defaultKeyword, colonAfterDefault) {
      var t1, statementCount, t2, value, t3, _this = this;
      _this.listener.beginSwitchCase$3(labelCount, expressionCount, begin);
      for (t1 = type$.Message, statementCount = 0; t2 = token.next, t2.type.kind !== 0;) {
        value = peek.type.stringValue;
        if (value !== "case")
          if (value !== "default")
            t3 = value === "}" && t2 == peek;
          else
            t3 = true;
        else
          t3 = true;
        if (t3)
          break;
        else {
          token = _this.parseStatement$1(token);
          t3 = token.next;
          t3.toString;
          if (t3 === t2) {
            t2 = t1._as(Z._withArgumentsUnexpectedToken(t3));
            token = N.findNonZeroLengthToken(t3);
            _this.listener.handleRecoverableError$3(t2, token, token);
            token = t3;
          }
          ++statementCount;
        }
        t2 = token.next;
        t2.toString;
        peek = _this.peekPastLabels$1(t2);
      }
      _this.listener.endSwitchCase$7(labelCount, expressionCount, defaultKeyword, colonAfterDefault, statementCount, begin, t2);
      return token;
    },
    parseAssert$2(token, kind) {
      var leftParenthesis, t2, old, commaToken, token0, t3, _this = this,
        t1 = token.next;
      t1.toString;
      _this.listener.beginAssert$2(t1, kind);
      leftParenthesis = t1.next;
      if ("(" !== leftParenthesis.type.stringValue) {
        t2 = type$.Message._as(Z._withArgumentsExpectedButGot("("));
        token = N.findNonZeroLengthToken(leftParenthesis);
        _this.listener.handleRecoverableError$3(t2, token, token);
        leftParenthesis = _this.get$rewriter().insertParens$2(t1, true);
      }
      old = _this.mayParseFunctionExpressions;
      _this.mayParseFunctionExpressions = true;
      token = _this.parseExpression$1(leftParenthesis);
      commaToken = token.next;
      if ("," === commaToken.type.stringValue)
        if (")" !== commaToken.next.type.stringValue) {
          token = _this.parseExpression$1(commaToken);
          token0 = token.next;
          if ("," === token0.type.stringValue)
            token = token0;
        } else {
          token = commaToken;
          commaToken = null;
        }
      else
        commaToken = null;
      t2 = leftParenthesis.get$endGroup();
      t2.toString;
      if (token.next === t2)
        token = t2;
      else if (t2.get$isSynthetic())
        token = _this.get$rewriter().moveSynthetic$2(token, t2);
      else {
        t3 = token.next;
        t3.toString;
        _this.reportRecoverableErrorWithToken$2(t3, C.Template__withArgumentsUnexpectedToken);
        token = t2;
      }
      _this.mayParseFunctionExpressions = old;
      if (kind === C.Assert_0) {
        token0 = N.findNonZeroLengthToken(t1);
        _this.listener.handleRecoverableError$3(C.MessageCode_mNU, token0, token0);
      } else if (kind === C.Assert_2)
        _this.ensureSemicolon$1(token);
      t2 = _this.listener;
      t3 = token.next;
      t3.toString;
      t2.endAssert$5(t1, kind, leftParenthesis, commaToken, t3);
      return token;
    },
    parseEmptyStatement$1(token) {
      var t1 = token.next;
      t1.toString;
      this.listener.handleEmptyStatement$1(t1);
      return t1;
    },
    parseInvalidOperatorDeclaration$10(beforeStart, abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, beforeType, kind, enclosingDeclarationName) {
      var operator, token, _this = this,
        typeInfo = M.computeType(beforeStart, false, true, false),
        beforeName = typeInfo.skipType$1(beforeType),
        next = beforeName.next,
        t1 = next.type;
      if ("operator" === t1.stringValue)
        next.next.toString;
      else {
        if (!t1.isOperator && next.next.type.isOperator) {
          t1 = next.next;
          t1.toString;
          operator = t1;
          beforeName = next;
        } else
          operator = next;
        token = N.findNonZeroLengthToken(operator);
        _this.listener.handleRecoverableError$3(C.MessageCode_a5W, token, token);
        _this.get$rewriter().insertToken$2(beforeName, L.SyntheticKeywordToken$(C.Keyword_i1a, beforeName.next.offset));
        typeInfo = M.computeType(beforeStart, true, true, false);
        beforeName = typeInfo.skipType$1(beforeType);
        next = beforeName.next;
        t1 = next.type;
        if (!t1.isOperator && next.next.type.isOperator && t1.stringValue === "operator")
          next.next.toString;
      }
      t1 = beforeName.next;
      t1.toString;
      token = _this.parseMethod$14(beforeStart, abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, beforeType, typeInfo, null, t1, kind, enclosingDeclarationName, false);
      _this.listener.endMember$0();
      return token;
    },
    recoverFromInvalidMember$13(token, beforeStart, abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, beforeType, typeInfo, getOrSet, kind, enclosingDeclarationName) {
      var next0, _this = this,
        next = token.next,
        t1 = next.type,
        value = t1.stringValue;
      if (value === "class") {
        token = N.findNonZeroLengthToken(next);
        _this.listener.handleRecoverableError$3(C.MessageCode_lqK, token, token);
        _this.listener.handleInvalidMember$1(next);
        next0 = next.next;
        if (next0.get$isIdentifier()) {
          next = next0.next;
          if ("{" === next.type.stringValue && next.get$endGroup() != null) {
            t1 = next.get$endGroup();
            t1.toString;
            token = t1;
          } else
            token = next0;
        } else
          token = next;
        _this.listener.endMember$0();
        return token;
      } else if (value === "enum") {
        token = N.findNonZeroLengthToken(next);
        _this.listener.handleRecoverableError$3(C.MessageCode_6QF, token, token);
        _this.listener.handleInvalidMember$1(next);
        next0 = next.next;
        if (next0.get$isIdentifier()) {
          next = next0.next;
          if ("{" === next.type.stringValue && next.get$endGroup() != null) {
            t1 = next.get$endGroup();
            t1.toString;
            token = t1;
          } else
            token = next0;
        } else
          token = next;
        _this.listener.endMember$0();
        return token;
      } else if (value === "typedef") {
        token = N.findNonZeroLengthToken(next);
        _this.listener.handleRecoverableError$3(C.MessageCode_kGC, token, token);
        _this.listener.handleInvalidMember$1(next);
        _this.listener.endMember$0();
        return next;
      } else if (t1.isOperator && next.get$endGroup() == null)
        return _this.parseInvalidOperatorDeclaration$10(beforeStart, abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, beforeType, kind, enclosingDeclarationName);
      t1 = value === "(" || value === "=>" || value === "{";
      if (t1) {
        t1 = token.next;
        t1.toString;
        token = _this.parseMethod$14(beforeStart, abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, beforeType, typeInfo, getOrSet, t1, kind, enclosingDeclarationName, false);
      } else if (token === beforeStart) {
        _this.reportRecoverableErrorWithToken$2(next, C.Template_4MH);
        _this.listener.handleInvalidMember$1(next);
        if (value !== "}")
          token = next;
      } else {
        t1 = token.next;
        t1.toString;
        token = _this.parseFields$13(beforeStart, abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, beforeType, typeInfo, t1, kind, enclosingDeclarationName, false);
      }
      _this.listener.endMember$0();
      return token;
    },
    recoverFromStackOverflow$1(token) {
      var token0, next,
        t1 = token.next;
      t1.toString;
      token0 = N.findNonZeroLengthToken(t1);
      this.listener.handleRecoverableError$3(C.MessageCode_3hr, token0, token0);
      next = this.get$rewriter().insertToken$2(token, L.SyntheticToken$(C.TokenType_FmR, token.next.offset));
      this.listener.handleEmptyStatement$1(next);
      while (true) {
        t1 = next.type;
        if (!(t1.kind !== 0 && "}" !== t1.stringValue))
          break;
        t1 = next.next;
        t1.toString;
        token = next;
        next = t1;
      }
      return token;
    },
    reportRecoverableErrorWithToken$2(token, template) {
      type$.Template_of_Message_Function_Token._as(template);
      token = N.findNonZeroLengthToken(token);
      this.listener.handleRecoverableError$3(template.withArguments.call$1(token), token, token);
    },
    reportAllErrorTokens$1(token) {
      var t1;
      for (; token instanceof S.ErrorToken; token = t1) {
        this.listener.handleErrorToken$1(token);
        t1 = token.next;
        t1.toString;
      }
      return token;
    },
    skipErrorTokens$1(token) {
      var t1;
      for (; token instanceof S.ErrorToken; token = t1) {
        t1 = token.next;
        t1.toString;
      }
      return token;
    },
    parseInvalidTopLevelDeclaration$1(token) {
      var originalListener, t2, _this = this,
        next = token.next,
        t1 = next.type.stringValue;
      _this.reportRecoverableErrorWithToken$2(next, ";" === t1 ? C.Template__withArgumentsUnexpectedToken : C.Template_gsT);
      if ("{" === t1) {
        t1 = token.next;
        t1.toString;
        originalListener = _this.listener;
        t2 = new Y.ForwardingListener(originalListener);
        t2.forwardErrors = false;
        _this.listener = t2;
        token = _this.parseBlock$2(token, C.BlockKind_invalid_false);
        _this.listener = originalListener;
        originalListener.handleInvalidTopLevelBlock$1(t1);
        next = token;
      }
      _this.listener.handleInvalidTopLevelDeclaration$1(next);
      return next;
    },
    syntheticPreviousToken$1(token) {
      var before,
        t1 = token.previous;
      if (t1 != null)
        return t1;
      before = L.Token_Token$eof(-1, null);
      before.next = token;
      return before;
    },
    findDartDoc$1(token) {
      var dartdoc, isMultiline, lexeme,
        comments = token._precedingComment;
      for (dartdoc = null, isMultiline = false; comments != null;) {
        lexeme = comments.get$lexeme();
        if (J.startsWith$1$s(lexeme, "///")) {
          if (!isMultiline) {
            dartdoc = comments;
            isMultiline = true;
          }
        } else if (C.JSString_methods.startsWith$1(lexeme, "/**")) {
          dartdoc = comments;
          isMultiline = false;
        }
        comments = comments.next;
      }
      return dartdoc;
    },
    parseReferencesInMultiLineComment$1(multiLineDoc) {
      var count, start, inCodeBlock, t1, end,
        comment = multiLineDoc.get$lexeme(),
        $length = comment.length,
        codeBlock = J.indexOf$2$asx(comment, "```", 3);
      if (codeBlock === -1)
        codeBlock = $length;
      for (count = 0, start = 3, inCodeBlock = false; start < $length;) {
        t1 = C.JSString_methods.codeUnitAt$1(comment, start);
        if (t1 === 32 || t1 === 10 || t1 === 13 || t1 === 9) {
          ++start;
          continue;
        }
        end = C.JSString_methods.indexOf$2(comment, "\n", start);
        if (end === -1)
          end = $length;
        if (codeBlock < end) {
          inCodeBlock = !inCodeBlock;
          codeBlock = C.JSString_methods.indexOf$2(comment, "```", end);
          if (codeBlock === -1)
            codeBlock = $length;
        }
        if (!inCodeBlock && !C.JSString_methods.startsWith$2(comment, "*     ", start))
          count += this.parseCommentReferencesInText$3(multiLineDoc, start, end);
        start = end + 1;
      }
      return count;
    },
    parseReferencesInSingleLineComments$1(token) {
      var comment, count = 0,
        inCodeBlock = false;
      while (true) {
        if (!(token != null && token.type !== C.TokenType_Emx))
          break;
        comment = token.get$lexeme();
        if (J.startsWith$1$s(comment, "///")) {
          if (C.JSString_methods.indexOf$2(comment, "```", 3) !== -1)
            inCodeBlock = !inCodeBlock;
          if (!inCodeBlock && !C.JSString_methods.startsWith$1(comment, "///    "))
            count += this.parseCommentReferencesInText$3(token, 3, comment.length);
        }
        token = token.next;
      }
      return count;
    },
    parseCommentReferencesInText$3(commentToken, start, end) {
      var t1, index, count, ch, index0, endCodeBlock,
        comment = commentToken.get$lexeme();
      for (t1 = J.getInterceptor$s(comment), index = start, count = 0; index < end;) {
        ch = t1.codeUnitAt$1(comment, index);
        if (ch === 91) {
          ++index;
          if (index < end && C.JSString_methods.codeUnitAt$1(comment, index) === 58) {
            index = C.JSString_methods.indexOf$2(comment, ":]", index + 1) + 1;
            if (index === 0 || index > end)
              break;
          } else {
            index0 = C.JSString_methods.indexOf$2(comment, "]", index);
            if (index0 === -1 || index0 >= end)
              index0 = this.findReferenceEnd$3(comment, index, end);
            if (ch !== 39 && ch !== 34)
              if (!this.isLinkText$2(comment, index0)) {
                this.listener.handleCommentReferenceText$2(C.JSString_methods.substring$2(comment, index, index0), commentToken.offset + index);
                ++count;
              }
            index = index0;
          }
        } else if (ch === 96) {
          endCodeBlock = C.JSString_methods.indexOf$2(comment, "`", index + 1);
          if (endCodeBlock !== -1 && endCodeBlock < end)
            index = endCodeBlock;
        }
        ++index;
      }
      return count;
    },
    findReferenceEnd$3(comment, index, end) {
      var t1, t2;
      if (index >= end || !N.isLetter(C.JSString_methods.codeUnitAt$1(comment, index)))
        return index;
      while (true) {
        if (index < end) {
          t1 = C.JSString_methods.codeUnitAt$1(comment, index);
          if (!(t1 >= 65 && t1 <= 90))
            t2 = t1 >= 97 && t1 <= 122;
          else
            t2 = true;
          if (!t2)
            t1 = t1 >= 48 && t1 <= 57;
          else
            t1 = true;
        } else
          t1 = false;
        if (!t1)
          break;
        ++index;
      }
      if (index >= end || C.JSString_methods.codeUnitAt$1(comment, index) !== 46)
        return index;
      ++index;
      if (index >= end || !N.isLetter(C.JSString_methods.codeUnitAt$1(comment, index)))
        return index;
      ++index;
      while (true) {
        if (index < end) {
          t1 = C.JSString_methods.codeUnitAt$1(comment, index);
          if (!(t1 >= 65 && t1 <= 90))
            t2 = t1 >= 97 && t1 <= 122;
          else
            t2 = true;
          if (!t2)
            t1 = t1 >= 48 && t1 <= 57;
          else
            t1 = true;
        } else
          t1 = false;
        if (!t1)
          break;
        ++index;
      }
      return index;
    },
    parseOneCommentReference$2(token, referenceOffset) {
      var t1, newKeyword, token0, period, prefix, t2, begin, operatorKeyword, keyword, _this = this, _null = null;
      if ("new" === token.type.stringValue) {
        t1 = token.next;
        t1.toString;
        newKeyword = token;
        token0 = t1;
      } else {
        newKeyword = _null;
        token0 = token;
      }
      if (token0.get$isIdentifier() && "." === token0.next.type.stringValue) {
        period = token0.next;
        t1 = period.next;
        t1.toString;
        prefix = token0;
        token0 = t1;
      } else {
        period = _null;
        prefix = period;
      }
      if (token0.type === C.TokenType_Emx) {
        t1 = _this.get$rewriter();
        t2 = period == null ? newKeyword : period;
        token0 = t1.insertSyntheticIdentifier$1(t2 == null ? _this.syntheticPreviousToken$1(token0) : t2);
        t1 = token0.next;
        t1.toString;
        begin = token === t1 ? token0 : token;
        token = token0;
      } else {
        begin = token;
        token = token0;
      }
      if ("operator" === token.type.stringValue) {
        t1 = token.next;
        t1.toString;
        operatorKeyword = token;
        token = t1;
      } else
        operatorKeyword = _null;
      if (token.type.isUserDefinableOperator) {
        if (token.next.type === C.TokenType_Emx) {
          _this.parseOneCommentReferenceRest$6(begin, referenceOffset, newKeyword, prefix, period, token);
          return true;
        }
      } else {
        token = operatorKeyword == null ? token : operatorKeyword;
        if (token.next.type === C.TokenType_Emx) {
          if (token.get$isIdentifier()) {
            _this.parseOneCommentReferenceRest$6(begin, referenceOffset, newKeyword, prefix, period, token);
            return true;
          }
          keyword = token.get$keyword();
          if (newKeyword == null)
            if (prefix == null)
              if (keyword !== C.Keyword_KXs)
                keyword !== C.Keyword_yXf;
        }
      }
      _this.listener.handleNoCommentReference$0();
      return false;
    },
    parseOneCommentReferenceRest$6(begin, referenceOffset, newKeyword, prefix, period, identifierOrOperator) {
      var t1,
        token = begin;
      do {
        t1 = token.offset;
        if (typeof referenceOffset !== "number")
          return H.iae(referenceOffset);
        token.offset = t1 + referenceOffset;
        token = token.next;
      } while (token.type !== C.TokenType_Emx);
      this.listener.handleCommentReference$4(newKeyword, prefix, period, identifierOrOperator);
    },
    isLinkText$2(comment, rightIndex) {
      var ch,
        $length = comment.length,
        index = rightIndex + 1;
      if (index >= $length)
        return false;
      ch = C.JSString_methods.codeUnitAt$1(comment, index);
      if (ch === 40 || ch === 58)
        return true;
      while (true) {
        if (!(ch === 32 || ch === 10 || ch === 13 || ch === 9))
          break;
        ++index;
        if (index >= $length)
          return false;
        ch = C.JSString_methods.codeUnitAt$1(comment, index);
      }
      return ch === 91;
    }
  };
  N.Parser_parseExtension_handleShowHideElements.prototype = {
    call$0() {
      var t3, next, t4, token, typeInfo, isUnambiguouslyType,
        t1 = this._box_0,
        t2 = this.$this,
        elementCount = 0;
      do {
        t3 = t1.token.next;
        next = t3.next;
        t4 = next.type.stringValue;
        if ("get" === t4) {
          token = C.ExtensionShowHideElementIdentifierContext_uwi.ensureIdentifier$2(next, t2);
          t1.token = token;
          t2.listener.handleShowHideIdentifier$2(next, token);
        } else if ("operator" === t4) {
          token = C.ExtensionShowHideElementIdentifierContext_kyU.ensureIdentifier$2(next, t2);
          t1.token = token;
          t2.listener.handleShowHideIdentifier$2(next, token);
        } else if ("set" === t4) {
          token = C.ExtensionShowHideElementIdentifierContext_uwi0.ensureIdentifier$2(next, t2);
          t1.token = token;
          t2.listener.handleShowHideIdentifier$2(next, token);
        } else {
          typeInfo = M.computeType(t3, true, true, true);
          isUnambiguouslyType = typeInfo.get$hasTypeArguments() || typeInfo instanceof V.PrefixedType;
          t3 = t1.token;
          if (isUnambiguouslyType) {
            t3 = t3.next;
            t3.toString;
            t1.token = typeInfo.ensureTypeOrVoid$2(t3, t2);
          } else {
            t3 = t3.next;
            t3.toString;
            token = C.ExtensionShowHideElementIdentifierContext_yrN.ensureIdentifier$2(t3, t2);
            t1.token = token;
            t2.listener.handleShowHideIdentifier$2(null, token);
          }
        }
        ++elementCount;
      } while ("," === t1.token.next.type.stringValue);
      return elementCount;
    },
    $signature: 28
  };
  Y.Quote.prototype = {
    toString$0(_) {
      return this._quote$_name;
    }
  };
  R.ClassHeaderRecoveryListener.prototype = {
    handleClassExtends$2(extendsKeyword, typeCount) {
      this.extendsKeyword = extendsKeyword;
      this.super$ForwardingListener$handleClassExtends(extendsKeyword, typeCount);
    },
    handleClassOrMixinImplements$2(implementsKeyword, interfacesCount) {
      this.implementsKeyword = implementsKeyword;
      this.super$ForwardingListener$handleClassOrMixinImplements(implementsKeyword, interfacesCount);
    },
    handleClassWithClause$1(withKeyword) {
      this.withKeyword = withKeyword;
      this.super$ForwardingListener$handleClassWithClause(withKeyword);
    }
  };
  R.ImportRecoveryListener.prototype = {
    endConditionalUri$3(ifKeyword, leftParen, equalSign) {
      this.ifKeyword = ifKeyword;
      this.super$ForwardingListener$endConditionalUri(ifKeyword, leftParen, equalSign);
    },
    endHide$1(hideKeyword) {
      this.hasCombinator = true;
      this.super$ForwardingListener$endHide(hideKeyword);
    },
    endShow$1(showKeyword) {
      this.hasCombinator = true;
      this.super$ForwardingListener$endShow(showKeyword);
    },
    handleImportPrefix$2(deferredKeyword, asKeyword) {
      this.deferredKeyword = deferredKeyword;
      this.asKeyword = asKeyword;
      this.super$ForwardingListener$handleImportPrefix(deferredKeyword, asKeyword);
    }
  };
  R.MixinHeaderRecoveryListener.prototype = {
    handleClassOrMixinImplements$2(implementsKeyword, interfacesCount) {
      this.implementsKeyword = implementsKeyword;
      this.super$ForwardingListener$handleClassOrMixinImplements(implementsKeyword, interfacesCount);
    },
    handleMixinOn$2(onKeyword, typeCount) {
      this.onKeyword = onKeyword;
      this.super$ForwardingListener$handleMixinOn(onKeyword, typeCount);
    }
  };
  Y.NullValue.prototype = {
    toString$0(_) {
      return this._stack_listener$_name;
    }
  };
  Y.StackListener.prototype = {
    push$1(node) {
      if (node == null) {
        this.internalProblem$3(Z._withArgumentsInternalProblemUnhandled("null", "push"), -1, this.uri);
        H.ReachabilityError$(string$.x60null_t);
      }
      this.stack.push$1(node);
    },
    printEvent$1($name) {
      var t1, t2, _i, s, index;
      P.print("\n------------------");
      for (t1 = this.stack, t1 = t1.get$values(t1), t2 = t1.length, _i = 0; _i < t2; ++_i) {
        s = "  " + H.S(t1[_i]);
        index = C.JSString_methods.indexOf$1(s, "\n");
        H.printString(index !== -1 ? C.JSString_methods.substring$2(s, 0, index) + "..." : s);
      }
      P.print("  >> " + $name);
    },
    logEvent$1($name) {
      var _this = this;
      _this.printEvent$1($name);
      _this.internalProblem$3(Z._withArgumentsInternalProblemUnhandled($name, H.getRuntimeType(_this).toString$0(0)), -1, _this.uri);
      H.ReachabilityError$(string$.x60null_t);
    },
    handleIdentifier$2(token, context) {
      if (!token.get$isSynthetic())
        this.push$1(token.get$lexeme());
      else
        this.push$1(new Y.ParserRecovery(token.offset));
    },
    handleNoName$1(token) {
      this.push$1(C.NullValue_24);
    },
    endInitializer$1(token) {
    },
    checkEmpty$1(charOffset) {
      var _this = this,
        t1 = _this.stack;
      if (t1.get$isNotEmpty(t1)) {
        _this.internalProblem$3(Z._withArgumentsInternalProblemStackNotEmpty(H.getRuntimeType(_this).toString$0(0), C.JSArray_methods.join$1(t1.get$values(t1), "\n  ")), charOffset, _this.uri);
        H.ReachabilityError$(string$.x60null_t);
      }
    },
    endTopLevelDeclaration$1(nextToken) {
      this.checkEmpty$1(nextToken.offset);
    },
    endCompilationUnit$2(count, token) {
      this.checkEmpty$1(token.offset);
    },
    handleClassExtends$2(extendsKeyword, typeCount) {
    },
    handleMixinOn$2(onKeyword, typeCount) {
    },
    handleClassHeader$3(begin, classKeyword, nativeToken) {
    },
    handleMixinHeader$1(mixinKeyword) {
    },
    handleRecoverClassHeader$0() {
    },
    handleRecoverMixinHeader$0() {
    },
    handleClassOrMixinImplements$2(implementsKeyword, interfacesCount) {
    },
    handleExtensionShowHide$4(showKeyword, showElementCount, hideKeyword, hideElementCount) {
    },
    handleNoTypeArguments$1(token) {
      this.push$1(C.NullValue_39);
    },
    handleNoTypeVariables$1(token) {
      this.push$1(C.NullValue_43);
    },
    handleNoConstructorReferenceContinuationAfterTypeArguments$1(token) {
    },
    handleNoType$1(lastConsumed) {
      this.push$1(C.NullValue_38);
    },
    handleNoFormalParameters$2(token, kind) {
      this.push$1(C.NullValue_19);
    },
    handleNoArguments$1(token) {
      this.push$1(C.NullValue_0);
    },
    handleNativeFunctionBody$2(nativeToken, semicolon) {
      this.push$1(C.NullValue_20);
    },
    handleNativeFunctionBodyIgnored$2(nativeToken, semicolon) {
    },
    handleNoInitializers$0() {
      this.push$1(C.NullValue_26);
    },
    handleParenthesizedCondition$1(token) {
    },
    handleParenthesizedExpression$1(token) {
    },
    beginLiteralString$1(token) {
      this.push$1(token);
    },
    endLiteralString$2(interpolationCount, endToken) {
      var token, _this = this;
      if (interpolationCount === 0) {
        token = type$.Token._as(_this.stack.pop$1(null));
        _this.push$1(Y.unescapeString(token.get$lexeme(), token, _this));
      } else {
        _this.internalProblem$3(Z._withArgumentsInternalProblemUnhandled("string interpolation", "endLiteralString"), endToken.offset, _this.uri);
        H.ReachabilityError$(string$.x60null_t);
      }
    },
    handleNativeClause$2(nativeToken, hasName) {
      if (hasName)
        this.stack.pop$1(null);
    },
    endCaseExpression$1(colon) {
    },
    endCatchClause$1(token) {
    },
    handleRecoverableError$3(message, startToken, endToken) {
      message.get$message(message);
      if (this.isIgnoredError$2(message.get$code(message), startToken))
        return;
      this.addProblem$3(message, startToken.offset, N.lengthOfSpan(startToken, endToken));
    },
    isIgnoredError$2(code, token) {
      if (code === C.MessageCode_Qy4)
        return true;
      else if (code === C.MessageCode_BHz)
        return true;
      else
        return false;
    }
  };
  Y.StackImpl.prototype = {
    get$isNotEmpty(_) {
      return this.arrayLength > 0;
    },
    get$length(_) {
      return this.arrayLength;
    },
    get$last(_) {
      var value,
        t1 = this.array,
        t2 = this.arrayLength - 1;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      value = t1[t2];
      return value instanceof Y.NullValue ? null : value;
    },
    $index(_, index) {
      var t1 = this.array,
        t2 = this.arrayLength - 1 - index;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    push$1(value) {
      var t1, newArray, _this = this;
      C.JSArray_methods.$indexSet(_this.array, _this.arrayLength++, value);
      t1 = _this.array.length;
      if (t1 === _this.arrayLength) {
        newArray = P.List_List$filled(t1 * 2, null, false, type$.nullable_Object);
        C.JSArray_methods.setRange$4(newArray, 0, t1, _this.array, 0);
        _this.array = newArray;
      }
    },
    pop$1(nullValue) {
      var value,
        t1 = this.array,
        t2 = --this.arrayLength;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      value = t1[t2];
      C.JSArray_methods.$indexSet(t1, t2, null);
      if (!(value instanceof Y.NullValue))
        return value;
      else if (nullValue == null || value === nullValue)
        return null;
      else
        return value;
    },
    popList$1$3(count, list, nullValue, $T) {
      var array, startIndex, t1, isParserRecovery, i, arrayIndex, value;
      $T._eval$1("List<0?>")._as(list);
      array = this.array;
      startIndex = this.arrayLength - count;
      for (t1 = array.length, isParserRecovery = false, i = 0; i < count; ++i) {
        arrayIndex = startIndex + i;
        if (arrayIndex < 0 || arrayIndex >= t1)
          return H.ioore(array, arrayIndex);
        value = array[arrayIndex];
        C.JSArray_methods.$indexSet(array, arrayIndex, null);
        if (value instanceof Y.NullValue && true || (value == null ? nullValue == null : value === nullValue))
          C.JSArray_methods.$indexSet(list, i, null);
        else if (value instanceof Y.ParserRecovery)
          isParserRecovery = true;
        else
          C.JSArray_methods.$indexSet(list, i, $T._as(value));
      }
      this.arrayLength -= count;
      return isParserRecovery ? null : list;
    },
    get$values(_) {
      var $length = this.arrayLength,
        list = P.List_List$filled($length, null, false, type$.nullable_Object);
      C.JSArray_methods.setRange$3(list, 0, $length, this.array);
      return list;
    },
    $isStack: 1
  };
  Y.DebugStack.prototype = {
    get$isNotEmpty(_) {
      return this.realStack.arrayLength > 0;
    },
    get$last(_) {
      var result = this.realStack.$index(0, 0),
        t1 = this.latestStacktraces;
      C.JSArray_methods.set$length(t1, 0);
      C.JSArray_methods.add$1(t1, type$.StackTrace._as(this.stackTraceStack.$index(0, 0)));
      if (result instanceof Y.NullValue)
        return null;
      return result;
    },
    get$length(_) {
      return this.realStack.arrayLength;
    },
    pop$1(nullValue) {
      var result = this.realStack.pop$1(nullValue),
        t1 = this.latestStacktraces;
      C.JSArray_methods.set$length(t1, 0);
      C.JSArray_methods.add$1(t1, type$.StackTrace._as(this.stackTraceStack.pop$1(null)));
      return result;
    },
    popList$1$3(count, list, nullValue, $T) {
      var result = this.realStack.popList$1$3(count, $T._eval$1("List<0?>")._as(list), nullValue, $T),
        t1 = this.latestStacktraces;
      C.JSArray_methods.set$length(t1, count);
      this.stackTraceStack.popList$1$3(count, t1, null, type$.StackTrace);
      return result;
    },
    push$1(value) {
      this.realStack.push$1(value);
      this.stackTraceStack.push$1(P.StackTrace_current());
    },
    get$values(_) {
      var t1 = this.realStack;
      return t1.get$values(t1);
    },
    $isStack: 1
  };
  Y.ParserRecovery.prototype = {
    toString$0(_) {
      return "ParserRecovery(@" + this.charOffset + ")";
    }
  };
  R.TokenStreamRewriter.prototype = {
    insertParens$2(token, includeIdentifier) {
      var offset, next, next0, t1, _this = this;
      if (!(token.type !== C.TokenType_Emx || token.offset < 0))
        throw H.wrapException("Internal Error: Rewriting at eof.");
      offset = token.next.offset;
      next = L.SyntheticBeginToken$(C.TokenType_5uk, offset, null);
      next0 = includeIdentifier ? _this._setNext$2(next, L.SyntheticStringToken$(C.TokenType_IQp, "", offset, 0)) : next;
      next0 = _this._setNext$2(next0, L.SyntheticToken$(C.TokenType_coy, offset));
      _this._setEndGroup$2(next, next0);
      t1 = token.next;
      t1.toString;
      _this._setNext$2(next0, t1);
      _this._setNext$2(token, next);
      return next;
    },
    insertToken$2(token, newToken) {
      var t1;
      if (!(token.type !== C.TokenType_Emx || token.offset < 0))
        throw H.wrapException("Internal Error: Rewriting at eof.");
      t1 = token.next;
      t1.toString;
      this._setNext$2(newToken, t1);
      this._setNext$2(token, newToken);
      return newToken;
    },
    moveSynthetic$2(token, endGroup) {
      var errorToken, t1, t2, t3, _this = this;
      if (!(token.type !== C.TokenType_Emx || token.offset < 0))
        throw H.wrapException("Internal Error: Rewriting at eof.");
      if (token === endGroup)
        return endGroup;
      errorToken = endGroup.next;
      errorToken = errorToken instanceof S.UnmatchedToken ? errorToken : null;
      t1 = endGroup.get$beforeSynthetic();
      t1.toString;
      t2 = errorToken == null;
      t3 = (t2 ? endGroup : errorToken).next;
      t3.toString;
      _this._setNext$2(t1, t3);
      t3 = token.next;
      t3.toString;
      _this._setNext$2(token, endGroup);
      _this._setNext$2(t2 ? endGroup : errorToken, t3);
      _this._setOffset$2(endGroup, t3.offset);
      if (!t2)
        _this._setOffset$2(errorToken, t3.offset);
      return endGroup;
    },
    replaceTokenFollowing$2(previousToken, replacementToken) {
      var t2, _this = this,
        t1 = previousToken.next;
      t1.toString;
      _this._setNext$2(previousToken, replacementToken);
      _this._setPrecedingComments$2(replacementToken, t1._precedingComment);
      t2 = _this._lastTokenInChain$1(replacementToken);
      t1 = t1.next;
      t1.toString;
      _this._setNext$2(t2, t1);
      return replacementToken;
    },
    _lastTokenInChain$1(firstToken) {
      var t1,
        current = firstToken,
        previous = null;
      while (true) {
        t1 = current.next;
        if (!(t1 != null && t1.type !== C.TokenType_Emx))
          break;
        if (previous != null)
          this._setPrevious$2(current, previous);
        t1 = current.next;
        t1.toString;
        previous = current;
        current = t1;
      }
      if (previous != null)
        this._setPrevious$2(current, previous);
      return current;
    },
    replaceNextTokensWithSyntheticToken$3(previousToken, count, newTokenType) {
      var replacement, end,
        t1 = previousToken.next;
      t1.toString;
      replacement = L.ReplacementToken$(newTokenType, t1);
      this.insertToken$2(previousToken, replacement);
      t1 = replacement.next;
      t1.toString;
      for (end = t1; count > 0; end = t1) {
        --count;
        t1 = end.next;
        t1.toString;
      }
      this._setNext$2(replacement, end);
      return replacement;
    },
    insertSyntheticIdentifier$2(token, value) {
      return this.insertToken$2(token, L.SyntheticStringToken$(C.TokenType_IQp, value, token.next.offset, 0));
    },
    insertSyntheticIdentifier$1(token) {
      return this.insertSyntheticIdentifier$2(token, "");
    }
  };
  R.TokenStreamRewriterImpl.prototype = {
    _setNext$2(setOn, nextToken) {
      return setOn.setNext$1(nextToken);
    },
    _setEndGroup$2(setOn, endGroup) {
      setOn.endToken = endGroup;
    },
    _setOffset$2(setOn, offset) {
      setOn.offset = offset;
    },
    _setPrecedingComments$2(setOn, comment) {
      setOn._precedingComment = comment;
      setOn._setCommentParent$1(comment);
    },
    _setPrevious$2(setOn, previous) {
      setOn.previous = previous;
    }
  };
  R.NextTokenStreamChange.prototype = {
    undo$0() {
      var _this = this,
        t1 = _this.nextToken;
      t1.set$beforeSynthetic(_this.nextTokenBeforeSynthetic);
      t1.previous = _this.nextTokenPrevious;
      _this.setOn.next = _this.setOnNext;
    },
    $isTokenStreamChange: 1
  };
  R.EndGroupTokenStreamChange.prototype = {
    undo$0() {
      this.setOn.endToken = this.endGroup;
    },
    $isTokenStreamChange: 1
  };
  R.OffsetTokenStreamChange.prototype = {
    undo$0() {
      this.setOn.offset = this.offset;
    },
    $isTokenStreamChange: 1
  };
  R.PrecedingCommentsTokenStreamChange.prototype = {
    undo$0() {
      var t1 = this.setOn,
        t2 = this.comment;
      t1._precedingComment = t2;
      t1._setCommentParent$1(t2);
    },
    $isTokenStreamChange: 1
  };
  R.PreviousTokenStreamChange.prototype = {
    undo$0() {
      this.setOn.previous = this.previous;
    },
    $isTokenStreamChange: 1
  };
  R.UndoableTokenStreamRewriter.prototype = {
    undo$0() {
      var t1, i;
      for (t1 = this._changes, i = t1.length - 1; i >= 0; --i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].undo$0();
      }
      C.JSArray_methods.set$length(t1, 0);
    },
    _setEndGroup$2(setOn, endGroup) {
      C.JSArray_methods.add$1(this._changes, new R.EndGroupTokenStreamChange(setOn, setOn.endToken));
      setOn.endToken = endGroup;
    },
    _setNext$2(setOn, nextToken) {
      C.JSArray_methods.add$1(this._changes, new R.NextTokenStreamChange(setOn, setOn.next, nextToken, nextToken.previous, nextToken.get$beforeSynthetic()));
      setOn.next = nextToken;
      nextToken.previous = setOn;
      nextToken.set$beforeSynthetic(setOn);
      return nextToken;
    },
    _setOffset$2(setOn, offset) {
      C.JSArray_methods.add$1(this._changes, new R.OffsetTokenStreamChange(setOn, setOn.offset));
      setOn.offset = offset;
    },
    _setPrecedingComments$2(setOn, comment) {
      C.JSArray_methods.add$1(this._changes, new R.PrecedingCommentsTokenStreamChange(setOn, setOn._precedingComment));
      setOn._precedingComment = comment;
      setOn._setCommentParent$1(comment);
    },
    _setPrevious$2(setOn, previous) {
      var t1 = setOn.previous;
      t1.toString;
      C.JSArray_methods.add$1(this._changes, new R.PreviousTokenStreamChange(setOn, t1));
      setOn.previous = previous;
    }
  };
  M.TypeParamOrArgInfo.prototype = {
    get$isSimpleTypeArgument() {
      return false;
    },
    get$recovered() {
      return false;
    },
    get$typeInfo() {
      throw H.wrapException("Internal error: " + H.getRuntimeType(this).toString$0(0) + " is not a SimpleTypeArgument.");
    }
  };
  V.NoType.prototype = {
    get$asNonNullable() {
      return this;
    },
    get$couldBeExpression() {
      return false;
    },
    get$hasTypeArguments() {
      return false;
    },
    get$isNullable() {
      return false;
    },
    get$isFunctionType() {
      return false;
    },
    get$recovered() {
      return false;
    },
    ensureTypeNotVoid$2(token, parser) {
      var t1 = token.next;
      t1.toString;
      parser.reportRecoverableErrorWithToken$2(t1, C.Template__withArgumentsExpectedType);
      parser.get$rewriter().insertSyntheticIdentifier$1(token);
      return C.C_SimpleType.parseType$2(token, parser);
    },
    ensureTypeOrVoid$2(token, parser) {
      return this.ensureTypeNotVoid$2(token, parser);
    },
    parseType$2(token, parser) {
      parser.listener.handleNoType$1(token);
      return token;
    },
    skipType$1(token) {
      return token;
    },
    $isTypeInfo: 1
  };
  V.PrefixedType.prototype = {
    get$asNonNullable() {
      return this;
    },
    get$couldBeExpression() {
      return true;
    },
    get$hasTypeArguments() {
      return false;
    },
    get$isNullable() {
      return false;
    },
    get$isFunctionType() {
      return false;
    },
    get$recovered() {
      return false;
    },
    ensureTypeNotVoid$2(token, parser) {
      return this.parseType$2(token, parser);
    },
    ensureTypeOrVoid$2(token, parser) {
      return this.parseType$2(token, parser);
    },
    parseType$2(token, parser) {
      var listener, t2, t3,
        t1 = token.next;
      t1.toString;
      listener = parser.listener;
      listener.handleIdentifier$2(t1, C.TypeReferenceIdentifierContext_Ucj);
      token = t1.next;
      t2 = token.next;
      t2.toString;
      listener.handleIdentifier$2(t2, C.TypeReferenceIdentifierContext_9a2);
      listener.handleQualified$1(token);
      t3 = t2.next;
      t3.toString;
      listener.handleNoTypeArguments$1(t3);
      listener.handleType$2(t1, null);
      return t2;
    },
    skipType$1(token) {
      var t1 = token.next.next.next;
      t1.toString;
      return t1;
    },
    $isTypeInfo: 1
  };
  V.SimpleNullableTypeWith1Argument.prototype = {
    get$asNonNullable() {
      return C.SimpleTypeWith1Argument_SimpleTypeArgument1;
    },
    get$isNullable() {
      return true;
    },
    get$isFunctionType() {
      return false;
    },
    get$recovered() {
      return false;
    },
    parseTypeRest$3(start, token, parser) {
      var t1 = token.next;
      t1.toString;
      parser.listener.handleType$2(start, t1);
      return t1;
    },
    skipType$1(token) {
      var t1 = this.super$SimpleTypeWith1Argument$skipType(token).next;
      t1.toString;
      return t1;
    }
  };
  V.SimpleTypeWith1Argument.prototype = {
    get$asNonNullable() {
      return this;
    },
    get$couldBeExpression() {
      return false;
    },
    get$hasTypeArguments() {
      return true;
    },
    get$isNullable() {
      return false;
    },
    get$isFunctionType() {
      return false;
    },
    get$recovered() {
      return false;
    },
    ensureTypeNotVoid$2(token, parser) {
      return this.parseType$2(token, parser);
    },
    ensureTypeOrVoid$2(token, parser) {
      return this.parseType$2(token, parser);
    },
    parseType$2(token, parser) {
      var t1 = token.next;
      t1.toString;
      parser.listener.handleIdentifier$2(t1, C.TypeReferenceIdentifierContext_27z);
      return this.parseTypeRest$3(t1, this.typeArg.parseArguments$2(t1, parser), parser);
    },
    parseTypeRest$3(start, token, parser) {
      parser.listener.handleType$2(start, null);
      return token;
    },
    skipType$1(token) {
      var t1 = token.next;
      t1.toString;
      return this.typeArg.skip$1(0, t1);
    },
    $isTypeInfo: 1
  };
  V.SimpleNullableType.prototype = {
    get$asNonNullable() {
      return C.C_SimpleType;
    },
    get$isNullable() {
      return true;
    },
    get$isFunctionType() {
      return false;
    },
    get$recovered() {
      return false;
    },
    parseTypeRest$2(start, parser) {
      var t1 = start.next;
      t1.toString;
      parser.listener.handleType$2(start, t1);
      return t1;
    },
    skipType$1(token) {
      var t1 = token.next.next;
      t1.toString;
      return t1;
    }
  };
  V.SimpleType.prototype = {
    get$asNonNullable() {
      return this;
    },
    get$couldBeExpression() {
      return true;
    },
    get$hasTypeArguments() {
      return false;
    },
    get$isNullable() {
      return false;
    },
    get$isFunctionType() {
      return false;
    },
    get$recovered() {
      return false;
    },
    ensureTypeNotVoid$2(token, parser) {
      return this.parseType$2(token, parser);
    },
    ensureTypeOrVoid$2(token, parser) {
      return this.parseType$2(token, parser);
    },
    parseType$2(token, parser) {
      var t2, t3,
        t1 = token.next;
      t1.toString;
      parser.listener.handleIdentifier$2(t1, C.TypeReferenceIdentifierContext_27z);
      t2 = parser.listener;
      t3 = t1.next;
      t3.toString;
      t2.handleNoTypeArguments$1(t3);
      return this.parseTypeRest$2(t1, parser);
    },
    parseTypeRest$2(token, parser) {
      parser.listener.handleType$2(token, null);
      return token;
    },
    skipType$1(token) {
      var t1 = token.next;
      t1.toString;
      return t1;
    },
    $isTypeInfo: 1
  };
  V.VoidType.prototype = {
    get$asNonNullable() {
      return this;
    },
    get$couldBeExpression() {
      return false;
    },
    get$hasTypeArguments() {
      return false;
    },
    get$isNullable() {
      return false;
    },
    get$isFunctionType() {
      return false;
    },
    get$recovered() {
      return false;
    },
    ensureTypeNotVoid$2(token, parser) {
      var token0,
        t1 = token.next;
      t1.toString;
      token0 = N.findNonZeroLengthToken(t1);
      parser.listener.handleRecoverableError$3(C.MessageCode_wWe, token0, token0);
      return C.C_SimpleType.parseType$2(token, parser);
    },
    ensureTypeOrVoid$2(token, parser) {
      return this.parseType$2(token, parser);
    },
    parseType$2(token, parser) {
      var typeParam, t1, token0, hasTypeArguments;
      token = token.next;
      if ("<" === token.next.type.stringValue) {
        typeParam = M.computeTypeParamOrArg(token, false, false);
        if (typeParam !== C.C_NoTypeParamOrArg) {
          t1 = token.next;
          t1.toString;
          token0 = N.findNonZeroLengthToken(t1);
          parser.listener.handleRecoverableError$3(C.MessageCode_sUl, token0, token0);
          token0 = typeParam.parseArguments$2(token, parser);
          hasTypeArguments = true;
        } else {
          token0 = token;
          hasTypeArguments = false;
        }
      } else {
        token0 = token;
        hasTypeArguments = false;
      }
      t1 = parser.listener;
      if (hasTypeArguments)
        t1.handleVoidKeywordWithTypeArguments$1(token);
      else
        t1.handleVoidKeyword$1(token);
      return token0;
    },
    skipType$1(token) {
      var typeParam;
      token = token.next;
      if ("<" === token.next.type.stringValue) {
        typeParam = M.computeTypeParamOrArg(token, false, false);
        if (typeParam !== C.C_NoTypeParamOrArg)
          token = typeParam.skip$1(0, token);
      }
      return token;
    },
    $isTypeInfo: 1
  };
  V.ComplexTypeInfo.prototype = {
    get$asNonNullable() {
      var _this = this,
        t1 = _this.beforeQuestionMark;
      return t1 == null ? _this : new V.ComplexTypeInfo(_this.start, _this.typeArguments, t1, _this.typeVariableStarters, _this.gftHasReturnType, _this.recovered);
    },
    get$couldBeExpression() {
      if (this.typeArguments === C.C_NoTypeParamOrArg) {
        var t1 = this.typeVariableStarters;
        t1 = t1.get$isEmpty(t1);
      } else
        t1 = false;
      return t1;
    },
    get$hasTypeArguments() {
      return !(this.typeArguments instanceof V.NoTypeParamOrArg);
    },
    get$isNullable() {
      return this.beforeQuestionMark != null;
    },
    get$isFunctionType() {
      return this.gftHasReturnType != null;
    },
    ensureTypeNotVoid$2(token, parser) {
      return this.parseType$2(token, parser);
    },
    ensureTypeOrVoid$2(token, parser) {
      return this.parseType$2(token, parser);
    },
    parseType$2(token, parser) {
      var typeVariableEndGroups, t, t1, typeRefOrPrefix, questionMark, endGroupIndex, token0, _this = this;
      if ("." === _this.start.type.stringValue)
        _this.start = parser.insertSyntheticIdentifier$2(token, C.TypeReferenceIdentifierContext_Ucj);
      typeVariableEndGroups = H._setArrayType([], type$.JSArray_Token);
      t = _this.typeVariableStarters;
      while (t.get$isNotEmpty(t)) {
        parser.listener.beginFunctionType$1(_this.start);
        C.JSArray_methods.add$1(typeVariableEndGroups, M.computeTypeParamOrArg(t.get$head(t), true, false).parseVariables$2(t.get$head(t), parser));
        t1 = t.get$tail();
        t1.toString;
        t = t1;
      }
      if (_this.gftHasReturnType === false)
        parser.listener.handleNoType$1(token);
      else {
        typeRefOrPrefix = token.next;
        t1 = typeRefOrPrefix.type.stringValue;
        if ("void" === t1)
          token = C.C_VoidType.parseType$2(token, parser);
        else {
          if ("." !== t1 && "." !== typeRefOrPrefix.next.type.stringValue)
            token = parser.ensureIdentifier$2(token, C.TypeReferenceIdentifierContext_27z);
          else {
            token = parser.parseQualifiedRest$2(parser.ensureIdentifier$2(token, C.TypeReferenceIdentifierContext_Ucj), C.TypeReferenceIdentifierContext_9a2);
            if (token.get$isSynthetic() && _this.end == typeRefOrPrefix.next)
              _this.end = token;
          }
          token = _this.typeArguments.parseArguments$2(token, parser);
          questionMark = token.next;
          if ("?" === questionMark.type.stringValue)
            t1 = typeVariableEndGroups.length !== 0 || _this.beforeQuestionMark != null;
          else
            t1 = false;
          if (t1)
            token = questionMark;
          else
            questionMark = null;
          parser.listener.handleType$2(typeRefOrPrefix, questionMark);
        }
      }
      endGroupIndex = typeVariableEndGroups.length - 1;
      t = _this.typeVariableStarters;
      while (t.get$isNotEmpty(t)) {
        token = token.next;
        if ("<" === token.next.type.stringValue) {
          if (endGroupIndex < 0 || endGroupIndex >= typeVariableEndGroups.length)
            return H.ioore(typeVariableEndGroups, endGroupIndex);
          token0 = typeVariableEndGroups[endGroupIndex];
        } else
          token0 = token;
        token0 = parser.parseFormalParametersRequiredOpt$2(token0, C.MemberKind_4);
        questionMark = token0.next;
        if ("?" === questionMark.type.stringValue)
          t1 = endGroupIndex > 0 || _this.beforeQuestionMark != null;
        else
          t1 = false;
        if (t1)
          token0 = questionMark;
        else
          questionMark = null;
        --endGroupIndex;
        parser.listener.endFunctionType$2(token, questionMark);
        t1 = t.get$tail();
        t1.toString;
        t = t1;
        token = token0;
      }
      return _this.end = token;
    },
    skipType$1(token) {
      var t1 = this.end;
      t1.toString;
      return t1;
    },
    computeNoTypeGFT$2(beforeStart, required) {
      this.computeRest$2(beforeStart, required);
      if (this.gftHasReturnType == null)
        return required ? C.C_SimpleType : C.C_NoType;
      return this;
    },
    computeVoidGFT$1(required) {
      var _this = this;
      _this.computeRest$2(_this.start, required);
      if (_this.gftHasReturnType == null)
        return C.C_VoidType;
      return _this;
    },
    computeIdentifierGFT$1(required) {
      var _this = this;
      _this.computeRest$2(_this.start, required);
      if (_this.gftHasReturnType == null)
        return C.C_SimpleType;
      return _this;
    },
    computeIdentifierQuestionGFT$1(required) {
      var _this = this;
      _this.computeRest$2(_this.start, required);
      if (_this.gftHasReturnType == null)
        return C.C_SimpleNullableType;
      return _this;
    },
    computeBuiltinOrVarAsType$1(required) {
      var _this = this,
        t1 = _this.typeArguments.skip$1(0, _this.start);
      _this.end = t1;
      t1.toString;
      _this.computeRest$2(t1, required);
      return _this;
    },
    computeSimpleWithTypeArguments$1(required) {
      var _this = this,
        t1 = _this.typeArguments.skip$1(0, _this.start);
      _this.end = t1;
      t1.toString;
      _this.computeRest$2(t1, required);
      if (!required) {
        t1 = _this.end.next;
        t1.toString;
        if (!V.looksLikeName(t1)) {
          t1 = t1.type;
          t1 = t1 === C.TokenType_Emx || "}" === t1.stringValue;
        } else
          t1 = true;
        t1 = !t1 && _this.gftHasReturnType == null;
      } else
        t1 = false;
      if (t1)
        return C.C_NoType;
      return _this;
    },
    computePrefixedType$1(required) {
      var t1, _this = this,
        token = _this.start;
      if ("." !== token.type.stringValue) {
        t1 = token.next;
        t1.toString;
        token = t1;
      }
      if (token.next.get$isKeywordOrIdentifier()) {
        t1 = token.next;
        t1.toString;
        token = t1;
      }
      t1 = _this.typeArguments.skip$1(0, token);
      _this.end = t1;
      t1.toString;
      _this.computeRest$2(t1, required);
      if (!required) {
        t1 = _this.end.next;
        t1.toString;
        t1 = !V.looksLikeName(t1) && _this.gftHasReturnType == null;
      } else
        t1 = false;
      if (t1)
        return C.C_NoType;
      return _this;
    },
    computeRest$2(token, required) {
      var t1, t2, next, t3, _this = this,
        token0 = token.next;
      if ("?" === token0.type.stringValue) {
        _this.beforeQuestionMark = token;
        _this.end = token0;
        token = token0;
      }
      t1 = token.next;
      t1.toString;
      for (t2 = !required, token = t1; "Function" === token.type.stringValue;) {
        token0 = M.computeTypeParamOrArg(token, true, false).skip$1(0, token).next;
        if ("(" !== token0.type.stringValue)
          break;
        if (token0.get$endGroup() == null)
          break;
        t1 = token0.get$endGroup();
        t1.toString;
        if (t2) {
          next = t1.next;
          if ("?" === next.type.stringValue) {
            t3 = next.next;
            t3.toString;
            next = t3;
          }
          if (!(next.get$isIdentifier() || "this" === next.type.stringValue))
            break;
        }
        if (_this.gftHasReturnType == null)
          _this.gftHasReturnType = token !== _this.start;
        _this.set$typeVariableStarters(_this.typeVariableStarters.prepend$1(token));
        _this.beforeQuestionMark = null;
        _this.end = t1;
        token = t1.next;
        if ("?" === token.type.stringValue) {
          _this.beforeQuestionMark = t1;
          _this.end = token;
          t1 = token.next;
          t1.toString;
          token = t1;
        }
      }
    },
    set$typeVariableStarters(typeVariableStarters) {
      this.typeVariableStarters = type$.Link_Token._as(typeVariableStarters);
    },
    $isTypeInfo: 1,
    get$recovered() {
      return this.recovered;
    }
  };
  V.NoTypeParamOrArg.prototype = {
    get$typeArgumentCount() {
      return 0;
    },
    parseArguments$2(token, parser) {
      var t1 = parser.listener,
        t2 = token.next;
      t2.toString;
      t1.handleNoTypeArguments$1(t2);
      return token;
    },
    parseVariables$2(token, parser) {
      var t1 = parser.listener,
        t2 = token.next;
      t2.toString;
      t1.handleNoTypeVariables$1(t2);
      return token;
    },
    skip$1(_, token) {
      return token;
    }
  };
  V.SimpleTypeArgument1.prototype = {
    get$isSimpleTypeArgument() {
      return true;
    },
    get$typeArgumentCount() {
      return 1;
    },
    get$typeInfo() {
      return C.SimpleTypeWith1Argument_SimpleTypeArgument1;
    },
    parseArguments$2(token, parser) {
      var endGroup,
        beginGroup = token.next,
        t1 = beginGroup.next;
      t1.toString;
      endGroup = this.parseEndGroup$2(beginGroup, t1);
      parser.listener.beginTypeArguments$1(beginGroup);
      C.C_SimpleType.parseType$2(beginGroup, parser);
      parser.listener.endTypeArguments$3(1, beginGroup, endGroup);
      return endGroup;
    },
    parseVariables$2(token, parser) {
      var endGroup, listener,
        beginGroup = token.next,
        t1 = beginGroup.next;
      t1.toString;
      endGroup = this.parseEndGroup$2(beginGroup, t1);
      listener = parser.listener;
      listener.beginTypeVariables$1(beginGroup);
      listener.beginMetadataStar$1(t1);
      listener.endMetadataStar$1(0);
      listener.handleIdentifier$2(t1, C.TypeVariableDeclarationIdentifierContext_Fyn);
      listener.beginTypeVariable$1(t1);
      listener.handleTypeVariablesDefined$2(t1, 1);
      listener.handleNoType$1(t1);
      listener.endTypeVariable$4(endGroup, 0, null, null);
      listener.endTypeVariables$2(beginGroup, endGroup);
      return endGroup;
    },
    skip$1(_, token) {
      var t1 = token.next.next;
      t1.toString;
      return this.skipEndGroup$1(t1);
    },
    skipEndGroup$1(token) {
      var t1 = token.next;
      t1.toString;
      return t1;
    },
    parseEndGroup$2(beginGroup, token) {
      var t1 = token.next;
      t1.toString;
      return t1;
    }
  };
  V.SimpleTypeArgument1GtEq.prototype = {
    get$typeInfo() {
      return C.SimpleTypeWith1Argument_SimpleTypeArgument1GtEq;
    },
    skipEndGroup$1(token) {
      var t1 = token.next;
      t1.toString;
      return N.splitGtEq(t1);
    },
    parseEndGroup$2(beginGroup, beforeEndGroup) {
      var t1, t2,
        endGroup = beforeEndGroup.next;
      if (">" !== endGroup.type.stringValue) {
        endGroup = N.splitGtEq(endGroup);
        t1 = endGroup.next;
        t2 = t1.next;
        t2.toString;
        t1.setNext$1(t2);
      }
      beforeEndGroup.setNext$1(endGroup);
      return endGroup;
    }
  };
  V.SimpleTypeArgument1GtGt.prototype = {
    get$typeInfo() {
      return C.SimpleTypeWith1Argument_SimpleTypeArgument1GtGt;
    },
    skipEndGroup$1(token) {
      var t1 = token.next;
      t1.toString;
      return N.splitGtGt(t1);
    },
    parseEndGroup$2(beginGroup, beforeEndGroup) {
      var t1, t2,
        endGroup = beforeEndGroup.next;
      if (">" !== endGroup.type.stringValue) {
        endGroup = N.splitGtGt(endGroup);
        t1 = endGroup.next;
        t2 = t1.next;
        t2.toString;
        t1.setNext$1(t2);
      }
      beforeEndGroup.setNext$1(endGroup);
      return endGroup;
    }
  };
  V.ComplexTypeParamOrArgInfo.prototype = {
    compute$0() {
      var typeInfo, t3, value, next1, token, _this = this,
        next = _this.start,
        t1 = _this.inDeclaration,
        t2 = !t1,
        next0 = next;
      while (true) {
        if (!true) {
          next = next0;
          break;
        }
        typeInfo = M.computeType(next0, true, t1, false);
        _this.recovered = C.JSBool_methods.$or(_this.recovered, typeInfo.get$recovered());
        if (typeInfo === C.C_NoType) {
          while (true) {
            t3 = typeInfo === C.C_NoType;
            if (!(t3 && "@" === next0.next.type.stringValue))
              break;
            next0 = N.skipMetadata(next0);
            typeInfo = M.computeType(next0, true, t1, false);
          }
          if (t3) {
            if (next0 == next)
              if (t2) {
                value = next0.next.type.stringValue;
                t3 = !(value === ">" || value === ">>" || value === ">=" || value === ">>>" || value === ">>=" || value === ">>>=");
              } else
                t3 = false;
            else
              t3 = false;
            if (t3)
              return C.C_NoTypeParamOrArg;
            next1 = next0.next;
            if ("," !== next1.type.stringValue) {
              next = next1;
              break;
            }
          }
        }
        ++_this.typeArgumentCount;
        token = typeInfo.skipType$1(next0);
        next0 = token.next;
        if ("extends" === next0.type.stringValue) {
          token = M.computeType(next0, true, t1, false).skipType$1(next0);
          t3 = token.next;
          t3.toString;
          next0 = t3;
        }
        if ("," !== next0.type.stringValue) {
          t3 = V.splitCloser(next0);
          _this.skipEnd = t3;
          if (t3 != null)
            return _this;
          if (t2)
            return C.C_NoTypeParamOrArg;
          if (!V.looksLikeTypeParamOrArg(true, next0)) {
            next = next0;
            break;
          }
          next0 = token;
        }
      }
      t1 = V.splitCloser(next);
      _this.skipEnd = t1;
      if (t1 == null) {
        _this.recovered = true;
        if ("(" === next.type.stringValue) {
          t1 = next.get$endGroup().next;
          t1.toString;
          next = t1;
        }
        t1 = _this.skipEnd = V.splitCloser(next);
        if (t1 == null) {
          t1 = next.next;
          t1.toString;
          t1 = _this.skipEnd = V.splitCloser(t1);
        }
        if (t1 == null)
          _this.skipEnd = N.syntheticGt(next);
      }
      return _this;
    },
    parseArguments$2(token, parser) {
      var t1, next0, count, typeInfo, t2, _this = this,
        next = _this.start;
      parser.listener.beginTypeArguments$1(next);
      for (t1 = _this.inDeclaration, next0 = next, count = 0; true;) {
        typeInfo = M.computeType(next0, true, t1, false);
        if (typeInfo === C.C_NoType)
          while (true) {
            if (!(typeInfo === C.C_NoType && "@" === next0.next.type.stringValue))
              break;
            t2 = next0.next;
            t2.toString;
            next0 = N.skipMetadata(next0);
            parser.listener.handleRecoverableError$3(C.MessageCode_NQk, t2, next0);
            typeInfo = M.computeType(next0, true, t1, false);
          }
        token = typeInfo.ensureTypeOrVoid$2(next0, parser);
        next0 = token.next;
        ++count;
        if ("," !== next0.type.stringValue) {
          if (V.parseCloser(token))
            break;
          if (!V.looksLikeTypeParamOrArg(t1, next0)) {
            token = _this.parseUnexpectedEnd$3(token, true, parser);
            break;
          }
          next0 = _this.parseMissingComma$2(token, parser);
        }
      }
      t1 = token.next;
      t1.toString;
      parser.listener.endTypeArguments$3(count, next, t1);
      return t1;
    },
    parseVariables$2(token, parser) {
      var t1, t2, next0, count, typeStarts, superTypeInfos, variances, variance, identifier, t3, t4, next1, typeInfo, value, token3, token2, next2, extendsOrSuper, _this = this, _null = null,
        next = _this.start,
        listener = parser.listener;
      listener.beginTypeVariables$1(next);
      for (t1 = _this.allowsVariance, t2 = _this.inDeclaration, next0 = next, count = 0, typeStarts = C.C_Link0, superTypeInfos = C.C_Link1, variances = C.C_Link2; true;) {
        token = parser.parseMetadataStar$1(next0);
        variance = next0.next;
        identifier = variance.next;
        if (t1) {
          t3 = variance.type.stringValue;
          t3 = ("in" === t3 || "inout" === t3 || "out" === t3) && identifier != null && identifier.get$isKeywordOrIdentifier();
        } else
          t3 = false;
        if (t3) {
          variances = variances.prepend$1(variance);
          while (true) {
            if (identifier != null) {
              t3 = identifier.type.stringValue;
              if ("in" === t3 || "inout" === t3 || "out" === t3) {
                t3 = identifier.next;
                t3 = t3 != null && t3.get$isKeywordOrIdentifier();
              } else
                t3 = false;
            } else
              t3 = false;
            if (!t3)
              break;
            token = N.findNonZeroLengthToken(identifier);
            parser.listener.handleRecoverableError$3(C.MessageCode_kB5, token, token);
            t3 = variance.next;
            t3.toString;
            t4 = identifier.next;
            t4.toString;
            identifier = t4;
            variance = t3;
          }
          token = variance;
        } else
          variances = variances.prepend$1(_null);
        next0 = parser.ensureIdentifier$2(token, C.TypeVariableDeclarationIdentifierContext_Fyn);
        listener.beginTypeVariable$1(next0);
        typeStarts = typeStarts.prepend$1(next0);
        next1 = next0.next;
        if ("extends" === next1.type.stringValue) {
          typeInfo = M.computeType(next1, true, t2, false);
          token = typeInfo.skipType$1(next1);
          t3 = token.next;
          t3.toString;
          superTypeInfos = superTypeInfos.prepend$1(typeInfo);
          next0 = t3;
        } else {
          superTypeInfos = superTypeInfos.prepend$1(_null);
          token = next0;
          next0 = next1;
        }
        ++count;
        if ("," !== next0.type.stringValue) {
          value = token.type.stringValue;
          if (value === ">" || value === ">>" || value === ">=" || value === ">>>" || value === ">>=" || value === ">>>=")
            break;
          if (!V.looksLikeTypeParamOrArg(t2, next0))
            break;
          next0 = _this.parseMissingComma$2(token, parser);
        }
      }
      listener.handleTypeVariablesDefined$2(token, count);
      for (token3 = _null; typeStarts.get$isNotEmpty(typeStarts); variances = t3, superTypeInfos = t2, typeStarts = t1) {
        token2 = typeStarts.get$head(typeStarts);
        typeInfo = superTypeInfos.get$head(superTypeInfos);
        variance = variances.get$head(variances);
        t1 = token2.next;
        t1.toString;
        if (typeInfo != null) {
          token2 = typeInfo.ensureTypeNotVoid$2(t1, parser);
          t2 = token2.next;
          t2.toString;
          next2 = t2;
          extendsOrSuper = t1;
        } else {
          listener.handleNoType$1(token2);
          next2 = t1;
          extendsOrSuper = _null;
        }
        if (token3 == null)
          token3 = token2;
        --count;
        listener.endTypeVariable$4(next2, count, extendsOrSuper, variance);
        t1 = typeStarts.get$tail();
        t1.toString;
        t2 = superTypeInfos.get$tail();
        t2.toString;
        t3 = variances.get$tail();
        t3.toString;
      }
      token3.toString;
      if (!V.parseCloser(token3))
        token3 = _this.parseUnexpectedEnd$3(token3, false, parser);
      t1 = token3.next;
      t1.toString;
      listener.endTypeVariables$2(next, t1);
      return t1;
    },
    parseMissingComma$2(token, parser) {
      var t2, token0,
        t1 = token.next;
      t1.toString;
      t2 = type$.Message._as(Z._withArgumentsExpectedButGot(","));
      token0 = N.findNonZeroLengthToken(t1);
      parser.listener.handleRecoverableError$3(t2, token0, token0);
      return parser.get$rewriter().insertToken$2(token, L.SyntheticToken$(C.TokenType_O55, t1.offset));
    },
    parseUnexpectedEnd$3(token, isArguments, parser) {
      var errorReported, t2, typeFollowsExtends, next, invalidType, token0, originalListener, invalidTypeVar, endGroup,
        t1 = token.next;
      t1.toString;
      if (!token.get$isSynthetic())
        errorReported = t1.get$isSynthetic() && t1.type !== C.TokenType_Emx;
      else
        errorReported = true;
      if ("extends" === t1.type.stringValue) {
        if (!errorReported) {
          t2 = type$.Message._as(Z._withArgumentsExpectedAfterButGot(">"));
          token = N.findNonZeroLengthToken(token);
          parser.listener.handleRecoverableError$3(t2, token, token);
          errorReported = true;
        }
        t2 = t1.next;
        t2.toString;
        typeFollowsExtends = M.isValidTypeReference(t2);
        if (V.parseCloser(t1))
          return t1;
        next = t2;
        token = t1;
      } else {
        next = t1;
        typeFollowsExtends = false;
      }
      if (!typeFollowsExtends) {
        t1 = next.type.stringValue;
        t1 = "dynamic" === t1 || "void" === t1 || "Function" === t1;
      } else
        t1 = true;
      if (t1) {
        invalidType = M.computeType(token, true, false, false);
        if (invalidType !== C.C_NoType) {
          if (!errorReported) {
            t1 = type$.Message._as(Z._withArgumentsExpectedAfterButGot(">"));
            token0 = N.findNonZeroLengthToken(token);
            parser.listener.handleRecoverableError$3(t1, token0, token0);
            errorReported = true;
          }
          originalListener = parser.listener;
          parser.listener = new Y.ForwardingListener(null);
          token = invalidType.parseType$2(token, parser);
          t1 = token.next;
          t1.toString;
          parser.listener = originalListener;
          if (V.parseCloser(token))
            return token;
          next = t1;
        }
      }
      invalidTypeVar = M.computeTypeParamOrArg(token, this.inDeclaration, false);
      if (invalidTypeVar !== C.C_NoTypeParamOrArg) {
        if (!errorReported) {
          t1 = type$.Message._as(Z._withArgumentsExpectedAfterButGot(">"));
          token0 = N.findNonZeroLengthToken(token);
          parser.listener.handleRecoverableError$3(t1, token0, token0);
          errorReported = true;
        }
        originalListener = parser.listener;
        parser.listener = new Y.ForwardingListener(null);
        token = isArguments ? invalidTypeVar.parseArguments$2(token, parser) : invalidTypeVar.parseVariables$2(token, parser);
        t1 = token.next;
        t1.toString;
        parser.listener = originalListener;
        if (V.parseCloser(token))
          return token;
        next = t1;
      }
      if ("(" === next.type.stringValue && next.get$endGroup() != null) {
        if (!errorReported) {
          t1 = type$.Message._as(Z._withArgumentsExpectedAfterButGot(">"));
          token = N.findNonZeroLengthToken(token);
          parser.listener.handleRecoverableError$3(t1, token, token);
          errorReported = true;
        }
        token = next.get$endGroup();
        t1 = token.next;
        t1.toString;
        if (V.parseCloser(token))
          return token;
        next = t1;
      }
      if (!errorReported) {
        t1 = type$.Message._as(Z._withArgumentsExpectedAfterButGot(">"));
        token0 = N.findNonZeroLengthToken(token);
        parser.listener.handleRecoverableError$3(t1, token0, token0);
      }
      if (V.parseCloser(next))
        return next;
      endGroup = this.start.get$endGroup();
      if (endGroup != null) {
        t1 = endGroup.offset;
        while (true) {
          t2 = token.next;
          if (!(t2 !== endGroup && token.type !== C.TokenType_Emx && token.offset <= t1))
            break;
          t2.toString;
          token = t2;
        }
      } else {
        endGroup = N.syntheticGt(next);
        endGroup.setNext$1(next);
        token.setNext$1(endGroup);
      }
      return token;
    },
    skip$1(_, token) {
      var t1 = this.skipEnd;
      t1.toString;
      return t1;
    },
    get$typeArgumentCount() {
      return this.typeArgumentCount;
    },
    get$recovered() {
      return this.recovered;
    }
  };
  S.AbstractScanner.prototype = {
    get$tail() {
      var t1 = this.__AbstractScanner_tail;
      return t1 === $ ? H.throwExpression(H.LateError$fieldNI("tail")) : t1;
    },
    get$errorTail() {
      var t1 = this.__AbstractScanner_errorTail;
      return t1 === $ ? H.throwExpression(H.LateError$fieldNI("errorTail")) : t1;
    },
    AbstractScanner$4$numberOfBytesHint(config, includeComments, languageVersionChanged, numberOfBytesHint) {
      var _this = this;
      _this.__AbstractScanner_errorTail = _this.__AbstractScanner_tail = _this.tokens;
      _this.set$configuration(config);
    },
    AbstractScanner$recoveryOptionScanner$1(copyFrom) {
      var _this = this;
      _this.__AbstractScanner_errorTail = _this.__AbstractScanner_tail = _this.tokens;
      _this._enableExtensionMethods = copyFrom._enableExtensionMethods;
      _this._enableNonNullable = copyFrom._enableNonNullable;
      _this._enableTripleShift = copyFrom._enableTripleShift;
      _this.tokenStart = copyFrom.tokenStart;
      _this.set$groupingStack(copyFrom.groupingStack);
    },
    set$configuration(config) {
      if (config != null) {
        this._enableExtensionMethods = config.enableExtensionMethods;
        this._enableNonNullable = config.enableNonNullable;
        this._enableTripleShift = config.enableTripleShift;
      }
    },
    select$3(_, choice, yes, no) {
      var _this = this,
        next = _this.advance$0(),
        t1 = _this.tokenStart,
        t2 = _this.comments;
      if (next === choice) {
        _this.appendToken$1(L.SimpleToken$(yes, t1, t2));
        return _this.advance$0();
      } else {
        _this.appendToken$1(L.SimpleToken$(no, t1, t2));
        return next;
      }
    },
    appendEofToken$0() {
      var t1, _this = this;
      _this.tokenStart = _this.scanOffset;
      _this.discardOpenLt$0();
      for (; t1 = _this.groupingStack, !t1.get$isEmpty(t1);) {
        t1 = _this.groupingStack;
        _this.unmatchedBeginGroup$1(t1.get$head(t1));
        t1 = _this.groupingStack.get$tail();
        t1.toString;
        _this.set$groupingStack(t1);
      }
      _this.appendToken$1(L.Token_Token$eof(_this.tokenStart, _this.comments));
    },
    appendBeginGroup$1(type) {
      var t1, _this = this,
        token = L.BeginToken$(type, _this.tokenStart, _this.comments);
      _this.appendToken$1(token);
      t1 = type.kind;
      if (t1 !== 60 && t1 !== 40)
        _this.discardOpenLt$0();
      _this.set$groupingStack(_this.groupingStack.prepend$1(token));
    },
    appendEndGroupInternal$3(foundMatchingBrace, type, openKind) {
      var $close, t1, begin, _this = this;
      if (!foundMatchingBrace) {
        _this.appendToken$1(L.SimpleToken$(type, _this.tokenStart, _this.comments));
        return _this.advance$0();
      }
      _this.appendToken$1(L.SimpleToken$(type, _this.tokenStart, _this.comments));
      $close = _this.get$tail();
      t1 = _this.groupingStack;
      begin = t1.get$head(t1);
      if (begin.type.kind !== openKind) {
        begin.endToken = $close;
        t1 = _this.groupingStack.get$tail();
        t1.toString;
        _this.set$groupingStack(t1);
        return 2;
      }
      begin.endToken = $close;
      t1 = _this.groupingStack.get$tail();
      t1.toString;
      _this.set$groupingStack(t1);
      return _this.advance$0();
    },
    appendGt$1(type) {
      var t1, _this = this;
      _this.appendToken$1(L.SimpleToken$(type, _this.tokenStart, _this.comments));
      t1 = _this.groupingStack;
      if (t1.get$isEmpty(t1))
        return;
      t1 = _this.groupingStack;
      if (t1.get$head(t1).type.kind === 60) {
        t1 = _this.groupingStack;
        t1.get$head(t1).endToken = _this.get$tail();
        t1 = _this.groupingStack.get$tail();
        t1.toString;
        _this.set$groupingStack(t1);
      }
    },
    appendGtGt$1(type) {
      var t1, _this = this;
      _this.appendToken$1(L.SimpleToken$(type, _this.tokenStart, _this.comments));
      t1 = _this.groupingStack;
      if (t1.get$isEmpty(t1))
        return;
      t1 = _this.groupingStack;
      if (t1.get$head(t1).type.kind === 60) {
        t1 = _this.groupingStack.get$tail();
        t1.toString;
        _this.set$groupingStack(t1);
      }
      t1 = _this.groupingStack;
      if (t1.get$isEmpty(t1))
        return;
      t1 = _this.groupingStack;
      if (t1.get$head(t1).type.kind === 60) {
        t1 = _this.groupingStack;
        t1.get$head(t1).endToken = _this.get$tail();
        t1 = _this.groupingStack.get$tail();
        t1.toString;
        _this.set$groupingStack(t1);
      }
    },
    prependErrorToken$1(token) {
      var t1, _this = this;
      _this.hasErrors = true;
      if (_this.get$errorTail() == _this.get$tail()) {
        _this.appendToken$1(token);
        _this.__AbstractScanner_errorTail = _this.get$tail();
      } else {
        t1 = _this.get$errorTail().next;
        token.next = t1;
        t1.previous = token;
        _this.get$errorTail().next = token;
        token.previous = _this.get$errorTail();
        t1 = _this.get$errorTail().next;
        t1.toString;
        _this.__AbstractScanner_errorTail = t1;
      }
    },
    discardBeginGroupUntil$1(openKind) {
      var t2, type, option1, option1Recoveries, option2, option2Recoveries, link, t3, _this = this,
        originalStack = _this.groupingStack,
        t1 = openKind === 123,
        first = true;
      do {
        _this.discardOpenLt$0();
        t2 = _this.groupingStack;
        if (t2.get$isEmpty(t2))
          break;
        t2 = _this.groupingStack;
        t2 = t2.get$head(t2).type.kind;
        if (openKind !== t2)
          t2 = t1 && t2 === 128;
        else
          t2 = true;
        if (t2) {
          if (first)
            return true;
          break;
        }
        t2 = _this.groupingStack.get$tail();
        t2.toString;
        _this.set$groupingStack(t2);
        if (t2 = _this.groupingStack, !t2.get$isEmpty(t2)) {
          first = false;
          continue;
        } else
          break;
      } while (true);
      ++_this.recoveryCount;
      t1 = _this.groupingStack;
      if (t1.get$isEmpty(t1)) {
        _this.set$groupingStack(originalStack);
        return false;
      }
      if (!_this.inRecoveryOption) {
        switch (openKind) {
          case 91:
            type = C.TokenType_zra;
            break;
          case 123:
            type = C.TokenType_2ty;
            break;
          case 40:
            type = C.TokenType_coy;
            break;
          default:
            throw H.wrapException(P.StateError$("Unexpected openKind"));
        }
        option1 = T.StringScanner$recoveryOptionScanner(_this);
        option1.insertSyntheticClosers$2(originalStack, _this.groupingStack);
        option1Recoveries = option1.recoveryOptionTokenizer$1(option1.appendEndGroupInternal$3(true, type, openKind));
        t1 = option1.groupingStack.slowLength$0();
        option2 = T.StringScanner$recoveryOptionScanner(_this);
        option2.set$groupingStack(originalStack);
        option2Recoveries = option2.recoveryOptionTokenizer$1(option2.appendEndGroupInternal$3(false, type, openKind));
        t2 = option2.groupingStack.slowLength$0();
        link = originalStack;
        while (link.get$isNotEmpty(link)) {
          link.get$head(link).endToken = null;
          t3 = link.get$tail();
          t3.toString;
          link = t3;
        }
        if (option2Recoveries + (t2 + 1) < option1Recoveries + t1) {
          _this.set$groupingStack(originalStack);
          return false;
        }
      }
      _this.insertSyntheticClosers$2(originalStack, _this.groupingStack);
      return true;
    },
    insertSyntheticClosers$2(originalStack, entryToUse) {
      var t1 = type$.Link_BeginToken;
      t1._as(originalStack);
      t1._as(entryToUse);
      for (; originalStack != entryToUse; originalStack = t1) {
        if (entryToUse.get$head(entryToUse).type.kind !== 60)
          this.unmatchedBeginGroup$1(originalStack.get$head(originalStack));
        t1 = originalStack.get$tail();
        t1.toString;
      }
    },
    discardOpenLt$0() {
      var t1, _this = this;
      while (true) {
        t1 = _this.groupingStack;
        if (!t1.get$isEmpty(t1)) {
          t1 = _this.groupingStack;
          t1 = t1.get$head(t1).type.kind === 60;
        } else
          t1 = false;
        if (!t1)
          break;
        t1 = _this.groupingStack.get$tail();
        t1.toString;
        _this.set$groupingStack(t1);
      }
    },
    discardInterpolation$0() {
      var t1, beginToken, _this = this;
      for (; t1 = _this.groupingStack, !t1.get$isEmpty(t1);) {
        t1 = _this.groupingStack;
        beginToken = t1.get$head(t1);
        _this.unmatchedBeginGroup$1(beginToken);
        t1 = _this.groupingStack.get$tail();
        t1.toString;
        _this.set$groupingStack(t1);
        if (beginToken.type.kind === 128)
          break;
      }
    },
    unmatchedBeginGroup$1(begin) {
      var _this = this,
        t1 = C.Map_4uyfz.$index(0, begin.type.lexeme);
      t1.toString;
      t1 = L.SyntheticToken$(t1, _this.tokenStart);
      t1.beforeSynthetic = _this.get$tail();
      _this.appendToken$1(t1);
      begin.endToken = _this.get$tail();
      t1 = new S.UnmatchedToken(begin, C.TokenType_uv8, begin.offset, null);
      t1._setCommentParent$1(null);
      _this.prependErrorToken$1(t1);
      ++_this.recoveryCount;
    },
    tokenize$0() {
      var t1, t2, t3, next, oldTail, _this = this, _s4_ = "tail";
      for (t1 = _this.string, t2 = t1.length - 1; t3 = _this.scanOffset, t3 < t2;) {
        ++t3;
        _this.scanOffset = t3;
        next = C.JSString_methods.codeUnitAt$1(t1, t3);
        if (next !== 0) {
          oldTail = _this.__AbstractScanner_tail;
          if (oldTail === $)
            oldTail = H.throwExpression(H.LateError$fieldNI(_s4_));
          next = _this.bigHeaderSwitch$1(next);
          if (next !== 0) {
            t3 = _this.__AbstractScanner_tail;
            t3 = (t3 === $ ? H.throwExpression(H.LateError$fieldNI(_s4_)) : t3).type.kind === 98;
          } else
            t3 = false;
          if (t3) {
            oldTail = _this.__AbstractScanner_tail;
            if (oldTail === $)
              oldTail = H.throwExpression(H.LateError$fieldNI(_s4_));
            next = _this.bigHeaderSwitch$1(next);
          }
          while (true) {
            if (next !== 0) {
              t3 = _this.__AbstractScanner_tail;
              t3 = (t3 === $ ? H.throwExpression(H.LateError$fieldNI(_s4_)) : t3) == oldTail;
            } else
              t3 = false;
            if (!t3)
              break;
            next = _this.bigHeaderSwitch$1(next);
          }
        }
        for (; next !== 0;)
          next = _this.bigSwitch$1(next);
        if (_this.scanOffset >= t2)
          _this.appendEofToken$0();
        else
          _this.prependErrorToken$1(S.buildUnexpectedCharacterToken(0, _this.tokenStart));
      }
      J.add$1$ax(_this.lineStarts, t3 + 1);
      t1 = _this.tokens.next;
      t1.toString;
      return t1;
    },
    recoveryOptionTokenizer$1(next) {
      var t1, t2, iterations, t3, _this = this;
      for (t1 = _this.string, t2 = t1.length - 1, iterations = 0; _this.scanOffset < t2;) {
        for (; next !== 0;) {
          next = _this.bigSwitch$1(next);
          ++iterations;
          if (iterations > 100)
            return _this.recoveryCount;
        }
        t3 = _this.scanOffset;
        if (t3 < t2) {
          ++t3;
          _this.scanOffset = t3;
          next = C.JSString_methods.codeUnitAt$1(t1, t3);
          ++iterations;
          if (iterations > 100)
            return _this.recoveryCount;
        }
      }
      return _this.recoveryCount;
    },
    bigHeaderSwitch$1(next) {
      var t1, _this = this;
      if (next !== 47)
        return _this.bigSwitch$1(next);
      t1 = _this.scanOffset;
      _this.tokenStart = t1;
      if (47 !== C.JSString_methods.codeUnitAt$1(_this.string, t1 + 1))
        return _this.tokenizeSlashOrComment$1(next);
      return _this.tokenizeLanguageVersionOrSingleLineComment$1(next);
    },
    bigSwitch$1(next) {
      var nextLower, _this = this,
        t1 = _this.tokenStart = _this.scanOffset;
      if (next === 32 || next === 9 || next === 10 || next === 13) {
        if (next === 10)
          J.add$1$ax(_this.lineStarts, t1 + 1);
        next = _this.advance$0();
        for (t1 = _this.string; next === 32;)
          next = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
        return next;
      }
      if (typeof next !== "number")
        return next.$or();
      nextLower = (next | 32) >>> 0;
      if (97 <= nextLower && nextLower <= 122) {
        if (114 === next)
          return _this.tokenizeRawStringKeywordOrIdentifier$1(next);
        return _this.tokenizeKeywordOrIdentifier$2(next, true);
      }
      if (next === 41)
        return _this.appendEndGroupInternal$3(_this.discardBeginGroupUntil$1(40), C.TokenType_coy, 40);
      if (next === 40) {
        _this.appendBeginGroup$1(C.TokenType_5uk);
        return _this.advance$0();
      }
      if (next === 59) {
        _this.appendToken$1(L.SimpleToken$(C.TokenType_FmR, t1, _this.comments));
        _this.discardOpenLt$0();
        return _this.advance$0();
      }
      if (next === 46)
        return _this.tokenizeDotsOrNumber$1(next);
      if (next === 44) {
        _this.appendToken$1(L.SimpleToken$(C.TokenType_O55, t1, _this.comments));
        return _this.advance$0();
      }
      if (next === 61)
        return _this.tokenizeEquals$1(next);
      if (next === 125)
        return _this.appendEndGroupInternal$3(_this.discardBeginGroupUntil$1(123), C.TokenType_2ty, 123);
      if (next === 47)
        return _this.tokenizeSlashOrComment$1(next);
      if (next === 123) {
        _this.appendBeginGroup$1(C.TokenType_cOk);
        return _this.advance$0();
      }
      if (next === 34 || next === 39)
        return _this.tokenizeString$3(next, t1, false);
      if (next === 95)
        return _this.tokenizeKeywordOrIdentifier$2(next, true);
      if (next === 58) {
        _this.appendToken$1(L.SimpleToken$(C.TokenType_gg4, t1, _this.comments));
        return _this.advance$0();
      }
      if (next === 60)
        return _this.tokenizeLessThan$1(next);
      if (next === 62)
        return _this.tokenizeGreaterThan$1(next);
      if (next === 33)
        return _this.tokenizeExclamation$1(next);
      if (next === 91)
        return _this.tokenizeOpenSquareBracket$1(next);
      if (next === 93)
        return _this.appendEndGroupInternal$3(_this.discardBeginGroupUntil$1(91), C.TokenType_zra, 91);
      if (next === 64) {
        _this.appendToken$1(L.SimpleToken$(C.TokenType_yzz, t1, _this.comments));
        return _this.advance$0();
      }
      if (next >= 49 && next <= 57)
        return _this.tokenizeNumber$1(next);
      if (next === 38)
        return _this.tokenizeAmpersand$1(next);
      if (next === 48)
        return _this.tokenizeHexOrNumber$1(next);
      if (next === 63)
        return _this.tokenizeQuestion$1(next);
      if (next === 124)
        return _this.tokenizeBar$1(next);
      if (next === 43)
        return _this.tokenizePlus$1(next);
      if (next === 36)
        return _this.tokenizeKeywordOrIdentifier$2(next, true);
      if (next === 45)
        return _this.tokenizeMinus$1(next);
      if (next === 42)
        return _this.select$3(0, 61, C.TokenType_SfG, C.TokenType_CNR);
      if (next === 94)
        return _this.select$3(0, 61, C.TokenType_2Hh, C.TokenType_SGC);
      if (next === 126)
        return _this.tokenizeTilde$1(next);
      if (next === 37)
        return _this.select$3(0, 61, C.TokenType_ao1, C.TokenType_k07);
      if (next === 96) {
        _this.appendToken$1(L.SimpleToken$(C.TokenType_1KU, t1, _this.comments));
        return _this.advance$0();
      }
      if (next === 92) {
        _this.appendToken$1(L.SimpleToken$(C.TokenType_IIj, t1, _this.comments));
        return _this.advance$0();
      }
      if (next === 35)
        return _this.tokenizeTag$1(next);
      if (next < 31)
        return _this.unexpected$1(next);
      return _this.unexpected$1(next);
    },
    tokenizeTag$1(next) {
      var asciiOnly, _this = this,
        t1 = _this.scanOffset;
      if (t1 === 0)
        if (C.JSString_methods.codeUnitAt$1(_this.string, t1 + 1) === 33) {
          asciiOnly = true;
          do {
            next = _this.advance$0();
            if (next > 127)
              asciiOnly = false;
          } while (next !== 10 && next !== 13 && next !== 0);
          _this.appendToken$1(_this.createSubstringToken$4(C.TokenType_oZ3, t1, asciiOnly, 0));
          return next;
        }
      _this.appendToken$1(L.SimpleToken$(C.TokenType_P5Z, _this.tokenStart, _this.comments));
      return _this.advance$0();
    },
    tokenizeTilde$1(next) {
      var _this = this;
      next = _this.advance$0();
      if (next === 47)
        return _this.select$3(0, 61, C.TokenType_QOM, C.TokenType_NQ8);
      else {
        _this.appendToken$1(L.SimpleToken$(C.TokenType_ufh, _this.tokenStart, _this.comments));
        return next;
      }
    },
    tokenizeOpenSquareBracket$1(next) {
      next = this.advance$0();
      if (next === 93)
        return this.select$3(0, 61, C.TokenType_cQv, C.TokenType_Qq8);
      this.appendBeginGroup$1(C.TokenType_AGi);
      return next;
    },
    tokenizeQuestion$1(next) {
      var _this = this;
      next = _this.advance$0();
      if (next === 63)
        return _this.select$3(0, 61, C.TokenType_cI8, C.TokenType_lOW);
      else if (next === 46) {
        next = _this.advance$0();
        if (_this._enableNonNullable)
          if (46 === next) {
            _this.appendToken$1(L.SimpleToken$(C.TokenType_O1S, _this.tokenStart, _this.comments));
            return _this.advance$0();
          }
        _this.appendToken$1(L.SimpleToken$(C.TokenType_ifb, _this.tokenStart, _this.comments));
        return next;
      } else {
        _this.appendToken$1(L.SimpleToken$(C.TokenType_V43, _this.tokenStart, _this.comments));
        return next;
      }
    },
    tokenizeBar$1(next) {
      var t1, t2, _this = this;
      next = _this.advance$0();
      if (next === 124) {
        next = _this.advance$0();
        _this.appendToken$1(L.SimpleToken$(C.TokenType_wDN, _this.tokenStart, _this.comments));
        return next;
      } else {
        t1 = _this.tokenStart;
        t2 = _this.comments;
        if (next === 61) {
          _this.appendToken$1(L.SimpleToken$(C.TokenType_kqK, t1, t2));
          return _this.advance$0();
        } else {
          _this.appendToken$1(L.SimpleToken$(C.TokenType_ssu, t1, t2));
          return next;
        }
      }
    },
    tokenizeAmpersand$1(next) {
      var t1, t2, _this = this;
      next = _this.advance$0();
      if (next === 38) {
        next = _this.advance$0();
        _this.appendToken$1(L.SimpleToken$(C.TokenType_eOk, _this.tokenStart, _this.comments));
        return next;
      } else {
        t1 = _this.tokenStart;
        t2 = _this.comments;
        if (next === 61) {
          _this.appendToken$1(L.SimpleToken$(C.TokenType_HH1, t1, t2));
          return _this.advance$0();
        } else {
          _this.appendToken$1(L.SimpleToken$(C.TokenType_OxW, t1, t2));
          return next;
        }
      }
    },
    tokenizeMinus$1(next) {
      var t1, t2, _this = this;
      next = _this.advance$0();
      if (next === 45) {
        _this.appendToken$1(L.SimpleToken$(C.TokenType_jTn, _this.tokenStart, _this.comments));
        return _this.advance$0();
      } else {
        t1 = _this.tokenStart;
        t2 = _this.comments;
        if (next === 61) {
          _this.appendToken$1(L.SimpleToken$(C.TokenType_AO3, t1, t2));
          return _this.advance$0();
        } else {
          _this.appendToken$1(L.SimpleToken$(C.TokenType_M5Z, t1, t2));
          return next;
        }
      }
    },
    tokenizePlus$1(next) {
      var t1, t2, _this = this;
      next = _this.advance$0();
      if (43 === next) {
        _this.appendToken$1(L.SimpleToken$(C.TokenType_GNi, _this.tokenStart, _this.comments));
        return _this.advance$0();
      } else {
        t1 = _this.tokenStart;
        t2 = _this.comments;
        if (61 === next) {
          _this.appendToken$1(L.SimpleToken$(C.TokenType_qNW, t1, t2));
          return _this.advance$0();
        } else {
          _this.appendToken$1(L.SimpleToken$(C.TokenType_RzD, t1, t2));
          return next;
        }
      }
    },
    tokenizeExclamation$1(next) {
      var t1, t2, _this = this;
      next = _this.advance$0();
      if (next === 61) {
        next = _this.advance$0();
        t1 = _this.tokenStart;
        t2 = _this.comments;
        if (next === 61) {
          _this.appendToken$1(L.SimpleToken$(C.TokenType_xgG, t1, t2));
          _this.prependErrorToken$1(S.UnsupportedOperator$(_this.get$tail(), _this.tokenStart));
          return _this.advance$0();
        } else {
          _this.appendToken$1(L.SimpleToken$(C.TokenType_Yb0, t1, t2));
          return next;
        }
      }
      _this.appendToken$1(L.SimpleToken$(C.TokenType_cYV, _this.tokenStart, _this.comments));
      return next;
    },
    tokenizeEquals$1(next) {
      var t1, t2, _this = this;
      _this.discardOpenLt$0();
      next = _this.advance$0();
      if (next === 61) {
        next = _this.advance$0();
        t1 = _this.tokenStart;
        t2 = _this.comments;
        if (next === 61) {
          _this.appendToken$1(L.SimpleToken$(C.TokenType_sxw, t1, t2));
          _this.prependErrorToken$1(S.UnsupportedOperator$(_this.get$tail(), _this.tokenStart));
          return _this.advance$0();
        } else {
          _this.appendToken$1(L.SimpleToken$(C.TokenType_gg40, t1, t2));
          return next;
        }
      } else if (next === 62) {
        _this.appendToken$1(L.SimpleToken$(C.TokenType_ECn, _this.tokenStart, _this.comments));
        return _this.advance$0();
      }
      _this.appendToken$1(L.SimpleToken$(C.TokenType_tca, _this.tokenStart, _this.comments));
      return next;
    },
    tokenizeGreaterThan$1(next) {
      var _this = this;
      next = _this.advance$0();
      if (61 === next) {
        _this.appendToken$1(L.SimpleToken$(C.TokenType_0Ef, _this.tokenStart, _this.comments));
        return _this.advance$0();
      } else if (62 === next) {
        next = _this.advance$0();
        if (61 === next) {
          _this.appendToken$1(L.SimpleToken$(C.TokenType_DCV, _this.tokenStart, _this.comments));
          return _this.advance$0();
        } else if (_this._enableTripleShift && 62 === next) {
          next = _this.advance$0();
          if (_this._enableTripleShift && 61 === next) {
            _this.appendToken$1(L.SimpleToken$(C.TokenType_kr3, _this.tokenStart, _this.comments));
            return _this.advance$0();
          }
          _this.appendToken$1(L.SimpleToken$(C.TokenType_mRX, _this.tokenStart, _this.comments));
          return next;
        } else {
          _this.appendGtGt$1(C.TokenType_4XV);
          return next;
        }
      } else {
        _this.appendGt$1(C.TokenType_wOL);
        return next;
      }
    },
    tokenizeLessThan$1(next) {
      var _this = this;
      next = _this.advance$0();
      if (61 === next) {
        _this.appendToken$1(L.SimpleToken$(C.TokenType_my0, _this.tokenStart, _this.comments));
        return _this.advance$0();
      } else if (60 === next)
        return _this.select$3(0, 61, C.TokenType_3D9, C.TokenType_FgV);
      else {
        _this.appendBeginGroup$1(C.TokenType_Drw);
        return next;
      }
    },
    tokenizeNumber$1(next) {
      var t1, t2, t3, nextnext, _this = this,
        start = _this.scanOffset;
      for (t1 = _this.string, t2 = start; true;) {
        t2 = _this.scanOffset = t2 + 1;
        next = C.JSString_methods.codeUnitAt$1(t1, t2);
        if (48 <= next && next <= 57)
          continue;
        else if (next === 101 || next === 69)
          return _this.tokenizeFractionPart$2(next, start);
        else {
          if (next === 46) {
            t3 = t2 + 1;
            nextnext = C.JSString_methods.codeUnitAt$1(t1, t3);
            if (48 <= nextnext && nextnext <= 57) {
              _this.scanOffset = t3;
              return _this.tokenizeFractionPart$2(nextnext, start);
            }
          }
          _this.appendToken$1(B.StringToken$fromSubstring(C.TokenType_Vyt, t1, start, t2, _this.tokenStart, true, _this.comments));
          return next;
        }
      }
    },
    tokenizeHexOrNumber$1(next) {
      var _this = this,
        x = C.JSString_methods.codeUnitAt$1(_this.string, _this.scanOffset + 1);
      if (x === 120 || x === 88)
        return _this.tokenizeHex$1(next);
      return _this.tokenizeNumber$1(next);
    },
    tokenizeHex$1(next) {
      var t1, hasDigits, t2, t3, source, _this = this, _null = null,
        start = _this.scanOffset;
      _this.advance$0();
      for (t1 = _this.string, hasDigits = false; true; hasDigits = true) {
        t2 = ++_this.scanOffset;
        next = C.JSString_methods.codeUnitAt$1(t1, t2);
        if (!(48 <= next && next <= 57))
          if (!(65 <= next && next <= 70))
            t3 = 97 <= next && next <= 102;
          else
            t3 = true;
        else
          t3 = true;
        if (!t3) {
          if (!hasDigits) {
            t2 = new S.UnterminatedToken(C.MessageCode_swd, t2, C.TokenType_uv8, start, _null);
            t2._setCommentParent$1(_null);
            _this.prependErrorToken$1(t2);
            source = C.JSString_methods.substring$2(t1, start, _this.scanOffset);
            t1 = source + "0";
            t2 = _this.tokenStart;
            $.$get$StringUtilities_INTERNER().toString;
            t2 = new L.SyntheticStringToken(source.length, t1, C.TokenType_pCd, t2, _null);
            t2._setCommentParent$1(_null);
            _this.appendToken$1(t2);
            return next;
          }
          _this.appendToken$1(B.StringToken$fromSubstring(C.TokenType_pCd, t1, start, t2, _this.tokenStart, true, _this.comments));
          return next;
        }
      }
    },
    tokenizeDotsOrNumber$1(next) {
      var t1, t2, _this = this,
        start = _this.scanOffset;
      next = _this.advance$0();
      if (48 <= next && next <= 57)
        return _this.tokenizeFractionPart$2(next, start);
      else if (46 === next) {
        next = _this.advance$0();
        if (next === 46) {
          next = _this.advance$0();
          t1 = _this.tokenStart;
          t2 = _this.comments;
          if (next === 63) {
            _this.appendToken$1(L.SimpleToken$(C.TokenType_ESD, t1, t2));
            return _this.advance$0();
          } else {
            _this.appendToken$1(L.SimpleToken$(C.TokenType_j7J, t1, t2));
            return next;
          }
        } else {
          _this.appendToken$1(L.SimpleToken$(C.TokenType_cv8, _this.tokenStart, _this.comments));
          return next;
        }
      } else {
        _this.appendToken$1(L.SimpleToken$(C.TokenType_wCI, _this.tokenStart, _this.comments));
        return next;
      }
    },
    tokenizeFractionPart$2(next, start) {
      var t1, done, hasDigit, t2, hasExponentDigits, source, t3, _this = this, _null = null;
      for (t1 = _this.string, done = false, hasDigit = false; !done;) {
        if (!(48 <= next && next <= 57))
          if (101 === next || 69 === next) {
            t2 = ++_this.scanOffset;
            next = C.JSString_methods.codeUnitAt$1(t1, t2);
            if (next === 43 || next === 45) {
              t2 = _this.scanOffset = t2 + 1;
              next = C.JSString_methods.codeUnitAt$1(t1, t2);
            }
            for (hasExponentDigits = false; true; hasExponentDigits = true) {
              if (!(48 <= next && next <= 57)) {
                if (!hasExponentDigits) {
                  source = C.JSString_methods.substring$2(t1, start, t2);
                  t2 = source + "0";
                  t3 = _this.tokenStart;
                  $.$get$StringUtilities_INTERNER().toString;
                  t3 = new L.SyntheticStringToken(source.length, t2, C.TokenType_q1z, t3, _null);
                  t3._setCommentParent$1(_null);
                  _this.appendToken$1(t3);
                  t3 = _this.tokenStart;
                  t3 = new S.UnterminatedToken(C.MessageCode_6RQ, _this.scanOffset, C.TokenType_uv8, t3, _null);
                  t3._setCommentParent$1(_null);
                  _this.prependErrorToken$1(t3);
                  return next;
                }
                break;
              }
              t2 = _this.scanOffset = t2 + 1;
              next = C.JSString_methods.codeUnitAt$1(t1, t2);
            }
            done = true;
            hasDigit = true;
            continue;
          } else {
            done = true;
            continue;
          }
        next = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
        hasDigit = true;
      }
      if (!hasDigit) {
        _this.appendToken$1(_this.createSubstringToken$4(C.TokenType_Vyt, start, true, -1));
        if (46 === next)
          return _this.select$3(0, 46, C.TokenType_j7J, C.TokenType_cv8);
        _this.appendToken$1(L.SimpleToken$(C.TokenType_wCI, _this.tokenStart, _this.comments));
        return next;
      }
      _this.appendToken$1(_this.createSubstringToken$4(C.TokenType_q1z, start, true, 0));
      return next;
    },
    tokenizeSlashOrComment$1(next) {
      var t1, t2, _this = this,
        start = _this.scanOffset;
      next = _this.advance$0();
      if (42 === next)
        return _this.tokenizeMultiLineComment$2(next, start);
      else if (47 === next)
        return _this.tokenizeSingleLineComment$2(next, start);
      else {
        t1 = _this.tokenStart;
        t2 = _this.comments;
        if (61 === next) {
          _this.appendToken$1(L.SimpleToken$(C.TokenType_nD8, t1, t2));
          return _this.advance$0();
        } else {
          _this.appendToken$1(L.SimpleToken$(C.TokenType_sBE, t1, t2));
          return next;
        }
      }
    },
    tokenizeLanguageVersionOrSingleLineComment$1(next) {
      var t1, majorStart, t2, major, minorStart, minor, t3, languageVersion, _this = this, _null = null,
        start = _this.scanOffset;
      next = _this.advance$0();
      t1 = _this.string;
      if (47 === C.JSString_methods.codeUnitAt$1(t1, _this.scanOffset + 1))
        return _this.tokenizeSingleLineComment$2(next, start);
      next = _this.advance$0();
      for (; 32 === next;)
        next = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
      if (64 !== next)
        return _this.tokenizeSingleLineCommentRest$3(next, start, false);
      next = _this.advance$0();
      if (100 !== next)
        return _this.tokenizeSingleLineCommentRest$3(next, start, false);
      next = _this.advance$0();
      if (97 !== next)
        return _this.tokenizeSingleLineCommentRest$3(next, start, false);
      next = _this.advance$0();
      if (114 !== next)
        return _this.tokenizeSingleLineCommentRest$3(next, start, false);
      next = _this.advance$0();
      if (116 !== next)
        return _this.tokenizeSingleLineCommentRest$3(next, start, false);
      next = _this.advance$0();
      for (; 32 === next;)
        next = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
      if (61 !== next)
        return _this.tokenizeSingleLineCommentRest$3(next, start, false);
      next = _this.advance$0();
      for (; 32 === next;)
        next = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
      majorStart = _this.scanOffset;
      t2 = majorStart;
      major = 0;
      while (true) {
        if (!(48 <= next && next <= 57))
          break;
        major = major * 10 + next - 48;
        t2 = _this.scanOffset = t2 + 1;
        next = C.JSString_methods.codeUnitAt$1(t1, t2);
      }
      if (t2 === majorStart)
        return _this.tokenizeSingleLineCommentRest$3(next, start, false);
      if (46 !== next)
        return _this.tokenizeSingleLineCommentRest$3(next, start, false);
      next = _this.advance$0();
      minorStart = _this.scanOffset;
      t2 = minorStart;
      minor = 0;
      while (true) {
        if (!(48 <= next && next <= 57))
          break;
        minor = minor * 10 + next - 48;
        t2 = _this.scanOffset = t2 + 1;
        next = C.JSString_methods.codeUnitAt$1(t1, t2);
      }
      if (t2 === minorStart)
        return _this.tokenizeSingleLineCommentRest$3(next, start, false);
      for (; 32 === next;) {
        t2 = _this.scanOffset = t2 + 1;
        next = C.JSString_methods.codeUnitAt$1(t1, t2);
      }
      if (next !== 10 && next !== 13 && next !== 0)
        return _this.tokenizeSingleLineCommentRest$3(next, start, false);
      t3 = _this.tokenStart;
      languageVersion = new B.LanguageVersionToken(major, minor, _null, C.TokenType_WjT, t3, _null);
      languageVersion._setCommentParent$1(_null);
      languageVersion.StringToken$fromSubstring$7$canonicalize$precedingComments(C.TokenType_WjT, t1, start, t2, t3, true, _null);
      t1 = _this.languageVersionChanged;
      if (t1 != null)
        t1.call$2(_this, languageVersion);
      else
        _this.set$configuration(C.ScannerConfiguration_false_false_false);
      if (_this.includeComments)
        _this._appendToCommentStream$1(languageVersion);
      return next;
    },
    tokenizeSingleLineComment$2(next, start) {
      var _this = this,
        t1 = C.JSString_methods.codeUnitAt$1(_this.string, _this.scanOffset + 1);
      return _this.tokenizeSingleLineCommentRest$3(_this.advance$0(), start, 47 === t1);
    },
    tokenizeSingleLineCommentRest$3(next, start, dartdoc) {
      var t1, asciiOnly, _this = this;
      for (t1 = _this.string, asciiOnly = true; true;) {
        if (next > 127)
          asciiOnly = false;
        if (10 === next || 13 === next || 0 === next) {
          if (dartdoc)
            _this.appendDartDoc$3(start, C.TokenType_WjT, asciiOnly);
          else
            _this.appendComment$3(start, C.TokenType_WjT, asciiOnly);
          return next;
        }
        next = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
      }
    },
    tokenizeMultiLineComment$2(next, start) {
      var t1, t2, t3, unicodeStart, next0, asciiOnlyComment, asciiOnlyLines, nesting, t4, _this = this;
      next = _this.advance$0();
      t1 = _this.string;
      t2 = _this.lineStarts;
      t3 = J.getInterceptor$ax(t2);
      unicodeStart = start;
      next0 = next;
      asciiOnlyComment = true;
      asciiOnlyLines = true;
      nesting = 1;
      while (true) {
        if (!true) {
          next = next0;
          break;
        }
        if (0 === next0) {
          t1 = _this.tokenStart;
          t1 = new S.UnterminatedToken(C.MessageCode_8ii, _this.scanOffset, C.TokenType_uv8, t1, null);
          t1._setCommentParent$1(null);
          _this.prependErrorToken$1(t1);
          _this.advanceAfterError$1(true);
          next = next0;
          break;
        } else if (42 === next0) {
          t4 = ++_this.scanOffset;
          next0 = C.JSString_methods.codeUnitAt$1(t1, t4);
          if (47 === next0) {
            --nesting;
            if (0 === nesting) {
              t2 = t4 + 1;
              _this.scanOffset = t2;
              next0 = C.JSString_methods.codeUnitAt$1(t1, t2);
              if (42 === next)
                _this.appendDartDoc$3(start, C.TokenType_Uvq, asciiOnlyComment);
              else
                _this.appendComment$3(start, C.TokenType_Uvq, asciiOnlyComment);
              next = next0;
              break;
            } else {
              ++t4;
              _this.scanOffset = t4;
              next0 = C.JSString_methods.codeUnitAt$1(t1, t4);
            }
          }
        } else if (47 === next0) {
          t4 = ++_this.scanOffset;
          next0 = C.JSString_methods.codeUnitAt$1(t1, t4);
          if (42 === next0) {
            ++t4;
            _this.scanOffset = t4;
            next0 = C.JSString_methods.codeUnitAt$1(t1, t4);
            ++nesting;
          }
        } else if (next0 === 10) {
          if (!asciiOnlyLines) {
            unicodeStart = _this.scanOffset;
            asciiOnlyLines = true;
          }
          t3.add$1(t2, _this.scanOffset + 1);
          next0 = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
        } else {
          if (next0 > 127) {
            asciiOnlyComment = false;
            asciiOnlyLines = false;
          }
          next0 = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
        }
      }
      return next;
    },
    appendComment$3(start, type, asciiOnly) {
      var _this = this;
      if (!_this.includeComments)
        return;
      _this._appendToCommentStream$1(B.CommentToken$fromSubstring(type, _this.string, start, _this.scanOffset, _this.tokenStart, true));
    },
    appendDartDoc$3(start, type, asciiOnly) {
      var t1, t2, newComment, _this = this, _null = null;
      if (!_this.includeComments)
        return;
      t1 = _this.scanOffset;
      t2 = _this.tokenStart;
      newComment = new B.DartDocToken(_null, type, t2, _null);
      newComment._setCommentParent$1(_null);
      newComment.StringToken$fromSubstring$7$canonicalize$precedingComments(type, _this.string, start, t1, t2, true, _null);
      _this._appendToCommentStream$1(newComment);
    },
    appendToken$1(token) {
      var t1, _this = this;
      _this.get$tail().next = token;
      token.previous = _this.get$tail();
      _this.__AbstractScanner_tail = token;
      t1 = _this.comments;
      if (t1 != null && t1 === token._precedingComment)
        _this.commentsTail = _this.comments = null;
    },
    _appendToCommentStream$1(newComment) {
      var t1, _this = this;
      if (_this.comments == null)
        _this.commentsTail = _this.comments = newComment;
      else {
        t1 = _this.commentsTail;
        t1.next = newComment;
        newComment.previous = t1;
        _this.commentsTail = newComment;
      }
    },
    tokenizeRawStringKeywordOrIdentifier$1(next) {
      var _this = this,
        t1 = _this.scanOffset,
        nextnext = C.JSString_methods.codeUnitAt$1(_this.string, t1 + 1);
      if (nextnext === 34 || nextnext === 39)
        return _this.tokenizeString$3(_this.advance$0(), t1, true);
      return _this.tokenizeKeywordOrIdentifier$2(next, true);
    },
    tokenizeKeywordOrIdentifier$2(next, allowDollar) {
      var t1, t2, keyword, _this = this,
        state = Y.KeywordState_KEYWORD_STATE(),
        start = _this.scanOffset;
      if (65 <= next && next <= 90) {
        state = state.nextCapital$1(next);
        next = _this.advance$0();
      } else if (97 <= next && next <= 122) {
        state = state.next$1(next);
        next = _this.advance$0();
      }
      t1 = _this.string;
      while (true) {
        t2 = state == null;
        if (!(!t2 && 97 <= next && next <= 122))
          break;
        state = state.next$1(next);
        next = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
      }
      if (t2)
        return _this.tokenizeIdentifier$3(next, start, allowDollar);
      keyword = state.get$keyword();
      if (keyword == null)
        return _this.tokenizeIdentifier$3(next, start, allowDollar);
      if (!_this._enableExtensionMethods && keyword === C.Keyword_8aB)
        return _this.tokenizeIdentifier$3(next, start, allowDollar);
      if (!_this._enableNonNullable)
        t1 = keyword === C.Keyword_WRs || keyword === C.Keyword_Sjd;
      else
        t1 = false;
      if (t1)
        return _this.tokenizeIdentifier$3(next, start, allowDollar);
      if (!(65 <= next && next <= 90))
        t1 = 48 <= next && next <= 57 || next === 95 || next === 36;
      else
        t1 = true;
      if (t1)
        return _this.tokenizeIdentifier$3(next, start, allowDollar);
      else {
        if (keyword.lexeme === "this")
          _this.discardOpenLt$0();
        _this.appendToken$1(L.KeywordToken$(keyword, _this.tokenStart, _this.comments));
        return next;
      }
    },
    tokenizeIdentifier$3(next, start, allowDollar) {
      var t1, t2, _this = this;
      for (t1 = _this.string; true;)
        if (S._isIdentifierChar(next, allowDollar))
          next = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
        else {
          t2 = _this.scanOffset;
          if (start === t2)
            return _this.unexpected$1(next);
          else
            _this.appendToken$1(B.StringToken$fromSubstring(C.TokenType_IQp, t1, start, t2, _this.tokenStart, true, _this.comments));
          break;
        }
      return next;
    },
    tokenizeString$3(next, start, raw) {
      var _this = this,
        next0 = _this.advance$0();
      if (next === next0) {
        next0 = _this.advance$0();
        if (next === next0)
          return _this.tokenizeMultiLineString$3(next, start, raw);
        else {
          _this.appendToken$1(_this.createSubstringToken$4(C.TokenType_86y, start, true, 0));
          return next0;
        }
      }
      if (raw)
        return _this.tokenizeSingleLineRawString$3(next0, next, start);
      else
        return _this.tokenizeSingleLineString$3(next0, next, start);
    },
    tokenizeSingleLineString$3(next, quoteChar, quoteStart) {
      var t1, start, asciiOnly, t2, _this = this;
      for (t1 = _this.string, start = quoteStart, asciiOnly = true; next !== quoteChar;) {
        if (next === 92)
          next = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
        else if (next === 36) {
          next = _this.tokenizeStringInterpolation$2(start, asciiOnly);
          start = _this.scanOffset;
          asciiOnly = true;
          continue;
        }
        if (typeof next !== "number")
          return next.$le();
        if (next <= 13)
          t2 = next === 10 || next === 13 || next === 0;
        else
          t2 = false;
        if (t2) {
          _this.unterminatedString$6$asciiOnly$isMultiLine$isRaw(quoteChar, quoteStart, start, asciiOnly, false, false);
          return next;
        }
        if (next > 127)
          asciiOnly = false;
        next = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
      }
      next = _this.advance$0();
      _this.appendToken$1(_this.createSubstringToken$4(C.TokenType_86y, start, asciiOnly, 0));
      return next;
    },
    tokenizeStringInterpolation$2(start, asciiOnly) {
      var next, t1, t2, _this = this;
      _this.appendToken$1(_this.createSubstringToken$4(C.TokenType_86y, start, asciiOnly, 0));
      _this.tokenStart = _this.scanOffset;
      next = _this.advance$0();
      if (next === 123)
        return _this.tokenizeInterpolatedExpression$1(next);
      else {
        _this.appendToken$1(L.SimpleToken$(C.TokenType_MvE, _this.tokenStart, _this.comments));
        if (!(97 <= next && next <= 122))
          t1 = 65 <= next && next <= 90 || next === 95;
        else
          t1 = true;
        t2 = _this.scanOffset;
        if (t1) {
          _this.tokenStart = t2;
          next = _this.tokenizeKeywordOrIdentifier$2(next, false);
        } else {
          _this.tokenStart = t2;
          _this.appendToken$1(_this.createSyntheticSubstringToken$4(C.TokenType_IQp, t2, true, ""));
          _this.prependErrorToken$1(S.UnterminatedToken$(C.MessageCode_3Nw, _this.tokenStart, _this.scanOffset));
        }
        _this.tokenStart = _this.scanOffset;
        return next;
      }
    },
    tokenizeInterpolatedExpression$1(next) {
      var t1, _this = this;
      _this.appendBeginGroup$1(C.TokenType_skV);
      _this.tokenStart = _this.scanOffset;
      next = _this.advance$0();
      while (true) {
        t1 = next === 0;
        if (!(!t1 && next !== 2))
          break;
        next = _this.bigSwitch$1(next);
      }
      if (t1) {
        _this.tokenStart = _this.scanOffset;
        _this.discardInterpolation$0();
        return next;
      }
      next = _this.advance$0();
      _this.tokenStart = _this.scanOffset;
      return next;
    },
    tokenizeSingleLineRawString$3(next, quoteChar, quoteStart) {
      var t1, asciiOnly, t2, _this = this;
      for (t1 = _this.string, asciiOnly = true; next !== 0;) {
        if (next === quoteChar) {
          t2 = ++_this.scanOffset;
          next = C.JSString_methods.codeUnitAt$1(t1, t2);
          _this.appendToken$1(B.StringToken$fromSubstring(C.TokenType_86y, t1, quoteStart, t2, _this.tokenStart, true, _this.comments));
          return next;
        } else if (next === 10 || next === 13) {
          _this.unterminatedString$6$asciiOnly$isMultiLine$isRaw(quoteChar, quoteStart, quoteStart, asciiOnly, false, true);
          return next;
        } else if (next > 127)
          asciiOnly = false;
        next = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
      }
      _this.unterminatedString$6$asciiOnly$isMultiLine$isRaw(quoteChar, quoteStart, quoteStart, asciiOnly, false, true);
      return next;
    },
    tokenizeMultiLineRawString$2(quoteChar, quoteStart) {
      var t1, t2, t3, unicodeStart, asciiOnlyString, asciiOnlyLine, t4, _this = this,
        next = _this.advance$0();
      $label0$0:
        for (t1 = _this.string, t2 = _this.lineStarts, t3 = J.getInterceptor$ax(t2), unicodeStart = quoteStart, asciiOnlyString = true, asciiOnlyLine = true; next !== 0;) {
          for (; next !== quoteChar;) {
            if (next === 10) {
              if (!asciiOnlyLine) {
                unicodeStart = _this.scanOffset;
                asciiOnlyLine = true;
              }
              t3.add$1(t2, _this.scanOffset + 1);
            } else if (next > 127) {
              asciiOnlyString = false;
              asciiOnlyLine = false;
            }
            next = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
            if (next === 0)
              break $label0$0;
          }
          t4 = ++_this.scanOffset;
          next = C.JSString_methods.codeUnitAt$1(t1, t4);
          if (next === quoteChar) {
            t4 = _this.scanOffset = t4 + 1;
            next = C.JSString_methods.codeUnitAt$1(t1, t4);
            if (next === quoteChar) {
              t2 = _this.scanOffset = t4 + 1;
              next = C.JSString_methods.codeUnitAt$1(t1, t2);
              _this.appendToken$1(B.StringToken$fromSubstring(C.TokenType_86y, t1, quoteStart, t2, _this.tokenStart, true, _this.comments));
              return next;
            }
          }
        }
      _this.unterminatedString$6$asciiOnly$isMultiLine$isRaw(quoteChar, quoteStart, quoteStart, asciiOnlyLine, true, true);
      return next;
    },
    tokenizeMultiLineString$3(quoteChar, quoteStart, raw) {
      var next, t1, t2, t3, unicodeStart, start, asciiOnlyString, asciiOnlyLine, t4, _this = this;
      if (raw)
        return _this.tokenizeMultiLineRawString$2(quoteChar, quoteStart);
      next = _this.advance$0();
      for (t1 = _this.string, t2 = _this.lineStarts, t3 = J.getInterceptor$ax(t2), unicodeStart = quoteStart, start = unicodeStart, asciiOnlyString = true, asciiOnlyLine = true; next !== 0;) {
        if (next === 36) {
          next = _this.tokenizeStringInterpolation$2(start, asciiOnlyString);
          start = _this.scanOffset;
          unicodeStart = start;
          asciiOnlyString = true;
          asciiOnlyLine = true;
          continue;
        }
        if (next === quoteChar) {
          t4 = ++_this.scanOffset;
          next = C.JSString_methods.codeUnitAt$1(t1, t4);
          if (next === quoteChar) {
            t4 = _this.scanOffset = t4 + 1;
            next = C.JSString_methods.codeUnitAt$1(t1, t4);
            if (next === quoteChar) {
              t2 = _this.scanOffset = t4 + 1;
              next = C.JSString_methods.codeUnitAt$1(t1, t2);
              _this.appendToken$1(B.StringToken$fromSubstring(C.TokenType_86y, t1, start, t2, _this.tokenStart, true, _this.comments));
              return next;
            }
          }
          continue;
        }
        if (next === 92) {
          next = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
          if (next === 0)
            break;
        }
        if (next === 10) {
          if (!asciiOnlyLine) {
            unicodeStart = _this.scanOffset;
            asciiOnlyLine = true;
          }
          t3.add$1(t2, _this.scanOffset + 1);
        } else {
          if (typeof next !== "number")
            return next.$gt();
          if (next > 127) {
            asciiOnlyString = false;
            asciiOnlyLine = false;
          }
        }
        next = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
      }
      _this.unterminatedString$6$asciiOnly$isMultiLine$isRaw(quoteChar, quoteStart, start, asciiOnlyString, true, false);
      return next;
    },
    unexpected$1(character) {
      var codeUnits, t1, charOffset, next, t2, _this = this,
        errorToken = S.buildUnexpectedCharacterToken(character, _this.tokenStart);
      if (errorToken instanceof S.NonAsciiIdentifierToken) {
        codeUnits = H._setArrayType([], type$.JSArray_int);
        if (_this.get$tail().type === C.TokenType_IQp) {
          t1 = _this.get$tail();
          t1 = t1.offset + t1.get$length(t1) === _this.tokenStart;
        } else
          t1 = false;
        if (t1) {
          charOffset = _this.get$tail().offset;
          t1 = _this.get$tail().get$lexeme();
          t1.toString;
          C.JSArray_methods.addAll$1(codeUnits, new H.CodeUnits(t1));
          t1 = _this.get$tail().previous;
          t1.toString;
          _this.__AbstractScanner_tail = t1;
        } else
          charOffset = errorToken.offset;
        C.JSArray_methods.add$1(codeUnits, errorToken.character);
        _this.prependErrorToken$1(errorToken);
        next = _this.advanceAfterError$1(true);
        for (t1 = _this.string; S._isIdentifierChar(next, true);) {
          C.JSArray_methods.add$1(codeUnits, next);
          next = C.JSString_methods.codeUnitAt$1(t1, ++_this.scanOffset);
        }
        t1 = P.String_String$fromCharCodes(codeUnits, 0, null);
        t2 = _this.comments;
        t1 = new B.StringToken(B.StringToken_canonicalizedString(t1, 0, t1.length, false), C.TokenType_IQp, charOffset, t2);
        t1._setCommentParent$1(t2);
        _this.appendToken$1(t1);
        return next;
      } else {
        _this.prependErrorToken$1(errorToken);
        return _this.advanceAfterError$1(true);
      }
    },
    unterminatedString$6$asciiOnly$isMultiLine$isRaw(quoteChar, quoteStart, start, asciiOnly, isMultiLine, isRaw) {
      var errorStart, _this = this,
        t1 = type$.JSArray_int,
        suffix = P.String_String$fromCharCodes(isMultiLine ? H._setArrayType([quoteChar, quoteChar, quoteChar], t1) : H._setArrayType([quoteChar], t1), 0, null),
        prefix = isRaw ? "r" + suffix : suffix;
      _this.appendToken$1(_this.createSyntheticSubstringToken$4(C.TokenType_86y, start, asciiOnly, suffix));
      errorStart = _this.tokenStart;
      t1 = _this.scanOffset;
      t1 = new S.UnterminatedString(prefix, t1, C.TokenType_uv8, errorStart < t1 ? errorStart : quoteStart, null);
      t1._setCommentParent$1(null);
      _this.prependErrorToken$1(t1);
    },
    advanceAfterError$1(shouldAdvance) {
      var t1;
      if (this.atEndOfFile$0())
        return 0;
      t1 = this.advance$0();
      return t1;
    },
    set$groupingStack(groupingStack) {
      this.groupingStack = type$.Link_BeginToken._as(groupingStack);
    },
    $isScanner0: 1
  };
  S.LineStarts.prototype = {
    get$length(_) {
      return this.arrayLength;
    },
    $index(_, index) {
      return J.$index$asx(this.array, index);
    },
    set$length(_, newLength) {
      if (newLength > this.array.length)
        this.grow$1(newLength);
      this.arrayLength = newLength;
    },
    $indexSet(_, index, value) {
      var _this = this;
      H._asIntS(index);
      H._asIntS(value);
      if (typeof value !== "number")
        return value.$gt();
      if (value > 65535 && !type$.Uint32List._is(_this.array))
        _this.switchToUint32$1(_this.array.length);
      J.$indexSet$ax(_this.array, index, value);
    },
    add$1(_, value) {
      var t1, t2, _this = this;
      H._asIntS(value);
      if (_this.arrayLength >= _this.array.length)
        _this.grow$1(0);
      if (typeof value !== "number")
        return value.$gt();
      if (value > 65535 && !type$.Uint32List._is(_this.array))
        _this.switchToUint32$1(_this.array.length);
      t1 = _this.array;
      t2 = _this.arrayLength++;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = value;
    },
    grow$1(newLengthMinimum) {
      var newArray, _this = this,
        t1 = _this.array,
        newLength = t1.length * 2;
      if (newLength < newLengthMinimum)
        newLength = newLengthMinimum;
      if (type$.Uint16List._is(t1)) {
        newArray = new Uint16Array(newLength);
        C.NativeUint16List_methods.setRange$3(newArray, 0, _this.arrayLength, t1);
        _this.set$array(newArray);
      } else
        _this.switchToUint32$1(newLength);
    },
    switchToUint32$1(newLength) {
      var newArray = new Uint32Array(newLength);
      C.NativeUint32List_methods.setRange$3(newArray, 0, this.arrayLength, this.array);
      this.set$array(newArray);
    },
    set$array(array) {
      this.array = type$.List_int._as(array);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  S.ScannerConfiguration.prototype = {};
  S._LineStarts_Object_ListMixin.prototype = {};
  S.ErrorToken.prototype = {
    get$length(_) {
      return 1;
    },
    get$lexeme() {
      var index, errorMsg0,
        t1 = this.get$assertionMessage(),
        errorMsg = t1.get$message(t1),
        pattern = P.RegExp_RegExp("^#[0-9]* *Parser"),
        traceLines = J.toString$0$(P.StackTrace_current()).split("\n");
      for (index = traceLines.length - 2; index >= 0; --index)
        if (J.startsWith$1$s(traceLines[index], pattern)) {
          errorMsg0 = errorMsg + " - " + H.S(traceLines[index + 1]);
          errorMsg = errorMsg0;
          break;
        }
      throw H.wrapException(errorMsg);
    },
    get$character() {
      return null;
    },
    get$endOffset() {
      return null;
    },
    get$begin() {
      return null;
    }
  };
  S.EncodingErrorToken.prototype = {
    toString$0(_) {
      return "EncodingErrorToken()";
    },
    get$assertionMessage() {
      return C.MessageCode_mu6;
    }
  };
  S.NonAsciiIdentifierToken.prototype = {
    toString$0(_) {
      return "NonAsciiIdentifierToken(" + this.character + ")";
    },
    get$assertionMessage() {
      var t1 = this.character;
      return Z._withArgumentsNonAsciiIdentifier(P.String_String$fromCharCodes(H._setArrayType([t1], type$.JSArray_int), 0, null), t1);
    },
    get$character() {
      return this.character;
    }
  };
  S.NonAsciiWhitespaceToken.prototype = {
    toString$0(_) {
      return "NonAsciiWhitespaceToken(" + this.character + ")";
    },
    get$assertionMessage() {
      return Z._withArgumentsNonAsciiWhitespace(this.character);
    },
    get$character() {
      return this.character;
    }
  };
  S.AsciiControlCharacterToken.prototype = {
    toString$0(_) {
      return "AsciiControlCharacterToken(" + this.character + ")";
    },
    get$assertionMessage() {
      return Z._withArgumentsAsciiControlCharacter(this.character);
    },
    get$character() {
      return this.character;
    }
  };
  S.UnsupportedOperator.prototype = {
    get$assertionMessage() {
      return Z._withArgumentsUnsupportedOperator(this.token);
    },
    toString$0(_) {
      return "UnsupportedOperator(" + H.S(this.token.get$lexeme()) + ")";
    }
  };
  S.UnterminatedString.prototype = {
    toString$0(_) {
      return "UnterminatedString(" + this.start + ")";
    },
    get$length(_) {
      return this.endOffset - this.offset;
    },
    get$assertionMessage() {
      var t1 = this.start,
        t2 = C.Map_nZmPa.$index(0, t1);
      t2.toString;
      return Z._withArgumentsUnterminatedString(t1, t2);
    },
    get$endOffset() {
      return this.endOffset;
    }
  };
  S.UnterminatedToken.prototype = {
    toString$0(_) {
      return "UnterminatedToken(" + this.assertionMessage.name + ")";
    },
    get$assertionMessage() {
      return this.assertionMessage;
    },
    get$endOffset() {
      return this.endOffset;
    }
  };
  S.UnmatchedToken.prototype = {
    toString$0(_) {
      return "UnmatchedToken(" + this.begin.type.lexeme + ")";
    },
    get$assertionMessage() {
      var t1 = this.begin,
        t2 = C.Map_4u8XL.$index(0, t1.type.lexeme);
      t2.toString;
      return Z._withArgumentsUnmatchedToken(t2, t1);
    },
    get$begin() {
      return this.begin;
    }
  };
  A.translateErrorToken__makeError.prototype = {
    call$2(errorCode, $arguments) {
      var t1 = this._box_0,
        t2 = t1.charOffset;
      t1 = H.boolConversionCheck(A._isAtEnd(this.token, t2)) ? t1.charOffset = t2 - 1 : t2;
      this.reportError.call$3(errorCode, t1, $arguments);
    },
    $signature: 29
  };
  A.ScannerErrorCode.prototype = {
    get$type(_) {
      return C.ErrorType_SYNTACTIC_ERROR_6;
    }
  };
  E.NullInterner.prototype = {};
  Y.KeywordState_KEYWORD_STATE_closure.prototype = {
    call$1(keyword) {
      return type$.Keyword._as(keyword).lexeme;
    },
    $signature: 30
  };
  Y.KeywordState_KEYWORD_STATE_closure0.prototype = {
    call$2(a, b) {
      return J.compareTo$1$ns(H._asStringS(a), H._asStringS(b));
    },
    $signature: 31
  };
  Y.ArrayKeywordState.prototype = {
    toString$0(_) {
      var t1, foo, i, t2,
        sb = new P.StringBuffer("");
      sb._contents = "[";
      t1 = this.keyword;
      if (t1 != null) {
        sb._contents = "[*";
        t1 = "[*" + t1.toString$0(0);
        sb._contents = t1;
        sb._contents = t1 + " ";
      }
      foo = this.table;
      for (t1 = type$.JSArray_int, i = 0; i < foo.length; ++i)
        if (foo[i] != null) {
          t2 = P.String_String$fromCharCodes(H._setArrayType([i + 97], t1), 0, null) + ": ";
          if (i >= foo.length)
            return H.ioore(foo, i);
          sb._contents += t2 + H.S(foo[i]) + "; ";
        }
      t1 = sb._contents += "]";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isKeywordState: 1,
    get$keyword() {
      return this.keyword;
    }
  };
  Y.LowerCaseArrayKeywordState.prototype = {
    next$1(c) {
      var t1 = this.table,
        t2 = c - 97;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    nextCapital$1(c) {
      return null;
    }
  };
  Y.UpperCaseArrayKeywordState.prototype = {
    next$1(c) {
      var t1 = this.table,
        t2 = c - 65;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    nextCapital$1(c) {
      var t1 = this.table,
        t2 = c - 65;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    }
  };
  Y.LeafKeywordState.prototype = {
    next$1(c) {
      return null;
    },
    nextCapital$1(c) {
      return null;
    },
    toString$0(_) {
      return this.keyword.lexeme;
    },
    $isKeywordState: 1,
    get$keyword() {
      return this.keyword;
    }
  };
  K.ScannerResult.prototype = {};
  N.Node.prototype = {};
  N.StringCanonicalizer.prototype = {
    rehash$0() {
      var t1, i, t2, t, n, newIndex, _this = this,
        newSize = _this._size * 2,
        newNodes = P.List_List$filled(newSize, null, false, type$.nullable_Node);
      for (t1 = newSize - 1, i = 0; i < _this._size; ++i) {
        t2 = _this._nodes;
        if (i >= t2.length)
          return H.ioore(t2, i);
        t = t2[i];
        for (; t != null; t = n) {
          n = t.next;
          newIndex = N.StringCanonicalizer_hashString(t.data, t.start, t.end) & t1;
          if (newIndex >= newSize)
            return H.ioore(newNodes, newIndex);
          t.next = newNodes[newIndex];
          C.JSArray_methods.$indexSet(newNodes, newIndex, t);
        }
      }
      _this._size = newSize;
      _this.set$_nodes(newNodes);
    },
    canonicalize$4(data, start, end, asciiOnly) {
      var index, t1, s, len, t2, t, t3, j, t4, i, t5, payload, _this = this;
      if (_this._count > _this._size)
        _this.rehash$0();
      index = N.StringCanonicalizer_hashString(data, start, end);
      index &= _this._size - 1;
      t1 = _this._nodes;
      if (index >= t1.length)
        return H.ioore(t1, index);
      s = t1[index];
      len = end - start;
      for (t2 = data.length, t = s; t != null;) {
        t3 = t.end;
        j = t.start;
        if (t3 - j === len) {
          t3 = t.data;
          t4 = t3.length;
          i = start;
          while (true) {
            if (i < end) {
              if (i < 0 || i >= t2)
                return H.ioore(data, i);
              t5 = data[i];
              if (j < 0 || j >= t4)
                return H.ioore(t3, j);
              t5 = t5 === t3[j];
            } else
              t5 = false;
            if (!t5)
              break;
            ++i;
            ++j;
          }
          if (i === end)
            return t.payload;
        }
        t = t.next;
      }
      payload = C.JSString_methods.substring$2(data, start, end);
      C.JSArray_methods.$indexSet(t1, index, new N.Node(data, start, end, payload, s));
      ++_this._count;
      return payload;
    },
    set$_nodes(_nodes) {
      this._nodes = type$.List_nullable_Node._as(_nodes);
    }
  };
  T.StringScanner.prototype = {
    advance$0() {
      return C.JSString_methods.codeUnitAt$1(this.string, ++this.scanOffset);
    },
    createSubstringToken$4(type, start, asciiOnly, extraOffset) {
      var _this = this;
      return B.StringToken$fromSubstring(type, _this.string, start, _this.scanOffset + extraOffset, _this.tokenStart, true, _this.comments);
    },
    createSyntheticSubstringToken$4(type, start, asciiOnly, syntheticChars) {
      var source = C.JSString_methods.substring$2(this.string, start, this.scanOffset);
      return L.SyntheticStringToken$(type, source + syntheticChars, this.tokenStart, source.length);
    },
    atEndOfFile$0() {
      return this.scanOffset >= this.string.length - 1;
    }
  };
  L.BeginToken.prototype = {
    get$endGroup() {
      return this.endToken;
    }
  };
  L.KeywordStyle.prototype = {
    toString$0(_) {
      return this._token$_name;
    }
  };
  L.Keyword.prototype = {
    get$isBuiltIn() {
      return this.keywordStyle === C.KeywordStyle_1;
    },
    get$isPseudo() {
      return this.keywordStyle === C.KeywordStyle_2;
    },
    get$isReservedWord() {
      return this.keywordStyle === C.KeywordStyle_0;
    },
    get$name(_) {
      return this.lexeme.toUpperCase();
    },
    toString$0(_) {
      return this.lexeme.toUpperCase();
    }
  };
  L.KeywordToken.prototype = {
    get$isIdentifier() {
      var t1 = this.keyword.keywordStyle;
      return t1 === C.KeywordStyle_2 || t1 === C.KeywordStyle_1;
    },
    get$isKeyword() {
      return true;
    },
    get$isKeywordOrIdentifier() {
      return true;
    },
    get$keyword() {
      return this.keyword;
    }
  };
  L.SimpleToken.prototype = {
    get$beforeSynthetic() {
      return null;
    },
    set$beforeSynthetic(previous) {
    },
    get$endGroup() {
      return null;
    },
    get$isIdentifier() {
      return false;
    },
    get$isKeyword() {
      return false;
    },
    get$isKeywordOrIdentifier() {
      return this.get$isIdentifier();
    },
    get$isSynthetic() {
      return this.get$length(this) === 0;
    },
    get$keyword() {
      return null;
    },
    get$length(_) {
      return this.get$lexeme().length;
    },
    get$lexeme() {
      return this.type.lexeme;
    },
    setNext$1(token) {
      this.next = token;
      token.previous = this;
      token.set$beforeSynthetic(this);
      return token;
    },
    toString$0(_) {
      return this.get$lexeme();
    },
    value$0(_) {
      return this.get$lexeme();
    },
    _setCommentParent$1(comment) {
      var t1;
      for (t1 = type$.nullable_CommentToken; comment != null;)
        comment = t1._as(comment.next);
    },
    $isSyntacticEntity: 1,
    $isToken: 1
  };
  L.StringToken0.prototype = {
    get$isIdentifier() {
      return this.type.kind === 97;
    },
    get$lexeme() {
      return this._token$_value;
    },
    value$0(_) {
      return this._token$_value;
    }
  };
  L.SyntheticBeginToken.prototype = {
    get$isSynthetic() {
      return true;
    },
    get$length(_) {
      return 0;
    }
  };
  L.SyntheticKeywordToken.prototype = {
    get$length(_) {
      return 0;
    }
  };
  L.SyntheticStringToken.prototype = {
    get$isSynthetic() {
      return true;
    },
    get$length(_) {
      var t1 = this._token$_length;
      return t1 == null ? L.SimpleToken.prototype.get$length.call(this, this) : t1;
    },
    set$beforeSynthetic(beforeSynthetic) {
      this.beforeSynthetic = type$.nullable_Token._as(beforeSynthetic);
    },
    get$beforeSynthetic() {
      return this.beforeSynthetic;
    }
  };
  L.SyntheticToken.prototype = {
    get$isSynthetic() {
      return true;
    },
    get$length(_) {
      return 0;
    },
    set$beforeSynthetic(beforeSynthetic) {
      this.beforeSynthetic = type$.nullable_Token._as(beforeSynthetic);
    },
    get$beforeSynthetic() {
      return this.beforeSynthetic;
    }
  };
  L.ReplacementToken.prototype = {
    get$isSynthetic() {
      return true;
    },
    get$length(_) {
      return 0;
    },
    set$beforeSynthetic(beforeSynthetic) {
      this.ReplacementToken_beforeSynthetic = type$.nullable_Token._as(beforeSynthetic);
    },
    get$beforeSynthetic() {
      return this.ReplacementToken_beforeSynthetic;
    }
  };
  L.TokenType.prototype = {
    get$isBuiltIn() {
      return false;
    },
    get$isReservedWord() {
      return false;
    },
    get$isPseudo() {
      return false;
    },
    toString$0(_) {
      return this.get$name(this);
    },
    get$name(receiver) {
      return this.name;
    }
  };
  B.StringToken.prototype = {
    StringToken$fromSubstring$7$canonicalize$precedingComments(type, data, start, end, charOffset, canonicalize, precedingComments) {
      var $length = end - start;
      if ($length <= 4)
        this.valueOrLazySubstring = B.StringToken_canonicalizedString(data, start, end, true);
      else
        this.valueOrLazySubstring = B._LazySubstring__LazySubstring(data, start, $length, true);
    },
    get$lexeme() {
      var data, start, _this = this,
        t1 = _this.valueOrLazySubstring;
      if (typeof t1 == "string")
        return t1;
      else {
        data = J.get$data$x(t1);
        start = J.get$start$x(_this.valueOrLazySubstring);
        t1 = type$._LazySubstring._as(_this.valueOrLazySubstring);
        t1 = B.StringToken_canonicalizedString(data, start, start + t1.get$length(t1), _this.valueOrLazySubstring.get$boolValue());
        _this.valueOrLazySubstring = t1;
        return t1;
      }
    },
    get$isIdentifier() {
      return this.type.kind === 97;
    },
    toString$0(_) {
      return this.get$lexeme();
    },
    value$0(_) {
      return this.get$lexeme();
    },
    $isStringToken0: 1
  };
  B.CommentToken.prototype = {$isCommentToken0: 1};
  B.LanguageVersionToken.prototype = {};
  B.DartDocToken.prototype = {};
  B._LazySubstring.prototype = {};
  B._CompactLazySubstring.prototype = {
    get$start(_) {
      return this.fields >>> 10;
    },
    get$length(_) {
      return this.fields >>> 1 & 511;
    },
    get$boolValue() {
      return (this.fields & 1) === 1;
    },
    get$data(receiver) {
      return this.data;
    }
  };
  B._FullLazySubstring.prototype = {
    get$data(receiver) {
      return this.data;
    },
    get$start(receiver) {
      return this.start;
    },
    get$length(receiver) {
      return this.length;
    },
    get$boolValue() {
      return this.boolValue;
    }
  };
  U.Link.prototype = {
    get$head(_) {
      return H.throwExpression(P.StateError$("no elements"));
    },
    get$tail() {
      return null;
    },
    prepend$1(element) {
      var t1 = H._instanceType(this);
      t1._precomputed1._as(element);
      return new G.LinkEntry(element, this, t1._eval$1("LinkEntry<1>"));
    },
    get$iterator(_) {
      return new G.LinkIterator(this, H._instanceType(this)._eval$1("LinkIterator<1>"));
    },
    toList$1$growable(_, growable) {
      var t1,
        result = H._setArrayType([], H._instanceType(this)._eval$1("JSArray<1>")),
        link = this;
      while (!link.get$isEmpty(link)) {
        C.JSArray_methods.add$1(result, link.get$head(link));
        t1 = link.get$tail();
        t1.toString;
        link = t1;
      }
      return result;
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$isEmpty(_) {
      return true;
    },
    get$isNotEmpty(_) {
      return false;
    },
    forEach$1(_, f) {
      H._instanceType(this)._eval$1("~(1)")._as(f);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      if (!H._instanceType(this)._eval$1("Link<1>")._is(other))
        return false;
      return other.get$isEmpty(other);
    },
    get$hashCode(_) {
      return H.throwExpression(P.UnsupportedError$("Link.hashCode"));
    },
    toString$0(_) {
      return "[]";
    },
    get$length(_) {
      throw H.wrapException(P.UnsupportedError$("get:length"));
    },
    slowLength$0() {
      return 0;
    },
    $isIterable: 1
  };
  G.LinkIterator.prototype = {
    get$current() {
      var t1 = this._link_implementation$_current;
      t1.toString;
      return t1;
    },
    moveNext$0() {
      var _this = this,
        t1 = _this._link;
      if (t1.get$isEmpty(t1)) {
        _this.set$_link_implementation$_current(null);
        return false;
      }
      t1 = _this._link;
      _this.set$_link_implementation$_current(t1.get$head(t1));
      t1 = _this._link.get$tail();
      t1.toString;
      _this.set$_link(t1);
      return true;
    },
    set$_link_implementation$_current(_current) {
      this._link_implementation$_current = this.$ti._eval$1("1?")._as(_current);
    },
    set$_link(_link) {
      this._link = this.$ti._eval$1("Link<1>")._as(_link);
    },
    $isIterator: 1
  };
  G.LinkEntry.prototype = {
    prepend$1(element) {
      var t1 = this.$ti;
      t1._precomputed1._as(element);
      return new G.LinkEntry(element, this, t1);
    },
    printOn$2(buffer, separatedBy) {
      var link, t1;
      buffer._contents += H.S(this.head);
      link = this.tail;
      while (link.get$isNotEmpty(link)) {
        buffer._contents += separatedBy;
        buffer._contents += H.S(link.get$head(link));
        t1 = link.get$tail();
        t1.toString;
        link = t1;
      }
    },
    toString$0(_) {
      var t1,
        buffer = new P.StringBuffer("");
      buffer._contents = "[ ";
      this.printOn$2(buffer, ", ");
      t1 = buffer._contents += " ]";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    get$isEmpty(_) {
      return false;
    },
    get$isNotEmpty(_) {
      return true;
    },
    forEach$1(_, f) {
      var link, t1;
      this.$ti._eval$1("~(1)")._as(f);
      link = this;
      while (link.get$isNotEmpty(link)) {
        f.call$1(link.get$head(link));
        t1 = link.get$tail();
        t1.toString;
        link = t1;
      }
    },
    $eq(_, other) {
      var otherElements, myElements, t1, t2;
      if (other == null)
        return false;
      if (!this.$ti._eval$1("Link<1>")._is(other))
        return false;
      otherElements = other;
      myElements = this;
      while (true) {
        if (!(myElements.get$isNotEmpty(myElements) && otherElements.get$isNotEmpty(otherElements)))
          break;
        if (myElements.get$head(myElements) != otherElements.get$head(otherElements))
          return false;
        t1 = myElements.get$tail();
        t1.toString;
        t2 = otherElements.get$tail();
        t2.toString;
        otherElements = t2;
        myElements = t1;
      }
      return myElements.get$isEmpty(myElements) && otherElements.get$isEmpty(otherElements);
    },
    get$hashCode(_) {
      return H.throwExpression(P.UnsupportedError$("LinkEntry.hashCode"));
    },
    slowLength$0() {
      var t1, $length = 0, current = this;
      while (current.get$isNotEmpty(current)) {
        ++$length;
        t1 = current.get$tail();
        t1.toString;
        current = t1;
      }
      return $length;
    },
    get$head(receiver) {
      return this.head;
    },
    get$tail() {
      return this.tail;
    }
  };
  A.AstFactory.prototype = {};
  F.Precedence.prototype = {
    get$hashCode(_) {
      return C.JSInt_methods.get$hashCode(this._precedence$_index);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof F.Precedence && this._precedence$_index === other._precedence$_index;
    }
  };
  B.ThrowingAstVisitor.prototype = {
    visitHideClause$1(node) {
      return this._throw$1(node);
    },
    visitShowClause$1(node) {
      return this._throw$1(node);
    },
    visitShowHideElement$1(node) {
      return this._throw$1(node);
    },
    _throw$1(node) {
      throw H.wrapException(P.Exception_Exception("Missing implementation of visit" + H.getRuntimeType(node).toString$0(0)));
    },
    $isAstVisitor: 1
  };
  V.AnalysisError.prototype = {
    get$_problemMessage() {
      var t1 = this.__AnalysisError__problemMessage;
      return t1 === $ ? H.throwExpression(H.LateError$fieldNI("_problemMessage")) : t1;
    },
    get$hashCode(_) {
      var t1 = this.source;
      return (this.get$_problemMessage().offset ^ C.JSString_methods.get$hashCode(this.get$_problemMessage().messageText$1$includeUrl(true)) ^ C.JSString_methods.get$hashCode(t1._string_source$_contents) ^ C.JSString_methods.get$hashCode(t1.fullName)) >>> 0;
    },
    get$length(_) {
      return this.get$_problemMessage().length;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (other instanceof V.AnalysisError) {
        if (_this.errorCode !== other.errorCode)
          return false;
        if (_this.get$_problemMessage().offset !== other.get$_problemMessage().offset || _this.get$_problemMessage().length !== other.get$_problemMessage().length)
          return false;
        if (_this.get$_problemMessage().messageText$1$includeUrl(true) !== other.get$_problemMessage().messageText$1$includeUrl(true))
          return false;
        if (!_this.source.$eq(0, other.source))
          return false;
        return true;
      }
      return false;
    },
    toString$0(_) {
      var _this = this,
        t1 = _this.source.fullName + "(" + _this.get$_problemMessage().offset + ".." + (_this.get$_problemMessage().offset + _this.get$_problemMessage().length - 1) + "): " + _this.get$_problemMessage().messageText$1$includeUrl(true);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  Z.ErrorReporter.prototype = {
    reportErrorForOffset$4(errorCode, offset, $length, $arguments) {
      var messages, _this = this;
      _this._convertElements$1($arguments);
      messages = H._setArrayType([], type$.JSArray_DiagnosticMessage);
      C.JSArray_methods.addAll$1(messages, _this._convertTypeNames$1($arguments));
      _this._errorListener.onError$1(0, V.AnalysisError$(_this._listener$_source, offset, $length, errorCode, $arguments, messages));
    },
    reportErrorForOffset$3(errorCode, offset, $length) {
      return this.reportErrorForOffset$4(errorCode, offset, $length, null);
    },
    _convertElements$1($arguments) {
      var t1, i;
      if ($arguments == null)
        return;
      for (t1 = $arguments.length, i = 0; i < t1; ++i)
        ;
    },
    _convertTypeNames$1($arguments) {
      var t1, typeGroups, t2, i, t3, t4, t5, typeToConvert, nameToElementMap, t6, t7, t8, _i, element, buffer, $name, t9,
        messages = H._setArrayType([], type$.JSArray_DiagnosticMessage);
      if ($arguments == null)
        return messages;
      t1 = type$.String;
      typeGroups = P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.List__TypeToConvert);
      for (t2 = $arguments.length, i = 0; i < t2; ++i)
        ;
      for (t2 = typeGroups.get$values(typeGroups), t2 = t2.get$iterator(t2), t3 = type$.Set_Element; t2.moveNext$0();) {
        t4 = t2.get$current();
        t5 = J.getInterceptor$asx(t4);
        if (t5.get$length(t4) === 1) {
          typeToConvert = t5.$index(t4, 0);
          C.JSArray_methods.$indexSet($arguments, typeToConvert.index, typeToConvert.displayName);
        } else {
          nameToElementMap = P.LinkedHashMap_LinkedHashMap$_empty(t1, t3);
          for (t6 = t5.get$iterator(t4); t6.moveNext$0();)
            for (t7 = t6.get$current().allElements$0(), t8 = t7.length, _i = 0; _i < t7.length; t7.length === t8 || (0, H.throwConcurrentModificationError)(t7), ++_i) {
              element = t7[_i];
              nameToElementMap.putIfAbsent$2(J.get$name$x(element), new Z.ErrorReporter__convertTypeNames_closure()).add$1(0, element);
            }
          for (t4 = t5.get$iterator(t4); t4.moveNext$0();) {
            t5 = t4.get$current();
            for (t6 = t5.allElements$0(), t7 = t6.length, buffer = null, _i = 0; _i < t6.length; t6.length === t7 || (0, H.throwConcurrentModificationError)(t6), ++_i) {
              element = t6[_i];
              t8 = J.getInterceptor$x(element);
              $name = t8.get$name(element);
              t9 = nameToElementMap.$index(0, $name);
              t9.toString;
              if (J.get$length$asx(t9) > 1) {
                if (buffer == null) {
                  buffer = new P.StringBuffer("");
                  buffer._contents = "where ";
                } else
                  buffer._contents += ", ";
                buffer._contents += H.S($name) + " is defined in " + H.S(t8.get$source(element).get$fullName());
              }
              t8.get$source(element).get$fullName();
              C.JSArray_methods.add$1(messages, new L.DiagnosticMessageImpl(element.get$nameLength(), H.S($name) + " is defined in " + H.S(t8.get$source(element).get$fullName()), element.get$nameOffset(), null));
            }
            t6 = t5.index;
            t5 = t5.displayName;
            if (buffer != null)
              C.JSArray_methods.$indexSet($arguments, t6, H.S(t5) + " (" + buffer.toString$0(0) + ")");
            else
              C.JSArray_methods.$indexSet($arguments, t6, t5);
          }
        }
      }
      return messages;
    }
  };
  Z.ErrorReporter__convertTypeNames_closure.prototype = {
    call$0() {
      return P.LinkedHashSet_LinkedHashSet$_empty(type$.Element);
    },
    $signature: 32
  };
  Z.RecordingErrorListener.prototype = {
    get$errors() {
      var t1 = this._errors;
      if (t1 == null)
        return C.List_empty2;
      return P.List_List$of(t1, true, H._instanceType(t1)._precomputed1);
    },
    onError$1(_, error) {
      var t1 = this._errors;
      if (t1 == null) {
        t1 = P.HashSet_HashSet(type$.AnalysisError);
        this.set$_errors(t1);
      }
      t1.add$1(0, error);
    },
    set$_errors(_errors) {
      this._errors = type$.nullable_Set_AnalysisError._as(_errors);
    },
    $isAnalysisErrorListener: 1
  };
  Z._TypeToConvert_allElements_addElementsFrom.prototype = {
    call$1(type) {
      var t1, parameter;
      this.call$1(type.get$returnType());
      for (t1 = type.get$parameters(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        parameter = t1.get$current();
        this.call$1(parameter.get$type(parameter));
      }
    },
    $signature: 33
  };
  Z._TypeToConvert_allElements_closure.prototype = {
    call$1(element) {
      var $name, t1;
      type$.Element._as(element);
      $name = element.get$name(element);
      t1 = $name.get$isNotEmpty($name);
      return t1;
    },
    $signature: 25
  };
  E.CharacterLocation.prototype = {
    toString$0(_) {
      return "" + this.lineNumber + ":" + this.columnNumber;
    }
  };
  E.LineInfo.prototype = {
    getLocation$1(offset) {
      var t4, t5, min, midpoint,
        t1 = this.lineStarts,
        t2 = t1.length,
        max = t2 - 1,
        t3 = this._previousLine;
      if (t3 < 0 || t3 >= t2)
        return H.ioore(t1, t3);
      t4 = t1[t3];
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (offset >= t4) {
        if (t3 !== max) {
          t5 = t3 + 1;
          if (t5 >= t2)
            return H.ioore(t1, t5);
          t5 = t1[t5];
          if (typeof t5 !== "number")
            return H.iae(t5);
          t5 = offset < t5;
        } else
          t5 = true;
        if (t5)
          return new E.CharacterLocation(t3 + 1, offset - t4 + 1);
        min = t3;
      } else
        min = 0;
      for (; min < max;) {
        midpoint = C.JSInt_methods._tdivFast$1(max - min + 1, 2) + min;
        if (midpoint < 0 || midpoint >= t2)
          return H.ioore(t1, midpoint);
        t3 = t1[midpoint];
        if (typeof t3 !== "number")
          return t3.$gt();
        if (t3 > offset)
          max = midpoint - 1;
        else
          min = midpoint;
      }
      this._previousLine = min;
      if (min < 0 || min >= t1.length)
        return H.ioore(t1, min);
      t1 = t1[min];
      if (typeof t1 !== "number")
        return H.iae(t1);
      return new E.CharacterLocation(min + 1, offset - t1 + 1);
    }
  };
  K.ExperimentStatus.prototype = {
    get$hashCode(_) {
      var t1, t2, hash, _i;
      for (t1 = this._flags, t2 = t1.length, hash = 0, _i = 0; _i < t2; ++_i) {
        hash = hash + C.JSBool_methods.get$hashCode(t1[_i]) & 536870911;
        hash = hash + ((hash & 524287) << 10) & 536870911;
        hash ^= hash >>> 6;
      }
      hash = hash + ((hash & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (other instanceof K.ExperimentStatus) {
        if (!J.$eq$(_this._sdkLanguageVersion, other._sdkLanguageVersion))
          return false;
        if (!K.ExperimentStatus__equalListOfBool(_this._explicitEnabledFlags, other._explicitEnabledFlags))
          return false;
        if (!K.ExperimentStatus__equalListOfBool(_this._explicitDisabledFlags, other._explicitDisabledFlags))
          return false;
        if (!K.ExperimentStatus__equalListOfBool(_this._flags, other._flags))
          return false;
        return true;
      }
      return false;
    },
    toString$0(_) {
      return T.experimentStatusToString(this._flags);
    },
    $isFeatureSet: 1
  };
  K._CurrentState.prototype = {};
  K._ExperimentStatus_Object__CurrentState.prototype = {};
  T.EnabledDisabledFlags.prototype = {};
  T.ExperimentalFeature.prototype = {
    toString$0(_) {
      return this.enableString;
    }
  };
  B.ParseStringResultImpl.prototype = {};
  U.AdjacentStringsImpl.prototype = {
    get$beginToken() {
      var t1 = this._ast$_strings.get$beginToken();
      t1.toString;
      return t1;
    },
    get$endToken() {
      var t1 = this._ast$_strings.get$endToken();
      t1.toString;
      return t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitAdjacentStrings$1(this);
    },
    $isAdjacentStrings: 1
  };
  U.AnnotatedNodeImpl.prototype = {
    AnnotatedNodeImpl$2(_comment, metadata) {
      var _this = this;
      _this._becomeParentOf$1$1(_this._comment, type$.nullable_CommentImpl);
      _this._metadata._initialize$2(_this, metadata);
    },
    get$beginToken() {
      var t2, commentToken, _this = this,
        t1 = _this._comment;
      if (t1 == null) {
        t1 = _this._metadata;
        if (t1.get$length(t1) === 0)
          return _this.get$firstTokenAfterCommentAndMetadata();
        t1 = t1.get$beginToken();
        t1.toString;
        return t1;
      } else {
        t2 = _this._metadata;
        if (t2.get$length(t2) === 0) {
          t1 = t1.tokens;
          if (0 >= t1.length)
            return H.ioore(t1, 0);
          return t1[0];
        }
      }
      t1 = t1.tokens;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      commentToken = t1[0];
      t2 = t2.get$beginToken();
      t2.toString;
      if (commentToken.offset < t2.offset)
        return commentToken;
      return t2;
    }
  };
  U.AnnotationImpl.prototype = {
    get$beginToken() {
      return this.atSign;
    },
    get$endToken() {
      var t1 = this._ast$_arguments;
      if (t1 != null)
        return t1.rightParenthesis;
      else {
        t1 = this._constructorName;
        if (t1 != null)
          return t1.token;
      }
      return this._ast$_name.get$endToken();
    },
    get$parent(_) {
      var t1 = U.AstNodeImpl.prototype.get$parent.call(this, this);
      t1.toString;
      return t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitAnnotation$1(this);
    },
    $isAnnotation: 1
  };
  U.ArgumentListImpl.prototype = {
    get$beginToken() {
      return this.leftParenthesis;
    },
    get$endToken() {
      return this.rightParenthesis;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitArgumentList$1(this);
    },
    $isArgumentList: 1
  };
  U.AsExpressionImpl.prototype = {
    get$beginToken() {
      return this._expression.get$beginToken();
    },
    get$endToken() {
      return this._type.get$endToken();
    },
    get$precedence() {
      return C.Precedence_8;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitAsExpression$1(this);
    },
    $isAsExpression: 1
  };
  U.AssertInitializerImpl.prototype = {
    get$beginToken() {
      return this.assertKeyword;
    },
    get$condition() {
      return this._condition;
    },
    get$endToken() {
      return this.rightParenthesis;
    },
    get$message(_) {
      return this._ast$_message;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitAssertInitializer$1(this);
    },
    $isAssertInitializer: 1,
    $isAssertion: 1
  };
  U.AssertStatementImpl.prototype = {
    get$beginToken() {
      return this.assertKeyword;
    },
    get$condition() {
      return this._condition;
    },
    get$endToken() {
      return this.semicolon;
    },
    get$message(_) {
      return this._ast$_message;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitAssertStatement$1(this);
    },
    $isAssertion: 1,
    $isAssertStatement: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.AssignmentExpressionImpl.prototype = {
    get$beginToken() {
      return this._leftHandSide.get$beginToken();
    },
    get$endToken() {
      return this._rightHandSide.get$endToken();
    },
    get$precedence() {
      return C.Precedence_1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitAssignmentExpression$1(this);
    },
    $isAssignmentExpression: 1
  };
  U.AstNodeImpl.prototype = {
    get$length(_) {
      var beginToken = this.get$beginToken(),
        endToken = this.get$endToken();
      return endToken.offset + endToken.get$length(endToken) - beginToken.offset;
    },
    get$parent(_) {
      return this._ast$_parent;
    },
    toString$0(_) {
      var t1,
        buffer = new P.StringBuffer("");
      this.accept$1$1(0, new V.ToSourceVisitor(buffer), type$.void);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _becomeParentOf$1$1(child, $T) {
      H.checkTypeBound($T, type$.nullable_AstNodeImpl, "T", "_becomeParentOf");
      $T._as(child);
      if (child != null)
        child._ast$_parent = this;
      return child;
    },
    $isSyntacticEntity: 1,
    $isAstNode: 1
  };
  U.AwaitExpressionImpl.prototype = {
    get$beginToken() {
      return this.awaitKeyword;
    },
    get$endToken() {
      return this._expression.get$endToken();
    },
    get$precedence() {
      return C.Precedence_15;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitAwaitExpression$1(this);
    },
    $isAwaitExpression: 1
  };
  U.BinaryExpressionImpl.prototype = {
    get$beginToken() {
      return this._leftOperand.get$beginToken();
    },
    get$endToken() {
      return this._rightOperand.get$endToken();
    },
    get$precedence() {
      return new F.Precedence(this.operator.type.precedence);
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitBinaryExpression$1(this);
    },
    $isBinaryExpression: 1
  };
  U.BlockFunctionBodyImpl.prototype = {
    get$beginToken() {
      var t1 = this.keyword;
      if (t1 != null)
        return t1;
      return this._block.leftBracket;
    },
    get$endToken() {
      return this._block.rightBracket;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitBlockFunctionBody$1(this);
    },
    $isBlockFunctionBody: 1
  };
  U.BlockImpl.prototype = {
    get$beginToken() {
      return this.leftBracket;
    },
    get$endToken() {
      return this.rightBracket;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitBlock$1(this);
    },
    $isBlock: 1
  };
  U.BooleanLiteralImpl.prototype = {
    get$beginToken() {
      return this.literal;
    },
    get$endToken() {
      return this.literal;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitBooleanLiteral$1(this);
    },
    $isBooleanLiteral: 1
  };
  U.BreakStatementImpl.prototype = {
    get$beginToken() {
      return this.breakKeyword;
    },
    get$endToken() {
      return this.semicolon;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitBreakStatement$1(this);
    },
    $isBreakStatement: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.CascadeExpressionImpl.prototype = {
    get$beginToken() {
      return this._ast$_target.get$beginToken();
    },
    get$endToken() {
      var t1 = this._cascadeSections.get$endToken();
      t1.toString;
      return t1;
    },
    get$precedence() {
      return C.Precedence_2;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitCascadeExpression$1(this);
    },
    $isCascadeExpression: 1
  };
  U.CatchClauseImpl.prototype = {
    get$beginToken() {
      var t1 = this.onKeyword;
      if (t1 != null)
        return t1;
      t1 = this.catchKeyword;
      t1.toString;
      return t1;
    },
    get$endToken() {
      return this._body.rightBracket;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitCatchClause$1(this);
    },
    $isCatchClause: 1
  };
  U.ChildEntities.prototype = {
    get$iterator(_) {
      var t1 = this._entities;
      return new J.ArrayIterator(t1, t1.length, H._arrayInstanceType(t1)._eval$1("ArrayIterator<1>"));
    },
    $isIterable: 1
  };
  U.ClassDeclarationImpl.prototype = {
    get$firstTokenAfterCommentAndMetadata() {
      var t1 = this.abstractKeyword;
      return t1 == null ? this.classKeyword : t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitClassDeclaration$1(this);
    },
    set$_extendsClause(_extendsClause) {
      this._extendsClause = type$.nullable_ExtendsClauseImpl._as(_extendsClause);
    },
    set$_withClause(_withClause) {
      this._withClause = type$.nullable_WithClauseImpl._as(_withClause);
    },
    set$_nativeClause(_nativeClause) {
      this._nativeClause = type$.nullable_NativeClauseImpl._as(_nativeClause);
    },
    $isClassDeclaration: 1
  };
  U.ClassMemberImpl.prototype = {$isClassMember: 1};
  U.ClassOrMixinDeclarationImpl.prototype = {
    ClassOrMixinDeclarationImpl$8(comment, metadata, $name, _typeParameters, _implementsClause, leftBracket, members, rightBracket) {
      var _this = this;
      _this._becomeParentOf$1$1(_this._typeParameters, type$.nullable_TypeParameterListImpl);
      _this._becomeParentOf$1$1(_this._implementsClause, type$.nullable_ImplementsClauseImpl);
      _this._members._initialize$2(_this, members);
    },
    get$endToken() {
      return this.rightBracket;
    },
    set$_implementsClause(_implementsClause) {
      this._implementsClause = type$.nullable_ImplementsClauseImpl._as(_implementsClause);
    }
  };
  U.ClassTypeAliasImpl.prototype = {
    get$firstTokenAfterCommentAndMetadata() {
      var t1 = this.abstractKeyword;
      return t1 == null ? this.typedefKeyword : t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitClassTypeAlias$1(this);
    },
    $isClassTypeAlias: 1
  };
  U.CollectionElementImpl.prototype = {$isCollectionElement: 1};
  U.CombinatorImpl.prototype = {
    get$beginToken() {
      return this.keyword;
    },
    $isCombinator: 1
  };
  U.CommentImpl.prototype = {
    get$beginToken() {
      var t1 = this.tokens;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      return t1[0];
    },
    get$endToken() {
      var t1 = this.tokens,
        t2 = t1.length,
        t3 = t2 - 1;
      if (t3 < 0)
        return H.ioore(t1, t3);
      return t1[t3];
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitComment$1(this);
    },
    $isComment: 1
  };
  U.CommentReferenceImpl.prototype = {
    get$beginToken() {
      var t1 = this.newKeyword;
      return t1 == null ? this._identifier.get$beginToken() : t1;
    },
    get$endToken() {
      return this._identifier.get$endToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitCommentReference$1(this);
    },
    $isCommentReference: 1
  };
  U.CompilationUnitImpl.prototype = {
    get$length(_) {
      var endToken = this.endToken;
      return endToken.offset + endToken.get$length(endToken);
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitCompilationUnit$1(this);
    },
    $isCompilationUnit: 1,
    get$beginToken() {
      return this.beginToken;
    },
    get$endToken() {
      return this.endToken;
    }
  };
  U.CompilationUnitMemberImpl.prototype = {$isCompilationUnitMember: 1};
  U.CompoundAssignmentExpressionImpl.prototype = {};
  U.ConditionalExpressionImpl.prototype = {
    get$beginToken() {
      return this._condition.get$beginToken();
    },
    get$endToken() {
      return this._elseExpression.get$endToken();
    },
    get$precedence() {
      return C.Precedence_3;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitConditionalExpression$1(this);
    },
    $isConditionalExpression: 1
  };
  U.ConfigurationImpl.prototype = {
    get$beginToken() {
      return this.ifKeyword;
    },
    get$endToken() {
      return this._ast$_uri.get$endToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitConfiguration$1(this);
    },
    $isConfiguration: 1
  };
  U.ConstructorDeclarationImpl.prototype = {
    get$endToken() {
      return this._body.get$endToken();
    },
    get$firstTokenAfterCommentAndMetadata() {
      var _this = this,
        t1 = L.Token_lexicallyFirst(_this.externalKeyword, _this.constKeyword, _this.factoryKeyword, null);
      return t1 == null ? _this._returnType.token : t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitConstructorDeclaration$1(this);
    },
    $isConstructorDeclaration: 1
  };
  U.ConstructorFieldInitializerImpl.prototype = {
    get$beginToken() {
      var t1 = this.thisKeyword;
      if (t1 != null)
        return t1;
      return this._fieldName.token;
    },
    get$endToken() {
      return this._expression.get$endToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitConstructorFieldInitializer$1(this);
    },
    $isConstructorFieldInitializer: 1
  };
  U.ConstructorInitializerImpl.prototype = {$isConstructorInitializer: 1};
  U.ConstructorNameImpl.prototype = {
    get$beginToken() {
      return this._type._ast$_name.get$beginToken();
    },
    get$endToken() {
      var t1 = this._ast$_name;
      if (t1 != null)
        return t1.token;
      return this._type.get$endToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitConstructorName$1(this);
    },
    $isConstructorName: 1
  };
  U.ContinueStatementImpl.prototype = {
    get$beginToken() {
      return this.continueKeyword;
    },
    get$endToken() {
      return this.semicolon;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitContinueStatement$1(this);
    },
    $isContinueStatement: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.DeclarationImpl.prototype = {};
  U.DeclaredIdentifierImpl.prototype = {
    get$endToken() {
      return this._identifier.token;
    },
    get$firstTokenAfterCommentAndMetadata() {
      var t1 = this.keyword;
      if (t1 == null) {
        t1 = this._type;
        t1 = t1 == null ? null : t1.get$beginToken();
      }
      return t1 == null ? this._identifier.token : t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitDeclaredIdentifier$1(this);
    },
    $isDeclaredIdentifier: 1
  };
  U.DeclaredSimpleIdentifier.prototype = {};
  U.DefaultFormalParameterImpl.prototype = {
    get$beginToken() {
      return this._parameter.get$beginToken();
    },
    get$endToken() {
      var t1 = this._defaultValue;
      if (t1 != null)
        return t1.get$endToken();
      return this._parameter.get$endToken();
    },
    get$identifier() {
      return this._parameter.get$identifier();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitDefaultFormalParameter$1(this);
    },
    $isDefaultFormalParameter: 1,
    get$kind(receiver) {
      return this.kind;
    }
  };
  U.DirectiveImpl.prototype = {$isDirective: 1};
  U.DoStatementImpl.prototype = {
    get$beginToken() {
      return this.doKeyword;
    },
    get$endToken() {
      return this.semicolon;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitDoStatement$1(this);
    },
    $isDoStatement: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.DottedNameImpl.prototype = {
    get$beginToken() {
      var t1 = this._components.get$beginToken();
      t1.toString;
      return t1;
    },
    get$endToken() {
      var t1 = this._components.get$endToken();
      t1.toString;
      return t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitDottedName$1(this);
    },
    $isDottedName: 1
  };
  U.DoubleLiteralImpl.prototype = {
    get$beginToken() {
      return this.literal;
    },
    get$endToken() {
      return this.literal;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitDoubleLiteral$1(this);
    },
    $isDoubleLiteral: 1
  };
  U.EmptyFunctionBodyImpl.prototype = {
    get$beginToken() {
      return this.semicolon;
    },
    get$endToken() {
      return this.semicolon;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitEmptyFunctionBody$1(this);
    },
    $isEmptyFunctionBody: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.EmptyStatementImpl.prototype = {
    get$beginToken() {
      return this.semicolon;
    },
    get$endToken() {
      return this.semicolon;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitEmptyStatement$1(this);
    },
    $isEmptyStatement: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.EnumConstantDeclarationImpl.prototype = {
    get$endToken() {
      return this._ast$_name.token;
    },
    get$firstTokenAfterCommentAndMetadata() {
      return this._ast$_name.token;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitEnumConstantDeclaration$1(this);
    },
    $isEnumConstantDeclaration: 1
  };
  U.EnumDeclarationImpl.prototype = {
    get$endToken() {
      return this.rightBracket;
    },
    get$firstTokenAfterCommentAndMetadata() {
      return this.enumKeyword;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitEnumDeclaration$1(this);
    },
    $isEnumDeclaration: 1
  };
  U.ExportDirectiveImpl.prototype = {
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitExportDirective$1(this);
    },
    $isExportDirective: 1
  };
  U.ExpressionFunctionBodyImpl.prototype = {
    get$beginToken() {
      var t1 = this.keyword;
      if (t1 != null)
        return t1;
      return this.functionDefinition;
    },
    get$endToken() {
      var t1 = this.semicolon;
      if (t1 != null)
        return t1;
      return this._expression.get$endToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitExpressionFunctionBody$1(this);
    },
    $isExpressionFunctionBody: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.ExpressionImpl.prototype = {
    get$isAssignable() {
      return false;
    },
    $isCollectionElement: 1,
    $isExpression: 1,
    $isCollectionElementImpl: 1
  };
  U.ExpressionStatementImpl.prototype = {
    get$beginToken() {
      return this._expression.get$beginToken();
    },
    get$endToken() {
      var t1 = this.semicolon;
      if (t1 != null)
        return t1;
      return this._expression.get$endToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitExpressionStatement$1(this);
    },
    $isExpressionStatement: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.ExtendsClauseImpl.prototype = {
    get$beginToken() {
      return this.extendsKeyword;
    },
    get$endToken() {
      return this._superclass.get$endToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitExtendsClause$1(this);
    },
    $isExtendsClause: 1
  };
  U.ExtensionDeclarationImpl.prototype = {
    get$endToken() {
      return this.rightBracket;
    },
    get$firstTokenAfterCommentAndMetadata() {
      return this.extensionKeyword;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitExtensionDeclaration$1(this);
    },
    set$_hideClause(_hideClause) {
      this._hideClause = type$.nullable_HideClauseImpl._as(_hideClause);
    },
    set$_showClause(_showClause) {
      this._showClause = type$.nullable_ShowClauseImpl._as(_showClause);
    },
    set$_extendedType(_extendedType) {
      this._extendedType = type$.TypeAnnotationImpl._as(_extendedType);
    },
    $isExtensionDeclaration: 1
  };
  U.FieldDeclarationImpl.prototype = {
    get$endToken() {
      return this.semicolon;
    },
    get$firstTokenAfterCommentAndMetadata() {
      var _this = this,
        t1 = L.Token_lexicallyFirst(_this.abstractKeyword, _this.externalKeyword, _this.covariantKeyword, _this.staticKeyword);
      return t1 == null ? _this._fieldList.get$beginToken() : t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitFieldDeclaration$1(this);
    },
    $isFieldDeclaration: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.FieldFormalParameterImpl.prototype = {
    get$beginToken() {
      var t1, _this = this,
        metadata = _this._metadata;
      if (metadata.get$length(metadata) !== 0) {
        t1 = metadata.get$beginToken();
        t1.toString;
        return t1;
      } else {
        t1 = _this.requiredKeyword;
        if (t1 != null)
          return t1;
        else {
          t1 = _this.covariantKeyword;
          if (t1 != null)
            return t1;
          else {
            t1 = _this.keyword;
            if (t1 != null)
              return t1;
            else {
              t1 = _this._type;
              if (t1 != null)
                return t1.get$beginToken();
            }
          }
        }
      }
      return _this.thisKeyword;
    },
    get$endToken() {
      var t1 = this.question;
      if (t1 == null) {
        t1 = this._parameters;
        t1 = t1 == null ? null : t1.rightParenthesis;
      }
      return t1 == null ? U.NormalFormalParameterImpl.prototype.get$identifier.call(this).token : t1;
    },
    get$identifier() {
      var t1 = U.NormalFormalParameterImpl.prototype.get$identifier.call(this);
      t1.toString;
      return t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitFieldFormalParameter$1(this);
    },
    $isFieldFormalParameter: 1
  };
  U.ForEachPartsImpl.prototype = {
    get$beginToken() {
      return this.inKeyword;
    },
    get$endToken() {
      return this._ast$_iterable.get$endToken();
    },
    $isForEachParts: 1
  };
  U.ForEachPartsWithDeclarationImpl.prototype = {
    get$beginToken() {
      return this._loopVariable.get$beginToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitForEachPartsWithDeclaration$1(this);
    },
    $isForEachPartsWithDeclaration: 1
  };
  U.ForEachPartsWithIdentifierImpl.prototype = {
    get$beginToken() {
      return this._identifier.token;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitForEachPartsWithIdentifier$1(this);
    },
    $isForEachPartsWithIdentifier: 1
  };
  U.ForElementImpl.prototype = {
    get$beginToken() {
      var t1 = this.awaitKeyword;
      return t1 == null ? this.forKeyword : t1;
    },
    get$endToken() {
      return this._body.get$endToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitForElement$1(this);
    },
    $isForElement: 1
  };
  U.ForLoopPartsImpl.prototype = {$isForLoopParts: 1};
  U.FormalParameterImpl.prototype = {$isFormalParameter: 1};
  U.FormalParameterListImpl.prototype = {
    get$beginToken() {
      return this.leftParenthesis;
    },
    get$endToken() {
      return this.rightParenthesis;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitFormalParameterList$1(this);
    },
    $isFormalParameterList: 1
  };
  U.ForPartsImpl.prototype = {
    ForPartsImpl$4(leftSeparator, _condition, rightSeparator, updaters) {
      var _this = this;
      _this._becomeParentOf$1$1(_this._condition, type$.nullable_ExpressionImpl);
      _this._updaters._initialize$2(_this, updaters);
    },
    get$beginToken() {
      return this.leftSeparator;
    },
    get$endToken() {
      var t1 = this._updaters.get$endToken();
      return t1 == null ? this.rightSeparator : t1;
    },
    $isForParts: 1
  };
  U.ForPartsWithDeclarationsImpl.prototype = {
    get$beginToken() {
      return this._variableList.get$beginToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitForPartsWithDeclarations$1(this);
    },
    $isForPartsWithDeclarations: 1
  };
  U.ForPartsWithExpressionImpl.prototype = {
    get$beginToken() {
      var t1 = this._initialization;
      t1 = t1 == null ? null : t1.get$beginToken();
      return t1 == null ? U.ForPartsImpl.prototype.get$beginToken.call(this) : t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitForPartsWithExpression$1(this);
    },
    $isForPartsWithExpression: 1
  };
  U.ForStatementImpl.prototype = {
    get$beginToken() {
      var t1 = this.awaitKeyword;
      return t1 == null ? this.forKeyword : t1;
    },
    get$endToken() {
      return this._body.get$endToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitForStatement$1(this);
    },
    $isForStatement: 1
  };
  U.FunctionBodyImpl.prototype = {$isFunctionBody: 1};
  U.FunctionDeclarationImpl.prototype = {
    get$endToken() {
      return this._functionExpression._body.get$endToken();
    },
    get$firstTokenAfterCommentAndMetadata() {
      var _this = this,
        t1 = _this.externalKeyword;
      if (t1 == null) {
        t1 = _this._returnType;
        t1 = t1 == null ? null : t1.get$beginToken();
      }
      if (t1 == null)
        t1 = _this.propertyKeyword;
      return t1 == null ? _this._ast$_name.token : t1;
    },
    get$returnType() {
      return this._returnType;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitFunctionDeclaration$1(this);
    },
    $isFunctionDeclaration: 1,
    get$externalKeyword() {
      return this.externalKeyword;
    },
    get$propertyKeyword() {
      return this.propertyKeyword;
    }
  };
  U.FunctionDeclarationStatementImpl.prototype = {
    get$beginToken() {
      return this._functionDeclaration.get$beginToken();
    },
    get$endToken() {
      return this._functionDeclaration._functionExpression._body.get$endToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitFunctionDeclarationStatement$1(this);
    },
    $isFunctionDeclarationStatement: 1
  };
  U.FunctionExpressionImpl.prototype = {
    get$beginToken() {
      var t1 = this._typeParameters;
      if (t1 != null)
        return t1.leftBracket;
      else {
        t1 = this._parameters;
        if (t1 != null)
          return t1.leftParenthesis;
      }
      return this._body.get$beginToken();
    },
    get$body(_) {
      return this._body;
    },
    get$endToken() {
      return this._body.get$endToken();
    },
    get$parameters() {
      return this._parameters;
    },
    get$precedence() {
      return C.Precedence_17;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitFunctionExpression$1(this);
    },
    $isFunctionExpression: 1
  };
  U.FunctionExpressionInvocationImpl.prototype = {
    get$beginToken() {
      return this._function.get$beginToken();
    },
    get$endToken() {
      return this._argumentList.rightParenthesis;
    },
    get$precedence() {
      return C.Precedence_16;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitFunctionExpressionInvocation$1(this);
    },
    $isFunctionExpressionInvocation: 1
  };
  U.FunctionReferenceImpl.prototype = {
    get$beginToken() {
      return this._function.get$beginToken();
    },
    get$endToken() {
      var t1 = this._typeArguments;
      t1 = t1 == null ? null : t1.rightBracket;
      return t1 == null ? this._function.get$endToken() : t1;
    },
    get$precedence() {
      return this._typeArguments == null ? this._function.get$precedence() : C.Precedence_16;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitFunctionReference$1(this);
    },
    $isFunctionReference: 1
  };
  U.FunctionTypeAliasImpl.prototype = {
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitFunctionTypeAlias$1(this);
    },
    $isFunctionTypeAlias: 1
  };
  U.FunctionTypedFormalParameterImpl.prototype = {
    get$beginToken() {
      var t1, _this = this,
        metadata = _this._metadata;
      if (metadata.get$length(metadata) !== 0) {
        t1 = metadata.get$beginToken();
        t1.toString;
        return t1;
      } else {
        t1 = _this.requiredKeyword;
        if (t1 != null)
          return t1;
        else {
          t1 = _this.covariantKeyword;
          if (t1 != null)
            return t1;
          else {
            t1 = _this._returnType;
            if (t1 != null)
              return t1.get$beginToken();
          }
        }
      }
      return U.NormalFormalParameterImpl.prototype.get$identifier.call(_this).token;
    },
    get$endToken() {
      var t1 = this.question;
      return t1 == null ? this._parameters.rightParenthesis : t1;
    },
    get$identifier() {
      var t1 = U.NormalFormalParameterImpl.prototype.get$identifier.call(this);
      t1.toString;
      return t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitFunctionTypedFormalParameter$1(this);
    },
    $isFunctionTypedFormalParameter: 1
  };
  U.GenericFunctionTypeImpl.prototype = {
    get$beginToken() {
      var t1 = this._returnType;
      t1 = t1 == null ? null : t1.get$beginToken();
      return t1 == null ? this.functionKeyword : t1;
    },
    get$endToken() {
      var t1 = this.question;
      return t1 == null ? this._parameters.rightParenthesis : t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitGenericFunctionType$1(this);
    },
    $isGenericFunctionType: 1
  };
  U.GenericTypeAliasImpl.prototype = {
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitGenericTypeAlias$1(this);
    },
    $isGenericTypeAlias: 1
  };
  U.HideClauseImpl.prototype = {
    get$beginToken() {
      return this.hideKeyword;
    },
    get$endToken() {
      var t1 = this._elements.get$endToken();
      t1.toString;
      return t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitHideClause$1(this);
    },
    $isHideClause: 1
  };
  U.HideCombinatorImpl.prototype = {
    get$endToken() {
      var t1 = this._hiddenNames.get$endToken();
      t1.toString;
      return t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitHideCombinator$1(this);
    },
    $isHideCombinator: 1
  };
  U.IdentifierImpl.prototype = {
    get$isAssignable() {
      return true;
    },
    $isIdentifier: 1
  };
  U.IfElementImpl.prototype = {
    get$beginToken() {
      return this.ifKeyword;
    },
    get$endToken() {
      var t1 = this._elseElement;
      t1 = t1 == null ? null : t1.get$endToken();
      return t1 == null ? this._thenElement.get$endToken() : t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitIfElement$1(this);
    },
    $isIfElement: 1
  };
  U.IfStatementImpl.prototype = {
    get$beginToken() {
      return this.ifKeyword;
    },
    get$endToken() {
      var t1 = this._elseStatement;
      if (t1 != null)
        return t1.get$endToken();
      return this._thenStatement.get$endToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitIfStatement$1(this);
    },
    $isIfStatement: 1
  };
  U.ImplementsClauseImpl.prototype = {
    get$beginToken() {
      return this.implementsKeyword;
    },
    get$endToken() {
      var t1 = this._interfaces.get$endToken();
      t1.toString;
      return t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitImplementsClause$1(this);
    },
    $isImplementsClause: 1
  };
  U.ImportDirectiveImpl.prototype = {
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitImportDirective$1(this);
    },
    set$_prefix(_prefix) {
      this._prefix = type$.nullable_SimpleIdentifierImpl._as(_prefix);
    },
    $isImportDirective: 1
  };
  U.IndexExpressionImpl.prototype = {
    get$beginToken() {
      var t1 = this._ast$_target;
      if (t1 != null)
        return t1.get$beginToken();
      t1 = this.period;
      t1.toString;
      return t1;
    },
    get$endToken() {
      return this.rightBracket;
    },
    get$isAssignable() {
      return true;
    },
    get$precedence() {
      return C.Precedence_16;
    },
    get$realTarget() {
      if (this.period != null)
        return this.get$_ancestorCascade()._ast$_target;
      var t1 = this._ast$_target;
      t1.toString;
      return t1;
    },
    get$_ancestorCascade() {
      var ancestor,
        t1 = this._ast$_parent;
      t1.toString;
      ancestor = t1;
      while (true) {
        if (ancestor instanceof U.CascadeExpressionImpl)
          return ancestor;
        t1 = ancestor.get$parent(ancestor);
        t1.toString;
        ancestor = t1;
      }
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitIndexExpression$1(this);
    },
    $isIndexExpression: 1
  };
  U.InstanceCreationExpressionImpl.prototype = {
    get$beginToken() {
      var t1 = this.keyword;
      return t1 == null ? this._constructorName._type._ast$_name.get$beginToken() : t1;
    },
    get$endToken() {
      return this._argumentList.rightParenthesis;
    },
    get$precedence() {
      return C.Precedence_17;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitInstanceCreationExpression$1(this);
    },
    $isInstanceCreationExpression: 1
  };
  U.IntegerLiteralImpl.prototype = {
    get$beginToken() {
      return this.literal;
    },
    get$endToken() {
      return this.literal;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitIntegerLiteral$1(this);
    },
    $isIntegerLiteral: 1
  };
  U.InterpolationElementImpl.prototype = {$isInterpolationElement: 1};
  U.InterpolationExpressionImpl.prototype = {
    get$beginToken() {
      return this.leftBracket;
    },
    get$endToken() {
      var t1 = this.rightBracket;
      return t1 == null ? this._expression.get$endToken() : t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitInterpolationExpression$1(this);
    },
    $isInterpolationExpression: 1
  };
  U.InterpolationStringImpl.prototype = {
    get$beginToken() {
      return this.contents;
    },
    get$endToken() {
      return this.contents;
    },
    get$parent(_) {
      return type$.StringInterpolation._as(U.AstNodeImpl.prototype.get$parent.call(this, this));
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitInterpolationString$1(this);
    },
    $isInterpolationString: 1
  };
  U.InvocationExpressionImpl.prototype = {
    InvocationExpressionImpl$2(_typeArguments, _argumentList) {
      var _this = this;
      _this._becomeParentOf$1$1(_this._typeArguments, type$.nullable_TypeArgumentListImpl);
      _this._becomeParentOf$1$1(_this._argumentList, type$.ArgumentListImpl);
    },
    set$_typeArguments(_typeArguments) {
      this._typeArguments = type$.nullable_TypeArgumentListImpl._as(_typeArguments);
    },
    $isInvocationExpression: 1
  };
  U.IsExpressionImpl.prototype = {
    get$beginToken() {
      return this._expression.get$beginToken();
    },
    get$endToken() {
      return this._type.get$endToken();
    },
    get$precedence() {
      return C.Precedence_8;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitIsExpression$1(this);
    },
    $isIsExpression: 1
  };
  U.LabeledStatementImpl.prototype = {
    get$beginToken() {
      var t1 = this._labels;
      if (t1.get$length(t1) !== 0) {
        t1 = t1.get$beginToken();
        t1.toString;
        return t1;
      }
      return this._statement.get$beginToken();
    },
    get$endToken() {
      return this._statement.get$endToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitLabeledStatement$1(this);
    },
    $isLabeledStatement: 1
  };
  U.LabelImpl.prototype = {
    get$beginToken() {
      return this._label.token;
    },
    get$endToken() {
      return this.colon;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitLabel$1(this);
    },
    $isLabel: 1
  };
  U.LibraryDirectiveImpl.prototype = {
    get$endToken() {
      return this.semicolon;
    },
    get$firstTokenAfterCommentAndMetadata() {
      return this.libraryKeyword;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitLibraryDirective$1(this);
    },
    $isLibraryDirective: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.LibraryIdentifierImpl.prototype = {
    get$beginToken() {
      var t1 = this._components.get$beginToken();
      t1.toString;
      return t1;
    },
    get$endToken() {
      var t1 = this._components.get$endToken();
      t1.toString;
      return t1;
    },
    get$name(_) {
      var needsPeriod, i, t2, identifier,
        t1 = this._components,
        $length = t1._elements.length;
      for (needsPeriod = false, i = 0, t2 = ""; i < $length; ++i) {
        identifier = t1.$index(0, i);
        if (needsPeriod)
          t2 += ".";
        else
          needsPeriod = true;
        t2 += H.S(identifier.token.get$lexeme());
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    get$precedence() {
      return C.Precedence_16;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitLibraryIdentifier$1(this);
    },
    $isLibraryIdentifier: 1
  };
  U.ListLiteralImpl.prototype = {
    get$beginToken() {
      var typeArguments,
        t1 = this.constKeyword;
      if (t1 != null)
        return t1;
      typeArguments = this._typeArguments;
      if (typeArguments != null)
        return typeArguments.leftBracket;
      return this.leftBracket;
    },
    get$endToken() {
      return this.rightBracket;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitListLiteral$1(this);
    },
    $isListLiteral: 1
  };
  U.LiteralImpl.prototype = {
    get$precedence() {
      return C.Precedence_17;
    }
  };
  U.MapLiteralEntryImpl.prototype = {
    get$beginToken() {
      return this._key.get$beginToken();
    },
    get$endToken() {
      return this._ast$_value.get$endToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitMapLiteralEntry$1(this);
    },
    $isMapLiteralEntry: 1
  };
  U.MethodDeclarationImpl.prototype = {
    get$body(_) {
      return this._body;
    },
    get$endToken() {
      return this._body.get$endToken();
    },
    get$firstTokenAfterCommentAndMetadata() {
      var _this = this, _null = null,
        t1 = L.Token_lexicallyFirst(_this.externalKeyword, _this.modifierKeyword, _null, _null);
      if (t1 == null) {
        t1 = _this._returnType;
        t1 = t1 == null ? _null : t1.get$beginToken();
      }
      if (t1 == null)
        t1 = L.Token_lexicallyFirst(_this.propertyKeyword, _this.operatorKeyword, _null, _null);
      return t1 == null ? _this._ast$_name.token : t1;
    },
    get$name(_) {
      return this._ast$_name;
    },
    get$parameters() {
      return this._parameters;
    },
    get$returnType() {
      return this._returnType;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitMethodDeclaration$1(this);
    },
    $isMethodDeclaration: 1,
    get$externalKeyword() {
      return this.externalKeyword;
    },
    get$propertyKeyword() {
      return this.propertyKeyword;
    }
  };
  U.MethodInvocationImpl.prototype = {
    get$beginToken() {
      var t1 = this._ast$_target;
      if (t1 != null)
        return t1.get$beginToken();
      else {
        t1 = this.operator;
        if (t1 != null)
          return t1;
      }
      return this._methodName.token;
    },
    get$endToken() {
      return this._argumentList.rightParenthesis;
    },
    get$precedence() {
      return C.Precedence_16;
    },
    get$realTarget() {
      var t1 = this.operator;
      if (t1 != null) {
        t1 = t1.type;
        t1 = t1 === C.TokenType_cv8 || t1 === C.TokenType_O1S;
      } else
        t1 = false;
      if (t1)
        return this.get$_ancestorCascade()._ast$_target;
      return this._ast$_target;
    },
    get$_ancestorCascade() {
      var ancestor,
        t1 = this._ast$_parent;
      t1.toString;
      ancestor = t1;
      while (true) {
        if (ancestor instanceof U.CascadeExpressionImpl)
          return ancestor;
        t1 = ancestor.get$parent(ancestor);
        t1.toString;
        ancestor = t1;
      }
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitMethodInvocation$1(this);
    },
    set$_ast$_target(_target) {
      this._ast$_target = type$.nullable_ExpressionImpl._as(_target);
    },
    set$_methodName(_methodName) {
      this._methodName = type$.SimpleIdentifierImpl._as(_methodName);
    },
    $isMethodInvocation: 1
  };
  U.MixinDeclarationImpl.prototype = {
    get$firstTokenAfterCommentAndMetadata() {
      return this.mixinKeyword;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitMixinDeclaration$1(this);
    },
    set$_onClause(_onClause) {
      this._onClause = type$.nullable_OnClauseImpl._as(_onClause);
    },
    $isMixinDeclaration: 1
  };
  U.NamedCompilationUnitMemberImpl.prototype = {
    get$name(_) {
      return this._ast$_name;
    }
  };
  U.NamedExpressionImpl.prototype = {
    get$beginToken() {
      return this._ast$_name._label.token;
    },
    get$endToken() {
      return this._expression.get$endToken();
    },
    get$precedence() {
      return C.Precedence_0;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitNamedExpression$1(this);
    },
    $isNamedExpression: 1
  };
  U.NamespaceDirectiveImpl.prototype = {
    get$endToken() {
      return this.semicolon;
    },
    get$firstTokenAfterCommentAndMetadata() {
      return this.keyword;
    },
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.NativeClauseImpl.prototype = {
    get$beginToken() {
      return this.nativeKeyword;
    },
    get$endToken() {
      var t1 = this._ast$_name;
      t1 = t1 == null ? null : t1.get$endToken();
      return t1 == null ? this.nativeKeyword : t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitNativeClause$1(this);
    },
    $isNativeClause: 1
  };
  U.NativeFunctionBodyImpl.prototype = {
    get$beginToken() {
      return this.nativeKeyword;
    },
    get$endToken() {
      return this.semicolon;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitNativeFunctionBody$1(this);
    },
    $isNativeFunctionBody: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.NodeListImpl.prototype = {
    get$_owner() {
      var t1 = this.__NodeListImpl__owner;
      return t1 === $ ? H.throwExpression(H.LateError$fieldNI("_owner")) : t1;
    },
    get$beginToken() {
      var t1 = this._elements,
        t2 = t1.length;
      if (t2 === 0)
        return null;
      if (0 >= t2)
        return H.ioore(t1, 0);
      return t1[0].get$beginToken();
    },
    get$endToken() {
      var t2,
        t1 = this._elements,
        $length = t1.length;
      if ($length === 0)
        return null;
      t2 = $length - 1;
      if (t2 < 0)
        return H.ioore(t1, t2);
      return t1[t2].get$endToken();
    },
    get$length(_) {
      return this._elements.length;
    },
    set$length(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize NodeList."));
    },
    $index(_, index) {
      var t1;
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0 || index >= this._elements.length)
        throw H.wrapException(P.RangeError$("Index: " + index + ", Size: " + this._elements.length));
      t1 = this._elements;
      if (index < 0 || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet(_, index, node) {
      var t1, _this = this;
      H._asIntS(index);
      _this.$ti._precomputed1._as(node);
      if (typeof index !== "number")
        return index.$lt();
      if (index < 0 || index >= _this._elements.length)
        throw H.wrapException(P.RangeError$("Index: " + index + ", Size: " + _this._elements.length));
      C.JSArray_methods.$indexSet(_this._elements, index, node);
      t1 = type$.AstNodeImpl;
      _this.get$_owner()._becomeParentOf$1$1(t1._as(node), t1);
    },
    add$1(_, node) {
      this.$ti._precomputed1._as(node);
      this.insert$2(0, this._elements.length, node);
    },
    addAll$1(_, nodes) {
      var t1, t2, t3, node, t4;
      for (t1 = J.get$iterator$ax(this.$ti._eval$1("Iterable<1>")._as(nodes)), t2 = type$.AstNodeImpl, t3 = type$.nullable_AstNodeImpl; t1.moveNext$0();) {
        node = t1.get$current();
        C.JSArray_methods.add$1(this._elements, node);
        t4 = this.__NodeListImpl__owner;
        if (t4 === $)
          t4 = H.throwExpression(H.LateError$fieldNI("_owner"));
        t2._as(node);
        t4.toString;
        H.checkTypeBound(t2, t3, "T", "_becomeParentOf");
        t2._as(node);
        if (node != null)
          node._ast$_parent = t4;
      }
    },
    insert$2(_, index, node) {
      var t1;
      this.$ti._precomputed1._as(node);
      C.JSArray_methods.insert$2(this._elements, index, node);
      t1 = type$.AstNodeImpl;
      this.get$_owner()._becomeParentOf$1$1(t1._as(node), t1);
    },
    _initialize$2(owner, elements) {
      var t1, $length, t2, t3, i, node, _this = this;
      _this.$ti._eval$1("List<1>?")._as(elements);
      if (_this.__NodeListImpl__owner === $)
        _this.__NodeListImpl__owner = owner;
      else
        H.throwExpression(H.LateError$fieldAI("_owner"));
      if (elements != null) {
        t1 = J.getInterceptor$asx(elements);
        $length = t1.get$length(elements);
        for (t2 = type$.AstNodeImpl, t3 = type$.nullable_AstNodeImpl, i = 0; i < $length; ++i) {
          node = t1.$index(elements, i);
          C.JSArray_methods.add$1(_this._elements, node);
          t2._as(node);
          H.checkTypeBound(t2, t3, "T", "_becomeParentOf");
          t2._as(node);
          if (node != null)
            node._ast$_parent = owner;
        }
      }
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1,
    $isNodeList: 1
  };
  U.NormalFormalParameterImpl.prototype = {
    NormalFormalParameterImpl$5(_comment, metadata, covariantKeyword, requiredKeyword, _identifier) {
      var _this = this;
      _this._becomeParentOf$1$1(_this._comment, type$.nullable_CommentImpl);
      _this._metadata._initialize$2(_this, metadata);
      _this._becomeParentOf$1$1(_this._identifier, type$.nullable_SimpleIdentifierImpl);
    },
    get$identifier() {
      return this._identifier;
    },
    get$kind(_) {
      var $parent = this._ast$_parent;
      if ($parent instanceof U.DefaultFormalParameterImpl)
        return $parent.kind;
      return C.ParameterKind_REQUIRED_0_false_false;
    },
    $isNormalFormalParameter: 1
  };
  U.NullLiteralImpl.prototype = {
    get$beginToken() {
      return this.literal;
    },
    get$endToken() {
      return this.literal;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitNullLiteral$1(this);
    },
    $isNullLiteral: 1
  };
  U.NullShortableExpressionImpl.prototype = {};
  U.OnClauseImpl.prototype = {
    get$beginToken() {
      return this.onKeyword;
    },
    get$endToken() {
      var t1 = this._superclassConstraints.get$endToken();
      t1.toString;
      return t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitOnClause$1(this);
    },
    $isOnClause: 1
  };
  U.ParenthesizedExpressionImpl.prototype = {
    get$beginToken() {
      return this.leftParenthesis;
    },
    get$endToken() {
      return this.rightParenthesis;
    },
    get$precedence() {
      return C.Precedence_17;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitParenthesizedExpression$1(this);
    },
    $isParenthesizedExpression: 1
  };
  U.PartDirectiveImpl.prototype = {
    get$endToken() {
      return this.semicolon;
    },
    get$firstTokenAfterCommentAndMetadata() {
      return this.partKeyword;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitPartDirective$1(this);
    },
    $isPartDirective: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.PartOfDirectiveImpl.prototype = {
    get$endToken() {
      return this.semicolon;
    },
    get$firstTokenAfterCommentAndMetadata() {
      return this.partKeyword;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitPartOfDirective$1(this);
    },
    $isPartOfDirective: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.PostfixExpressionImpl.prototype = {
    get$beginToken() {
      return this._operand.get$beginToken();
    },
    get$endToken() {
      return this.operator;
    },
    get$precedence() {
      return C.Precedence_16;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitPostfixExpression$1(this);
    },
    $isPostfixExpression: 1
  };
  U.PrefixedIdentifierImpl.prototype = {
    get$beginToken() {
      return this._prefix.token;
    },
    get$endToken() {
      return this._identifier.token;
    },
    get$precedence() {
      return C.Precedence_16;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitPrefixedIdentifier$1(this);
    },
    $isPrefixedIdentifier: 1
  };
  U.PrefixExpressionImpl.prototype = {
    get$beginToken() {
      return this.operator;
    },
    get$endToken() {
      return this._operand.get$endToken();
    },
    get$precedence() {
      return C.Precedence_15;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitPrefixExpression$1(this);
    },
    $isPrefixExpression: 1
  };
  U.PropertyAccessImpl.prototype = {
    get$beginToken() {
      var t1 = this._ast$_target;
      if (t1 != null)
        return t1.get$beginToken();
      return this.operator;
    },
    get$endToken() {
      return this._propertyName.token;
    },
    get$isAssignable() {
      return true;
    },
    get$isCascaded() {
      var t1 = this.operator.type;
      return t1 === C.TokenType_cv8 || t1 === C.TokenType_O1S;
    },
    get$precedence() {
      return C.Precedence_16;
    },
    get$realTarget() {
      if (this.get$isCascaded())
        return this.get$_ancestorCascade()._ast$_target;
      var t1 = this._ast$_target;
      t1.toString;
      return t1;
    },
    get$_ancestorCascade() {
      var ancestor,
        t1 = this._ast$_parent;
      t1.toString;
      ancestor = t1;
      while (true) {
        if (ancestor instanceof U.CascadeExpressionImpl)
          return ancestor;
        t1 = ancestor.get$parent(ancestor);
        t1.toString;
        ancestor = t1;
      }
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitPropertyAccess$1(this);
    },
    $isPropertyAccess: 1
  };
  U.RedirectingConstructorInvocationImpl.prototype = {
    get$beginToken() {
      return this.thisKeyword;
    },
    get$endToken() {
      return this._argumentList.rightParenthesis;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitRedirectingConstructorInvocation$1(this);
    },
    $isRedirectingConstructorInvocation: 1
  };
  U.RethrowExpressionImpl.prototype = {
    get$beginToken() {
      return this.rethrowKeyword;
    },
    get$endToken() {
      return this.rethrowKeyword;
    },
    get$precedence() {
      return C.Precedence_1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitRethrowExpression$1(this);
    },
    $isRethrowExpression: 1
  };
  U.ReturnStatementImpl.prototype = {
    get$beginToken() {
      return this.returnKeyword;
    },
    get$endToken() {
      return this.semicolon;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitReturnStatement$1(this);
    },
    $isReturnStatement: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.ScriptTagImpl.prototype = {
    get$beginToken() {
      return this.scriptTag;
    },
    get$endToken() {
      return this.scriptTag;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitScriptTag$1(this);
    },
    $isScriptTag: 1
  };
  U.SetOrMapLiteralImpl.prototype = {
    get$beginToken() {
      var typeArguments,
        t1 = this.constKeyword;
      if (t1 != null)
        return t1;
      typeArguments = this._typeArguments;
      if (typeArguments != null)
        return typeArguments.leftBracket;
      return this.leftBracket;
    },
    get$endToken() {
      return this.rightBracket;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitSetOrMapLiteral$1(this);
    },
    $isSetOrMapLiteral: 1
  };
  U.ShowClauseImpl.prototype = {
    get$beginToken() {
      return this.showKeyword;
    },
    get$endToken() {
      var t1 = this._elements.get$endToken();
      t1.toString;
      return t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitShowClause$1(this);
    },
    $isShowClause: 1
  };
  U.ShowCombinatorImpl.prototype = {
    get$endToken() {
      var t1 = this._shownNames.get$endToken();
      t1.toString;
      return t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitShowCombinator$1(this);
    },
    $isShowCombinator: 1
  };
  U.ShowHideElementImpl.prototype = {
    get$beginToken() {
      var t1 = this.modifier;
      return t1 == null ? this.name.token : t1;
    },
    get$endToken() {
      return this.name.token;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitShowHideElement$1(this);
    },
    $isShowHideClauseElement: 1,
    $isShowHideElement: 1
  };
  U.SimpleFormalParameterImpl.prototype = {
    get$beginToken() {
      var t1, _this = this,
        metadata = _this._metadata;
      if (metadata.get$length(metadata) !== 0) {
        t1 = metadata.get$beginToken();
        t1.toString;
        return t1;
      } else {
        t1 = _this.requiredKeyword;
        if (t1 != null)
          return t1;
        else {
          t1 = _this.covariantKeyword;
          if (t1 != null)
            return t1;
          else {
            t1 = _this.keyword;
            if (t1 != null)
              return t1;
            else {
              t1 = _this._type;
              if (t1 != null)
                return t1.get$beginToken();
            }
          }
        }
      }
      return _this._identifier.token;
    },
    get$endToken() {
      var t1 = this._identifier;
      t1 = t1 == null ? null : t1.token;
      return t1 == null ? this._type.get$endToken() : t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitSimpleFormalParameter$1(this);
    },
    $isSimpleFormalParameter: 1
  };
  U.SimpleIdentifierImpl.prototype = {
    get$beginToken() {
      return this.token;
    },
    get$endToken() {
      return this.token;
    },
    get$precedence() {
      return C.Precedence_17;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitSimpleIdentifier$1(this);
    },
    $isSimpleIdentifier: 1
  };
  U.SimpleStringLiteralImpl.prototype = {
    get$beginToken() {
      return this.literal;
    },
    get$endToken() {
      return this.literal;
    },
    get$isMultiline() {
      return U.StringLexemeHelper$(this.literal.get$lexeme(), true, true).isMultiline;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitSimpleStringLiteral$1(this);
    },
    $isSimpleStringLiteral: 1
  };
  U.SingleStringLiteralImpl.prototype = {$isSingleStringLiteral: 1};
  U.SpreadElementImpl.prototype = {
    get$beginToken() {
      return this.spreadOperator;
    },
    get$endToken() {
      return this._expression.get$endToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitSpreadElement$1(this);
    },
    $isCollectionElement: 1,
    $isSpreadElement: 1,
    $isCollectionElementImpl: 1
  };
  U.StatementImpl.prototype = {$isStatement: 1};
  U.StringInterpolationImpl.prototype = {
    get$beginToken() {
      var t1 = this._elements.get$beginToken();
      t1.toString;
      return t1;
    },
    get$endToken() {
      var t1 = this._elements.get$endToken();
      t1.toString;
      return t1;
    },
    get$isMultiline() {
      var t1 = this._elements;
      return U.StringLexemeHelper$(type$.InterpolationString._as(t1.get$first(t1)).contents.get$lexeme(), true, false).isMultiline;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitStringInterpolation$1(this);
    },
    $isStringInterpolation: 1
  };
  U.StringLexemeHelper.prototype = {
    _trimInitialWhitespace$1(start) {
      var t2, index, currentChar, t3,
        t1 = this.lexeme,
        $length = t1.length;
      for (t2 = J.getInterceptor$s(t1), index = start; index < $length;) {
        currentChar = t2._codeUnitAt$1(t1, index);
        if (currentChar === 13) {
          t2 = index + 1;
          if (t2 < $length && C.JSString_methods._codeUnitAt$1(t1, t2) === 10)
            return index + 2;
          return t2;
        } else if (currentChar === 10)
          return index + 1;
        else if (currentChar === 92) {
          t3 = index + 1;
          if (t3 >= $length)
            return start;
          currentChar = C.JSString_methods._codeUnitAt$1(t1, t3);
          if (currentChar !== 13 && currentChar !== 10 && currentChar !== 9 && currentChar !== 32)
            return start;
        } else if (currentChar !== 9 && currentChar !== 32)
          return start;
        ++index;
      }
      return start;
    }
  };
  U.StringLiteralImpl.prototype = {$isStringLiteral: 1};
  U.SuperConstructorInvocationImpl.prototype = {
    get$beginToken() {
      return this.superKeyword;
    },
    get$endToken() {
      return this._argumentList.rightParenthesis;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitSuperConstructorInvocation$1(this);
    },
    $isSuperConstructorInvocation: 1
  };
  U.SuperExpressionImpl.prototype = {
    get$beginToken() {
      return this.superKeyword;
    },
    get$endToken() {
      return this.superKeyword;
    },
    get$precedence() {
      return C.Precedence_17;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitSuperExpression$1(this);
    },
    $isSuperExpression: 1
  };
  U.SwitchCaseImpl.prototype = {
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitSwitchCase$1(this);
    },
    $isSwitchCase: 1
  };
  U.SwitchDefaultImpl.prototype = {
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitSwitchDefault$1(this);
    },
    $isSwitchDefault: 1
  };
  U.SwitchMemberImpl.prototype = {
    SwitchMemberImpl$4(labels, keyword, colon, statements) {
      var _this = this;
      _this._labels._initialize$2(_this, labels);
      _this._statements._initialize$2(_this, statements);
    },
    get$beginToken() {
      var t1 = this._labels;
      if (t1.get$length(t1) !== 0) {
        t1 = t1.get$beginToken();
        t1.toString;
        return t1;
      }
      return this.keyword;
    },
    get$endToken() {
      var t1 = this._statements;
      if (t1.get$length(t1) !== 0) {
        t1 = t1.get$endToken();
        t1.toString;
        return t1;
      }
      return this.colon;
    },
    $isSwitchMember: 1
  };
  U.SwitchStatementImpl.prototype = {
    get$beginToken() {
      return this.switchKeyword;
    },
    get$endToken() {
      return this.rightBracket;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitSwitchStatement$1(this);
    },
    $isSwitchStatement: 1
  };
  U.SymbolLiteralImpl.prototype = {
    get$beginToken() {
      return this.poundSign;
    },
    get$endToken() {
      var t1 = this.components,
        t2 = t1.length,
        t3 = t2 - 1;
      if (t3 < 0)
        return H.ioore(t1, t3);
      return t1[t3];
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitSymbolLiteral$1(this);
    },
    $isSymbolLiteral: 1
  };
  U.ThisExpressionImpl.prototype = {
    get$beginToken() {
      return this.thisKeyword;
    },
    get$endToken() {
      return this.thisKeyword;
    },
    get$precedence() {
      return C.Precedence_17;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitThisExpression$1(this);
    },
    $isThisExpression: 1
  };
  U.ThrowExpressionImpl.prototype = {
    get$beginToken() {
      return this.throwKeyword;
    },
    get$endToken() {
      return this._expression.get$endToken();
    },
    get$precedence() {
      return C.Precedence_1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitThrowExpression$1(this);
    },
    $isThrowExpression: 1
  };
  U.TopLevelVariableDeclarationImpl.prototype = {
    get$endToken() {
      return this.semicolon;
    },
    get$firstTokenAfterCommentAndMetadata() {
      var t1 = this.externalKeyword;
      return t1 == null ? this._variableList.get$beginToken() : t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitTopLevelVariableDeclaration$1(this);
    },
    $isTopLevelVariableDeclaration: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.TryStatementImpl.prototype = {
    get$beginToken() {
      return this.tryKeyword;
    },
    get$endToken() {
      var _this = this,
        t1 = _this._finallyBlock;
      if (t1 != null)
        return t1.rightBracket;
      else {
        t1 = _this.finallyKeyword;
        if (t1 != null)
          return t1;
        else {
          t1 = _this._catchClauses;
          if (t1.get$length(t1) !== 0) {
            t1 = t1.get$endToken();
            t1.toString;
            return t1;
          }
        }
      }
      return _this._body.rightBracket;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitTryStatement$1(this);
    },
    $isTryStatement: 1
  };
  U.TypeAliasImpl.prototype = {
    get$endToken() {
      return this.semicolon;
    },
    get$firstTokenAfterCommentAndMetadata() {
      return this.typedefKeyword;
    },
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.TypeAnnotationImpl.prototype = {$isTypeAnnotation: 1};
  U.TypeArgumentListImpl.prototype = {
    get$beginToken() {
      return this.leftBracket;
    },
    get$endToken() {
      return this.rightBracket;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitTypeArgumentList$1(this);
    },
    $isTypeArgumentList: 1
  };
  U.TypedLiteralImpl.prototype = {$isTypedLiteral: 1};
  U.TypeNameImpl.prototype = {
    get$beginToken() {
      return this._ast$_name.get$beginToken();
    },
    get$endToken() {
      var t1 = this.question;
      if (t1 == null) {
        t1 = this._typeArguments;
        t1 = t1 == null ? null : t1.rightBracket;
      }
      return t1 == null ? this._ast$_name.get$endToken() : t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitTypeName$1(this);
    },
    $isShowHideClauseElement: 1,
    $isTypeName: 1
  };
  U.TypeParameterImpl.prototype = {
    get$endToken() {
      var t1 = this._bound;
      if (t1 == null)
        return this._ast$_name.token;
      return t1.get$endToken();
    },
    get$firstTokenAfterCommentAndMetadata() {
      return this._ast$_name.token;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitTypeParameter$1(this);
    },
    set$_bound(_bound) {
      this._bound = type$.nullable_TypeAnnotationImpl._as(_bound);
    },
    $isTypeParameter: 1
  };
  U.TypeParameterListImpl.prototype = {
    get$beginToken() {
      return this.leftBracket;
    },
    get$endToken() {
      return this.rightBracket;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitTypeParameterList$1(this);
    },
    $isTypeParameterList: 1
  };
  U.UriBasedDirectiveImpl.prototype = {};
  U.VariableDeclarationImpl.prototype = {
    get$endToken() {
      var t1 = this._ast$_initializer;
      if (t1 != null)
        return t1.get$endToken();
      return this._ast$_name.token;
    },
    get$firstTokenAfterCommentAndMetadata() {
      return this._ast$_name.token;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitVariableDeclaration$1(this);
    },
    $isVariableDeclaration: 1
  };
  U.VariableDeclarationListImpl.prototype = {
    get$endToken() {
      var t1 = this._variables.get$endToken();
      t1.toString;
      return t1;
    },
    get$firstTokenAfterCommentAndMetadata() {
      var _this = this,
        t1 = L.Token_lexicallyFirst(_this.lateKeyword, _this.keyword, null, null);
      if (t1 == null) {
        t1 = _this._type;
        t1 = t1 == null ? null : t1.get$beginToken();
      }
      if (t1 == null) {
        t1 = _this._variables.get$beginToken();
        t1.toString;
      }
      return t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitVariableDeclarationList$1(this);
    },
    $isVariableDeclarationList: 1
  };
  U.VariableDeclarationStatementImpl.prototype = {
    get$beginToken() {
      return this._variableList.get$beginToken();
    },
    get$endToken() {
      return this.semicolon;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitVariableDeclarationStatement$1(this);
    },
    $isVariableDeclarationStatement: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U.WhileStatementImpl.prototype = {
    get$beginToken() {
      return this.whileKeyword;
    },
    get$endToken() {
      return this._body.get$endToken();
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitWhileStatement$1(this);
    },
    $isWhileStatement: 1
  };
  U.WithClauseImpl.prototype = {
    get$beginToken() {
      return this.withKeyword;
    },
    get$endToken() {
      var t1 = this._mixinTypes.get$endToken();
      t1.toString;
      return t1;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitWithClause$1(this);
    },
    $isWithClause: 1
  };
  U.YieldStatementImpl.prototype = {
    get$beginToken() {
      return this.yieldKeyword;
    },
    get$endToken() {
      return this.semicolon;
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("AstVisitor<0>")._as(visitor).visitYieldStatement$1(this);
    },
    $isYieldStatement: 1,
    get$semicolon() {
      return this.semicolon;
    }
  };
  U._AssignmentExpressionImpl_ExpressionImpl_NullShortableExpressionImpl.prototype = {};
  U._AssignmentExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl.prototype = {};
  U._CascadeExpressionImpl_ExpressionImpl_NullShortableExpressionImpl.prototype = {};
  U._ChildEntities_Object_IterableMixin.prototype = {};
  U._FunctionExpressionInvocationImpl_InvocationExpressionImpl_NullShortableExpressionImpl.prototype = {};
  U._IndexExpressionImpl_ExpressionImpl_NullShortableExpressionImpl.prototype = {};
  U._MethodInvocationImpl_InvocationExpressionImpl_NullShortableExpressionImpl.prototype = {};
  U._NodeListImpl_Object_ListMixin.prototype = {};
  U._PostfixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl.prototype = {};
  U._PostfixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl.prototype = {};
  U._PrefixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl.prototype = {};
  U._PrefixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl.prototype = {};
  U._PropertyAccessImpl_ExpressionImpl_NullShortableExpressionImpl.prototype = {};
  A.AstFactoryImpl.prototype = {
    constructorDeclaration$13(comment, metadata, externalKeyword, constKeyword, factoryKeyword, returnType, period, $name, parameters, separator, initializers, redirectedConstructor, body) {
      var t1, t2;
      type$.nullable_List_Annotation._as(metadata);
      type$.nullable_List_ConstructorInitializer._as(initializers);
      t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_ConstructorInitializer), type$.NodeListImpl_ConstructorInitializer);
      t2 = new U.ConstructorDeclarationImpl(externalKeyword, constKeyword, factoryKeyword, returnType, period, $name, parameters, separator, t1, redirectedConstructor, body, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t2.AnnotatedNodeImpl$2(comment, metadata);
      t2._becomeParentOf$1$1(returnType, type$.IdentifierImpl);
      t2._becomeParentOf$1$1($name, type$.nullable_SimpleIdentifierImpl);
      t2._becomeParentOf$1$1(parameters, type$.FormalParameterListImpl);
      t1._initialize$2(t2, initializers);
      t2._becomeParentOf$1$1(redirectedConstructor, type$.nullable_ConstructorNameImpl);
      t2._becomeParentOf$1$1(body, type$.FunctionBodyImpl);
      return t2;
    },
    fieldFormalParameter2$12$comment$covariantKeyword$identifier$keyword$metadata$parameters$period$question$requiredKeyword$thisKeyword$type$typeParameters(comment, covariantKeyword, identifier, keyword, metadata, parameters, period, question, requiredKeyword, thisKeyword, type, typeParameters) {
      var t1;
      type$.nullable_List_Annotation._as(metadata);
      t1 = new U.FieldFormalParameterImpl(keyword, type, thisKeyword, period, typeParameters, parameters, question, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation), covariantKeyword, requiredKeyword, identifier);
      t1.NormalFormalParameterImpl$5(comment, metadata, covariantKeyword, requiredKeyword, identifier);
      t1._becomeParentOf$1$1(type, type$.nullable_TypeAnnotationImpl);
      t1._becomeParentOf$1$1(typeParameters, type$.nullable_TypeParameterListImpl);
      t1._becomeParentOf$1$1(parameters, type$.nullable_FormalParameterListImpl);
      return t1;
    },
    fieldFormalParameter2$11$comment$covariantKeyword$identifier$metadata$parameters$period$question$requiredKeyword$thisKeyword$type$typeParameters(comment, covariantKeyword, identifier, metadata, parameters, period, question, requiredKeyword, thisKeyword, type, typeParameters) {
      return this.fieldFormalParameter2$12$comment$covariantKeyword$identifier$keyword$metadata$parameters$period$question$requiredKeyword$thisKeyword$type$typeParameters(comment, covariantKeyword, identifier, null, metadata, parameters, period, question, requiredKeyword, thisKeyword, type, typeParameters);
    },
    fieldFormalParameter2$9$comment$covariantKeyword$identifier$keyword$metadata$period$requiredKeyword$thisKeyword$type(comment, covariantKeyword, identifier, keyword, metadata, period, requiredKeyword, thisKeyword, type) {
      return this.fieldFormalParameter2$12$comment$covariantKeyword$identifier$keyword$metadata$parameters$period$question$requiredKeyword$thisKeyword$type$typeParameters(comment, covariantKeyword, identifier, keyword, metadata, null, period, null, requiredKeyword, thisKeyword, type, null);
    },
    functionTypedFormalParameter2$9$comment$covariantKeyword$identifier$metadata$parameters$question$requiredKeyword$returnType$typeParameters(comment, covariantKeyword, identifier, metadata, parameters, question, requiredKeyword, returnType, typeParameters) {
      var t1;
      type$.nullable_List_Annotation._as(metadata);
      t1 = new U.FunctionTypedFormalParameterImpl(returnType, typeParameters, parameters, question, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation), covariantKeyword, requiredKeyword, identifier);
      t1.NormalFormalParameterImpl$5(comment, metadata, covariantKeyword, requiredKeyword, identifier);
      t1._becomeParentOf$1$1(returnType, type$.nullable_TypeAnnotationImpl);
      t1._becomeParentOf$1$1(typeParameters, type$.nullable_TypeParameterListImpl);
      t1._becomeParentOf$1$1(parameters, type$.FormalParameterListImpl);
      return t1;
    },
    functionTypedFormalParameter2$5$identifier$parameters$question$returnType$typeParameters(identifier, parameters, question, returnType, typeParameters) {
      return this.functionTypedFormalParameter2$9$comment$covariantKeyword$identifier$metadata$parameters$question$requiredKeyword$returnType$typeParameters(null, null, identifier, null, parameters, question, null, returnType, typeParameters);
    },
    listLiteral$5(constKeyword, typeArguments, leftBracket, elements, rightBracket) {
      var t1, t2;
      type$.List_CollectionElement._as(elements);
      if (type$.List_Expression._is(elements)) {
        t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_CollectionElement), type$.NodeListImpl_CollectionElement);
        t2 = new U.ListLiteralImpl(leftBracket, t1, rightBracket, constKeyword, typeArguments);
        t2._becomeParentOf$1$1(typeArguments, type$.nullable_TypeArgumentListImpl);
        t1._initialize$2(t2, elements);
        return t2;
      }
      t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_CollectionElement), type$.NodeListImpl_CollectionElement);
      t2 = new U.ListLiteralImpl(leftBracket, t1, rightBracket, constKeyword, typeArguments);
      t2._becomeParentOf$1$1(typeArguments, type$.nullable_TypeArgumentListImpl);
      t1._initialize$2(t2, elements);
      return t2;
    },
    methodDeclaration$11(comment, metadata, externalKeyword, modifierKeyword, returnType, propertyKeyword, operatorKeyword, $name, typeParameters, parameters, body) {
      var t1;
      type$.nullable_List_Annotation._as(metadata);
      t1 = new U.MethodDeclarationImpl(externalKeyword, modifierKeyword, returnType, propertyKeyword, operatorKeyword, $name, typeParameters, parameters, body, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t1.AnnotatedNodeImpl$2(comment, metadata);
      t1._becomeParentOf$1$1(returnType, type$.nullable_TypeAnnotationImpl);
      t1._becomeParentOf$1$1($name, type$.SimpleIdentifierImpl);
      t1._becomeParentOf$1$1(typeParameters, type$.nullable_TypeParameterListImpl);
      t1._becomeParentOf$1$1(parameters, type$.nullable_FormalParameterListImpl);
      t1._becomeParentOf$1$1(body, type$.FunctionBodyImpl);
      return t1;
    },
    simpleIdentifier$2$isDeclaration(token, isDeclaration) {
      if (isDeclaration)
        return new U.DeclaredSimpleIdentifier(token);
      return new U.SimpleIdentifierImpl(token);
    },
    simpleIdentifier$1(token) {
      return this.simpleIdentifier$2$isDeclaration(token, false);
    },
    variableDeclarationList2$6$comment$keyword$lateKeyword$metadata$type$variables(comment, keyword, lateKeyword, metadata, type, variables) {
      var t1, t2;
      type$.nullable_List_Annotation._as(metadata);
      type$.List_VariableDeclaration._as(variables);
      t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_VariableDeclaration), type$.NodeListImpl_VariableDeclaration);
      t2 = new U.VariableDeclarationListImpl(keyword, lateKeyword, type, t1, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t2.AnnotatedNodeImpl$2(comment, metadata);
      t2._becomeParentOf$1$1(type, type$.nullable_TypeAnnotationImpl);
      t1._initialize$2(t2, variables);
      return t2;
    },
    variableDeclarationList2$4$keyword$lateKeyword$type$variables(keyword, lateKeyword, type, variables) {
      return this.variableDeclarationList2$6$comment$keyword$lateKeyword$metadata$type$variables(null, keyword, lateKeyword, null, type, variables);
    }
  };
  V.ToSourceVisitor.prototype = {
    visitAdjacentStrings$1(node) {
      this._visitNodeList$2$separator(node._ast$_strings, " ");
    },
    visitAnnotation$1(node) {
      var _this = this;
      _this.sink._contents += "@";
      _this._visitNode$1(node._ast$_name);
      _this._visitNode$1(node._typeArguments);
      _this._visitNode$2$prefix(node._constructorName, ".");
      _this._visitNode$1(node._ast$_arguments);
    },
    visitArgumentList$1(node) {
      var t1 = this.sink;
      t1._contents += "(";
      this._visitNodeList$2$separator(node._ast$_arguments, ", ");
      t1._contents += ")";
    },
    visitAsExpression$1(node) {
      this._visitNode$1(node._expression);
      this.sink._contents += " as ";
      this._visitNode$1(node._type);
    },
    visitAssertInitializer$1(node) {
      var t2,
        t1 = this.sink;
      t1._contents += "assert (";
      this._visitNode$1(node._condition);
      t2 = node._ast$_message;
      if (t2 != null) {
        t1._contents += ", ";
        this._visitNode$1(t2);
      }
      t1._contents += ");";
    },
    visitAssertStatement$1(node) {
      var t2,
        t1 = this.sink;
      t1._contents += "assert (";
      this._visitNode$1(node._condition);
      t2 = node._ast$_message;
      if (t2 != null) {
        t1._contents += ", ";
        this._visitNode$1(t2);
      }
      t1._contents += ");";
    },
    visitAssignmentExpression$1(node) {
      var t1, t2;
      this._visitNode$1(node._leftHandSide);
      t1 = this.sink;
      t1._contents += " ";
      t2 = t1._contents += H.S(node.operator.get$lexeme());
      t1._contents = t2 + " ";
      this._visitNode$1(node._rightHandSide);
    },
    visitAwaitExpression$1(node) {
      this.sink._contents += "await ";
      this._visitNode$1(node._expression);
    },
    visitBinaryExpression$1(node) {
      var t1, t2;
      this._writeOperand$2(node, node._leftOperand);
      t1 = this.sink;
      t1._contents += " ";
      t2 = t1._contents += H.S(node.operator.get$lexeme());
      t1._contents = t2 + " ";
      this._writeOperand$2(node, node._rightOperand);
    },
    visitBlock$1(node) {
      var t1 = this.sink;
      t1._contents += "{";
      this._visitNodeList$2$separator(node._statements, " ");
      t1._contents += "}";
    },
    visitBlockFunctionBody$1(node) {
      var t1, t2,
        keyword = node.keyword;
      if (keyword != null) {
        t1 = this.sink;
        t2 = t1._contents += H.S(keyword.get$lexeme());
        if (node.star != null)
          t2 = t1._contents = t2 + "*";
        t1._contents = t2 + " ";
      }
      this._visitNode$1(node._block);
    },
    visitBooleanLiteral$1(node) {
      this.sink._contents += H.S(node.literal.get$lexeme());
    },
    visitBreakStatement$1(node) {
      var t1 = this.sink;
      t1._contents += "break";
      this._visitNode$2$prefix(node._label, " ");
      t1._contents += ";";
    },
    visitCascadeExpression$1(node) {
      this._visitNode$1(node._ast$_target);
      this._visitNodeList$1(node._cascadeSections);
    },
    visitCatchClause$1(node) {
      var _this = this,
        t1 = node._exceptionType;
      _this._visitNode$2$prefix(t1, "on ");
      if (node.catchKeyword != null) {
        if (t1 != null)
          _this.sink._contents += " ";
        t1 = _this.sink;
        t1._contents += "catch (";
        _this._visitNode$1(node._exceptionParameter);
        _this._visitNode$2$prefix(node._stackTraceParameter, ", ");
        t1._contents += ") ";
      } else
        _this.sink._contents += " ";
      _this._visitNode$1(node._body);
    },
    visitClassDeclaration$1(node) {
      var t1, _this = this, _s1_ = " ";
      _this._visitNodeList$3$separator$suffix(node._metadata, _s1_, _s1_);
      _this._visitToken$2$suffix(node.abstractKeyword, _s1_);
      t1 = _this.sink;
      t1._contents += "class ";
      _this._visitNode$1(node._ast$_name);
      _this._visitNode$1(node._typeParameters);
      _this._visitNode$2$prefix(node._extendsClause, _s1_);
      _this._visitNode$2$prefix(node._withClause, _s1_);
      _this._visitNode$2$prefix(node._implementsClause, _s1_);
      t1._contents += " {";
      _this._visitNodeList$2$separator(node._members, _s1_);
      t1._contents += "}";
    },
    visitClassTypeAlias$1(node) {
      var t1, _this = this;
      _this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      if (node.abstractKeyword != null)
        _this.sink._contents += "abstract ";
      t1 = _this.sink;
      t1._contents += "class ";
      _this._visitNode$1(node._ast$_name);
      _this._visitNode$1(node._typeParameters);
      t1._contents += " = ";
      _this._visitNode$1(node._superclass);
      _this._visitNode$2$prefix(node._withClause, " ");
      _this._visitNode$2$prefix(node._implementsClause, " ");
      t1._contents += ";";
    },
    visitComment$1(node) {
    },
    visitCommentReference$1(node) {
    },
    visitCompilationUnit$1(node) {
      var t1, prefix,
        scriptTag = node._scriptTag,
        directives = node._directives;
      this._visitNode$1(scriptTag);
      t1 = scriptTag == null;
      this._visitNodeList$3$prefix$separator(directives, t1 ? "" : " ", " ");
      prefix = t1 && directives.get$length(directives) === 0 ? "" : " ";
      this._visitNodeList$3$prefix$separator(node._declarations, prefix, " ");
    },
    visitConditionalExpression$1(node) {
      var t1, _this = this;
      _this._visitNode$1(node._condition);
      t1 = _this.sink;
      t1._contents += " ? ";
      _this._visitNode$1(node._thenExpression);
      t1._contents += " : ";
      _this._visitNode$1(node._elseExpression);
    },
    visitConfiguration$1(node) {
      var _this = this,
        t1 = _this.sink;
      t1._contents += "if (";
      _this._visitNode$1(node._ast$_name);
      _this._visitNode$2$prefix(node._ast$_value, " == ");
      t1._contents += ") ";
      _this._visitNode$1(node._ast$_uri);
    },
    visitConstructorDeclaration$1(node) {
      var _this = this;
      _this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      _this._visitToken$2$suffix(node.externalKeyword, " ");
      _this._visitToken$2$suffix(node.constKeyword, " ");
      _this._visitToken$2$suffix(node.factoryKeyword, " ");
      _this._visitNode$1(node._returnType);
      _this._visitNode$2$prefix(node._ast$_name, ".");
      _this._visitNode$1(node._parameters);
      _this._visitNodeList$3$prefix$separator(node._initializers, " : ", ", ");
      _this._visitNode$2$prefix(node._redirectedConstructor, " = ");
      _this._visitFunctionBody$1(node._body);
    },
    visitConstructorFieldInitializer$1(node) {
      var _this = this;
      _this._visitToken$2$suffix(node.thisKeyword, ".");
      _this._visitNode$1(node._fieldName);
      _this.sink._contents += " = ";
      _this._visitNode$1(node._expression);
    },
    visitConstructorName$1(node) {
      this._visitNode$1(node._type);
      this._visitNode$2$prefix(node._ast$_name, ".");
    },
    visitContinueStatement$1(node) {
      var t1 = this.sink;
      t1._contents += "continue";
      this._visitNode$2$prefix(node._label, " ");
      t1._contents += ";";
    },
    visitDeclaredIdentifier$1(node) {
      var _this = this;
      _this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      _this._visitToken$2$suffix(node.keyword, " ");
      _this._visitNode$2$suffix(node._type, " ");
      _this._visitNode$1(node._identifier);
    },
    visitDefaultFormalParameter$1(node) {
      var separator, _this = this;
      _this._visitNode$1(node._parameter);
      separator = node.separator;
      if (separator != null) {
        if (separator.get$lexeme() !== ":")
          _this.sink._contents += " ";
        _this.sink._contents += H.S(separator.get$lexeme());
        _this._visitNode$2$prefix(node._defaultValue, " ");
      }
    },
    visitDoStatement$1(node) {
      var t1 = this.sink;
      t1._contents += "do ";
      this._visitNode$1(node._body);
      t1._contents += " while (";
      this._visitNode$1(node._condition);
      t1._contents += ");";
    },
    visitDottedName$1(node) {
      this._visitNodeList$2$separator(node._components, ".");
    },
    visitDoubleLiteral$1(node) {
      this.sink._contents += H.S(node.literal.get$lexeme());
    },
    visitEmptyFunctionBody$1(node) {
      this.sink._contents += ";";
    },
    visitEmptyStatement$1(node) {
      this.sink._contents += ";";
    },
    visitEnumConstantDeclaration$1(node) {
      this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      this._visitNode$1(node._ast$_name);
    },
    visitEnumDeclaration$1(node) {
      var t1, _this = this;
      _this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      t1 = _this.sink;
      t1._contents += "enum ";
      _this._visitNode$1(node._ast$_name);
      t1._contents += " {";
      _this._visitNodeList$2$separator(node._constants, ", ");
      t1._contents += "}";
    },
    visitExportDirective$1(node) {
      var t1, _this = this, _s1_ = " ";
      _this._visitNodeList$3$separator$suffix(node._metadata, _s1_, _s1_);
      t1 = _this.sink;
      t1._contents += "export ";
      _this._visitNode$1(node._ast$_uri);
      _this._visitNodeList$3$prefix$separator(node._configurations, _s1_, _s1_);
      _this._visitNodeList$3$prefix$separator(node._combinators, _s1_, _s1_);
      t1._contents += ";";
    },
    visitExpressionFunctionBody$1(node) {
      var t1, t2,
        keyword = node.keyword;
      if (keyword != null) {
        t1 = this.sink;
        t2 = t1._contents += H.S(keyword.get$lexeme());
        if (node.star != null)
          t2 = t1._contents = t2 + "*";
        t1._contents = t2 + " ";
      }
      t1 = this.sink;
      t1._contents += H.S(node.functionDefinition.get$lexeme()) + " ";
      this._visitNode$1(node._expression);
      if (node.semicolon != null)
        t1._contents += ";";
    },
    visitExpressionStatement$1(node) {
      this._visitNode$1(node._expression);
      this.sink._contents += ";";
    },
    visitExtendsClause$1(node) {
      this.sink._contents += "extends ";
      this._visitNode$1(node._superclass);
    },
    visitExtensionDeclaration$1(node) {
      var t1, _this = this, _s1_ = " ";
      _this._visitNodeList$3$separator$suffix(node._metadata, _s1_, _s1_);
      _this._visitToken$2$suffix(node.extensionKeyword, _s1_);
      _this._visitToken$2$suffix(node.typeKeyword, _s1_);
      _this._visitNode$1(node._ast$_name);
      _this._visitNode$1(node._typeParameters);
      t1 = _this.sink;
      t1._contents += " ";
      _this._visitToken$1(node.onKeyword);
      t1._contents += " ";
      _this._visitNode$2$suffix(node._extendedType, _s1_);
      _this._visitNode$2$suffix(node._showClause, _s1_);
      _this._visitNode$2$suffix(node._hideClause, _s1_);
      _this._visitToken$1(node.leftBracket);
      _this._visitNodeList$2$separator(node._members, _s1_);
      _this._visitToken$1(node.rightBracket);
    },
    visitFieldDeclaration$1(node) {
      var _this = this;
      _this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      _this._visitToken$2$suffix(node.abstractKeyword, " ");
      _this._visitToken$2$suffix(node.externalKeyword, " ");
      _this._visitToken$2$suffix(node.staticKeyword, " ");
      _this._visitNode$1(node._fieldList);
      _this.sink._contents += ";";
    },
    visitFieldFormalParameter$1(node) {
      var t1, _this = this, _s1_ = " ";
      _this._visitNodeList$3$separator$suffix(node._metadata, _s1_, _s1_);
      _this._visitToken$2$suffix(node.requiredKeyword, _s1_);
      _this._visitToken$2$suffix(node.covariantKeyword, _s1_);
      _this._visitToken$2$suffix(node.keyword, _s1_);
      _this._visitNode$2$suffix(node._type, _s1_);
      _this.sink._contents += "this.";
      t1 = U.NormalFormalParameterImpl.prototype.get$identifier.call(node);
      t1.toString;
      _this._visitNode$1(t1);
      _this._visitNode$1(node._typeParameters);
      _this._visitNode$1(node._parameters);
    },
    visitForEachPartsWithDeclaration$1(node) {
      this._visitNode$1(node._loopVariable);
      this.sink._contents += " in ";
      this._visitNode$1(node._ast$_iterable);
    },
    visitForEachPartsWithIdentifier$1(node) {
      this._visitNode$1(node._identifier);
      this.sink._contents += " in ";
      this._visitNode$1(node._ast$_iterable);
    },
    visitForElement$1(node) {
      var t1, _this = this;
      _this._visitToken$2$suffix(node.awaitKeyword, " ");
      t1 = _this.sink;
      t1._contents += "for (";
      _this._visitNode$1(node._forLoopParts);
      t1._contents += ") ";
      _this._visitNode$1(node._body);
    },
    visitFormalParameterList$1(node) {
      var parameters, size, t2, t3, groupEnd, i, parameter, t4, t5,
        t1 = this.sink;
      t1._contents += "(";
      parameters = node._parameters;
      size = parameters._elements.length;
      for (t2 = type$.void, t3 = type$.DefaultFormalParameter, groupEnd = null, i = 0; i < size; ++i) {
        parameter = parameters.$index(0, i);
        if (i > 0)
          t1._contents += ", ";
        if (groupEnd == null && t3._is(parameter)) {
          t4 = parameter.kind;
          t5 = t1._contents;
          if (t4.isNamed) {
            t1._contents = t5 + "{";
            groupEnd = "}";
          } else {
            t1._contents = t5 + "[";
            groupEnd = "]";
          }
        }
        parameter.accept$1$1(0, this, t2);
      }
      if (groupEnd != null)
        t1._contents += groupEnd;
      t1._contents += ")";
    },
    visitForPartsWithDeclarations$1(node) {
      var t1, _this = this;
      _this._visitNode$1(node._variableList);
      t1 = _this.sink;
      t1._contents += ";";
      _this._visitNode$2$prefix(node._condition, " ");
      t1._contents += ";";
      _this._visitNodeList$3$prefix$separator(node._updaters, " ", ", ");
    },
    visitForPartsWithExpression$1(node) {
      var t1, _this = this;
      _this._visitNode$1(node._initialization);
      t1 = _this.sink;
      t1._contents += ";";
      _this._visitNode$2$prefix(node._condition, " ");
      t1._contents += ";";
      _this._visitNodeList$3$prefix$separator(node._updaters, " ", ", ");
    },
    visitForStatement$1(node) {
      var t1, _this = this;
      if (node.awaitKeyword != null)
        _this.sink._contents += "await ";
      t1 = _this.sink;
      t1._contents += "for (";
      _this._visitNode$1(node._forLoopParts);
      t1._contents += ") ";
      _this._visitNode$1(node._body);
    },
    visitFunctionDeclaration$1(node) {
      var _this = this;
      _this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      _this._visitToken$2$suffix(node.externalKeyword, " ");
      _this._visitNode$2$suffix(node._returnType, " ");
      _this._visitToken$2$suffix(node.propertyKeyword, " ");
      _this._visitNode$1(node._ast$_name);
      _this._visitNode$1(node._functionExpression);
    },
    visitFunctionDeclarationStatement$1(node) {
      this._visitNode$1(node._functionDeclaration);
    },
    visitFunctionExpression$1(node) {
      this._visitNode$1(node._typeParameters);
      this._visitNode$1(node._parameters);
      this._visitFunctionBody$1(node._body);
    },
    visitFunctionExpressionInvocation$1(node) {
      this._visitNode$1(node._function);
      this._visitNode$1(node._typeArguments);
      this._visitNode$1(node._argumentList);
    },
    visitFunctionReference$1(node) {
      this._visitNode$1(node._function);
      this._visitNode$1(node._typeArguments);
    },
    visitFunctionTypeAlias$1(node) {
      var t1, _this = this;
      _this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      t1 = _this.sink;
      t1._contents += "typedef ";
      _this._visitNode$2$suffix(node._returnType, " ");
      _this._visitNode$1(node._ast$_name);
      _this._visitNode$1(node._typeParameters);
      _this._visitNode$1(node._parameters);
      t1._contents += ";";
    },
    visitFunctionTypedFormalParameter$1(node) {
      var t1, _this = this;
      _this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      _this._visitToken$2$suffix(node.requiredKeyword, " ");
      _this._visitToken$2$suffix(node.covariantKeyword, " ");
      _this._visitNode$2$suffix(node._returnType, " ");
      t1 = U.NormalFormalParameterImpl.prototype.get$identifier.call(node);
      t1.toString;
      _this._visitNode$1(t1);
      _this._visitNode$1(node._typeParameters);
      _this._visitNode$1(node._parameters);
      if (node.question != null)
        _this.sink._contents += "?";
    },
    visitGenericFunctionType$1(node) {
      var t1, _this = this;
      _this._visitNode$1(node._returnType);
      t1 = _this.sink;
      t1._contents += " Function";
      _this._visitNode$1(node._typeParameters);
      _this._visitNode$1(node._parameters);
      if (node.question != null)
        t1._contents += "?";
    },
    visitGenericTypeAlias$1(node) {
      var t1, _this = this;
      _this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      t1 = _this.sink;
      t1._contents += "typedef ";
      _this._visitNode$1(node._ast$_name);
      _this._visitNode$1(node._typeParameters);
      t1._contents += " = ";
      _this._visitNode$1(node._type);
    },
    visitHideClause$1(node) {
      this.sink._contents += "hide ";
      this._visitNodeList$2$separator(node._elements, ", ");
    },
    visitHideCombinator$1(node) {
      this.sink._contents += "hide ";
      this._visitNodeList$2$separator(node._hiddenNames, ", ");
    },
    visitIfElement$1(node) {
      var _this = this,
        t1 = _this.sink;
      t1._contents += "if (";
      _this._visitNode$1(node._condition);
      t1._contents += ") ";
      _this._visitNode$1(node._thenElement);
      _this._visitNode$2$prefix(node._elseElement, " else ");
    },
    visitIfStatement$1(node) {
      var _this = this,
        t1 = _this.sink;
      t1._contents += "if (";
      _this._visitNode$1(node._condition);
      t1._contents += ") ";
      _this._visitNode$1(node._thenStatement);
      _this._visitNode$2$prefix(node._elseStatement, " else ");
    },
    visitImplementsClause$1(node) {
      this.sink._contents += "implements ";
      this._visitNodeList$2$separator(node._interfaces, ", ");
    },
    visitImportDirective$1(node) {
      var t1, _this = this, _s1_ = " ";
      _this._visitNodeList$3$separator$suffix(node._metadata, _s1_, _s1_);
      t1 = _this.sink;
      t1._contents += "import ";
      _this._visitNode$1(node._ast$_uri);
      _this._visitNodeList$3$prefix$separator(node._configurations, _s1_, _s1_);
      if (node.deferredKeyword != null)
        t1._contents += " deferred";
      _this._visitNode$2$prefix(node._prefix, " as ");
      _this._visitNodeList$3$prefix$separator(node._combinators, _s1_, _s1_);
      t1._contents += ";";
    },
    visitIndexExpression$1(node) {
      var _this = this,
        t1 = node.period;
      if (t1 != null)
        _this._visitToken$1(t1);
      else
        _this._visitNode$1(node._ast$_target);
      _this._visitToken$1(node.question);
      _this._visitToken$1(node.leftBracket);
      _this._visitNode$1(node._ast$_index);
      _this._visitToken$1(node.rightBracket);
    },
    visitInstanceCreationExpression$1(node) {
      this._visitToken$2$suffix(node.keyword, " ");
      this._visitNode$1(node._constructorName);
      this._visitNode$1(node._argumentList);
    },
    visitIntegerLiteral$1(node) {
      this.sink._contents += H.S(node.literal.get$lexeme());
    },
    visitInterpolationExpression$1(node) {
      var t1 = this.sink,
        t2 = node._expression,
        t3 = t1._contents;
      if (node.rightBracket != null) {
        t1._contents = t3 + "${";
        this._visitNode$1(t2);
        t1._contents += "}";
      } else {
        t1._contents = t3 + "$";
        this._visitNode$1(t2);
      }
    },
    visitInterpolationString$1(node) {
      this.sink._contents += H.S(node.contents.get$lexeme());
    },
    visitIsExpression$1(node) {
      var t1, t2;
      this._visitNode$1(node._expression);
      t1 = this.sink;
      t2 = t1._contents;
      if (node.notOperator == null)
        t1._contents = t2 + " is ";
      else
        t1._contents = t2 + " is! ";
      this._visitNode$1(node._type);
    },
    visitLabel$1(node) {
      this._visitNode$1(node._label);
      this.sink._contents += ":";
    },
    visitLabeledStatement$1(node) {
      this._visitNodeList$3$separator$suffix(node._labels, " ", " ");
      this._visitNode$1(node._statement);
    },
    visitLibraryDirective$1(node) {
      var t1;
      this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      t1 = this.sink;
      t1._contents += "library ";
      this._visitNode$1(node._ast$_name);
      t1._contents += ";";
    },
    visitLibraryIdentifier$1(node) {
      this.sink._contents += node.get$name(node);
    },
    visitListLiteral$1(node) {
      var t1, _this = this;
      _this._visitToken$2$suffix(node.constKeyword, " ");
      _this._visitNode$1(node._typeArguments);
      t1 = _this.sink;
      t1._contents += "[";
      _this._visitNodeList$2$separator(node._elements, ", ");
      t1._contents += "]";
    },
    visitMapLiteralEntry$1(node) {
      this._visitNode$1(node._key);
      this.sink._contents += " : ";
      this._visitNode$1(node._ast$_value);
    },
    visitMethodDeclaration$1(node) {
      var t1, _this = this, _s1_ = " ";
      _this._visitNodeList$3$separator$suffix(node._metadata, _s1_, _s1_);
      _this._visitToken$2$suffix(node.externalKeyword, _s1_);
      _this._visitToken$2$suffix(node.modifierKeyword, _s1_);
      _this._visitNode$2$suffix(node._returnType, _s1_);
      t1 = node.propertyKeyword;
      _this._visitToken$2$suffix(t1, _s1_);
      _this._visitToken$2$suffix(node.operatorKeyword, _s1_);
      _this._visitNode$1(node._ast$_name);
      if ((t1 == null ? null : t1.get$keyword()) !== C.Keyword_rs4) {
        _this._visitNode$1(node._typeParameters);
        _this._visitNode$1(node._parameters);
      }
      _this._visitFunctionBody$1(node._body);
    },
    visitMethodInvocation$1(node) {
      var _this = this;
      _this._visitNode$1(node._ast$_target);
      _this._visitToken$1(node.operator);
      _this._visitNode$1(node._methodName);
      _this._visitNode$1(node._typeArguments);
      _this._visitNode$1(node._argumentList);
    },
    visitMixinDeclaration$1(node) {
      var t1, _this = this;
      _this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      t1 = _this.sink;
      t1._contents += "mixin ";
      _this._visitNode$1(node._ast$_name);
      _this._visitNode$1(node._typeParameters);
      _this._visitNode$2$prefix(node._onClause, " ");
      _this._visitNode$2$prefix(node._implementsClause, " ");
      t1._contents += " {";
      _this._visitNodeList$2$separator(node._members, " ");
      t1._contents += "}";
    },
    visitNamedExpression$1(node) {
      this._visitNode$1(node._ast$_name);
      this._visitNode$2$prefix(node._expression, " ");
    },
    visitNativeClause$1(node) {
      this.sink._contents += "native ";
      this._visitNode$1(node._ast$_name);
    },
    visitNativeFunctionBody$1(node) {
      var t1 = this.sink;
      t1._contents += "native ";
      this._visitNode$1(node._stringLiteral);
      t1._contents += ";";
    },
    visitNullLiteral$1(node) {
      this.sink._contents += "null";
    },
    visitOnClause$1(node) {
      this.sink._contents += "on ";
      this._visitNodeList$2$separator(node._superclassConstraints, ", ");
    },
    visitParenthesizedExpression$1(node) {
      var t1 = this.sink;
      t1._contents += "(";
      this._visitNode$1(node._expression);
      t1._contents += ")";
    },
    visitPartDirective$1(node) {
      var t1;
      this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      t1 = this.sink;
      t1._contents += "part ";
      this._visitNode$1(node._ast$_uri);
      t1._contents += ";";
    },
    visitPartOfDirective$1(node) {
      var t1, _this = this;
      _this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      t1 = _this.sink;
      t1._contents += "part of ";
      _this._visitNode$1(node._libraryName);
      _this._visitNode$1(node._ast$_uri);
      t1._contents += ";";
    },
    visitPostfixExpression$1(node) {
      this._writeOperand$2(node, node._operand);
      this.sink._contents += H.S(node.operator.get$lexeme());
    },
    visitPrefixedIdentifier$1(node) {
      this._visitNode$1(node._prefix);
      this.sink._contents += ".";
      this._visitNode$1(node._identifier);
    },
    visitPrefixExpression$1(node) {
      this.sink._contents += H.S(node.operator.get$lexeme());
      this._writeOperand$2(node, node._operand);
    },
    visitPropertyAccess$1(node) {
      var t1 = this.sink,
        t2 = node.operator;
      if (node.get$isCascaded())
        t1._contents += H.S(t2.get$lexeme());
      else {
        this._visitNode$1(node._ast$_target);
        t1._contents += H.S(t2.get$lexeme());
      }
      this._visitNode$1(node._propertyName);
    },
    visitRedirectingConstructorInvocation$1(node) {
      this.sink._contents += "this";
      this._visitNode$2$prefix(node._constructorName, ".");
      this._visitNode$1(node._argumentList);
    },
    visitRethrowExpression$1(node) {
      this.sink._contents += "rethrow";
    },
    visitReturnStatement$1(node) {
      var expression = node._expression,
        t1 = this.sink,
        t2 = t1._contents;
      if (expression == null)
        t1._contents = t2 + "return;";
      else {
        t1._contents = t2 + "return ";
        expression.accept$1$1(0, this, type$.void);
        t1._contents += ";";
      }
    },
    visitScriptTag$1(node) {
      this.sink._contents += H.S(node.scriptTag.get$lexeme());
    },
    visitSetOrMapLiteral$1(node) {
      var t1, _this = this;
      _this._visitToken$2$suffix(node.constKeyword, " ");
      _this._visitNode$1(node._typeArguments);
      t1 = _this.sink;
      t1._contents += "{";
      _this._visitNodeList$2$separator(node._elements, ", ");
      t1._contents += "}";
    },
    visitShowClause$1(node) {
      this.sink._contents += "show ";
      this._visitNodeList$2$separator(node._elements, ", ");
    },
    visitShowCombinator$1(node) {
      this.sink._contents += "show ";
      this._visitNodeList$2$separator(node._shownNames, ", ");
    },
    visitShowHideElement$1(node) {
      this._visitToken$2$suffix(node.modifier, " ");
      this._visitNode$1(node.name);
    },
    visitSimpleFormalParameter$1(node) {
      var t1, _this = this;
      _this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      _this._visitToken$2$suffix(node.requiredKeyword, " ");
      _this._visitToken$2$suffix(node.covariantKeyword, " ");
      _this._visitToken$2$suffix(node.keyword, " ");
      t1 = node._type;
      _this._visitNode$1(t1);
      if (t1 != null && node._identifier != null)
        _this.sink._contents += " ";
      _this._visitNode$1(node._identifier);
    },
    visitSimpleIdentifier$1(node) {
      this.sink._contents += H.S(node.token.get$lexeme());
    },
    visitSimpleStringLiteral$1(node) {
      this.sink._contents += H.S(node.literal.get$lexeme());
    },
    visitSpreadElement$1(node) {
      this.sink._contents += H.S(node.spreadOperator.get$lexeme());
      this._visitNode$1(node._expression);
    },
    visitStringInterpolation$1(node) {
      this._visitNodeList$1(node._elements);
    },
    visitSuperConstructorInvocation$1(node) {
      this.sink._contents += "super";
      this._visitNode$2$prefix(node._constructorName, ".");
      this._visitNode$1(node._argumentList);
    },
    visitSuperExpression$1(node) {
      this.sink._contents += "super";
    },
    visitSwitchCase$1(node) {
      var t1, _this = this;
      _this._visitNodeList$3$separator$suffix(node._labels, " ", " ");
      t1 = _this.sink;
      t1._contents += "case ";
      _this._visitNode$1(node._expression);
      t1._contents += ": ";
      _this._visitNodeList$2$separator(node._statements, " ");
    },
    visitSwitchDefault$1(node) {
      this._visitNodeList$3$separator$suffix(node._labels, " ", " ");
      this.sink._contents += "default: ";
      this._visitNodeList$2$separator(node._statements, " ");
    },
    visitSwitchStatement$1(node) {
      var t1 = this.sink;
      t1._contents += "switch (";
      this._visitNode$1(node._expression);
      t1._contents += ") {";
      this._visitNodeList$2$separator(node._members, " ");
      t1._contents += "}";
    },
    visitSymbolLiteral$1(node) {
      var i,
        t1 = this.sink,
        t2 = t1._contents += "#",
        components = node.components;
      for (i = 0; i < components.length; ++i) {
        if (i > 0)
          t1._contents = t2 + ".";
        t2 = t1._contents += H.S(components[i].get$lexeme());
      }
    },
    visitThisExpression$1(node) {
      this.sink._contents += "this";
    },
    visitThrowExpression$1(node) {
      this.sink._contents += "throw ";
      this._visitNode$1(node._expression);
    },
    visitTopLevelVariableDeclaration$1(node) {
      this._visitToken$2$suffix(node.externalKeyword, " ");
      this._visitNode$2$suffix(node._variableList, ";");
    },
    visitTryStatement$1(node) {
      var _this = this;
      _this.sink._contents += "try ";
      _this._visitNode$1(node._body);
      _this._visitNodeList$3$prefix$separator(node._catchClauses, " ", " ");
      _this._visitNode$2$prefix(node._finallyBlock, " finally ");
    },
    visitTypeArgumentList$1(node) {
      var t1 = this.sink;
      t1._contents += "<";
      this._visitNodeList$2$separator(node._ast$_arguments, ", ");
      t1._contents += ">";
    },
    visitTypeName$1(node) {
      this._visitNode$1(node._ast$_name);
      this._visitNode$1(node._typeArguments);
      if (node.question != null)
        this.sink._contents += "?";
    },
    visitTypeParameter$1(node) {
      var varianceKeyword, _this = this;
      _this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      varianceKeyword = node.varianceKeyword;
      if (varianceKeyword != null)
        _this.sink._contents += J.$add$ansx(varianceKeyword.get$lexeme(), " ");
      _this._visitNode$1(node._ast$_name);
      _this._visitNode$2$prefix(node._bound, " extends ");
    },
    visitTypeParameterList$1(node) {
      var t1 = this.sink;
      t1._contents += "<";
      this._visitNodeList$2$separator(node._typeParameters, ", ");
      t1._contents += ">";
    },
    visitVariableDeclaration$1(node) {
      this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      this._visitNode$1(node._ast$_name);
      this._visitNode$2$prefix(node._ast$_initializer, " = ");
    },
    visitVariableDeclarationList$1(node) {
      var _this = this;
      _this._visitNodeList$3$separator$suffix(node._metadata, " ", " ");
      _this._visitToken$2$suffix(node.lateKeyword, " ");
      _this._visitToken$2$suffix(node.keyword, " ");
      _this._visitNode$2$suffix(node._type, " ");
      _this._visitNodeList$2$separator(node._variables, ", ");
    },
    visitVariableDeclarationStatement$1(node) {
      this._visitNode$1(node._variableList);
      this.sink._contents += ";";
    },
    visitWhileStatement$1(node) {
      var t1 = this.sink;
      t1._contents += "while (";
      this._visitNode$1(node._condition);
      t1._contents += ") ";
      this._visitNode$1(node._body);
    },
    visitWithClause$1(node) {
      this.sink._contents += "with ";
      this._visitNodeList$2$separator(node._mixinTypes, ", ");
    },
    visitYieldStatement$1(node) {
      var t1 = this.sink,
        t2 = t1._contents;
      if (node.star != null)
        t1._contents = t2 + "yield* ";
      else
        t1._contents = t2 + "yield ";
      this._visitNode$1(node._expression);
      t1._contents += ";";
    },
    _visitFunctionBody$1(body) {
      if (!type$.EmptyFunctionBody._is(body))
        this.sink._contents += " ";
      this._visitNode$1(body);
    },
    _visitNode$3$prefix$suffix(node, prefix, suffix) {
      var t1;
      if (node != null) {
        t1 = this.sink;
        t1._contents += prefix;
        node.accept$1$1(0, this, type$.void);
        t1._contents += suffix;
      }
    },
    _visitNode$1(node) {
      return this._visitNode$3$prefix$suffix(node, "", "");
    },
    _visitNode$2$prefix(node, prefix) {
      return this._visitNode$3$prefix$suffix(node, prefix, "");
    },
    _visitNode$2$suffix(node, suffix) {
      return this._visitNode$3$prefix$suffix(node, "", suffix);
    },
    _visitNodeList$4$prefix$separator$suffix(nodes, prefix, separator, suffix) {
      var $length, t1, t2, i;
      type$.List_AstNode._as(nodes);
      $length = nodes._elements.length;
      if ($length > 0) {
        t1 = this.sink;
        t1._contents += prefix;
        for (t2 = type$.void, i = 0; i < $length; ++i) {
          if (i > 0)
            t1._contents += separator;
          nodes.$index(0, i).accept$1$1(0, this, t2);
        }
        t1._contents += suffix;
      }
    },
    _visitNodeList$3$prefix$separator(nodes, prefix, separator) {
      return this._visitNodeList$4$prefix$separator$suffix(nodes, prefix, separator, "");
    },
    _visitNodeList$2$separator(nodes, separator) {
      return this._visitNodeList$4$prefix$separator$suffix(nodes, "", separator, "");
    },
    _visitNodeList$1(nodes) {
      return this._visitNodeList$4$prefix$separator$suffix(nodes, "", "", "");
    },
    _visitNodeList$3$separator$suffix(nodes, separator, suffix) {
      return this._visitNodeList$4$prefix$separator$suffix(nodes, "", separator, suffix);
    },
    _visitToken$2$suffix(token, suffix) {
      var t1, t2;
      if (token != null) {
        t1 = this.sink;
        t2 = t1._contents += H.S(token.get$lexeme());
        t1._contents = t2 + suffix;
      }
    },
    _visitToken$1(token) {
      return this._visitToken$2$suffix(token, "");
    },
    _writeOperand$2(node, operand) {
      var needsParenthesis = operand.get$precedence()._precedence$_index < node.get$precedence()._precedence$_index;
      if (needsParenthesis)
        this.sink._contents += "(";
      operand.accept$1$1(0, this, type$.void);
      if (needsParenthesis)
        this.sink._contents += ")";
    },
    $isAstVisitor: 1
  };
  O.HintCode.prototype = {
    get$type(_) {
      return C.ErrorType_HINT_1;
    }
  };
  E.ParserErrorCode.prototype = {
    get$type(_) {
      return C.ErrorType_SYNTACTIC_ERROR_6;
    }
  };
  O.Scanner.prototype = {
    get$_featureSet() {
      var t1 = this.__Scanner__featureSet;
      return t1 === $ ? H.throwExpression(H.LateError$fieldNI("_featureSet")) : t1;
    },
    reportError$3(errorCode, offset, $arguments) {
      this._scanner$_errorListener.onError$1(0, V.AnalysisError$(this.source, offset, 1, errorCode, $arguments, C.List_empty0));
    },
    tokenize$0() {
      var token, t3, delta, _this = this,
        _s10_ = "firstToken",
        result = K.scanString(_this._scanner$_contents, O.Scanner_buildConfig(_this.get$_featureSet()), true, _this.get$_languageVersionChanged()),
        t1 = result.lineStarts,
        t2 = J.getInterceptor$ax(t1);
      t2.removeLast$0(t1);
      t2.removeAt$1(t1, 0);
      C.JSArray_methods.addAll$1(_this.lineStarts, t1);
      token = result.tokens;
      for (t1 = type$.ErrorToken, t2 = _this.get$reportError(); token.type === C.TokenType_uv8; token = t3) {
        t1._as(token);
        A.translateErrorToken(token, t2);
        t3 = token.next;
        t3.toString;
      }
      if (_this.__Scanner_firstToken === $)
        _this.__Scanner_firstToken = token;
      else
        H.throwExpression(H.LateError$fieldAI(_s10_));
      t1 = _this._readerOffset;
      if (t1 !== -1) {
        delta = t1 + 1;
        do {
          token.offset += delta;
          token = token.next;
        } while (token.type !== C.TokenType_Emx);
      }
      t1 = _this.__Scanner_firstToken;
      return t1 === $ ? H.throwExpression(H.LateError$fieldNI(_s10_)) : t1;
    },
    _languageVersionChanged$2(scanner, versionToken) {
      var overrideVersion, latestVersion, t1, t2, t3, _this = this,
        overrideMajor = versionToken.major,
        overrideMinor = versionToken.minor;
      if (overrideMajor < 0 || overrideMinor < 0)
        return;
      overrideVersion = T.Version_Version(overrideMajor, overrideMinor, 0);
      latestVersion = $.$get$ExperimentStatus_currentVersion();
      if (overrideVersion.compareTo$1(0, latestVersion) > 0)
        _this._scanner$_errorListener.onError$1(0, V.AnalysisError$(_this.source, versionToken.offset, versionToken.get$lexeme().length, C.HintCode_2Vk, [latestVersion.major, latestVersion.minor], C.List_empty0));
      else {
        t1 = _this.__Scanner__featureSetForOverriding;
        if (t1 === $)
          t1 = H.throwExpression(H.LateError$fieldNI("_featureSetForOverriding"));
        t2 = t1._sdkLanguageVersion;
        t3 = t1._explicitEnabledFlags;
        t1 = t1._explicitDisabledFlags;
        _this.__Scanner__featureSet = new K.ExperimentStatus(t2, t3, t1, T.restrictEnableFlagsToVersion(t1, t3, t2, overrideVersion));
        scanner.set$configuration(O.Scanner_buildConfig(_this.get$_featureSet()));
      }
    }
  };
  L.DiagnosticMessageImpl.prototype = {
    messageText$1$includeUrl(includeUrl) {
      return this._diagnostic$_message;
    },
    $isDiagnosticMessage: 1,
    get$length(receiver) {
      return this.length;
    }
  };
  Z.AnalyzerErrorCode.prototype = {};
  A.CompileTimeErrorCode.prototype = {
    get$type(_) {
      return C.ErrorType_COMPILE_TIME_ERROR_2;
    }
  };
  G.AstBuilder.prototype = {
    get$parser() {
      var t1 = this.__AstBuilder_parser;
      return t1 === $ ? H.throwExpression(H.LateError$fieldNI("parser")) : t1;
    },
    get$currentDeclarationMembers() {
      var t1 = this.classDeclaration;
      if (t1 != null)
        return t1._members;
      else {
        t1 = this.mixinDeclaration;
        if (t1 != null)
          return t1._members;
        else
          return this.extensionDeclaration._members;
      }
    },
    addProblem$3(message, charOffset, $length) {
      var t1;
      if (this.directives.length === 0) {
        t1 = message.get$code(message).analyzerCodes;
        t1 = t1 == null ? null : C.JSArray_methods.contains$1(t1, "NON_PART_OF_DIRECTIVE_IN_PART");
        t1 = t1 === true;
      } else
        t1 = false;
      if (t1)
        message = C.MessageCode_Uhj;
      this.errorReporter.reportMessage$3(message, charOffset, $length);
    },
    beginAsOperatorType$1(asOperator) {
    },
    beginCascade$1(token) {
      var t1, _this = this,
        expression = type$.Expression._as(_this.stack.pop$1(null));
      _this.push$1(token);
      if (type$.CascadeExpression._is(expression))
        _this.push$1(expression);
      else {
        t1 = H._setArrayType([], type$.JSArray_Expression);
        _this.ast.toString;
        _this.push$1(U.CascadeExpressionImpl$(expression, type$.List_Expression._as(t1)));
      }
      _this.push$1(C.NullValue_5);
    },
    beginClassDeclaration$3(begin, abstractToken, $name) {
      var t1 = new G._Modifiers();
      t1.abstractKeyword = abstractToken;
      this.push$1(t1);
    },
    beginCompilationUnit$1(token) {
      this.push$1(token);
    },
    beginExtensionDeclaration$2(extensionKeyword, nameToken) {
      var t3, t4, t5, t6, t7, _this = this, _null = null,
        t1 = _this.stack,
        typeParameters = type$.nullable_TypeParameterList._as(t1.pop$1(_null)),
        t2 = type$.nullable_List_Annotation,
        metadata = t2._as(t1.pop$1(_null)),
        comment = _this._findComment$2(metadata, extensionKeyword),
        $name = nameToken != null ? _this.ast.simpleIdentifier$2$isDeclaration(nameToken, true) : _null;
      t1 = L.KeywordToken$(C.Keyword_0, 0, _null);
      t3 = U.TypeNameImpl$(_this.ast.simpleIdentifier$1(L.StringToken$(C.TokenType_86y, "__tmp", -1)), _null, _null);
      t4 = L.SimpleToken$(C.TokenType_cOk, 0, _null);
      t5 = L.SimpleToken$(C.TokenType_2ty, 0, _null);
      t6 = type$.JSArray_ClassMember;
      t7 = type$.List_ClassMember._as(H._setArrayType([], t6));
      t2._as(metadata);
      t6 = new U.NodeListImpl(H._setArrayType([], t6), type$.NodeListImpl_ClassMember);
      t5 = new U.ExtensionDeclarationImpl(extensionKeyword, _null, _null, $name, _null, typeParameters, t1, t3, t4, t6, t5, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t5.AnnotatedNodeImpl$2(comment, metadata);
      t5._becomeParentOf$1$1($name, type$.nullable_SimpleIdentifierImpl);
      t5._becomeParentOf$1$1(typeParameters, type$.nullable_TypeParameterListImpl);
      t5._becomeParentOf$1$1(t5._extendedType, type$.TypeAnnotationImpl);
      t6._initialize$2(t5, t7);
      _this.extensionDeclaration = t5;
      C.JSArray_methods.add$1(_this.declarations, t5);
    },
    beginFactoryMethod$3(lastConsumed, externalToken, constToken) {
      var t1 = new G._Modifiers();
      t1.externalKeyword = externalToken;
      t1.finalConstOrVarKeyword = constToken;
      this.push$1(t1);
    },
    beginFormalParameter$5(token, kind, requiredToken, covariantToken, varFinalOrConst) {
      var t1 = new G._Modifiers();
      t1.covariantKeyword = covariantToken;
      t1.finalConstOrVarKeyword = varFinalOrConst;
      t1.requiredToken = requiredToken;
      this.push$1(t1);
    },
    beginFormalParameterDefaultValueExpression$0() {
    },
    beginIfControlFlow$1(ifToken) {
      this.push$1(ifToken);
    },
    beginIsOperatorType$1(asOperator) {
    },
    beginLiteralString$1(literalString) {
      this.push$1(literalString);
    },
    beginMetadataStar$1(token) {
    },
    beginMethod$6(externalToken, staticToken, covariantToken, varFinalOrConst, getOrSet, $name) {
      var t1, className, _this = this,
        modifiers = new G._Modifiers();
      if (externalToken != null)
        modifiers.externalKeyword = externalToken;
      if (staticToken != null) {
        t1 = _this.classDeclaration;
        if (t1 != null)
          className = t1._ast$_name.token.get$lexeme();
        else {
          t1 = _this.mixinDeclaration;
          if (t1 != null) {
            t1 = t1._ast$_name.token.get$lexeme();
            className = t1;
          } else {
            t1 = _this.extensionDeclaration._ast$_name;
            t1 = t1 == null ? null : t1.token.get$lexeme();
            className = t1;
          }
        }
        if ($name.get$lexeme() != className || getOrSet != null)
          modifiers.staticKeyword = staticToken;
      }
      if (covariantToken != null)
        modifiers.covariantKeyword = covariantToken;
      if (varFinalOrConst != null)
        modifiers.finalConstOrVarKeyword = varFinalOrConst;
      _this.push$1(modifiers);
    },
    beginMixinDeclaration$2(mixinKeyword, $name) {
    },
    beginNamedMixinApplication$3(begin, abstractToken, $name) {
      var t1 = new G._Modifiers();
      t1.abstractKeyword = abstractToken;
      this.push$1(t1);
    },
    beginTopLevelMethod$2(lastConsumed, externalToken) {
      var t1 = new G._Modifiers();
      t1.externalKeyword = externalToken;
      this.push$1(t1);
    },
    beginTypeVariable$1(token) {
      var typeParameter, _this = this, _null = null,
        t1 = _this.stack,
        $name = type$.SimpleIdentifier._as(t1.pop$1(_null)),
        t2 = type$.nullable_List_Annotation,
        metadata = t2._as(t1.pop$1(_null)),
        comment = _this._findComment$2(metadata, $name.token);
      _this.ast.toString;
      t2._as(metadata);
      typeParameter = new U.TypeParameterImpl($name, _null, _null, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      typeParameter.AnnotatedNodeImpl$2(comment, metadata);
      typeParameter._becomeParentOf$1$1($name, type$.SimpleIdentifierImpl);
      typeParameter._becomeParentOf$1$1(typeParameter._bound, type$.nullable_TypeAnnotationImpl);
      _this.push$1(typeParameter);
    },
    beginVariablesDeclaration$3(token, lateToken, varFinalOrConst) {
      var t1;
      if (varFinalOrConst != null || lateToken != null) {
        t1 = new G._Modifiers();
        t1.finalConstOrVarKeyword = varFinalOrConst;
        t1.lateToken = lateToken;
        this.push$1(t1);
      } else
        this.push$1(C.NullValue_29);
    },
    buildInitializer$1(initializerObject) {
      var $function, t1, t2, target, t3, t4, left, thisKeyword, period, fieldName, _this = this, _null = null;
      if (type$.FunctionExpressionInvocation._is(initializerObject)) {
        $function = initializerObject._function;
        if (type$.SuperExpression._is($function)) {
          t1 = $function.superKeyword;
          t2 = initializerObject._argumentList;
          _this.ast.toString;
          return U.SuperConstructorInvocationImpl$(t1, _null, _null, t2);
        }
        if (type$.ThisExpression._is($function)) {
          t1 = $function.thisKeyword;
          t2 = initializerObject._argumentList;
          _this.ast.toString;
          return U.RedirectingConstructorInvocationImpl$(t1, _null, _null, t2);
        }
        return _null;
      }
      if (type$.MethodInvocation._is(initializerObject)) {
        target = initializerObject._ast$_target;
        if (type$.SuperExpression._is(target)) {
          t1 = target.superKeyword;
          t2 = initializerObject.operator;
          t3 = initializerObject._methodName;
          t4 = initializerObject._argumentList;
          _this.ast.toString;
          return U.SuperConstructorInvocationImpl$(t1, t2, t3, t4);
        }
        if (type$.ThisExpression._is(target)) {
          t1 = target.thisKeyword;
          t2 = initializerObject.operator;
          t3 = initializerObject._methodName;
          t4 = initializerObject._argumentList;
          _this.ast.toString;
          return U.RedirectingConstructorInvocationImpl$(t1, t2, t3, t4);
        }
        return _this.buildInitializerTargetExpressionRecovery$2(target, initializerObject);
      }
      t1 = type$.PropertyAccess;
      if (t1._is(initializerObject))
        return _this.buildInitializerTargetExpressionRecovery$2(initializerObject._ast$_target, initializerObject);
      if (type$.AssignmentExpression._is(initializerObject)) {
        left = initializerObject._leftHandSide;
        if (t1._is(left)) {
          target = left._ast$_target;
          if (type$.ThisExpression._is(target)) {
            thisKeyword = target.thisKeyword;
            period = left.operator;
          } else {
            period = _null;
            thisKeyword = period;
          }
          fieldName = left._propertyName;
        } else {
          fieldName = type$.SimpleIdentifier._is(left) ? left : _this.ast.simpleIdentifier$1(type$.SuperExpression._as(left).superKeyword);
          period = _null;
          thisKeyword = period;
        }
        t1 = initializerObject.operator;
        t2 = initializerObject._rightHandSide;
        _this.ast.toString;
        t1 = new U.ConstructorFieldInitializerImpl(thisKeyword, period, fieldName, t1, t2);
        t1._becomeParentOf$1$1(fieldName, type$.SimpleIdentifierImpl);
        t1._becomeParentOf$1$1(t2, type$.ExpressionImpl);
        return t1;
      }
      if (type$.AssertInitializer._is(initializerObject))
        return initializerObject;
      if (type$.IndexExpression._is(initializerObject))
        return _this.buildInitializerTargetExpressionRecovery$2(initializerObject._ast$_target, initializerObject);
      if (type$.CascadeExpression._is(initializerObject))
        return _this.buildInitializerTargetExpressionRecovery$2(initializerObject._ast$_target, initializerObject);
      return _null;
    },
    buildInitializerTargetExpressionRecovery$2(target, initializerObject) {
      var t1, t2, t3, argumentList, _this = this, _null = null;
      for (t1 = type$.PropertyAccess, t2 = type$.MethodInvocation, t3 = type$.FunctionExpressionInvocation, argumentList = _null; true;)
        if (t3._is(target)) {
          argumentList = target._argumentList;
          target = target._function;
        } else if (t2._is(target)) {
          argumentList = target._argumentList;
          target = target._ast$_target;
        } else {
          if (t1._is(target))
            target = target._ast$_target;
          else
            break;
          argumentList = _null;
        }
      if (type$.SuperExpression._is(target)) {
        t1 = target.superKeyword;
        _this.handleRecoverableError$3(C.MessageCode_TBs, t1, t1);
        t2 = argumentList == null ? _this._syntheticArgumentList$1(t1) : argumentList;
        _this.ast.toString;
        return U.SuperConstructorInvocationImpl$(t1, _null, _null, t2);
      } else if (type$.ThisExpression._is(target)) {
        t1 = target.thisKeyword;
        _this.handleRecoverableError$3(C.MessageCode_6pO, t1, t1);
        t2 = argumentList == null ? _this._syntheticArgumentList$1(t1) : argumentList;
        _this.ast.toString;
        return U.RedirectingConstructorInvocationImpl$(t1, _null, _null, t2);
      }
      return _null;
    },
    checkFieldFormalParameters$1(parameterList) {
      var parameters = parameterList == null ? null : parameterList._parameters;
      if (parameters != null)
        parameters.forEach$1(parameters, new G.AstBuilder_checkFieldFormalParameters_closure(this));
    },
    endArguments$3(count, leftParenthesis, rightParenthesis) {
      var $arguments,
        expressions = this.popTypedList2$1$1(count, type$.Expression),
        t1 = this.ast;
      t1.toString;
      $arguments = U.ArgumentListImpl$(leftParenthesis, type$.List_Expression._as(expressions), rightParenthesis);
      this.push$1(U.MethodInvocationImpl$(null, null, t1.simpleIdentifier$1(L.StringToken$(C.TokenType_86y, "__tmp", -1)), null, $arguments));
    },
    endAsOperatorType$1(asOperator) {
    },
    endAssert$5(assertKeyword, kind, leftParenthesis, comma, semicolon) {
      var condition, $arguments, t2, _this = this, _null = null,
        t1 = comma == null ? _null : _this.stack.pop$1(_null);
      type$.nullable_Expression._as(t1);
      condition = type$.Expression._as(_this.stack.pop$1(_null));
      switch (kind) {
        case C.Assert_0:
          $arguments = H._setArrayType([condition], type$.JSArray_Expression);
          if (t1 != null)
            C.JSArray_methods.add$1($arguments, t1);
          t1 = _this.ast.simpleIdentifier$1(assertKeyword);
          t2 = leftParenthesis.get$endGroup();
          t2.toString;
          _this.push$1(U.FunctionExpressionInvocationImpl$(t1, _null, U.ArgumentListImpl$(leftParenthesis, type$.List_Expression._as($arguments), t2)));
          break;
        case C.Assert_1:
          t2 = leftParenthesis.get$endGroup();
          t2.toString;
          _this.ast.toString;
          t2 = new U.AssertInitializerImpl(assertKeyword, leftParenthesis, condition, t1, t2);
          t2._becomeParentOf$1$1(condition, type$.ExpressionImpl);
          t2._becomeParentOf$1$1(t1, type$.nullable_ExpressionImpl);
          _this.push$1(t2);
          break;
        case C.Assert_2:
          t2 = leftParenthesis.get$endGroup();
          t2.toString;
          _this.ast.toString;
          t2 = new U.AssertStatementImpl(assertKeyword, leftParenthesis, condition, t1, t2, semicolon);
          t2._becomeParentOf$1$1(condition, type$.ExpressionImpl);
          t2._becomeParentOf$1$1(t1, type$.nullable_ExpressionImpl);
          _this.push$1(t2);
          break;
        default:
          throw H.wrapException(H.ReachabilityError$(string$.x60null_c));
      }
    },
    endAwaitExpression$2(awaitKeyword, endToken) {
      var t1,
        expression = type$.Expression._as(this.stack.pop$1(null));
      this.ast.toString;
      t1 = new U.AwaitExpressionImpl(awaitKeyword, expression);
      t1._becomeParentOf$1$1(expression, type$.ExpressionImpl);
      this.push$1(t1);
    },
    endBinaryExpression$1(operatorToken) {
      var t4, t5, identifierOrInvoke, receiver, token, right, left, _this = this, _null = null,
        t1 = operatorToken.type,
        t2 = t1.stringValue,
        t3 = "." === t2;
      t2 = t3 || "?." === t2 || ".." === t2 || "?.." === t2;
      t4 = type$.Expression;
      t5 = _this.stack;
      if (t2) {
        identifierOrInvoke = t4._as(t5.pop$1(_null));
        receiver = type$.nullable_Expression._as(t5.pop$1(_null));
        t1 = type$.SimpleIdentifier;
        if (t1._is(identifierOrInvoke)) {
          t2 = t1._is(receiver) && t3;
          t3 = _this.ast;
          if (t2) {
            t3.toString;
            _this.push$1(U.PrefixedIdentifierImpl$(t1._as(receiver), operatorToken, identifierOrInvoke));
          } else {
            t3.toString;
            _this.push$1(U.PropertyAccessImpl$(receiver, operatorToken, identifierOrInvoke));
          }
        } else if (identifierOrInvoke instanceof U.MethodInvocationImpl) {
          identifierOrInvoke.set$_ast$_target(identifierOrInvoke._becomeParentOf$1$1(receiver, type$.nullable_ExpressionImpl));
          identifierOrInvoke.operator = operatorToken;
          _this.push$1(identifierOrInvoke);
        } else {
          token = identifierOrInvoke.get$beginToken();
          _this.handleRecoverableError$3(Z._withArgumentsExpectedIdentifier(token), token, token);
          _this.push$1(U.PropertyAccessImpl$(receiver, operatorToken, _this.ast.simpleIdentifier$2$isDeclaration(token, false)));
        }
      } else {
        right = t4._as(t5.pop$1(_null));
        left = t4._as(t5.pop$1(_null));
        _this.reportErrorIfSuper$1(right);
        _this.ast.toString;
        t2 = new U.BinaryExpressionImpl(left, operatorToken, right);
        t3 = type$.ExpressionImpl;
        t2._becomeParentOf$1$1(left, t3);
        t2._becomeParentOf$1$1(right, t3);
        _this.push$1(t2);
        if (!_this.enableTripleShift && t1 === C.TokenType_mRX) {
          t1 = $.$get$ExperimentalFeatures_triple_shift().enableString;
          t2 = $.$get$ExperimentStatus_currentVersion();
          _this.handleRecoverableError$3(Z._withArgumentsExperimentNotEnabled(t1, "" + t2.major + "." + t2.minor + "." + t2.patch), operatorToken, operatorToken);
        }
      }
    },
    endBlock$4(count, leftBracket, rightBracket, blockKind) {
      var statements = this.popTypedList2$1$1(count, type$.Statement);
      this.ast.toString;
      this.push$1(U.BlockImpl$(leftBracket, type$.List_Statement._as(statements), rightBracket));
    },
    endBlockFunctionBody$3(count, leftBracket, rightBracket) {
      var block, t1, t2, star, _this = this,
        statements = _this.popTypedList2$1$1(count, type$.Statement);
      _this.ast.toString;
      block = U.BlockImpl$(leftBracket, type$.List_Statement._as(statements), rightBracket);
      t1 = _this.stack;
      t2 = type$.nullable_Token;
      star = t2._as(t1.pop$1(null));
      _this.push$1(U.BlockFunctionBodyImpl$(t2._as(t1.pop$1(null)), star, block));
    },
    endCascade$0() {
      var t1 = this.stack,
        expression = type$.Expression._as(t1.pop$1(null)),
        receiver = type$.CascadeExpression._as(t1.pop$1(null));
      t1.pop$1(null);
      t1 = receiver._cascadeSections;
      t1.$ti._precomputed1._as(expression);
      t1.insert$2(0, t1._elements.length, expression);
      this.push$1(receiver);
    },
    endClassConstructor$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      var separator, parameters, typeParameters, $name, modifiers, metadata, comment, body, redirectedConstructor, nameOrNull, period, prefixOrName, t2, bodyToken, t3, $constructor, _this = this, _null = null,
        t1 = _this.stack,
        bodyObject = t1.pop$1(_null),
        initializers = type$.nullable_List_ConstructorInitializer._as(t1.pop$1(_null));
      if (initializers == null)
        initializers = C.List_empty5;
      separator = type$.nullable_Token._as(t1.pop$1(_null));
      parameters = type$.FormalParameterList._as(t1.pop$1(_null));
      typeParameters = type$.nullable_TypeParameterList._as(t1.pop$1(_null));
      $name = t1.pop$1(_null);
      t1.pop$1(_null);
      modifiers = type$.nullable__Modifiers._as(t1.pop$1(_null));
      metadata = type$.nullable_List_Annotation._as(t1.pop$1(_null));
      comment = _this._findComment$2(metadata, beginToken);
      if (type$.FunctionBody._is(bodyObject)) {
        body = bodyObject;
        redirectedConstructor = _null;
      } else if (bodyObject instanceof G._RedirectingFactoryBody) {
        separator = bodyObject.equalToken;
        redirectedConstructor = bodyObject.constructorName;
        _this.ast.toString;
        body = new U.EmptyFunctionBodyImpl(endToken);
      } else {
        _this.internalProblem$3(Z._withArgumentsInternalProblemUnhandled(J.get$runtimeType$(bodyObject).toString$0(0), "bodyObject"), beginToken.offset, _this.uri);
        H.ReachabilityError$(string$.x60null_t);
        body = _null;
        redirectedConstructor = body;
      }
      if (type$.SimpleIdentifier._is($name)) {
        nameOrNull = _null;
        period = nameOrNull;
        prefixOrName = $name;
      } else if (type$.PrefixedIdentifier._is($name)) {
        prefixOrName = $name._prefix;
        period = $name.period;
        nameOrNull = $name._identifier;
      } else {
        if ($name instanceof G._OperatorName)
          prefixOrName = $name.name;
        else
          throw H.wrapException(P.UnimplementedError$("name is an instance of " + J.get$runtimeType$($name).toString$0(0) + " in endClassConstructor"));
        nameOrNull = _null;
        period = nameOrNull;
      }
      if (typeParameters != null)
        _this.handleRecoverableError$3(C.MessageCode_lKs, typeParameters.leftBracket, typeParameters.rightBracket);
      t1 = modifiers == null;
      if ((t1 ? _null : modifiers.get$constKeyword()) != null)
        t2 = body.get$length(body) > 1 || body.get$beginToken().get$lexeme() !== ";";
      else
        t2 = false;
      if (t2) {
        bodyToken = body.get$beginToken();
        _this.handleRecoverableError$3(C.MessageCode_W7u, bodyToken, bodyToken);
      }
      t2 = _this.ast;
      t3 = t1 ? _null : modifiers.externalKeyword;
      t1 = t1 ? _null : modifiers.finalConstOrVarKeyword;
      $constructor = t2.constructorDeclaration$13(comment, metadata, t3, t1, _null, t2.simpleIdentifier$1(prefixOrName.token), period, nameOrNull, parameters, separator, initializers, redirectedConstructor, body);
      t2 = _this.get$currentDeclarationMembers();
      t2.$ti._precomputed1._as($constructor);
      t2.insert$2(0, t2._elements.length, $constructor);
    },
    endClassDeclaration$2(beginToken, endToken) {
      this.classDeclaration = null;
    },
    endClassFactoryMethod$3(beginToken, factoryKeyword, endToken) {
      var redirectedConstructor, separator, body, parameters, typeParameters, constructorName, modifiers, metadata, comment, $name, period, returnType, t2, t3, t4, _this = this, _null = null,
        t1 = _this.stack,
        bodyObject = t1.pop$1(_null);
      if (type$.FunctionBody._is(bodyObject)) {
        redirectedConstructor = _null;
        separator = redirectedConstructor;
        body = bodyObject;
      } else if (bodyObject instanceof G._RedirectingFactoryBody) {
        separator = bodyObject.equalToken;
        redirectedConstructor = bodyObject.constructorName;
        _this.ast.toString;
        body = new U.EmptyFunctionBodyImpl(endToken);
      } else {
        _this.internalProblem$3(Z._withArgumentsInternalProblemUnhandled(J.get$runtimeType$(bodyObject).toString$0(0), "bodyObject"), beginToken.offset, _this.uri);
        H.ReachabilityError$(string$.x60null_t);
        redirectedConstructor = _null;
        separator = redirectedConstructor;
        body = separator;
      }
      parameters = type$.FormalParameterList._as(t1.pop$1(_null));
      typeParameters = type$.nullable_TypeParameterList._as(t1.pop$1(_null));
      constructorName = type$.Identifier._as(t1.pop$1(_null));
      modifiers = type$.nullable__Modifiers._as(t1.pop$1(_null));
      metadata = type$.nullable_List_Annotation._as(t1.pop$1(_null));
      comment = _this._findComment$2(metadata, beginToken);
      if (typeParameters != null)
        _this.handleRecoverableError$3(C.MessageCode_lKs, typeParameters.leftBracket, typeParameters.rightBracket);
      if (type$.SimpleIdentifier._is(constructorName)) {
        $name = _null;
        period = $name;
        returnType = constructorName;
      } else if (type$.PrefixedIdentifier._is(constructorName)) {
        returnType = constructorName._prefix;
        period = constructorName.period;
        $name = _this.ast.simpleIdentifier$2$isDeclaration(constructorName._identifier.token, true);
      } else
        throw H.wrapException(P.UnimplementedError$(_null));
      t1 = _this.get$currentDeclarationMembers();
      t2 = _this.ast;
      t3 = modifiers == null;
      t4 = t3 ? _null : modifiers.externalKeyword;
      t3 = t3 ? _null : modifiers.finalConstOrVarKeyword;
      t2 = t1.$ti._precomputed1._as(t2.constructorDeclaration$13(comment, metadata, t4, t3, factoryKeyword, t2.simpleIdentifier$1(returnType.token), period, $name, parameters, separator, _null, redirectedConstructor, body));
      t1.insert$2(0, t1._elements.length, t2);
    },
    endClassFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, semicolon) {
      var variables, t1, variableList, t2, metadata, comment, _this = this;
      if (abstractToken != null)
        if (!_this.enableNonNullable)
          _this.handleRecoverableError$3(C.MessageCode_4CA, abstractToken, abstractToken);
        else {
          if (staticToken != null)
            _this.handleRecoverableError$3(C.MessageCode_W7p, abstractToken, abstractToken);
          if (lateToken != null)
            _this.handleRecoverableError$3(C.MessageCode_IVQ, abstractToken, abstractToken);
        }
      if (externalToken != null)
        if (!_this.enableNonNullable)
          _this.handleRecoverableError$3(C.MessageCode_Msz, externalToken, externalToken);
        else if (lateToken != null)
          _this.handleRecoverableError$3(C.MessageCode_mKQ, externalToken, externalToken);
      variables = _this.popTypedList2$1$1(count, type$.VariableDeclaration);
      t1 = _this.stack;
      variableList = _this.ast.variableDeclarationList2$4$keyword$lateKeyword$type$variables(varFinalOrConst, lateToken, type$.nullable_TypeAnnotation._as(t1.pop$1(null)), variables);
      t2 = type$.nullable_List_Annotation;
      metadata = t2._as(t1.pop$1(null));
      comment = _this._findComment$2(metadata, beginToken);
      t1 = _this.get$currentDeclarationMembers();
      t2._as(metadata);
      t2 = new U.FieldDeclarationImpl(abstractToken, covariantToken, externalToken, staticToken, variableList, semicolon, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t2.AnnotatedNodeImpl$2(comment, metadata);
      t2._becomeParentOf$1$1(variableList, type$.VariableDeclarationListImpl);
      t1.$ti._precomputed1._as(t2);
      t1.insert$2(0, t1._elements.length, t2);
    },
    endClassMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      var parameters, typeParameters, $name, returnType, modifiers, metadata, comment, body, nameId, operatorKeyword, t2, t3, t4, _this = this, _null = null,
        t1 = _this.stack,
        bodyObject = t1.pop$1(_null);
      t1.pop$1(_null);
      t1.pop$1(_null);
      parameters = type$.nullable_FormalParameterList._as(t1.pop$1(_null));
      typeParameters = type$.nullable_TypeParameterList._as(t1.pop$1(_null));
      $name = t1.pop$1(_null);
      returnType = type$.nullable_TypeAnnotation._as(t1.pop$1(_null));
      modifiers = type$.nullable__Modifiers._as(t1.pop$1(_null));
      metadata = type$.nullable_List_Annotation._as(t1.pop$1(_null));
      comment = _this._findComment$2(metadata, beginToken);
      if (type$.FunctionBody._is(bodyObject))
        body = bodyObject;
      else if (bodyObject instanceof G._RedirectingFactoryBody) {
        _this.ast.toString;
        body = new U.EmptyFunctionBodyImpl(endToken);
      } else {
        _this.internalProblem$3(Z._withArgumentsInternalProblemUnhandled(J.get$runtimeType$(bodyObject).toString$0(0), "bodyObject"), beginToken.offset, _this.uri);
        H.ReachabilityError$(string$.x60null_t);
        body = _null;
      }
      if (type$.SimpleIdentifier._is($name)) {
        nameId = $name;
        operatorKeyword = _null;
      } else if ($name instanceof G._OperatorName) {
        operatorKeyword = $name.operatorKeyword;
        nameId = $name.name;
        if (typeParameters != null)
          _this.handleRecoverableError$3(C.MessageCode_6yO, typeParameters.leftBracket, typeParameters.rightBracket);
      } else
        throw H.wrapException(P.UnimplementedError$("name is an instance of " + J.get$runtimeType$($name).toString$0(0) + " in endClassMethod"));
      _this.checkFieldFormalParameters$1(parameters);
      t1 = _this.get$currentDeclarationMembers();
      t2 = modifiers == null;
      t3 = t2 ? _null : modifiers.externalKeyword;
      t4 = t2 ? _null : modifiers.abstractKeyword;
      if (t4 == null)
        t2 = t2 ? _null : modifiers.staticKeyword;
      else
        t2 = t4;
      t2 = t1.$ti._precomputed1._as(_this.ast.methodDeclaration$11(comment, metadata, t3, t2, returnType, getOrSet, operatorKeyword, nameId, typeParameters, parameters, body));
      t1.insert$2(0, t1._elements.length, t2);
    },
    endClassOrMixinBody$4(kind, memberCount, leftBracket, rightBracket) {
      var t1 = this.classDeclaration;
      if (t1 != null) {
        t1.leftBracket = leftBracket;
        t1.rightBracket = rightBracket;
      } else {
        t1 = this.mixinDeclaration;
        if (t1 != null) {
          t1.leftBracket = leftBracket;
          t1.rightBracket = rightBracket;
        } else {
          t1 = this.extensionDeclaration;
          t1.leftBracket = leftBracket;
          t1.rightBracket = rightBracket;
        }
      }
    },
    endCombinators$1(count) {
      var t1 = this.popTypedList$1$1(count, type$.Combinator);
      this.push$1(t1 == null ? C.NullValue_6 : t1);
    },
    endCompilationUnit$2(count, endToken) {
      var t1, t2, t3, t4, t5, unit, _this = this,
        beginToken = type$.Token._as(_this.stack.pop$1(null));
      _this.checkEmpty$1(endToken.offset);
      t1 = _this.scriptTag;
      _this.ast.toString;
      t2 = type$.nullable_List_CompilationUnitMember._as(_this.declarations);
      t3 = type$.nullable_List_Directive._as(_this.directives);
      t4 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_Directive), type$.NodeListImpl_Directive);
      t5 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_CompilationUnitMember), type$.NodeListImpl_CompilationUnitMember);
      unit = new U.CompilationUnitImpl(beginToken, t1, t4, t5, endToken);
      unit._becomeParentOf$1$1(t1, type$.nullable_ScriptTagImpl);
      t4._initialize$2(unit, t3);
      t5._initialize$2(unit, t2);
      _this.push$1(unit);
    },
    endConditionalExpression$2(question, colon) {
      var _this = this,
        t1 = _this.stack,
        t2 = type$.Expression,
        elseExpression = t2._as(t1.pop$1(null)),
        thenExpression = t2._as(t1.pop$1(null)),
        condition = t2._as(t1.pop$1(null));
      _this.reportErrorIfSuper$1(elseExpression);
      _this.reportErrorIfSuper$1(thenExpression);
      _this.ast.toString;
      t1 = new U.ConditionalExpressionImpl(condition, question, thenExpression, colon, elseExpression);
      t2 = type$.ExpressionImpl;
      t1._becomeParentOf$1$1(condition, t2);
      t1._becomeParentOf$1$1(thenExpression, t2);
      t1._becomeParentOf$1$1(elseExpression, t2);
      _this.push$1(t1);
    },
    endConditionalUri$3(ifKeyword, leftParen, equalSign) {
      var t3, t4, t5, $name, _this = this, _null = null,
        t1 = _this.stack,
        libraryUri = type$.StringLiteral._as(t1.pop$1(_null)),
        t2 = equalSign == null ? _null : t1.pop$1(_null);
      type$.nullable_StringLiteral._as(t2);
      if (type$.StringInterpolation._is(t2)) {
        t3 = H._setArrayType([], type$.JSArray_SyntacticEntity);
        C.JSArray_methods.addAll$1(t3, type$.nullable_Iterable_SyntacticEntity._as(t2._elements));
        t3 = new J.ArrayIterator(t3, t3.length, type$.ArrayIterator_SyntacticEntity);
        t4 = type$.InterpolationExpression;
        for (; t3.moveNext$0();) {
          t5 = t3._current;
          if (t4._is(t5)) {
            t3 = t5.leftBracket;
            t4 = t5.rightBracket;
            _this.handleRecoverableError$3(C.MessageCode_KXz, t3, t4 == null ? t5._expression.get$endToken() : t4);
            break;
          }
        }
      }
      $name = type$.DottedName._as(t1.pop$1(_null));
      t1 = leftParen.get$endGroup();
      t1.toString;
      _this.ast.toString;
      t1 = new U.ConfigurationImpl(ifKeyword, leftParen, $name, equalSign, t2, t1, libraryUri);
      t1._becomeParentOf$1$1($name, type$.DottedNameImpl);
      t1._becomeParentOf$1$1(t2, type$.nullable_StringLiteralImpl);
      t1._becomeParentOf$1$1(libraryUri, type$.StringLiteralImpl);
      _this.push$1(t1);
    },
    endConditionalUris$1(count) {
      var t1 = this.popTypedList$1$1(count, type$.Configuration);
      this.push$1(t1 == null ? C.NullValue_8 : t1);
    },
    endConstExpression$1(constKeyword) {
      this._handleInstanceCreation$1(constKeyword);
    },
    endConstLiteral$1(token) {
    },
    endConstructorReference$4(start, periodBeforeName, endToken, constructorReferenceContext) {
      var t2, _null = null,
        t1 = this.stack,
        constructorName = type$.nullable_SimpleIdentifier._as(t1.pop$1(_null)),
        typeArguments = type$.nullable_TypeArgumentList._as(t1.pop$1(_null)),
        typeNameIdentifier = type$.Identifier._as(t1.pop$1(_null));
      this.ast.toString;
      t1 = U.TypeNameImpl$(typeNameIdentifier, typeArguments, _null);
      t2 = new U.ConstructorNameImpl(t1, periodBeforeName, constructorName);
      t2._becomeParentOf$1$1(t1, type$.TypeNameImpl);
      t2._becomeParentOf$1$1(constructorName, type$.nullable_SimpleIdentifierImpl);
      this.push$1(t2);
    },
    endDoWhileStatement$3(doKeyword, whileKeyword, semicolon) {
      var t2, t3,
        t1 = this.stack,
        condition = type$.ParenthesizedExpression._as(t1.pop$1(null)),
        body = type$.Statement._as(t1.pop$1(null));
      t1 = condition.leftParenthesis;
      t2 = condition._expression;
      t3 = condition.rightParenthesis;
      this.ast.toString;
      t3 = new U.DoStatementImpl(doKeyword, body, whileKeyword, t1, t2, t3, semicolon);
      t3._becomeParentOf$1$1(body, type$.StatementImpl);
      t3._becomeParentOf$1$1(t2, type$.ExpressionImpl);
      this.push$1(t3);
    },
    endDoWhileStatementBody$1(token) {
    },
    endElseStatement$1(token) {
    },
    endEnum$3(enumKeyword, leftBrace, count) {
      var _this = this,
        constants = _this.popTypedList2$1$1(count, type$.EnumConstantDeclaration),
        t1 = _this.stack,
        $name = type$.SimpleIdentifier._as(t1.pop$1(null)),
        t2 = type$.nullable_List_Annotation,
        metadata = t2._as(t1.pop$1(null)),
        comment = _this._findComment$2(metadata, enumKeyword);
      t1 = leftBrace.get$endGroup();
      t1.toString;
      _this.ast.toString;
      t2._as(metadata);
      type$.List_EnumConstantDeclaration._as(constants);
      t2 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_EnumConstantDeclaration), type$.NodeListImpl_EnumConstantDeclaration);
      t1 = new U.EnumDeclarationImpl(enumKeyword, leftBrace, t2, t1, $name, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t1.AnnotatedNodeImpl$2(comment, metadata);
      t1._becomeParentOf$1$1($name, type$.SimpleIdentifierImpl);
      t2._initialize$2(t1, constants);
      C.JSArray_methods.add$1(_this.declarations, t1);
    },
    endExport$2(exportKeyword, semicolon) {
      var _this = this, _null = null,
        t1 = _this.stack,
        t2 = type$.nullable_List_Combinator,
        combinators = t2._as(t1.pop$1(_null)),
        t3 = type$.nullable_List_Configuration,
        configurations = t3._as(t1.pop$1(_null)),
        uri = type$.StringLiteral._as(t1.pop$1(_null)),
        t4 = type$.nullable_List_Annotation,
        metadata = t4._as(t1.pop$1(_null)),
        comment = _this._findComment$2(metadata, exportKeyword);
      _this.ast.toString;
      t4._as(metadata);
      t3._as(configurations);
      t2._as(combinators);
      t2 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_Configuration), type$.NodeListImpl_Configuration);
      t3 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_Combinator), type$.NodeListImpl_Combinator);
      t4 = new U.ExportDirectiveImpl(exportKeyword, t2, t3, semicolon, uri, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t4.AnnotatedNodeImpl$2(comment, metadata);
      t4._becomeParentOf$1$1(uri, type$.StringLiteralImpl);
      t2._initialize$2(t4, configurations);
      t3._initialize$2(t4, combinators);
      C.JSArray_methods.add$1(_this.directives, t4);
    },
    endExtensionConstructor$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      var _null = null,
        t1 = this.stack;
      t1.pop$1(_null);
      t1.pop$1(_null);
      t1.pop$1(_null);
      t1.pop$1(_null);
      t1.pop$1(_null);
      t1.pop$1(_null);
      t1.pop$1(_null);
      t1.pop$1(_null);
      t1.pop$1(_null);
    },
    endExtensionDeclaration$6(extensionKeyword, typeKeyword, onKeyword, showKeyword, hideKeyword, token) {
      var t1, t2, t3, showClause, hideClause, type, _this = this;
      if (typeKeyword != null && !_this.enableExtensionTypes) {
        t1 = $.$get$ExperimentalFeatures_extension_types().enableString;
        t2 = $.$get$ExperimentStatus_currentVersion();
        _this.handleRecoverableError$3(Z._withArgumentsExperimentNotEnabled(t1, "" + t2.major + "." + t2.minor + "." + t2.patch), typeKeyword, typeKeyword);
      }
      t1 = showKeyword == null;
      if ((!t1 || hideKeyword != null) && !_this.enableExtensionTypes) {
        t2 = $.$get$ExperimentalFeatures_extension_types().enableString;
        t3 = $.$get$ExperimentStatus_currentVersion();
        t3 = Z._withArgumentsExperimentNotEnabled(t2, "" + t3.major + "." + t3.minor + "." + t3.patch);
        t2 = t1 ? hideKeyword : showKeyword;
        t2.toString;
        t1 = t1 ? hideKeyword : showKeyword;
        t1.toString;
        _this.handleRecoverableError$3(t3, t2, t1);
      }
      t1 = _this.stack;
      showClause = type$.nullable_ShowClause._as(t1.pop$1(C.NullValue_34));
      hideClause = type$.nullable_HideClause._as(t1.pop$1(C.NullValue_23));
      type = type$.TypeAnnotation._as(t1.pop$1(null));
      t1 = _this.extensionDeclaration;
      t1.set$_extendedType(t1._becomeParentOf$1$1(type, type$.TypeAnnotationImpl));
      t1.onKeyword = onKeyword;
      t1.typeKeyword = typeKeyword;
      t1.set$_showClause(t1._becomeParentOf$1$1(showClause, type$.nullable_ShowClauseImpl));
      t1.set$_hideClause(t1._becomeParentOf$1$1(hideClause, type$.nullable_HideClauseImpl));
      _this.extensionDeclaration = null;
    },
    endExtensionFactoryMethod$3(beginToken, factoryKeyword, endToken) {
      var body, comment, methodName, t2, t3, t4, _this = this, _null = null,
        t1 = _this.stack,
        bodyObject = t1.pop$1(_null),
        parameters = type$.FormalParameterList._as(t1.pop$1(_null)),
        typeParameters = type$.nullable_TypeParameterList._as(t1.pop$1(_null)),
        constructorName = t1.pop$1(_null),
        modifiers = type$.nullable__Modifiers._as(t1.pop$1(_null)),
        metadata = type$.nullable_List_Annotation._as(t1.pop$1(_null));
      if (type$.FunctionBody._is(bodyObject))
        body = bodyObject;
      else if (bodyObject instanceof G._RedirectingFactoryBody) {
        _this.ast.toString;
        body = new U.EmptyFunctionBodyImpl(endToken);
      } else
        return;
      comment = _this._findComment$2(metadata, beginToken);
      if (type$.SimpleIdentifier._is(constructorName))
        methodName = constructorName;
      else if (type$.PrefixedIdentifier._is(constructorName))
        methodName = constructorName._identifier;
      else
        return;
      t1 = _this.get$currentDeclarationMembers();
      t2 = modifiers == null;
      t3 = t2 ? _null : modifiers.externalKeyword;
      t4 = t2 ? _null : modifiers.abstractKeyword;
      if (t4 == null)
        t2 = t2 ? _null : modifiers.staticKeyword;
      else
        t2 = t4;
      t2 = t1.$ti._precomputed1._as(_this.ast.methodDeclaration$11(comment, metadata, t3, t2, _null, _null, _null, methodName, typeParameters, parameters, body));
      t1.insert$2(0, t1._elements.length, t2);
    },
    endExtensionFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken) {
      this.endClassFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken);
    },
    endExtensionMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      this.endClassMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken);
    },
    endFieldInitializer$2(assignment, token) {
      var t1 = this.stack,
        initializer = type$.Expression._as(t1.pop$1(null)),
        $name = type$.SimpleIdentifier._as(t1.pop$1(null));
      this.ast.toString;
      this.push$1(U.VariableDeclarationImpl$($name, assignment, initializer));
    },
    endForControlFlow$1(token) {
      var _null = null,
        t1 = this.stack,
        entry = t1.pop$1(_null),
        forLoopParts = type$.ForParts._as(t1.pop$1(_null)),
        t2 = type$.Token,
        leftParen = t2._as(t1.pop$1(_null));
      this.pushForControlFlowInfo$5(_null, t2._as(t1.pop$1(_null)), leftParen, forLoopParts, entry);
    },
    endForIn$1(endToken) {
      var _null = null,
        t1 = this.stack,
        body = type$.Statement._as(t1.pop$1(_null)),
        forLoopParts = type$.ForEachParts._as(t1.pop$1(_null)),
        t2 = type$.Token,
        leftParenthesis = t2._as(t1.pop$1(_null)),
        forToken = t2._as(t1.pop$1(_null)),
        awaitToken = type$.nullable_Token._as(t1.pop$1(C.NullValue_2));
      t1 = leftParenthesis.get$endGroup();
      t1.toString;
      this.ast.toString;
      this.push$1(U.ForStatementImpl$(awaitToken, forToken, leftParenthesis, forLoopParts, t1, body));
    },
    endForInBody$1(token) {
    },
    endForInControlFlow$1(token) {
      var _null = null,
        t1 = this.stack,
        entry = t1.pop$1(_null),
        forLoopParts = type$.ForEachParts._as(t1.pop$1(_null)),
        t2 = type$.Token,
        leftParenthesis = t2._as(t1.pop$1(_null)),
        forToken = t2._as(t1.pop$1(_null));
      this.pushForControlFlowInfo$5(type$.nullable_Token._as(t1.pop$1(C.NullValue_2)), forToken, leftParenthesis, forLoopParts, entry);
    },
    endForInExpression$1(token) {
    },
    endFormalParameter$7(thisKeyword, periodAfterThis, nameToken, initializerStart, initializerEnd, kind, memberKind) {
      var feature, t3, metadata, comment, t4, t5, t6, node, analyzerKind, parameter, _this = this, _null = null,
        t1 = _this.stack,
        defaultValue = type$.nullable__ParameterDefaultValue._as(t1.pop$1(_null)),
        $name = type$.nullable_SimpleIdentifier._as(t1.pop$1(_null)),
        typeOrFunctionTypedParameter = type$.nullable_AstNode._as(t1.pop$1(_null)),
        modifiers = type$.nullable__Modifiers._as(t1.pop$1(_null)),
        t2 = modifiers == null,
        keyword = t2 ? _null : modifiers.finalConstOrVarKeyword,
        covariantKeyword = t2 ? _null : modifiers.covariantKeyword,
        requiredKeyword = t2 ? _null : modifiers.requiredToken;
      if (!_this.enableNonNullable)
        if (requiredKeyword != null) {
          feature = $.$get$ExperimentalFeatures_non_nullable();
          t2 = feature.enableString;
          t3 = feature.releaseVersion;
          _this.handleRecoverableError$3(Z._withArgumentsExperimentNotEnabled(t2, "" + t3.major + "." + t3.minor + "." + t3.patch), requiredKeyword, requiredKeyword);
        }
      t2 = type$.nullable_List_Annotation;
      metadata = t2._as(t1.pop$1(_null));
      t1 = thisKeyword == null;
      if (t1)
        t3 = typeOrFunctionTypedParameter == null ? _null : typeOrFunctionTypedParameter.get$beginToken();
      else
        t3 = thisKeyword;
      comment = _this._findComment$2(metadata, t3 == null ? nameToken : t3);
      if (type$.FunctionTypedFormalParameter._is(typeOrFunctionTypedParameter)) {
        t2 = _this.ast;
        t3 = typeOrFunctionTypedParameter._returnType;
        t4 = typeOrFunctionTypedParameter._typeParameters;
        t5 = typeOrFunctionTypedParameter._parameters;
        t6 = typeOrFunctionTypedParameter.question;
        if (t1) {
          $name.toString;
          node = t2.functionTypedFormalParameter2$9$comment$covariantKeyword$identifier$metadata$parameters$question$requiredKeyword$returnType$typeParameters(comment, covariantKeyword, $name, metadata, t5, t6, requiredKeyword, t3, t4);
        } else {
          $name.toString;
          periodAfterThis.toString;
          node = t2.fieldFormalParameter2$11$comment$covariantKeyword$identifier$metadata$parameters$period$question$requiredKeyword$thisKeyword$type$typeParameters(comment, covariantKeyword, $name, metadata, t5, periodAfterThis, t6, requiredKeyword, thisKeyword, t3, t4);
        }
        t1 = t2;
      } else {
        type$.nullable_TypeAnnotation._as(typeOrFunctionTypedParameter);
        t3 = _this.ast;
        if (t1) {
          t3.toString;
          t2._as(metadata);
          node = new U.SimpleFormalParameterImpl(keyword, typeOrFunctionTypedParameter, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation), covariantKeyword, requiredKeyword, $name);
          node.NormalFormalParameterImpl$5(comment, metadata, covariantKeyword, requiredKeyword, $name);
          node._becomeParentOf$1$1(typeOrFunctionTypedParameter, type$.nullable_TypeAnnotationImpl);
        } else {
          t1 = thisKeyword.next;
          t1.toString;
          $name.toString;
          node = t3.fieldFormalParameter2$9$comment$covariantKeyword$identifier$keyword$metadata$period$requiredKeyword$thisKeyword$type(comment, covariantKeyword, $name, keyword, metadata, t1, requiredKeyword, thisKeyword, typeOrFunctionTypedParameter);
        }
        t1 = t3;
      }
      analyzerKind = _this._toAnalyzerParameterKind$2(kind, requiredKeyword);
      if (analyzerKind !== C.ParameterKind_REQUIRED_0_false_false) {
        t2 = defaultValue == null;
        t3 = t2 ? _null : defaultValue.separator;
        t2 = t2 ? _null : defaultValue.value;
        t1.toString;
        parameter = U.DefaultFormalParameterImpl$(node, analyzerKind, t3, t2);
      } else if (defaultValue != null) {
        t2 = defaultValue.separator;
        t3 = defaultValue.value;
        t1.toString;
        parameter = U.DefaultFormalParameterImpl$(node, C.ParameterKind_NAMED_3_false_true, t2, t3);
      } else
        parameter = node;
      _this.push$1(parameter);
    },
    endFormalParameterDefaultValueExpression$0() {
    },
    endFormalParameters$4(count, leftParen, rightParen, kind) {
      var t1, parameters, t2, t3, leftDelimiter, rightDelimiter, _i, raw, t4,
        rawParameters = this.popTypedList$1$1(count, type$.Object);
      if (rawParameters == null)
        rawParameters = C.List_empty;
      t1 = type$.JSArray_FormalParameter;
      parameters = H._setArrayType([], t1);
      for (t2 = rawParameters.length, t3 = type$.FormalParameter, leftDelimiter = null, rightDelimiter = null, _i = 0; _i < rawParameters.length; rawParameters.length === t2 || (0, H.throwConcurrentModificationError)(rawParameters), ++_i) {
        raw = rawParameters[_i];
        if (raw instanceof G._OptionalFormalParameters) {
          t4 = raw.parameters;
          C.JSArray_methods.addAll$1(parameters, t4);
          leftDelimiter = raw.leftDelimiter;
          rightDelimiter = raw.rightDelimiter;
        } else
          C.JSArray_methods.add$1(parameters, t3._as(raw));
      }
      this.ast.toString;
      type$.List_FormalParameter._as(parameters);
      t1 = new U.NodeListImpl(H._setArrayType([], t1), type$.NodeListImpl_FormalParameter);
      t2 = new U.FormalParameterListImpl(leftParen, t1, leftDelimiter, rightDelimiter, rightParen);
      t1._initialize$2(t2, parameters);
      this.push$1(t2);
    },
    endForStatement$1(endToken) {
      var _null = null,
        t1 = this.stack,
        body = type$.Statement._as(t1.pop$1(_null)),
        forLoopParts = type$.ForParts._as(t1.pop$1(_null)),
        t2 = type$.Token,
        leftParen = t2._as(t1.pop$1(_null)),
        forToken = t2._as(t1.pop$1(_null));
      t1 = leftParen.get$endGroup();
      t1.toString;
      this.ast.toString;
      this.push$1(U.ForStatementImpl$(_null, forToken, leftParen, forLoopParts, t1, body));
    },
    endForStatementBody$1(token) {
    },
    endFunctionExpression$2(beginToken, token) {
      var t1 = this.stack,
        body = type$.FunctionBody._as(t1.pop$1(null)),
        parameters = type$.nullable_FormalParameterList._as(t1.pop$1(null)),
        typeParameters = type$.nullable_TypeParameterList._as(t1.pop$1(null));
      this.ast.toString;
      this.push$1(U.FunctionExpressionImpl$(typeParameters, parameters, body));
    },
    endFunctionName$2(beginToken, token) {
    },
    endFunctionType$2(functionToken, questionMark) {
      var t1, parameters, returnType, typeParameters, _this = this;
      if (!_this.enableNonNullable)
        _this.reportErrorIfNullableType$1(questionMark);
      t1 = _this.stack;
      parameters = type$.FormalParameterList._as(t1.pop$1(null));
      returnType = type$.nullable_TypeAnnotation._as(t1.pop$1(null));
      typeParameters = type$.nullable_TypeParameterList._as(t1.pop$1(null));
      _this.ast.toString;
      t1 = new U.GenericFunctionTypeImpl(returnType, functionToken, typeParameters, parameters, questionMark);
      t1._becomeParentOf$1$1(returnType, type$.nullable_TypeAnnotationImpl);
      t1._becomeParentOf$1$1(typeParameters, type$.nullable_TypeParameterListImpl);
      t1._becomeParentOf$1$1(parameters, type$.FormalParameterListImpl);
      _this.push$1(t1);
    },
    endFunctionTypeAlias$3(typedefKeyword, equals, semicolon) {
      var parameters, typeParameters, $name, returnType, metadata, comment, type, templateParameters, _this = this, _null = null,
        t1 = type$.nullable_TypeParameterList,
        t2 = type$.SimpleIdentifier,
        t3 = type$.nullable_List_Annotation,
        t4 = _this.stack;
      if (equals == null) {
        parameters = type$.FormalParameterList._as(t4.pop$1(_null));
        typeParameters = t1._as(t4.pop$1(_null));
        $name = t2._as(t4.pop$1(_null));
        returnType = type$.nullable_TypeAnnotation._as(t4.pop$1(_null));
        metadata = t3._as(t4.pop$1(_null));
        comment = _this._findComment$2(metadata, typedefKeyword);
        _this.ast.toString;
        t3._as(metadata);
        t1 = new U.FunctionTypeAliasImpl(returnType, typeParameters, parameters, typedefKeyword, semicolon, $name, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
        t1.AnnotatedNodeImpl$2(comment, metadata);
        t1._becomeParentOf$1$1($name, type$.SimpleIdentifierImpl);
        t1._becomeParentOf$1$1(returnType, type$.nullable_TypeAnnotationImpl);
        t1._becomeParentOf$1$1(typeParameters, type$.nullable_TypeParameterListImpl);
        t1._becomeParentOf$1$1(parameters, type$.FormalParameterListImpl);
        C.JSArray_methods.add$1(_this.declarations, t1);
      } else {
        type = type$.TypeAnnotation._as(t4.pop$1(_null));
        templateParameters = t1._as(t4.pop$1(_null));
        $name = t2._as(t4.pop$1(_null));
        metadata = t3._as(t4.pop$1(_null));
        comment = _this._findComment$2(metadata, typedefKeyword);
        if (!type$.GenericFunctionType._is(type) && !_this.enableNonFunctionTypeAliases) {
          t1 = $.$get$Feature_nonfunction_type_aliases().enableString;
          t2 = $.$get$ExperimentStatus_currentVersion();
          _this.handleRecoverableError$3(Z._withArgumentsExperimentNotEnabled(t1, "" + t2.major + "." + t2.minor + "." + t2.patch), equals, equals);
        }
        _this.ast.toString;
        t3._as(metadata);
        t1 = new U.GenericTypeAliasImpl(type, templateParameters, equals, typedefKeyword, semicolon, $name, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
        t1.AnnotatedNodeImpl$2(comment, metadata);
        t1._becomeParentOf$1$1($name, type$.SimpleIdentifierImpl);
        t1._becomeParentOf$1$1(templateParameters, type$.nullable_TypeParameterListImpl);
        t1._becomeParentOf$1$1(type, type$.TypeAnnotationImpl);
        C.JSArray_methods.add$1(_this.declarations, t1);
      }
    },
    endFunctionTypedFormalParameter$2(nameToken, question) {
      var t1, formalParameters, returnType, typeParameters, _this = this;
      if (!_this.enableNonNullable)
        _this.reportErrorIfNullableType$1(question);
      t1 = _this.stack;
      formalParameters = type$.FormalParameterList._as(t1.pop$1(null));
      returnType = type$.nullable_TypeAnnotation._as(t1.pop$1(null));
      typeParameters = type$.nullable_TypeParameterList._as(t1.pop$1(null));
      t1 = _this.ast;
      _this.push$1(t1.functionTypedFormalParameter2$5$identifier$parameters$question$returnType$typeParameters(t1.simpleIdentifier$1(L.StringToken$(C.TokenType_IQp, "", 0)), formalParameters, question, returnType, typeParameters));
    },
    endHide$1(hideKeyword) {
      var t2,
        t1 = type$.List_SimpleIdentifier,
        hiddenNames = t1._as(this.stack.pop$1(null));
      this.ast.toString;
      t1._as(hiddenNames);
      t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_SimpleIdentifier), type$.NodeListImpl_SimpleIdentifier);
      t2 = new U.HideCombinatorImpl(t1, hideKeyword);
      t1._initialize$2(t2, hiddenNames);
      this.push$1(t2);
    },
    endIfControlFlow$1(token) {
      var _null = null,
        t1 = this.stack,
        thenElement = type$.CollectionElement._as(t1.pop$1(_null)),
        condition = type$.ParenthesizedExpression._as(t1.pop$1(_null));
      this.pushIfControlFlowInfo$5(type$.Token._as(t1.pop$1(_null)), condition, thenElement, _null, _null);
    },
    endIfElseControlFlow$1(token) {
      var _null = null,
        t1 = this.stack,
        t2 = type$.CollectionElement,
        elseElement = t2._as(t1.pop$1(_null)),
        t3 = type$.Token,
        elseToken = t3._as(t1.pop$1(_null)),
        thenElement = t2._as(t1.pop$1(_null)),
        condition = type$.ParenthesizedExpression._as(t1.pop$1(_null));
      this.pushIfControlFlowInfo$5(t3._as(t1.pop$1(_null)), condition, thenElement, elseToken, elseElement);
    },
    endIfStatement$2(ifToken, elseToken) {
      var t2, thenPart, condition, t3, t4, _this = this, _null = null,
        t1 = elseToken == null ? _null : _this.stack.pop$1(_null);
      type$.nullable_Statement._as(t1);
      t2 = _this.stack;
      thenPart = type$.Statement._as(t2.pop$1(_null));
      condition = type$.ParenthesizedExpression._as(t2.pop$1(_null));
      t2 = condition.leftParenthesis;
      t3 = condition._expression;
      t4 = condition.rightParenthesis;
      _this.ast.toString;
      t4 = new U.IfStatementImpl(ifToken, t2, t3, t4, elseToken, thenPart, t1);
      t4._becomeParentOf$1$1(t3, type$.ExpressionImpl);
      t4._becomeParentOf$1$1(thenPart, type$.StatementImpl);
      t4._becomeParentOf$1$1(t1, type$.nullable_StatementImpl);
      _this.push$1(t4);
    },
    endImplicitCreationExpression$1(token) {
      this._handleInstanceCreation$1(null);
    },
    endImport$2(importKeyword, semicolon) {
      var configurations, uri, t4, metadata, comment, _this = this, _null = null,
        t1 = _this.stack,
        t2 = type$.nullable_List_Combinator,
        combinators = t2._as(t1.pop$1(_null)),
        t3 = type$.nullable_Token,
        deferredKeyword = t3._as(t1.pop$1(C.NullValue_14)),
        asKeyword = t3._as(t1.pop$1(C.NullValue_1)),
        prefix = type$.nullable_SimpleIdentifier._as(t1.pop$1(C.NullValue_33));
      t3 = type$.nullable_List_Configuration;
      configurations = t3._as(t1.pop$1(_null));
      uri = type$.StringLiteral._as(t1.pop$1(_null));
      t4 = type$.nullable_List_Annotation;
      metadata = t4._as(t1.pop$1(_null));
      comment = _this._findComment$2(metadata, importKeyword);
      t1 = semicolon == null ? L.SimpleToken$(C.TokenType_FmR, 0, _null) : semicolon;
      _this.ast.toString;
      t4._as(metadata);
      t3._as(configurations);
      t2._as(combinators);
      t2 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_Configuration), type$.NodeListImpl_Configuration);
      t3 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_Combinator), type$.NodeListImpl_Combinator);
      t1 = new U.ImportDirectiveImpl(deferredKeyword, asKeyword, prefix, importKeyword, t2, t3, t1, uri, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t1.AnnotatedNodeImpl$2(comment, metadata);
      t1._becomeParentOf$1$1(uri, type$.StringLiteralImpl);
      t2._initialize$2(t1, configurations);
      t3._initialize$2(t1, combinators);
      t1._becomeParentOf$1$1(t1._prefix, type$.nullable_SimpleIdentifierImpl);
      C.JSArray_methods.add$1(_this.directives, t1);
    },
    endInitializedIdentifier$1(nameToken) {
      var variable, _this = this, _null = null,
        node = type$.nullable_AstNode._as(_this.stack.pop$1(_null));
      if (type$.VariableDeclaration._is(node))
        variable = node;
      else if (type$.SimpleIdentifier._is(node)) {
        _this.ast.toString;
        variable = U.VariableDeclarationImpl$(node, _null, _null);
      } else {
        _this.internalProblem$3(Z._withArgumentsInternalProblemUnhandled(J.get$runtimeType$(node).toString$0(0), "identifier"), nameToken.offset, _this.uri);
        H.ReachabilityError$(string$.x60null_t);
        variable = _null;
      }
      _this.push$1(variable);
    },
    endInitializers$3(count, colon, endToken) {
      var initializers, t1, t2, _i, initializerObject, initializer, t3, t4, _this = this,
        initializerObjects = _this.popTypedList$1$1(count, type$.Object);
      if (initializerObjects == null)
        initializerObjects = C.List_empty;
      _this.push$1(colon);
      initializers = H._setArrayType([], type$.JSArray_ConstructorInitializer);
      for (t1 = initializerObjects.length, t2 = type$.AstNode, _i = 0; _i < initializerObjects.length; initializerObjects.length === t1 || (0, H.throwConcurrentModificationError)(initializerObjects), ++_i) {
        initializerObject = initializerObjects[_i];
        initializer = _this.buildInitializer$1(initializerObject);
        if (initializer != null)
          C.JSArray_methods.add$1(initializers, initializer);
        else {
          t3 = t2._is(initializerObject);
          t4 = t3 ? initializerObject.get$beginToken() : colon;
          _this.handleRecoverableError$3(C.MessageCode_jnt, t4, t3 ? initializerObject.get$endToken() : colon);
        }
      }
      _this.push$1(initializers);
    },
    endInvalidAwaitExpression$3(awaitKeyword, endToken, errorCode) {
      this.endAwaitExpression$2(awaitKeyword, endToken);
    },
    endInvalidYieldStatement$4(yieldKeyword, starToken, endToken, errorCode) {
      this.endYieldStatement$3(yieldKeyword, starToken, endToken);
    },
    endIsOperatorType$1(asOperator) {
    },
    endLabeledStatement$1(labelCount) {
      var t1, t2, _this = this,
        statement = type$.Statement._as(_this.stack.pop$1(null)),
        labels = _this.popTypedList2$1$1(labelCount, type$.Label);
      _this.ast.toString;
      type$.List_Label._as(labels);
      t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_Label), type$.NodeListImpl_Label);
      t2 = new U.LabeledStatementImpl(t1, statement);
      t1._initialize$2(t2, labels);
      t2._becomeParentOf$1$1(statement, type$.StatementImpl);
      _this.push$1(t2);
    },
    endLibraryName$2(libraryKeyword, semicolon) {
      var $name, metadata, comment, _this = this,
        t1 = _this.stack,
        t2 = type$.List_SimpleIdentifier,
        libraryName = t2._as(t1.pop$1(null));
      _this.ast.toString;
      $name = U.LibraryIdentifierImpl$(t2._as(libraryName));
      t2 = type$.nullable_List_Annotation;
      metadata = t2._as(t1.pop$1(null));
      comment = _this._findComment$2(metadata, libraryKeyword);
      t2._as(metadata);
      t2 = new U.LibraryDirectiveImpl(libraryKeyword, $name, semicolon, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t2.AnnotatedNodeImpl$2(comment, metadata);
      t2._becomeParentOf$1$1($name, type$.LibraryIdentifierImpl);
      C.JSArray_methods.add$1(_this.directives, t2);
    },
    endLiteralString$2(interpolationCount, endToken) {
      var token, value, t3, first, last, quote, t4, elements, t5, i, part, _this = this,
        t1 = type$.Token,
        t2 = _this.ast;
      if (interpolationCount === 0) {
        token = t1._as(_this.stack.pop$1(null));
        value = Y.unescapeString(token.get$lexeme(), token, _this);
        t2.toString;
        $.$get$StringUtilities_INTERNER0().toString;
        _this.push$1(new U.SimpleStringLiteralImpl(token, value));
      } else {
        t3 = _this.popTypedList$1$1(1 + interpolationCount * 2, type$.Object);
        t3.toString;
        first = t1._as(C.JSArray_methods.get$first(t3));
        last = t1._as(C.JSArray_methods.get$last(t3));
        quote = Y.analyzeQuote(first.get$lexeme());
        t4 = type$.JSArray_InterpolationElement;
        elements = H._setArrayType([], t4);
        t5 = first.get$lexeme();
        Y.unescape(J.substring$1$s(t5, Y.firstQuoteLength(t5, quote)), quote, first, _this);
        t2.toString;
        C.JSArray_methods.add$1(elements, new U.InterpolationStringImpl(first));
        for (t2 = _this.uri, t5 = type$.InterpolationExpression, i = 1; i < t3.length - 1; ++i) {
          part = t3[i];
          if (t1._is(part)) {
            Y.unescape(part.get$lexeme(), quote, part, _this);
            C.JSArray_methods.add$1(elements, new U.InterpolationStringImpl(part));
          } else if (t5._is(part))
            C.JSArray_methods.add$1(elements, part);
          else {
            _this.internalProblem$3(Z._withArgumentsInternalProblemUnhandled(J.get$runtimeType$(part).toString$0(0), "string interpolation"), first.offset, t2);
            H.ReachabilityError$(string$.x60null_t);
          }
        }
        t1 = last.get$lexeme();
        t2 = last.get$isSynthetic();
        t3 = t1.length;
        Y.unescape(J.substring$2$s(t1, 0, t3 - (t2 ? 0 : Y.lastQuoteLength(quote))), quote, last, _this);
        C.JSArray_methods.add$1(elements, new U.InterpolationStringImpl(last));
        type$.List_InterpolationElement._as(elements);
        t1 = new U.NodeListImpl(H._setArrayType([], t4), type$.NodeListImpl_InterpolationElement);
        t3 = new U.StringInterpolationImpl(t1);
        t1._initialize$2(t3, elements);
        _this.push$1(t3);
      }
    },
    endLiteralSymbol$2(hashToken, tokenCount) {
      var components = this.popTypedList2$1$1(tokenCount, type$.Token);
      this.ast.toString;
      this.push$1(new U.SymbolLiteralImpl(hashToken, type$.List_Token._as(components)));
    },
    endLocalFunctionDeclaration$1(token) {
      var parameters, $name, returnType, typeParameters, t2, metadata, functionExpression, functionDeclaration, _this = this, _null = null,
        t1 = _this.stack,
        body = type$.FunctionBody._as(t1.pop$1(_null));
      t1.pop$1(_null);
      t1.pop$1(_null);
      parameters = type$.FormalParameterList._as(t1.pop$1(_null));
      _this.checkFieldFormalParameters$1(parameters);
      $name = type$.SimpleIdentifier._as(t1.pop$1(_null));
      returnType = type$.nullable_TypeAnnotation._as(t1.pop$1(_null));
      typeParameters = type$.nullable_TypeParameterList._as(t1.pop$1(_null));
      t2 = type$.nullable_List_Annotation;
      metadata = t2._as(t1.pop$1(C.NullValue_28));
      _this.ast.toString;
      functionExpression = U.FunctionExpressionImpl$(typeParameters, parameters, body);
      functionDeclaration = U.FunctionDeclarationImpl$(_null, t2._as(metadata), _null, returnType, _null, $name, functionExpression);
      t2 = new U.FunctionDeclarationStatementImpl(functionDeclaration);
      t2._becomeParentOf$1$1(functionDeclaration, type$.FunctionDeclarationImpl);
      _this.push$1(t2);
    },
    endMember$0() {
    },
    endMetadata$3(atSign, periodBeforeName, endToken) {
      var t2, t3, feature, $name, _this = this, _null = null,
        t1 = _this.stack,
        invocation = type$.nullable_MethodInvocation._as(t1.pop$1(_null)),
        constructorName = periodBeforeName != null ? type$.SimpleIdentifier._as(t1.pop$1(_null)) : _null,
        typeArguments = type$.nullable_TypeArgumentList._as(t1.pop$1(_null));
      if (typeArguments != null) {
        t2 = _this._ast_builder$_featureSet._flags;
        t3 = $.$get$Feature_generic_metadata().index;
        if (t3 >= t2.length)
          return H.ioore(t2, t3);
        t3 = !t2[t3];
        t2 = t3;
      } else
        t2 = false;
      if (t2) {
        feature = $.$get$Feature_generic_metadata();
        t2 = feature.enableString;
        t3 = feature.releaseVersion;
        t3 = Z._withArgumentsExperimentNotEnabled(t2, "" + t3.major + "." + t3.minor + "." + t3.patch);
        t2 = typeArguments.leftBracket;
        _this.handleRecoverableError$3(t3, t2, t2);
      }
      $name = type$.Identifier._as(t1.pop$1(_null));
      t1 = invocation == null ? _null : invocation._argumentList;
      _this.ast.toString;
      t2 = new U.AnnotationImpl(atSign, $name, typeArguments, periodBeforeName, constructorName, t1);
      t2._becomeParentOf$1$1($name, type$.IdentifierImpl);
      t2._becomeParentOf$1$1(typeArguments, type$.nullable_TypeArgumentListImpl);
      t2._becomeParentOf$1$1(constructorName, type$.nullable_SimpleIdentifierImpl);
      t2._becomeParentOf$1$1(t1, type$.nullable_ArgumentListImpl);
      _this.push$1(t2);
    },
    endMetadataStar$1(count) {
      var t1 = this.popTypedList$1$1(count, type$.Annotation);
      this.push$1(t1 == null ? C.NullValue_28 : t1);
    },
    endMixinConstructor$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      this.endClassConstructor$5(getOrSet, beginToken, beginParam, beginInitializers, endToken);
    },
    endMixinDeclaration$2(mixinKeyword, endToken) {
      this.mixinDeclaration = null;
    },
    endMixinFactoryMethod$3(beginToken, factoryKeyword, endToken) {
      this.endClassFactoryMethod$3(beginToken, factoryKeyword, endToken);
    },
    endMixinFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken) {
      this.endClassFields$9(abstractToken, externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, endToken);
    },
    endMixinMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken) {
      this.endClassMethod$5(getOrSet, beginToken, beginParam, beginInitializers, endToken);
    },
    endNamedFunctionExpression$1(endToken) {
      var parameters, typeParameters, _null = null,
        t1 = this.stack,
        body = type$.FunctionBody._as(t1.pop$1(_null));
      t1.pop$1(_null);
      t1.pop$1(_null);
      parameters = type$.FormalParameterList._as(t1.pop$1(_null));
      t1.pop$1(_null);
      t1.pop$1(_null);
      typeParameters = type$.nullable_TypeParameterList._as(t1.pop$1(_null));
      this.ast.toString;
      this.push$1(U.FunctionExpressionImpl$(typeParameters, parameters, body));
    },
    endNamedMixinApplication$5(beginToken, classKeyword, equalsToken, implementsKeyword, semicolon) {
      var t1, interfaces, implementsClause, withClause, superclass, modifiers, typeParameters, $name, abstractKeyword, t2, metadata, comment, _this = this, _null = null;
      if (implementsKeyword != null) {
        t1 = type$.List_TypeName;
        interfaces = t1._as(_this.stack.pop$1(_null));
        _this.ast.toString;
        implementsClause = U.ImplementsClauseImpl$(implementsKeyword, t1._as(interfaces));
      } else
        implementsClause = _null;
      t1 = _this.stack;
      withClause = type$.WithClause._as(t1.pop$1(C.NullValue_45));
      superclass = type$.TypeName._as(t1.pop$1(_null));
      modifiers = type$.nullable__Modifiers._as(t1.pop$1(_null));
      typeParameters = type$.nullable_TypeParameterList._as(t1.pop$1(_null));
      $name = type$.SimpleIdentifier._as(t1.pop$1(_null));
      abstractKeyword = modifiers == null ? _null : modifiers.abstractKeyword;
      t2 = type$.nullable_List_Annotation;
      metadata = t2._as(t1.pop$1(_null));
      comment = _this._findComment$2(metadata, beginToken);
      _this.ast.toString;
      t2._as(metadata);
      t2 = new U.ClassTypeAliasImpl(typeParameters, equalsToken, abstractKeyword, superclass, withClause, implementsClause, classKeyword, semicolon, $name, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t2.AnnotatedNodeImpl$2(comment, metadata);
      t2._becomeParentOf$1$1($name, type$.SimpleIdentifierImpl);
      t2._becomeParentOf$1$1(typeParameters, type$.nullable_TypeParameterListImpl);
      t2._becomeParentOf$1$1(superclass, type$.TypeNameImpl);
      t2._becomeParentOf$1$1(withClause, type$.WithClauseImpl);
      t2._becomeParentOf$1$1(implementsClause, type$.nullable_ImplementsClauseImpl);
      C.JSArray_methods.add$1(_this.declarations, t2);
    },
    endNewExpression$1(newKeyword) {
      this._handleInstanceCreation$1(newKeyword);
    },
    endOptionalFormalParameters$3(count, leftDelimeter, rightDelimeter) {
      this.push$1(new G._OptionalFormalParameters(this.popTypedList2$1$1(count, type$.FormalParameter), leftDelimeter, rightDelimeter));
    },
    endPart$2(partKeyword, semicolon) {
      var _this = this,
        t1 = _this.stack,
        uri = type$.StringLiteral._as(t1.pop$1(null)),
        t2 = type$.nullable_List_Annotation,
        metadata = t2._as(t1.pop$1(null)),
        comment = _this._findComment$2(metadata, partKeyword);
      _this.ast.toString;
      t2._as(metadata);
      t2 = new U.PartDirectiveImpl(partKeyword, semicolon, uri, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t2.AnnotatedNodeImpl$2(comment, metadata);
      t2._becomeParentOf$1$1(uri, type$.StringLiteralImpl);
      C.JSArray_methods.add$1(_this.directives, t2);
    },
    endPartOf$4(partKeyword, ofKeyword, semicolon, hasName) {
      var uri, $name, t2, metadata, comment, _this = this, _null = null,
        t1 = _this.stack,
        libraryNameOrUri = t1.pop$1(_null);
      if (type$.StringLiteral._is(libraryNameOrUri)) {
        uri = libraryNameOrUri;
        $name = _null;
      } else {
        t2 = type$.List_SimpleIdentifier;
        t2._as(libraryNameOrUri);
        _this.ast.toString;
        $name = U.LibraryIdentifierImpl$(t2._as(libraryNameOrUri));
        uri = _null;
      }
      t2 = type$.nullable_List_Annotation;
      metadata = t2._as(t1.pop$1(_null));
      comment = _this._findComment$2(metadata, partKeyword);
      _this.ast.toString;
      t2._as(metadata);
      t2 = new U.PartOfDirectiveImpl(partKeyword, ofKeyword, uri, $name, semicolon, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t2.AnnotatedNodeImpl$2(comment, metadata);
      t2._becomeParentOf$1$1(uri, type$.nullable_StringLiteralImpl);
      t2._becomeParentOf$1$1($name, type$.nullable_LibraryIdentifierImpl);
      C.JSArray_methods.add$1(_this.directives, t2);
    },
    endRedirectingFactoryBody$2(equalToken, endToken) {
      var t1 = this.stack,
        constructorName = type$.ConstructorName._as(t1.pop$1(null)),
        t2 = type$.nullable_Token;
      t2._as(t1.pop$1(null));
      t2._as(t1.pop$1(null));
      this.push$1(new G._RedirectingFactoryBody(equalToken, constructorName));
    },
    endRethrowStatement$2(rethrowToken, semicolon) {
      this.ast.toString;
      this.push$1(U.ExpressionStatementImpl$(new U.RethrowExpressionImpl(rethrowToken), semicolon));
    },
    endReturnStatement$3(hasExpression, returnKeyword, semicolon) {
      var t1,
        expression = hasExpression ? type$.Expression._as(this.stack.pop$1(null)) : null;
      this.ast.toString;
      t1 = new U.ReturnStatementImpl(returnKeyword, expression, semicolon);
      t1._becomeParentOf$1$1(expression, type$.nullable_ExpressionImpl);
      this.push$1(t1);
    },
    endShow$1(showKeyword) {
      var t2,
        t1 = type$.List_SimpleIdentifier,
        shownNames = t1._as(this.stack.pop$1(null));
      this.ast.toString;
      t1._as(shownNames);
      t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_SimpleIdentifier), type$.NodeListImpl_SimpleIdentifier);
      t2 = new U.ShowCombinatorImpl(t1, showKeyword);
      t1._initialize$2(t2, shownNames);
      this.push$1(t2);
    },
    endSwitchBlock$3(caseCount, leftBracket, rightBracket) {
      var _i, t3, _this = this,
        membersList = _this.popTypedList2$1$1(caseCount, type$.List_SwitchMember),
        t1 = H._arrayInstanceType(membersList),
        t2 = t1._eval$1("ExpandIterable<1,SwitchMember>"),
        members = P.List_List$of(new H.ExpandIterable(membersList, t1._eval$1("Iterable<SwitchMember>(1)")._as(new G.AstBuilder_endSwitchBlock_closure()), t2), true, t2._eval$1("Iterable.E")),
        labels = P.LinkedHashSet_LinkedHashSet$_empty(type$.String);
      for (t1 = members.length, _i = 0; _i < members.length; members.length === t1 || (0, H.throwConcurrentModificationError)(members), ++_i)
        for (t2 = members[_i]._labels, t2 = new H.ListIterator(t2, t2.get$length(t2), t2.$ti._eval$1("ListIterator<ListMixin.E>")); t2.moveNext$0();) {
          t3 = t2.__internal$_current._label.token;
          if (!labels.add$1(0, t3.get$lexeme()))
            _this.handleRecoverableError$3(Z._withArgumentsDuplicateLabelInSwitchStatement(t3.get$lexeme()), t3, t3);
        }
      _this.push$1(leftBracket);
      _this.push$1(members);
      _this.push$1(rightBracket);
    },
    endSwitchCase$7(labelCount, expressionCount, defaultKeyword, colonAfterDefault, statementCount, firstToken, endToken) {
      var members, t1, t2, t3, t4, member, t5, t6, t7, t8, index, members2, _this = this, _null = null,
        _s15_ = "_becomeParentOf",
        statements = _this.popTypedList2$1$1(statementCount, type$.Statement);
      if (labelCount === 0 && defaultKeyword == null)
        members = _this.popTypedList2$1$1(expressionCount, type$.SwitchMember);
      else {
        if (defaultKeyword != null) {
          t1 = type$.JSArray_Label;
          t2 = H._setArrayType([], t1);
          colonAfterDefault.toString;
          t3 = type$.JSArray_Statement;
          t4 = H._setArrayType([], t3);
          _this.ast.toString;
          type$.List_Label._as(t2);
          type$.List_Statement._as(t4);
          t1 = new U.NodeListImpl(H._setArrayType([], t1), type$.NodeListImpl_Label);
          member = new U.SwitchDefaultImpl(t1, defaultKeyword, colonAfterDefault, new U.NodeListImpl(H._setArrayType([], t3), type$.NodeListImpl_Statement));
          member.SwitchMemberImpl$4(t2, defaultKeyword, colonAfterDefault, t4);
          t2 = type$.AstNodeImpl;
          t3 = type$.nullable_AstNodeImpl;
          t4 = _this.stack;
          t5 = type$.Label;
          t6 = type$.Label;
          while (true) {
            if (!t5._is(t4.get$isNotEmpty(t4) ? t4.get$last(t4) : _null))
              break;
            t7 = t6._as(t5._as(t4.pop$1(_null)));
            C.JSArray_methods.insert$2(t1._elements, 0, t7);
            t8 = t1.__NodeListImpl__owner;
            if (t8 === $)
              t8 = H.throwExpression(H.LateError$fieldNI("_owner"));
            t8.toString;
            H.checkTypeBound(t2, t3, "T", _s15_);
            t2._as(t7);
            if (t7 != null)
              t7._ast$_parent = t8;
            --labelCount;
          }
          members = P.List_List$filled(expressionCount + 1, _null, false, type$.nullable_SwitchMember);
          C.JSArray_methods.$indexSet(members, expressionCount, member);
        } else
          members = P.List_List$filled(expressionCount, _null, false, type$.nullable_SwitchMember);
        for (index = expressionCount - 1, t1 = type$.AstNodeImpl, t2 = type$.nullable_AstNodeImpl, t3 = _this.stack, t4 = type$.Label, t5 = type$.SwitchMember; index >= 0; --index) {
          member = t5._as(t3.pop$1(_null));
          while (true) {
            if (!t4._is(t3.get$isNotEmpty(t3) ? t3.get$last(t3) : _null))
              break;
            t6 = member._labels;
            t7 = t6.$ti._precomputed1._as(t4._as(t3.pop$1(_null)));
            C.JSArray_methods.insert$2(t6._elements, 0, t7);
            t6 = t6.__NodeListImpl__owner;
            if (t6 === $)
              t6 = H.throwExpression(H.LateError$fieldNI("_owner"));
            t6.toString;
            H.checkTypeBound(t1, t2, "T", _s15_);
            t1._as(t7);
            if (t7 != null)
              t7._ast$_parent = t6;
            --labelCount;
          }
          C.JSArray_methods.$indexSet(members, index, member);
        }
      }
      t1 = A.IterableNullableExtension_whereNotNull(members, type$.SwitchMember);
      members2 = P.List_List$of(t1, true, t1.$ti._eval$1("Iterable.E"));
      if (members2.length !== 0)
        C.JSArray_methods.get$last(members2)._statements.addAll$1(0, statements);
      _this.push$1(members2);
    },
    endSwitchStatement$2(switchKeyword, endToken) {
      var t4, _null = null,
        t1 = this.stack,
        t2 = type$.Token,
        rightBracket = t2._as(t1.pop$1(_null)),
        t3 = type$.List_SwitchMember,
        members = t3._as(t1.pop$1(_null)),
        leftBracket = t2._as(t1.pop$1(_null)),
        expression = type$.ParenthesizedExpression._as(t1.pop$1(_null));
      t1 = expression.leftParenthesis;
      t2 = expression._expression;
      t4 = expression.rightParenthesis;
      this.ast.toString;
      t3._as(members);
      t3 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_SwitchMember), type$.NodeListImpl_SwitchMember);
      t4 = new U.SwitchStatementImpl(switchKeyword, t1, t2, t4, leftBracket, t3, rightBracket);
      t4._becomeParentOf$1$1(t2, type$.ExpressionImpl);
      t3._initialize$2(t4, members);
      this.push$1(t4);
    },
    endThenStatement$1(token) {
    },
    endTopLevelDeclaration$1(token) {
    },
    endTopLevelFields$8(externalToken, staticToken, covariantToken, lateToken, varFinalOrConst, count, beginToken, semicolon) {
      var variables, t1, variableList, t2, metadata, comment, _this = this;
      if (externalToken != null)
        if (!_this.enableNonNullable)
          _this.handleRecoverableError$3(C.MessageCode_Msz, externalToken, externalToken);
        else if (lateToken != null)
          _this.handleRecoverableError$3(C.MessageCode_mKQ, externalToken, externalToken);
      variables = _this.popTypedList2$1$1(count, type$.VariableDeclaration);
      t1 = _this.stack;
      variableList = _this.ast.variableDeclarationList2$4$keyword$lateKeyword$type$variables(varFinalOrConst, lateToken, type$.nullable_TypeAnnotation._as(t1.pop$1(null)), variables);
      t2 = type$.nullable_List_Annotation;
      metadata = t2._as(t1.pop$1(null));
      comment = _this._findComment$2(metadata, beginToken);
      t2._as(metadata);
      t2 = new U.TopLevelVariableDeclarationImpl(variableList, externalToken, semicolon, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t2.AnnotatedNodeImpl$2(comment, metadata);
      t2._becomeParentOf$1$1(variableList, type$.VariableDeclarationListImpl);
      C.JSArray_methods.add$1(_this.declarations, t2);
    },
    endTopLevelMethod$3(beginToken, getOrSet, endToken) {
      var _this = this, _null = null,
        t1 = _this.stack,
        body = type$.FunctionBody._as(t1.pop$1(_null)),
        parameters = type$.nullable_FormalParameterList._as(t1.pop$1(_null)),
        typeParameters = type$.nullable_TypeParameterList._as(t1.pop$1(_null)),
        $name = type$.SimpleIdentifier._as(t1.pop$1(_null)),
        returnType = type$.nullable_TypeAnnotation._as(t1.pop$1(_null)),
        modifiers = type$.nullable__Modifiers._as(t1.pop$1(_null)),
        externalKeyword = modifiers == null ? _null : modifiers.externalKeyword,
        t2 = type$.nullable_List_Annotation,
        metadata = t2._as(t1.pop$1(_null)),
        comment = _this._findComment$2(metadata, beginToken);
      _this.ast.toString;
      t1 = U.FunctionExpressionImpl$(typeParameters, parameters, body);
      C.JSArray_methods.add$1(_this.declarations, U.FunctionDeclarationImpl$(comment, t2._as(metadata), externalKeyword, returnType, getOrSet, $name, t1));
    },
    endTryStatement$3(catchCount, tryKeyword, finallyKeyword) {
      var catchClauses, body, t2, t3, _this = this,
        t1 = finallyKeyword == null ? null : _this.stack.pop$1(null);
      type$.nullable_Block._as(t1);
      catchClauses = _this.popTypedList2$1$1(catchCount, type$.CatchClause);
      body = type$.Block._as(_this.stack.pop$1(null));
      _this.ast.toString;
      type$.List_CatchClause._as(catchClauses);
      t2 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_CatchClause), type$.NodeListImpl_CatchClause);
      t3 = new U.TryStatementImpl(tryKeyword, body, t2, finallyKeyword, t1);
      t3._becomeParentOf$1$1(body, type$.BlockImpl);
      t2._initialize$2(t3, catchClauses);
      t3._becomeParentOf$1$1(t1, type$.nullable_BlockImpl);
      _this.push$1(t3);
    },
    endTypeArguments$3(count, leftBracket, rightBracket) {
      var t1, t2,
        $arguments = this.popTypedList2$1$1(count, type$.TypeAnnotation);
      this.ast.toString;
      type$.List_TypeAnnotation._as($arguments);
      t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_TypeAnnotation), type$.NodeListImpl_TypeAnnotation);
      t2 = new U.TypeArgumentListImpl(leftBracket, t1, rightBracket);
      t1._initialize$2(t2, $arguments);
      this.push$1(t2);
    },
    endTypeList$1(count) {
      var t1 = this.popTypedList$1$1(count, type$.TypeName);
      this.push$1(t1 == null ? C.NullValue_41 : t1);
    },
    endTypeVariable$4(token, index, extendsOrSuper, variance) {
      var t1, bound;
      if (!this.enableVariance)
        if (variance != null)
          this.handleRecoverableError$3(Z._withArgumentsExperimentNotEnabled("variance", "2.9"), variance, variance);
      t1 = this.stack;
      bound = type$.nullable_TypeAnnotation._as(t1.pop$1(null));
      t1 = t1.get$isNotEmpty(t1) ? t1.get$last(t1) : null;
      t1 = type$.TypeParameterImpl._as(J.$index$asx(type$.List_TypeParameter._as(t1), index));
      t1.extendsKeyword = extendsOrSuper;
      t1.set$_bound(t1._becomeParentOf$1$1(bound, type$.nullable_TypeAnnotationImpl));
      t1.varianceKeyword = variance;
    },
    endTypeVariables$2(beginToken, endToken) {
      var t2,
        t1 = type$.List_TypeParameter,
        typeParameters = t1._as(this.stack.pop$1(null));
      this.ast.toString;
      t1._as(typeParameters);
      t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_TypeParameter), type$.NodeListImpl_TypeParameter);
      t2 = new U.TypeParameterListImpl(beginToken, t1, endToken);
      t1._initialize$2(t2, typeParameters);
      this.push$1(t2);
    },
    endVariableInitializer$1(assignmentOperator) {
      var t1 = this.stack,
        initializer = type$.Expression._as(t1.pop$1(null)),
        identifier = type$.SimpleIdentifier._as(t1.pop$1(null));
      this.ast.toString;
      this.push$1(U.VariableDeclarationImpl$(identifier, assignmentOperator, initializer));
    },
    endVariablesDeclaration$2(count, semicolon) {
      var comment, _this = this, _null = null,
        variables = _this.popTypedList2$1$1(count, type$.VariableDeclaration),
        t1 = _this.stack,
        modifiers = type$.nullable__Modifiers._as(t1.pop$1(C.NullValue_29)),
        type = type$.nullable_TypeAnnotation._as(t1.pop$1(_null)),
        t2 = modifiers == null,
        keyword = t2 ? _null : modifiers.finalConstOrVarKeyword,
        metadata = type$.nullable_List_Annotation._as(t1.pop$1(_null));
      if (0 >= variables.length)
        return H.ioore(variables, 0);
      comment = _this._findComment$2(metadata, variables[0].get$beginToken());
      t1 = t2 ? _null : modifiers.lateToken;
      t1 = _this.ast.variableDeclarationList2$6$comment$keyword$lateKeyword$metadata$type$variables(comment, keyword, t1, metadata, type, variables);
      t2 = new U.VariableDeclarationStatementImpl(t1, semicolon == null ? L.SimpleToken$(C.TokenType_FmR, 0, _null) : semicolon);
      t2._becomeParentOf$1$1(t1, type$.VariableDeclarationListImpl);
      _this.push$1(t2);
    },
    endWhileStatement$2(whileKeyword, endToken) {
      var t2, t3,
        t1 = this.stack,
        body = type$.Statement._as(t1.pop$1(null)),
        condition = type$.ParenthesizedExpression._as(t1.pop$1(null));
      t1 = condition.leftParenthesis;
      t2 = condition._expression;
      t3 = condition.rightParenthesis;
      this.ast.toString;
      t3 = new U.WhileStatementImpl(whileKeyword, t1, t2, t3, body);
      t3._becomeParentOf$1$1(t2, type$.ExpressionImpl);
      t3._becomeParentOf$1$1(body, type$.StatementImpl);
      this.push$1(t3);
    },
    endWhileStatementBody$1(token) {
    },
    endYieldStatement$3(yieldToken, starToken, semicolon) {
      var t1,
        expression = type$.Expression._as(this.stack.pop$1(null));
      this.ast.toString;
      t1 = new U.YieldStatementImpl(yieldToken, starToken, expression, semicolon);
      t1._becomeParentOf$1$1(expression, type$.ExpressionImpl);
      this.push$1(t1);
    },
    handleAsOperator$1(asOperator) {
      var t1 = this.stack,
        type = type$.TypeAnnotation._as(t1.pop$1(null)),
        expression = type$.Expression._as(t1.pop$1(null));
      this.ast.toString;
      t1 = new U.AsExpressionImpl(expression, asOperator, type);
      t1._becomeParentOf$1$1(expression, type$.ExpressionImpl);
      t1._becomeParentOf$1$1(type, type$.TypeAnnotationImpl);
      this.push$1(t1);
    },
    handleAssignmentExpression$1(token) {
      var _this = this,
        t1 = _this.stack,
        t2 = type$.Expression,
        rhs = t2._as(t1.pop$1(null)),
        lhs = t2._as(t1.pop$1(null));
      if (!lhs.get$isAssignable())
        _this.handleRecoverableError$3(C.MessageCode_xny, lhs.get$beginToken(), lhs.get$endToken());
      _this.ast.toString;
      _this.push$1(U.AssignmentExpressionImpl$(lhs, token, rhs));
      if (!_this.enableTripleShift && token.type === C.TokenType_kr3) {
        t1 = $.$get$ExperimentalFeatures_triple_shift().enableString;
        t2 = $.$get$ExperimentStatus_currentVersion();
        _this.handleRecoverableError$3(Z._withArgumentsExperimentNotEnabled(t1, "" + t2.major + "." + t2.minor + "." + t2.patch), token, token);
      }
    },
    handleAsyncModifier$2(asyncToken, starToken) {
      this.push$1(asyncToken == null ? C.NullValue_21 : asyncToken);
      this.push$1(starToken == null ? C.NullValue_22 : starToken);
    },
    handleBreakStatement$3(hasTarget, breakKeyword, semicolon) {
      var t1,
        label = hasTarget ? type$.SimpleIdentifier._as(this.stack.pop$1(null)) : null;
      this.ast.toString;
      t1 = new U.BreakStatementImpl(breakKeyword, label, semicolon);
      t1._becomeParentOf$1$1(label, type$.nullable_SimpleIdentifierImpl);
      this.push$1(t1);
    },
    handleCaseMatch$2(caseKeyword, colon) {
      var expression = type$.Expression._as(this.stack.pop$1(null)),
        t1 = type$.JSArray_Label,
        t2 = H._setArrayType([], t1),
        t3 = type$.JSArray_Statement,
        t4 = H._setArrayType([], t3);
      this.ast.toString;
      type$.List_Label._as(t2);
      type$.List_Statement._as(t4);
      t3 = new U.SwitchCaseImpl(expression, new U.NodeListImpl(H._setArrayType([], t1), type$.NodeListImpl_Label), caseKeyword, colon, new U.NodeListImpl(H._setArrayType([], t3), type$.NodeListImpl_Statement));
      t3.SwitchMemberImpl$4(t2, caseKeyword, colon, t4);
      t3._becomeParentOf$1$1(expression, type$.ExpressionImpl);
      this.push$1(t3);
    },
    handleCatchBlock$3(onKeyword, catchKeyword, comma) {
      var t3, catchParameters, exception, stackTrace, t4, _null = null,
        t1 = this.stack,
        body = type$.Block._as(t1.pop$1(_null)),
        t2 = catchKeyword == null ? _null : t1.pop$1(_null);
      type$.nullable_FormalParameterList._as(t2);
      t1 = onKeyword == null ? _null : t1.pop$1(_null);
      type$.nullable_TypeAnnotation._as(t1);
      t3 = t2 == null;
      if (!t3) {
        catchParameters = t2._parameters;
        exception = catchParameters.get$length(catchParameters) !== 0 ? catchParameters.$index(0, 0).get$identifier() : _null;
        stackTrace = catchParameters._elements.length > 1 ? catchParameters.$index(0, 1).get$identifier() : _null;
      } else {
        stackTrace = _null;
        exception = stackTrace;
      }
      t4 = t3 ? _null : t2.leftParenthesis;
      t2 = t3 ? _null : t2.rightParenthesis;
      this.ast.toString;
      t2 = new U.CatchClauseImpl(onKeyword, t1, catchKeyword, t4, exception, comma, stackTrace, t2, body);
      t2._becomeParentOf$1$1(t1, type$.nullable_TypeAnnotationImpl);
      t1 = type$.nullable_SimpleIdentifierImpl;
      t2._becomeParentOf$1$1(exception, t1);
      t2._becomeParentOf$1$1(stackTrace, t1);
      t2._becomeParentOf$1$1(body, type$.BlockImpl);
      this.push$1(t2);
    },
    handleClassExtends$2(extendsKeyword, typeCount) {
      var t1, supertype, _this = this;
      for (t1 = _this.stack; typeCount > 1;) {
        t1.pop$1(null);
        --typeCount;
      }
      supertype = type$.nullable_TypeName._as(t1.pop$1(null));
      if (supertype != null) {
        extendsKeyword.toString;
        _this.ast.toString;
        t1 = new U.ExtendsClauseImpl(extendsKeyword, supertype);
        t1._becomeParentOf$1$1(supertype, type$.TypeNameImpl);
        _this.push$1(t1);
      } else
        _this.push$1(C.NullValue_17);
    },
    handleClassHeader$3(begin, classKeyword, nativeToken) {
      var t1, nativeClause, implementsClause, withClause, extendsClause, modifiers, typeParameters, $name, abstractKeyword, t2, metadata, comment, t3, t4, t5, _this = this, _null = null;
      if (nativeToken != null) {
        t1 = _this.nativeName;
        _this.ast.toString;
        nativeClause = new U.NativeClauseImpl(nativeToken, t1);
        nativeClause._becomeParentOf$1$1(t1, type$.nullable_StringLiteralImpl);
      } else
        nativeClause = _null;
      t1 = _this.stack;
      implementsClause = type$.nullable_ImplementsClause._as(t1.pop$1(C.NullValue_25));
      withClause = type$.nullable_WithClause._as(t1.pop$1(C.NullValue_45));
      extendsClause = type$.nullable_ExtendsClause._as(t1.pop$1(C.NullValue_17));
      modifiers = type$.nullable__Modifiers._as(t1.pop$1(_null));
      typeParameters = type$.nullable_TypeParameterList._as(t1.pop$1(_null));
      $name = type$.SimpleIdentifier._as(t1.pop$1(_null));
      abstractKeyword = modifiers == null ? _null : modifiers.abstractKeyword;
      t2 = type$.nullable_List_Annotation;
      metadata = t2._as(t1.pop$1(_null));
      comment = _this._findComment$2(metadata, begin);
      t1 = L.SimpleToken$(C.TokenType_cOk, 0, _null);
      t3 = type$.JSArray_ClassMember;
      t4 = H._setArrayType([], t3);
      t5 = L.SimpleToken$(C.TokenType_2ty, 0, _null);
      _this.ast.toString;
      t2._as(metadata);
      type$.List_ClassMember._as(t4);
      t3 = new U.ClassDeclarationImpl(abstractKeyword, classKeyword, extendsClause, withClause, typeParameters, implementsClause, t1, new U.NodeListImpl(H._setArrayType([], t3), type$.NodeListImpl_ClassMember), t5, $name, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t3.AnnotatedNodeImpl$2(comment, metadata);
      t3._becomeParentOf$1$1($name, type$.SimpleIdentifierImpl);
      t3.ClassOrMixinDeclarationImpl$8(comment, metadata, $name, typeParameters, implementsClause, t1, t4, t5);
      t3._becomeParentOf$1$1(t3._extendsClause, type$.nullable_ExtendsClauseImpl);
      t3._becomeParentOf$1$1(t3._withClause, type$.nullable_WithClauseImpl);
      _this.classDeclaration = t3;
      t3.set$_nativeClause(t3._becomeParentOf$1$1(nativeClause, type$.nullable_NativeClauseImpl));
      t3 = _this.classDeclaration;
      t3.toString;
      C.JSArray_methods.add$1(_this.declarations, t3);
    },
    handleClassNoWithClause$0() {
      this.push$1(C.NullValue_45);
    },
    handleClassOrMixinImplements$2(implementsKeyword, interfacesCount) {
      var interfaces, _this = this;
      if (implementsKeyword != null) {
        interfaces = _this.popTypedList2$1$1(interfacesCount, type$.TypeName);
        _this.ast.toString;
        _this.push$1(U.ImplementsClauseImpl$(implementsKeyword, type$.List_TypeName._as(interfaces)));
      } else
        _this.push$1(C.NullValue_25);
    },
    handleClassWithClause$1(withKeyword) {
      var t1 = type$.List_TypeName,
        mixinTypes = t1._as(this.stack.pop$1(null));
      this.ast.toString;
      this.push$1(U.WithClauseImpl$(withKeyword, t1._as(mixinTypes)));
    },
    handleCommentReference$4(newKeyword, prefix, period, token) {
      var t1 = this.ast,
        identifier = t1.simpleIdentifier$1(token);
      if (prefix != null) {
        t1 = t1.simpleIdentifier$1(prefix);
        period.toString;
        identifier = U.PrefixedIdentifierImpl$(t1, period, identifier);
      }
      t1 = new U.CommentReferenceImpl(newKeyword, identifier);
      t1._becomeParentOf$1$1(identifier, type$.IdentifierImpl);
      this.push$1(t1);
    },
    handleCommentReferenceText$2(referenceSource, referenceOffset) {
      this.push$1(referenceSource);
      this.push$1(referenceOffset);
    },
    handleConstFactory$1(constKeyword) {
      this.handleRecoverableError$3(C.MessageCode_Hj3, constKeyword, constKeyword);
    },
    handleContinueStatement$3(hasTarget, continueKeyword, semicolon) {
      var t1,
        label = hasTarget ? type$.SimpleIdentifier._as(this.stack.pop$1(null)) : null;
      this.ast.toString;
      t1 = new U.ContinueStatementImpl(continueKeyword, label, semicolon);
      t1._becomeParentOf$1$1(label, type$.nullable_SimpleIdentifierImpl);
      this.push$1(t1);
    },
    handleDottedName$2(count, firstIdentifier) {
      var t1, t2,
        components = this.popTypedList2$1$1(count, type$.SimpleIdentifier);
      this.ast.toString;
      type$.List_SimpleIdentifier._as(components);
      t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_SimpleIdentifier), type$.NodeListImpl_SimpleIdentifier);
      t2 = new U.DottedNameImpl(t1);
      t1._initialize$2(t2, components);
      this.push$1(t2);
    },
    handleElseControlFlow$1(elseToken) {
      this.push$1(elseToken);
    },
    handleEmptyFunctionBody$1(semicolon) {
      var t1 = this.stack;
      t1.pop$1(null);
      t1.pop$1(null);
      this.ast.toString;
      this.push$1(new U.EmptyFunctionBodyImpl(semicolon));
    },
    handleEmptyStatement$1(semicolon) {
      this.ast.toString;
      this.push$1(new U.EmptyStatementImpl(semicolon));
    },
    handleErrorToken$1(token) {
      A.translateErrorToken(token, this.errorReporter.get$reportScannerError());
    },
    handleExpressionFunctionBody$2(arrowToken, semicolon) {
      var t1 = this.stack,
        expression = type$.Expression._as(t1.pop$1(null)),
        t2 = type$.nullable_Token,
        star = t2._as(t1.pop$1(null)),
        asyncKeyword = t2._as(t1.pop$1(null));
      this.ast.toString;
      t1 = new U.ExpressionFunctionBodyImpl(asyncKeyword, star, arrowToken, expression, semicolon);
      t1._becomeParentOf$1$1(expression, type$.ExpressionImpl);
      this.push$1(t1);
    },
    handleExpressionStatement$1(semicolon) {
      var t1, _this = this,
        expression = type$.Expression._as(_this.stack.pop$1(null));
      _this.reportErrorIfSuper$1(expression);
      if (type$.SimpleIdentifier._is(expression)) {
        t1 = expression.token.get$keyword();
        if (t1 == null)
          t1 = null;
        else {
          t1 = t1.keywordStyle;
          t1 = t1 === C.KeywordStyle_1 || t1 === C.KeywordStyle_2;
        }
        t1 = t1 === false;
      } else
        t1 = false;
      if (t1) {
        t1 = expression.token;
        _this.handleRecoverableError$3(C.MessageCode_oqh, t1, t1);
      }
      if (type$.AssignmentExpression._is(expression)) {
        t1 = expression._leftHandSide;
        if (!t1.get$isAssignable())
          _this.handleRecoverableError$3(C.MessageCode_EQQ, t1.get$beginToken(), t1.get$endToken());
      }
      _this.ast.toString;
      _this.push$1(U.ExpressionStatementImpl$(expression, semicolon));
    },
    handleExtensionShowHide$4(showKeyword, showElementCount, hideKeyword, hideElementCount) {
      var elements, t1, hideClause, showClause, _this = this;
      if (hideKeyword != null) {
        elements = _this.popTypedList2$1$1(hideElementCount, type$.ShowHideClauseElement);
        _this.ast.toString;
        type$.List_ShowHideClauseElement._as(elements);
        t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_ShowHideClauseElement), type$.NodeListImpl_ShowHideClauseElement);
        hideClause = new U.HideClauseImpl(hideKeyword, t1);
        t1._initialize$2(hideClause, elements);
      } else
        hideClause = null;
      if (showKeyword != null) {
        elements = _this.popTypedList2$1$1(showElementCount, type$.ShowHideClauseElement);
        _this.ast.toString;
        type$.List_ShowHideClauseElement._as(elements);
        t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_ShowHideClauseElement), type$.NodeListImpl_ShowHideClauseElement);
        showClause = new U.ShowClauseImpl(showKeyword, t1);
        t1._initialize$2(showClause, elements);
      } else
        showClause = null;
      _this.push$1(hideClause == null ? C.NullValue_23 : hideClause);
      _this.push$1(showClause == null ? C.NullValue_34 : showClause);
    },
    handleFinallyBlock$1(finallyKeyword) {
    },
    handleForInitializerEmptyStatement$1(token) {
      this.push$1(C.NullValue_16);
    },
    handleForInitializerExpressionStatement$2(token, forIn) {
    },
    handleForInitializerLocalVariableDeclaration$2(token, forIn) {
    },
    handleForInLoopParts$4(awaitToken, forToken, leftParenthesis, inKeyword) {
      var variableList, t2, t3, t4, t5, forLoopParts, variableOrDeclaration, _this = this,
        t1 = _this.stack,
        iterator = type$.Expression._as(t1.pop$1(null));
      t1 = t1.pop$1(null);
      t1.toString;
      if (type$.VariableDeclarationStatement._is(t1)) {
        variableList = t1._variableList;
        t1 = variableList._comment;
        t2 = variableList._type;
        t3 = variableList._variables;
        t3 = t3.get$first(t3)._ast$_name;
        _this.ast.toString;
        t4 = type$.nullable_List_Annotation._as(variableList._metadata);
        t5 = new U.DeclaredIdentifierImpl(variableList.keyword, t2, t3, t1, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
        t5.AnnotatedNodeImpl$2(t1, t4);
        t5._becomeParentOf$1$1(t2, type$.nullable_TypeAnnotationImpl);
        t5._becomeParentOf$1$1(t3, type$.SimpleIdentifierImpl);
        forLoopParts = new U.ForEachPartsWithDeclarationImpl(t5, inKeyword, iterator);
        forLoopParts._becomeParentOf$1$1(iterator, type$.ExpressionImpl);
        forLoopParts._becomeParentOf$1$1(t5, type$.DeclaredIdentifierImpl);
      } else {
        if (!type$.SimpleIdentifier._is(t1)) {
          if (!leftParenthesis.next.get$isIdentifier())
            _this.get$parser().get$rewriter().insertSyntheticIdentifier$1(leftParenthesis);
          t1 = leftParenthesis.next;
          t1.toString;
          variableOrDeclaration = _this.ast.simpleIdentifier$1(t1);
        } else
          variableOrDeclaration = t1;
        _this.ast.toString;
        forLoopParts = new U.ForEachPartsWithIdentifierImpl(variableOrDeclaration, inKeyword, iterator);
        forLoopParts._becomeParentOf$1$1(iterator, type$.ExpressionImpl);
        forLoopParts._becomeParentOf$1$1(variableOrDeclaration, type$.SimpleIdentifierImpl);
      }
      _this.push$1(awaitToken == null ? C.NullValue_2 : awaitToken);
      _this.push$1(forToken);
      _this.push$1(leftParenthesis);
      _this.push$1(forLoopParts);
    },
    handleForLoopParts$4(forKeyword, leftParen, leftSeparator, updateExpressionCount) {
      var condition, rightSeparator, t2, t3, t4, t5, forLoopParts, _this = this,
        updates = _this.popTypedList2$1$1(updateExpressionCount, type$.Expression),
        t1 = _this.stack,
        conditionStatement = type$.Statement._as(t1.pop$1(null)),
        initializerPart = t1.pop$1(null);
      if (type$.ExpressionStatement._is(conditionStatement)) {
        condition = conditionStatement._expression;
        t1 = conditionStatement.semicolon;
        t1.toString;
        rightSeparator = t1;
      } else {
        rightSeparator = type$.EmptyStatement._as(conditionStatement).semicolon;
        condition = null;
      }
      t1 = type$.nullable_List_Expression;
      t2 = type$.JSArray_Expression;
      t3 = _this.ast;
      t4 = type$.NodeListImpl_Expression;
      if (type$.VariableDeclarationStatement._is(initializerPart)) {
        t5 = initializerPart._variableList;
        t3.toString;
        t1._as(updates);
        forLoopParts = new U.ForPartsWithDeclarationsImpl(t5, leftSeparator, condition, rightSeparator, new U.NodeListImpl(H._setArrayType([], t2), t4));
        forLoopParts.ForPartsImpl$4(leftSeparator, condition, rightSeparator, updates);
        forLoopParts._becomeParentOf$1$1(t5, type$.VariableDeclarationListImpl);
      } else {
        type$.nullable_Expression._as(initializerPart);
        t3.toString;
        t1._as(updates);
        forLoopParts = new U.ForPartsWithExpressionImpl(initializerPart, leftSeparator, condition, rightSeparator, new U.NodeListImpl(H._setArrayType([], t2), t4));
        forLoopParts.ForPartsImpl$4(leftSeparator, condition, rightSeparator, updates);
        forLoopParts._becomeParentOf$1$1(initializerPart, type$.nullable_ExpressionImpl);
      }
      _this.push$1(forKeyword);
      _this.push$1(leftParen);
      _this.push$1(forLoopParts);
    },
    handleFormalParameterWithoutValue$1(token) {
      this.push$1(C.NullValue_32);
    },
    handleIdentifier$2(token, context) {
      var identifier, t1, metadata, comment, _this = this;
      if (context.inSymbol) {
        _this.push$1(token);
        return;
      }
      identifier = _this.ast.simpleIdentifier$2$isDeclaration(token, context.inDeclaration);
      if (context.inLibraryOrPartOfDeclaration)
        if (!context.isContinuation)
          _this.push$1(H._setArrayType([identifier], type$.JSArray_SimpleIdentifier));
        else
          _this.push$1(identifier);
      else if (context.$eq(0, C.EnumValueDeclarationIdentifierContext_0qv)) {
        t1 = type$.nullable_List_Annotation;
        metadata = t1._as(_this.stack.pop$1(null));
        comment = _this._findComment$2(metadata, token);
        t1._as(metadata);
        t1 = new U.EnumConstantDeclarationImpl(identifier, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
        t1.AnnotatedNodeImpl$2(comment, metadata);
        t1._becomeParentOf$1$1(identifier, type$.SimpleIdentifierImpl);
        _this.push$1(t1);
      } else
        _this.push$1(identifier);
    },
    handleIdentifierList$1(count) {
      var t1 = this.popTypedList$1$1(count, type$.SimpleIdentifier);
      this.push$1(t1 == null ? C.NullValue_25 : t1);
    },
    handleImportPrefix$2(deferredKeyword, asKeyword) {
      var _this = this;
      if (asKeyword == null) {
        _this.push$1(C.NullValue_33);
        _this.push$1(C.NullValue_1);
      } else
        _this.push$1(asKeyword);
      _this.push$1(deferredKeyword == null ? C.NullValue_14 : deferredKeyword);
    },
    handleIndexedExpression$3(question, leftBracket, rightBracket) {
      var t1, index, target, receiver, expression, _this = this, _null = null;
      if (!_this.enableNonNullable)
        _this.reportErrorIfNullableType$1(question);
      t1 = _this.stack;
      index = type$.Expression._as(t1.pop$1(_null));
      target = type$.nullable_Expression._as(t1.pop$1(_null));
      if (target == null) {
        receiver = type$.CascadeExpression._as(t1.pop$1(_null));
        t1 = t1.get$isNotEmpty(t1) ? t1.get$last(t1) : _null;
        type$.Token._as(t1);
        _this.push$1(receiver);
        _this.ast.toString;
        expression = new U.IndexExpressionImpl(t1, _null, question, leftBracket, index, rightBracket);
        expression._becomeParentOf$1$1(index, type$.ExpressionImpl);
        _this.push$1(expression);
      } else {
        _this.ast.toString;
        _this.push$1(U.IndexExpressionImpl$forTarget(target, question, leftBracket, index, rightBracket));
      }
    },
    handleInterpolationExpression$2(leftBracket, rightBracket) {
      var t1,
        expression = type$.Expression._as(this.stack.pop$1(null));
      this.ast.toString;
      t1 = new U.InterpolationExpressionImpl(leftBracket, expression, rightBracket);
      t1._becomeParentOf$1$1(expression, type$.ExpressionImpl);
      this.push$1(t1);
    },
    handleInvalidFunctionBody$1(leftBracket) {
      var block, star,
        t1 = H._setArrayType([], type$.JSArray_Statement),
        t2 = leftBracket.get$endGroup();
      t2.toString;
      this.ast.toString;
      block = U.BlockImpl$(leftBracket, type$.List_Statement._as(t1), t2);
      t2 = this.stack;
      t1 = type$.nullable_Token;
      star = t1._as(t2.pop$1(null));
      this.push$1(U.BlockFunctionBodyImpl$(t1._as(t2.pop$1(null)), star, block));
    },
    handleInvalidMember$1(endToken) {
      this.stack.pop$1(null);
    },
    handleInvalidOperatorName$2(operatorKeyword, token) {
      this.push$1(new G._OperatorName(operatorKeyword, this.ast.simpleIdentifier$2$isDeclaration(token, true)));
    },
    handleInvalidTopLevelBlock$1(token) {
      this.stack.pop$1(null);
    },
    handleInvalidTopLevelDeclaration$1(endToken) {
      this.stack.pop$1(null);
    },
    handleInvalidTypeArguments$1(token) {
      var t1 = this.stack,
        invalidTypeArgs = type$.TypeArgumentList._as(t1.pop$1(null)),
        node = t1.pop$1(null);
      if (type$.ConstructorName._is(node))
        this.push$1(new G._ConstructorNameWithInvalidTypeArgs(node, invalidTypeArgs));
      else
        throw H.wrapException(P.UnimplementedError$("node is an instance of " + J.get$runtimeType$(node).toString$0(0) + " in handleInvalidTypeArguments"));
    },
    handleIsOperator$2(isOperator, not) {
      var t1 = this.stack,
        type = type$.TypeAnnotation._as(t1.pop$1(null)),
        expression = type$.Expression._as(t1.pop$1(null));
      this.ast.toString;
      t1 = new U.IsExpressionImpl(expression, isOperator, not, type);
      t1._becomeParentOf$1$1(expression, type$.ExpressionImpl);
      t1._becomeParentOf$1$1(type, type$.TypeAnnotationImpl);
      this.push$1(t1);
    },
    handleLabel$1(colon) {
      var $name = type$.SimpleIdentifier._as(this.stack.pop$1(null));
      this.ast.toString;
      this.push$1(U.LabelImpl$($name, colon));
    },
    handleLiteralBool$1(token) {
      token.type.toString;
      this.ast.toString;
      this.push$1(new U.BooleanLiteralImpl(token));
    },
    handleLiteralDouble$1(token) {
      P.double_parse(token.get$lexeme());
      this.ast.toString;
      this.push$1(new U.DoubleLiteralImpl(token));
    },
    handleLiteralInt$1(token) {
      H.Primitives_parseInt(token.get$lexeme(), null);
      this.ast.toString;
      this.push$1(new U.IntegerLiteralImpl(token));
    },
    handleLiteralList$4(count, leftBracket, constKeyword, rightBracket) {
      var elements, typeArguments, t1, expressions, _i, _this = this;
      if (_this.enableControlFlowCollections || _this.enableSpreadCollections) {
        elements = _this.popCollectionElements$1(count);
        typeArguments = type$.nullable_TypeArgumentList._as(_this.stack.pop$1(null));
        t1 = H._arrayInstanceType(elements)._eval$1("bool(1)")._as(new G.AstBuilder_handleLiteralList_closure());
        if (!!elements.fixed$length)
          H.throwExpression(P.UnsupportedError$("removeWhere"));
        C.JSArray_methods._removeWhere$2(elements, t1, true);
        _this.push$1(_this.ast.listLiteral$5(constKeyword, typeArguments, leftBracket, elements, rightBracket));
      } else {
        elements = _this.popTypedList$1$1(count, type$.Expression);
        if (elements == null)
          elements = C.List_empty4;
        typeArguments = type$.nullable_TypeArgumentList._as(_this.stack.pop$1(null));
        expressions = H._setArrayType([], type$.JSArray_Expression);
        for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i)
          C.JSArray_methods.add$1(expressions, elements[_i]);
        _this.push$1(_this.ast.listLiteral$5(constKeyword, typeArguments, leftBracket, expressions, rightBracket));
      }
    },
    handleLiteralMapEntry$2(colon, endToken) {
      var t1 = this.stack,
        t2 = type$.Expression,
        value = t2._as(t1.pop$1(null)),
        key = t2._as(t1.pop$1(null));
      this.ast.toString;
      this.push$1(U.MapLiteralEntryImpl$(key, colon, value));
    },
    handleLiteralNull$1(token) {
      this.ast.toString;
      this.push$1(new U.NullLiteralImpl(token));
    },
    handleLiteralSetOrMap$5(count, leftBrace, constKeyword, rightBrace, hasSetEntry) {
      var elements, t1, typeArguments, typeArgCount, isSet, setEntries, t2, t3, _i, elem, t4, mapEntries, t5, t6, next, offset, separator, t7, value, _this = this, _null = null,
        _s15_ = "_becomeParentOf";
      if (_this.enableControlFlowCollections || _this.enableSpreadCollections) {
        elements = _this.popCollectionElements$1(count);
        t1 = H._arrayInstanceType(elements)._eval$1("bool(1)")._as(new G.AstBuilder_handleLiteralSetOrMap_closure());
        if (!!elements.fixed$length)
          H.throwExpression(P.UnsupportedError$("removeWhere"));
        C.JSArray_methods._removeWhere$2(elements, t1, true);
        typeArguments = type$.nullable_TypeArgumentList._as(_this.stack.pop$1(_null));
        _this.ast.toString;
        _this.push$1(U.SetOrMapLiteralImpl$(constKeyword, typeArguments, leftBrace, type$.List_CollectionElement._as(elements), rightBrace));
      } else {
        elements = _this.popTypedList$1$1(count, type$.Object);
        typeArguments = type$.nullable_TypeArgumentList._as(_this.stack.pop$1(_null));
        typeArgCount = typeArguments == null ? _null : typeArguments._ast$_arguments._elements.length;
        if (typeArgCount === 1)
          isSet = true;
        else
          isSet = typeArgCount != null ? false : _null;
        if (isSet == null ? hasSetEntry : isSet) {
          setEntries = H._setArrayType([], type$.JSArray_Expression);
          if (elements != null)
            for (t1 = elements.length, t2 = type$.Expression, t3 = type$.MapLiteralEntry, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i) {
              elem = elements[_i];
              if (t3._is(elem)) {
                C.JSArray_methods.add$1(setEntries, elem._key);
                t4 = elem.separator;
                _this.handleRecoverableError$3(Z._withArgumentsUnexpectedToken(t4), t4, t4);
              } else if (t2._is(elem))
                C.JSArray_methods.add$1(setEntries, elem);
            }
          _this.ast.toString;
          _this.push$1(U.SetOrMapLiteralImpl$(constKeyword, typeArguments, leftBrace, type$.List_CollectionElement._as(setEntries), rightBrace));
        } else {
          mapEntries = H._setArrayType([], type$.JSArray_MapLiteralEntry);
          if (elements != null)
            for (t1 = elements.length, t2 = type$.Expression, t3 = type$.MapLiteralEntry, t4 = type$.ExpressionImpl, t5 = type$.nullable_AstNodeImpl, t6 = _this.ast, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i) {
              elem = elements[_i];
              if (t3._is(elem))
                C.JSArray_methods.add$1(mapEntries, elem);
              else if (t2._is(elem)) {
                next = elem.get$endToken().next;
                offset = next.offset;
                _this.handleRecoverableError$3(Z._withArgumentsExpectedButGot(":"), next, next);
                _this.handleRecoverableError$3(Z._withArgumentsExpectedIdentifier(next), next, next);
                separator = new L.SyntheticToken(C.TokenType_gg4, offset, _null);
                separator._setCommentParent$1(_null);
                $.$get$StringUtilities_INTERNER().toString;
                t7 = new L.SyntheticStringToken(_null, "", C.TokenType_IQp, offset, _null);
                t7._setCommentParent$1(_null);
                value = t6.simpleIdentifier$1(t7);
                H.checkTypeBound(t4, t5, "T", _s15_);
                t7 = elem._ast$_parent = new U.MapLiteralEntryImpl(elem, separator, value);
                H.checkTypeBound(t4, t5, "T", _s15_);
                value._ast$_parent = t7;
                C.JSArray_methods.add$1(mapEntries, t7);
              }
            }
          _this.ast.toString;
          _this.push$1(U.SetOrMapLiteralImpl$(constKeyword, typeArguments, leftBrace, type$.List_CollectionElement._as(mapEntries), rightBrace));
        }
      }
    },
    handleMixinHeader$1(mixinKeyword) {
      var t3, t4, t5, _this = this, _null = null,
        t1 = _this.stack,
        implementsClause = type$.nullable_ImplementsClause._as(t1.pop$1(C.NullValue_25)),
        onClause = type$.nullable_OnClause._as(t1.pop$1(C.NullValue_25)),
        typeParameters = type$.nullable_TypeParameterList._as(t1.pop$1(_null)),
        $name = type$.SimpleIdentifier._as(t1.pop$1(_null)),
        t2 = type$.nullable_List_Annotation,
        metadata = t2._as(t1.pop$1(_null)),
        comment = _this._findComment$2(metadata, mixinKeyword);
      t1 = L.SimpleToken$(C.TokenType_cOk, 0, _null);
      t3 = type$.JSArray_ClassMember;
      t4 = H._setArrayType([], t3);
      t5 = L.SimpleToken$(C.TokenType_2ty, 0, _null);
      _this.ast.toString;
      t2._as(metadata);
      type$.List_ClassMember._as(t4);
      t3 = new U.MixinDeclarationImpl(mixinKeyword, onClause, typeParameters, implementsClause, t1, new U.NodeListImpl(H._setArrayType([], t3), type$.NodeListImpl_ClassMember), t5, $name, comment, new U.NodeListImpl(H._setArrayType([], type$.JSArray_Annotation), type$.NodeListImpl_Annotation));
      t3.AnnotatedNodeImpl$2(comment, metadata);
      t3._becomeParentOf$1$1($name, type$.SimpleIdentifierImpl);
      t3.ClassOrMixinDeclarationImpl$8(comment, metadata, $name, typeParameters, implementsClause, t1, t4, t5);
      t3._becomeParentOf$1$1(t3._onClause, type$.nullable_OnClauseImpl);
      _this.mixinDeclaration = t3;
      C.JSArray_methods.add$1(_this.declarations, t3);
    },
    handleMixinOn$2(onKeyword, typeCount) {
      var types, t1, t2, _this = this;
      if (onKeyword != null) {
        types = _this.popTypedList2$1$1(typeCount, type$.TypeName);
        _this.ast.toString;
        type$.List_TypeName._as(types);
        t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_TypeName), type$.NodeListImpl_TypeName);
        t2 = new U.OnClauseImpl(onKeyword, t1);
        t1._initialize$2(t2, types);
        _this.push$1(t2);
      } else
        _this.push$1(C.NullValue_25);
    },
    handleNamedArgument$1(colon) {
      var t2,
        t1 = this.stack,
        expression = type$.Expression._as(t1.pop$1(null)),
        $name = type$.SimpleIdentifier._as(t1.pop$1(null));
      this.ast.toString;
      t1 = U.LabelImpl$($name, colon);
      t2 = new U.NamedExpressionImpl(t1, expression);
      t2._becomeParentOf$1$1(t1, type$.LabelImpl);
      t2._becomeParentOf$1$1(expression, type$.ExpressionImpl);
      this.push$1(t2);
    },
    handleNamedMixinApplicationWithClause$1(withKeyword) {
      var t1 = type$.List_TypeName,
        mixinTypes = t1._as(this.stack.pop$1(null));
      this.ast.toString;
      this.push$1(U.WithClauseImpl$(withKeyword, t1._as(mixinTypes)));
    },
    handleNativeClause$2(nativeToken, hasName) {
      if (hasName)
        this.nativeName = type$.StringLiteral._as(this.stack.pop$1(null));
      else
        this.nativeName = null;
    },
    handleNativeFunctionBody$2(nativeToken, semicolon) {
      var t2, _this = this,
        t1 = _this.stack;
      t1.pop$1(null);
      t1.pop$1(null);
      t1 = _this.nativeName;
      _this.ast.toString;
      t2 = new U.NativeFunctionBodyImpl(nativeToken, t1, semicolon);
      t2._becomeParentOf$1$1(t1, type$.nullable_StringLiteralImpl);
      _this.push$1(t2);
    },
    handleNewAsIdentifier$1(token) {
      var t1, t2;
      if (!this.enableConstructorTearoffs) {
        t1 = $.$get$ExperimentalFeatures_constructor_tearoffs().enableString;
        t2 = $.$get$ExperimentStatus_currentVersion();
        this.handleRecoverableError$3(Z._withArgumentsExperimentNotEnabled(t1, "" + t2.major + "." + t2.minor + "." + t2.patch), token, token);
      }
    },
    handleNoConstructorReferenceContinuationAfterTypeArguments$1(token) {
      this.push$1(C.NullValue_12);
    },
    handleNoFieldInitializer$1(token) {
      var $name = type$.SimpleIdentifier._as(this.stack.pop$1(null));
      this.ast.toString;
      this.push$1(U.VariableDeclarationImpl$($name, null, null));
    },
    handleNoInitializers$0() {
      this.push$1(C.NullValue_10);
      this.push$1(C.NullValue_11);
    },
    handleNonNullAssertExpression$1(bang) {
      var feature, t1, t2, _this = this;
      if (!_this.enableNonNullable) {
        feature = $.$get$ExperimentalFeatures_non_nullable();
        t1 = feature.enableString;
        t2 = feature.releaseVersion;
        _this.handleRecoverableError$3(Z._withArgumentsExperimentNotEnabled(t1, "" + t2.major + "." + t2.minor + "." + t2.patch), bang, bang);
      } else {
        t1 = type$.Expression._as(_this.stack.pop$1(null));
        _this.ast.toString;
        _this.push$1(U.PostfixExpressionImpl$(t1, bang));
      }
    },
    handleNoVariableInitializer$1(token) {
    },
    handleOperator$1(operatorToken) {
      this.push$1(operatorToken);
    },
    handleOperatorName$2(operatorKeyword, token) {
      this.push$1(new G._OperatorName(operatorKeyword, this.ast.simpleIdentifier$2$isDeclaration(token, true)));
    },
    handleParenthesizedCondition$1(leftParenthesis) {
      this.handleParenthesizedExpression$1(leftParenthesis);
    },
    handleParenthesizedExpression$1(leftParenthesis) {
      var expression = type$.Expression._as(this.stack.pop$1(null)),
        t1 = leftParenthesis.get$endGroup();
      t1.toString;
      this.ast.toString;
      this.push$1(U.ParenthesizedExpressionImpl$(leftParenthesis, expression, t1));
    },
    handleQualified$1(period) {
      var _this = this,
        t1 = _this.stack,
        t2 = type$.SimpleIdentifier,
        identifier = t2._as(t1.pop$1(null)),
        prefix = t1.pop$1(null);
      if (type$.List_dynamic._is(prefix)) {
        J.add$1$ax(prefix, identifier);
        _this.push$1(prefix);
      } else if (t2._is(prefix)) {
        _this.ast.toString;
        _this.push$1(U.PrefixedIdentifierImpl$(prefix, period, identifier));
      } else
        _this.logEvent$1("Qualified with >1 dot");
    },
    handleRecoverableError$3(message, startToken, endToken) {
      var offset;
      if (message === C.MessageCode_Qy4 && this.allowNativeClause)
        return;
      message.get$message(message);
      if (message.get$code(message).analyzerCodes == null && startToken instanceof S.ErrorToken)
        A.translateErrorToken(startToken, this.errorReporter.get$reportScannerError());
      else {
        offset = startToken.offset;
        this.addProblem$3(message, offset, endToken.offset + endToken.get$length(endToken) - offset);
      }
    },
    handleRecoverClassHeader$0() {
      var t1 = this.stack,
        implementsClause = type$.nullable_ImplementsClause._as(t1.pop$1(C.NullValue_25)),
        withClause = type$.nullable_WithClause._as(t1.pop$1(C.NullValue_45)),
        extendsClause = type$.nullable_ExtendsClause._as(t1.pop$1(C.NullValue_17)),
        declaration = type$.ClassDeclarationImpl._as(C.JSArray_methods.get$last(this.declarations));
      if (extendsClause != null) {
        t1 = declaration._extendsClause;
        if ((t1 == null ? null : t1._superclass) == null)
          declaration.set$_extendsClause(declaration._becomeParentOf$1$1(extendsClause, type$.nullable_ExtendsClauseImpl));
      }
      if (withClause != null) {
        t1 = declaration._withClause;
        if (t1 == null)
          declaration.set$_withClause(declaration._becomeParentOf$1$1(withClause, type$.nullable_WithClauseImpl));
        else
          t1._mixinTypes.addAll$1(0, withClause._mixinTypes);
      }
      if (implementsClause != null) {
        t1 = declaration._implementsClause;
        if (t1 == null)
          declaration.set$_implementsClause(declaration._becomeParentOf$1$1(implementsClause, type$.nullable_ImplementsClauseImpl));
        else
          t1._interfaces.addAll$1(0, implementsClause._interfaces);
      }
    },
    handleRecoverImport$1(semicolon) {
      var t1 = this.stack,
        combinators = type$.nullable_List_Combinator._as(t1.pop$1(null)),
        t2 = type$.nullable_Token,
        deferredKeyword = t2._as(t1.pop$1(C.NullValue_14)),
        asKeyword = t2._as(t1.pop$1(C.NullValue_1)),
        prefix = type$.nullable_SimpleIdentifier._as(t1.pop$1(C.NullValue_33)),
        configurations = type$.nullable_List_Configuration._as(t1.pop$1(null)),
        directive = type$.ImportDirectiveImpl._as(C.JSArray_methods.get$last(this.directives));
      if (combinators != null)
        directive._combinators.addAll$1(0, combinators);
      if (directive.deferredKeyword == null)
        directive.deferredKeyword = deferredKeyword;
      if (directive.asKeyword == null && asKeyword != null) {
        directive.asKeyword = asKeyword;
        directive.set$_prefix(directive._becomeParentOf$1$1(prefix, type$.nullable_SimpleIdentifierImpl));
      }
      if (configurations != null)
        directive._configurations.addAll$1(0, configurations);
      if (semicolon != null)
        directive.semicolon = semicolon;
    },
    handleRecoverMixinHeader$0() {
      var t2,
        t1 = this.stack,
        implementsClause = type$.nullable_ImplementsClause._as(t1.pop$1(C.NullValue_25)),
        onClause = type$.nullable_OnClause._as(t1.pop$1(C.NullValue_25));
      if (onClause != null) {
        t1 = this.mixinDeclaration;
        t2 = t1._onClause;
        if (t2 == null)
          t1.set$_onClause(t1._becomeParentOf$1$1(onClause, type$.nullable_OnClauseImpl));
        else
          t2._superclassConstraints.addAll$1(0, onClause._superclassConstraints);
      }
      if (implementsClause != null) {
        t1 = this.mixinDeclaration;
        t2 = t1._implementsClause;
        if (t2 == null)
          t1.set$_implementsClause(t1._becomeParentOf$1$1(implementsClause, type$.nullable_ImplementsClauseImpl));
        else
          t2._interfaces.addAll$1(0, implementsClause._interfaces);
      }
    },
    handleScript$1(token) {
      this.ast.toString;
      this.scriptTag = new U.ScriptTagImpl(token);
    },
    handleSend$2(beginToken, endToken) {
      var receiver, _this = this,
        t1 = _this.stack,
        $arguments = type$.nullable_MethodInvocationImpl._as(t1.pop$1(null)),
        t2 = type$.nullable_TypeArgumentListImpl,
        typeArguments = t2._as(t1.pop$1(null));
      if ($arguments != null) {
        receiver = type$.Expression._as(t1.pop$1(null));
        if (receiver instanceof U.SimpleIdentifierImpl) {
          $arguments.set$_methodName($arguments._becomeParentOf$1$1(receiver, type$.SimpleIdentifierImpl));
          if (typeArguments != null)
            $arguments.set$_typeArguments($arguments._becomeParentOf$1$1(typeArguments, t2));
          _this.push$1($arguments);
        } else {
          t1 = $arguments._argumentList;
          _this.ast.toString;
          _this.push$1(U.FunctionExpressionInvocationImpl$(receiver, typeArguments, t1));
        }
      }
    },
    handleShowHideIdentifier$2(modifier, identifier) {
      var $name = this.ast.simpleIdentifier$1(identifier),
        element = new U.ShowHideElementImpl(modifier, $name);
      element._becomeParentOf$1$1($name, type$.SimpleIdentifierImpl);
      this.push$1(element);
    },
    handleSpreadExpression$1(spreadToken) {
      var t1, feature, t2, _this = this,
        expression = type$.Expression._as(_this.stack.pop$1(null));
      if (_this.enableSpreadCollections) {
        _this.ast.toString;
        t1 = new U.SpreadElementImpl(spreadToken, expression);
        t1._becomeParentOf$1$1(expression, type$.ExpressionImpl);
        _this.push$1(t1);
      } else {
        feature = $.$get$Feature_spread_collections();
        t1 = feature.enableString;
        t2 = feature.releaseVersion;
        _this.handleRecoverableError$3(Z._withArgumentsExperimentNotEnabled(t1, "" + t2.major + "." + t2.minor + "." + t2.patch), spreadToken, spreadToken);
        _this.push$1(C.C__InvalidCollectionElement);
      }
    },
    handleStringJuxtaposition$2(startToken, literalCount) {
      var t1, t2,
        strings = this.popTypedList2$1$1(literalCount, type$.StringLiteral);
      this.ast.toString;
      type$.List_StringLiteral._as(strings);
      t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_StringLiteral), type$.NodeListImpl_StringLiteral);
      t2 = new U.AdjacentStringsImpl(t1);
      t1._initialize$2(t2, strings);
      this.push$1(t2);
    },
    handleStringPart$1(literalString) {
      this.push$1(literalString);
    },
    handleSuperExpression$2(superKeyword, context) {
      this.ast.toString;
      this.push$1(new U.SuperExpressionImpl(superKeyword));
    },
    handleSymbolVoid$1(voidKeyword) {
      this.push$1(voidKeyword);
    },
    handleThisExpression$2(thisKeyword, context) {
      this.ast.toString;
      this.push$1(new U.ThisExpressionImpl(thisKeyword));
    },
    handleThrowExpression$2(throwToken, endToken) {
      var t2,
        t1 = type$.Expression._as(this.stack.pop$1(null));
      this.ast.toString;
      t2 = new U.ThrowExpressionImpl(throwToken, t1);
      t2._becomeParentOf$1$1(t1, type$.ExpressionImpl);
      this.push$1(t2);
    },
    handleType$2(beginToken, questionMark) {
      var t1, $arguments, $name, _this = this;
      if (!_this.enableNonNullable)
        _this.reportErrorIfNullableType$1(questionMark);
      t1 = _this.stack;
      $arguments = type$.nullable_TypeArgumentList._as(t1.pop$1(null));
      $name = type$.Identifier._as(t1.pop$1(null));
      _this.ast.toString;
      _this.push$1(U.TypeNameImpl$($name, $arguments, questionMark));
    },
    handleTypeArgumentApplication$1(openAngleBracket) {
      var t2, _this = this,
        t1 = _this.stack,
        typeArguments = type$.TypeArgumentList._as(t1.pop$1(null)),
        receiver = type$.Expression._as(t1.pop$1(null));
      if (!_this.enableConstructorTearoffs) {
        t1 = $.$get$ExperimentalFeatures_constructor_tearoffs().enableString;
        t2 = $.$get$ExperimentStatus_currentVersion();
        _this.handleRecoverableError$3(Z._withArgumentsExperimentNotEnabled(t1, "" + t2.major + "." + t2.minor + "." + t2.patch), typeArguments.leftBracket, typeArguments.rightBracket);
      }
      _this.ast.toString;
      t1 = new U.FunctionReferenceImpl(receiver, typeArguments);
      t1._becomeParentOf$1$1(receiver, type$.ExpressionImpl);
      t1._becomeParentOf$1$1(typeArguments, type$.nullable_TypeArgumentListImpl);
      _this.push$1(t1);
    },
    handleTypeVariablesDefined$2(token, count) {
      this.push$1(this.popTypedList$1$1(count, type$.TypeParameter));
    },
    handleUnaryPostfixAssignmentExpression$1(operator) {
      var _this = this,
        expression = type$.Expression._as(_this.stack.pop$1(null));
      if (!expression.get$isAssignable())
        _this.handleRecoverableError$3(C.MessageCode_EQQ, operator, operator);
      _this.ast.toString;
      _this.push$1(U.PostfixExpressionImpl$(expression, operator));
    },
    handleUnaryPrefixAssignmentExpression$1(operator) {
      var _this = this,
        expression = type$.Expression._as(_this.stack.pop$1(null));
      if (!expression.get$isAssignable())
        _this.handleRecoverableError$3(C.MessageCode_xny, expression.get$endToken(), expression.get$endToken());
      _this.ast.toString;
      _this.push$1(U.PrefixExpressionImpl$(operator, expression));
    },
    handleUnaryPrefixExpression$1(operator) {
      var t1 = type$.Expression._as(this.stack.pop$1(null));
      this.ast.toString;
      this.push$1(U.PrefixExpressionImpl$(operator, t1));
    },
    handleValuedFormalParameter$2(equals, token) {
      this.push$1(new G._ParameterDefaultValue(equals, type$.Expression._as(this.stack.pop$1(null))));
    },
    handleVoidKeyword$1(voidKeyword) {
      this.handleIdentifier$2(voidKeyword, C.TypeReferenceIdentifierContext_27z);
      this.push$1(C.NullValue_39);
      this.handleType$2(voidKeyword, null);
    },
    handleVoidKeywordWithTypeArguments$1(voidKeyword) {
      var _this = this,
        $arguments = type$.TypeArgumentList._as(_this.stack.pop$1(null));
      _this.handleIdentifier$2(voidKeyword, C.TypeReferenceIdentifierContext_27z);
      _this.push$1($arguments);
      _this.handleType$2(voidKeyword, null);
    },
    internalProblem$3(message, charOffset, uri) {
      throw H.wrapException(P.UnsupportedError$(message.get$message(message)));
    },
    parseCommentReferences$1(dartdoc) {
      var sourcesAndOffsets, count, index, index0, referenceSource, referenceOffset, result, t2, _this = this,
        t1 = _this.get$parser();
      t1.toString;
      t1 = (J.startsWith$1$s(dartdoc.get$lexeme(), "///") ? t1.parseReferencesInSingleLineComments$1(dartdoc) : t1.parseReferencesInMultiLineComment$1(dartdoc)) * 2;
      sourcesAndOffsets = P.List_List$filled(t1, null, false, type$.dynamic);
      _this.popList$2(t1, sourcesAndOffsets);
      for (count = 0, index = 0; index < t1;) {
        index0 = index + 1;
        referenceSource = H._asStringS(sourcesAndOffsets[index]);
        index = index0 + 1;
        if (index0 >= t1)
          return H.ioore(sourcesAndOffsets, index0);
        referenceOffset = H._asIntS(sourcesAndOffsets[index0]);
        result = K._tokenizeAndRecover(T.StringScanner$(referenceSource, null, false, null), referenceSource);
        if (!result.hasErrors) {
          t2 = _this.__AstBuilder_parser;
          if (t2 === $)
            t2 = H.throwExpression(H.LateError$fieldNI("parser"));
          if (t2.parseOneCommentReference$2(result.tokens, referenceOffset))
            ++count;
        }
      }
      t1 = _this.popTypedList$1$1(count, type$.CommentReference);
      return t1 == null ? C.List_empty3 : t1;
    },
    popCollectionElements$1(count) {
      var index, t1, t2,
        elements = H._setArrayType([], type$.JSArray_CollectionElement);
      for (index = count - 1, t1 = this.stack, t2 = type$.CollectionElement; index >= 0; --index)
        C.JSArray_methods.add$1(elements, t2._as(t1.pop$1(null)));
      t1 = type$.ReversedListIterable_CollectionElement;
      return P.List_List$of(new H.ReversedListIterable(elements, t1), true, t1._eval$1("ListIterable.E"));
    },
    popList$2(n, list) {
      if (n === 0)
        return null;
      return this.stack.popList$1$3(n, list, null, type$.dynamic);
    },
    popTypedList$1$1(count, $T) {
      var tailList, t1;
      if (count === 0)
        return null;
      tailList = P.List_List$filled(count, null, true, $T._eval$1("0?"));
      this.stack.popList$1$3(count, tailList, null, $T);
      t1 = A.IterableNullableExtension_whereNotNull(tailList, $T);
      return P.List_List$of(t1, true, t1.$ti._eval$1("Iterable.E"));
    },
    popTypedList2$1$1(count, $T) {
      var t1, i,
        result = H._setArrayType([], $T._eval$1("JSArray<0>"));
      for (t1 = this.stack, i = 0; i < count; ++i)
        C.JSArray_methods.add$1(result, $T._as(t1.pop$1(null)));
      t1 = $T._eval$1("ReversedListIterable<0>");
      return P.List_List$of(new H.ReversedListIterable(result, t1), true, t1._eval$1("ListIterable.E"));
    },
    pushForControlFlowInfo$5(awaitToken, forToken, leftParenthesis, forLoopParts, entry) {
      var t1, t2, feature, _this = this;
      if (J.$eq$(entry, C.C__InvalidCollectionElement))
        _this.push$1(C.C__InvalidCollectionElement);
      else if (_this.enableControlFlowCollections) {
        t1 = leftParenthesis.get$endGroup();
        t1.toString;
        type$.CollectionElement._as(entry);
        _this.ast.toString;
        t2 = type$.CollectionElementImpl;
        t2._as(entry);
        t1 = new U.ForElementImpl(awaitToken, forToken, leftParenthesis, forLoopParts, t1, entry);
        t1._becomeParentOf$1$1(forLoopParts, type$.ForLoopPartsImpl);
        t1._becomeParentOf$1$1(entry, t2);
        _this.push$1(t1);
      } else {
        feature = $.$get$Feature_control_flow_collections();
        t1 = feature.enableString;
        t2 = feature.releaseVersion;
        _this.handleRecoverableError$3(Z._withArgumentsExperimentNotEnabled(t1, "" + t2.major + "." + t2.minor + "." + t2.patch), forToken, forToken);
        _this.push$1(C.C__InvalidCollectionElement);
      }
    },
    pushIfControlFlowInfo$5(ifToken, condition, thenElement, elseToken, elseElement) {
      var t1, t2, t3, t4, t5, feature, _this = this;
      if (thenElement === C.C__InvalidCollectionElement || elseElement === C.C__InvalidCollectionElement)
        _this.push$1(C.C__InvalidCollectionElement);
      else if (_this.enableControlFlowCollections) {
        t1 = condition.leftParenthesis;
        t2 = condition._expression;
        t3 = condition.rightParenthesis;
        _this.ast.toString;
        t4 = type$.CollectionElementImpl;
        t4._as(thenElement);
        t5 = type$.nullable_CollectionElementImpl;
        t5._as(elseElement);
        t3 = new U.IfElementImpl(ifToken, t1, t2, t3, elseToken, thenElement, elseElement);
        t3._becomeParentOf$1$1(t2, type$.ExpressionImpl);
        t3._becomeParentOf$1$1(thenElement, t4);
        t3._becomeParentOf$1$1(elseElement, t5);
        _this.push$1(t3);
      } else {
        feature = $.$get$ExperimentalFeatures_control_flow_collections();
        t1 = feature.enableString;
        t2 = feature.releaseVersion;
        _this.handleRecoverableError$3(Z._withArgumentsExperimentNotEnabled(t1, "" + t2.major + "." + t2.minor + "." + t2.patch), ifToken, ifToken);
        _this.push$1(C.C__InvalidCollectionElement);
      }
    },
    reportErrorIfNullableType$1(questionMark) {
      var feature, t1, t2;
      if (questionMark != null) {
        feature = $.$get$ExperimentalFeatures_non_nullable();
        t1 = feature.enableString;
        t2 = feature.releaseVersion;
        this.handleRecoverableError$3(Z._withArgumentsExperimentNotEnabled(t1, "" + t2.major + "." + t2.minor + "." + t2.patch), questionMark, questionMark);
      }
    },
    reportErrorIfSuper$1(expression) {
      var t1;
      if (type$.SuperExpression._is(expression)) {
        t1 = expression.superKeyword;
        this.handleRecoverableError$3(C.MessageCode_xny, t1, t1);
      }
    },
    _findComment$2(metadata, tokenAfterMetadata) {
      var dartdoc, t1, index, t2, references, tokens, _this = this;
      type$.nullable_List_Annotation._as(metadata);
      dartdoc = _this.get$parser().findDartDoc$1(tokenAfterMetadata);
      if (dartdoc == null) {
        if (metadata == null)
          return null;
        t1 = J.getInterceptor$asx(metadata);
        index = t1.get$length(metadata);
        for (; true;) {
          if (index === 0)
            return null;
          --index;
          t2 = _this.__AstBuilder_parser;
          if (t2 === $)
            t2 = H.throwExpression(H.LateError$fieldNI("parser"));
          dartdoc = t2.findDartDoc$1(t1.$index(metadata, index).atSign);
          if (dartdoc != null)
            break;
        }
      }
      references = _this.parseCommentReferences$1(dartdoc);
      tokens = H._setArrayType([dartdoc], type$.JSArray_Token);
      if (J.startsWith$1$s(dartdoc.get$lexeme(), "///")) {
        dartdoc = dartdoc.next;
        for (; dartdoc != null;) {
          if (J.startsWith$1$s(dartdoc.get$lexeme(), "///"))
            C.JSArray_methods.add$1(tokens, dartdoc);
          dartdoc = dartdoc.next;
        }
      }
      _this.ast.toString;
      type$.List_Token._as(tokens);
      type$.nullable_List_CommentReference._as(references);
      t1 = new U.NodeListImpl(H._setArrayType([], type$.JSArray_CommentReference), type$.NodeListImpl_CommentReference);
      t2 = new U.CommentImpl(tokens, t1);
      t1._initialize$2(t2, references);
      return t2;
    },
    _handleInstanceCreation$1(token) {
      var constructorName, typeArguments, t2,
        t1 = this.stack,
        $arguments = type$.MethodInvocation._as(t1.pop$1(null)),
        object = t1.pop$1(null);
      if (object instanceof G._ConstructorNameWithInvalidTypeArgs) {
        constructorName = object.name;
        typeArguments = object.invalidTypeArgs;
      } else {
        type$.ConstructorName._as(object);
        constructorName = object;
        typeArguments = null;
      }
      t1 = $arguments._argumentList;
      this.ast.toString;
      t2 = new U.InstanceCreationExpressionImpl(token, constructorName, typeArguments, t1);
      t2._becomeParentOf$1$1(constructorName, type$.ConstructorNameImpl);
      t2._becomeParentOf$1$1(typeArguments, type$.nullable_TypeArgumentListImpl);
      t2._becomeParentOf$1$1(t1, type$.ArgumentListImpl);
      this.push$1(t2);
    },
    _syntheticArgumentList$1(precedingToken) {
      var syntheticOffset = precedingToken.offset + precedingToken.get$length(precedingToken),
        t1 = L.SyntheticToken$(C.TokenType_5uk, syntheticOffset),
        t2 = H._setArrayType([], type$.JSArray_Expression),
        t3 = L.SyntheticToken$(C.TokenType_coy, syntheticOffset);
      this.ast.toString;
      return U.ArgumentListImpl$(t1, type$.List_Expression._as(t2), t3);
    },
    _toAnalyzerParameterKind$2(type, requiredKeyword) {
      if (type === C.FormalParameterKind_2)
        return C.ParameterKind_POSITIONAL_1_true_false;
      else if (type === C.FormalParameterKind_1) {
        if (requiredKeyword != null)
          return C.ParameterKind_NAMED_REQUIRED_2_false_true;
        return C.ParameterKind_NAMED_3_false_true;
      } else
        return C.ParameterKind_REQUIRED_0_false_false;
    }
  };
  G.AstBuilder_checkFieldFormalParameters_closure.prototype = {
    call$1(param) {
      var t1;
      type$.FormalParameter._as(param);
      if (type$.FieldFormalParameter._is(param)) {
        t1 = param.thisKeyword;
        this.$this.handleRecoverableError$3(C.MessageCode_yHy, t1, t1);
      }
    },
    $signature: 37
  };
  G.AstBuilder_endSwitchBlock_closure.prototype = {
    call$1(members) {
      return type$.List_SwitchMember._as(members);
    },
    $signature: 38
  };
  G.AstBuilder_handleLiteralList_closure.prototype = {
    call$1(e) {
      return type$.CollectionElement._as(e) === C.C__InvalidCollectionElement;
    },
    $signature: 20
  };
  G.AstBuilder_handleLiteralSetOrMap_closure.prototype = {
    call$1(e) {
      return type$.CollectionElement._as(e) === C.C__InvalidCollectionElement;
    },
    $signature: 20
  };
  G._ConstructorNameWithInvalidTypeArgs.prototype = {};
  G._InvalidCollectionElement.prototype = {
    get$beginToken() {
      return this.noSuchMethod$1(0, H.createUnmangledInvocationMirror(C.Symbol_beginToken, "get$beginToken", 1, [], [], 0));
    },
    get$endToken() {
      return this.noSuchMethod$1(0, H.createUnmangledInvocationMirror(C.Symbol_endToken, "get$endToken", 1, [], [], 0));
    },
    get$length(_) {
      return this.noSuchMethod$1(0, H.createUnmangledInvocationMirror(C.Symbol_length, "get$length", 1, [], [], 0));
    },
    accept$1$1(_, visitor, $E) {
      return $E._eval$1("0?")._as(this.noSuchMethod$1(0, H.createUnmangledInvocationMirror(C.Symbol_accept, "accept$1$1", 0, [$E._eval$1("AstVisitor<0>")._as(visitor), $E], [], 1)));
    },
    noSuchMethod$1(_, invocation) {
      return this.super$Object$noSuchMethod(0, type$.Invocation._as(invocation));
    },
    $isSyntacticEntity: 1,
    $isAstNode: 1,
    $isCollectionElement: 1
  };
  G._Modifiers.prototype = {
    get$constKeyword() {
      var t1 = this.finalConstOrVarKeyword;
      return "const" === (t1 == null ? null : t1.get$lexeme()) ? this.finalConstOrVarKeyword : null;
    }
  };
  G._OperatorName.prototype = {};
  G._OptionalFormalParameters.prototype = {};
  G._ParameterDefaultValue.prototype = {};
  G._RedirectingFactoryBody.prototype = {};
  N.FastaErrorReporter.prototype = {
    reportByCode$4(analyzerCode, offset, $length, message) {
      var _this = this, _s4_ = "name",
        $arguments = message.get$$arguments(),
        t1 = new N.FastaErrorReporter_reportByCode_lexeme($arguments);
      switch (analyzerCode) {
        case "ASYNC_FOR_IN_WRONG_CONTEXT":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_O16, offset, $length);
          return;
        case "ASYNC_KEYWORD_USED_AS_IDENTIFIER":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_G0K, offset, $length);
          return;
        case "AWAIT_IN_WRONG_CONTEXT":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_65l, offset, $length);
          return;
        case "BUILT_IN_IDENTIFIER_AS_TYPE":
          _this.errorReporter.reportErrorForOffset$4(C.CompileTimeErrorCode_D1o, offset, $length, [t1.call$0()]);
          return;
        case "CONCRETE_CLASS_WITH_ABSTRACT_MEMBER":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_0, offset, $length);
          return;
        case "CONST_CONSTRUCTOR_WITH_BODY":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_2Zi, offset, $length);
          return;
        case "CONST_NOT_INITIALIZED":
          _this.errorReporter.reportErrorForOffset$4(C.CompileTimeErrorCode_qJO, offset, $length, [H._asStringS($arguments.$index(0, _s4_))]);
          return;
        case "DEFAULT_VALUE_IN_FUNCTION_TYPE":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_THA, offset, $length);
          return;
        case "LABEL_UNDEFINED":
          _this.errorReporter.reportErrorForOffset$4(C.CompileTimeErrorCode_4QF, offset, $length, [$arguments.$index(0, _s4_)]);
          return;
        case "EMPTY_ENUM_BODY":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_XH7, offset, $length);
          return;
        case "EXPECTED_CLASS_MEMBER":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_zJs, offset, $length);
          return;
        case "EXPECTED_EXECUTABLE":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_Gl7, offset, $length);
          return;
        case "EXPECTED_STRING_LITERAL":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_Aij, offset, $length);
          return;
        case "EXPECTED_TOKEN":
          _this.errorReporter.reportErrorForOffset$4(C.ParserErrorCode_CAD, offset, $length, [$arguments.$index(0, "string")]);
          return;
        case "EXPECTED_TYPE_NAME":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_ciA, offset, $length);
          return;
        case string$.FIELD_:
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_2NL, offset, $length);
          return;
        case "FINAL_NOT_INITIALIZED":
          _this.errorReporter.reportErrorForOffset$4(C.CompileTimeErrorCode_EoN, offset, $length, [H._asStringS($arguments.$index(0, _s4_))]);
          return;
        case "FINAL_NOT_INITIALIZED_CONSTRUCTOR_1":
          _this.errorReporter.reportErrorForOffset$4(C.CompileTimeErrorCode_Odn, offset, $length, [H._asStringS($arguments.$index(0, _s4_))]);
          return;
        case "FUNCTION_TYPED_PARAMETER_VAR":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_VOZ, offset, $length);
          return;
        case "GETTER_WITH_PARAMETERS":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_23h, offset, $length);
          return;
        case "ILLEGAL_CHARACTER":
          _this.errorReporter.reportErrorForOffset$3(C.ScannerErrorCode_66f, offset, $length);
          return;
        case "INVALID_ASSIGNMENT":
          _this.errorReporter.reportErrorForOffset$4(C.CompileTimeErrorCode_sCM, offset, $length, [$arguments.$index(0, "type"), $arguments.$index(0, "type2")]);
          return;
        case "INVALID_INLINE_FUNCTION_TYPE":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_EyN, offset, $length);
          return;
        case "INVALID_LITERAL_IN_CONFIGURATION":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_ECL, offset, $length);
          return;
        case "IMPORT_OF_NON_LIBRARY":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_wIv, offset, $length);
          return;
        case "INVALID_CAST_FUNCTION":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_gRf, offset, $length);
          return;
        case "INVALID_CAST_FUNCTION_EXPR":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_CWV, offset, $length);
          return;
        case "INVALID_CAST_LITERAL_LIST":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_fw6, offset, $length);
          return;
        case "INVALID_CAST_LITERAL_MAP":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_IwT, offset, $length);
          return;
        case "INVALID_CAST_LITERAL_SET":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_UCF, offset, $length);
          return;
        case "INVALID_CAST_METHOD":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_GKK, offset, $length);
          return;
        case "INVALID_CAST_NEW_EXPR":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_IVQ, offset, $length);
          return;
        case "INVALID_CODE_POINT":
          _this.errorReporter.reportErrorForOffset$4(C.ParserErrorCode_sxw, offset, $length, ["\\u{...}"]);
          return;
        case "INVALID_GENERIC_FUNCTION_TYPE":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_E6F, offset, $length);
          return;
        case "INVALID_METHOD_OVERRIDE":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_yBw, offset, $length);
          return;
        case "INVALID_MODIFIER_ON_SETTER":
          _this._reportByCode$4(C.CompileTimeErrorCode_00, message, offset, $length);
          return;
        case "INVALID_OPERATOR_FOR_SUPER":
          _this._reportByCode$4(C.ParserErrorCode_k0M, message, offset, $length);
          return;
        case "INVALID_SUPER_INVOCATION":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_iL9, offset, $length);
          return;
        case "MISSING_DIGIT":
          _this.errorReporter.reportErrorForOffset$3(C.ScannerErrorCode_IQy, offset, $length);
          return;
        case "MISSING_ENUM_BODY":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_Yu2, offset, $length);
          return;
        case "MISSING_FUNCTION_BODY":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_Iev, offset, $length);
          return;
        case "MISSING_FUNCTION_PARAMETERS":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_6Vn, offset, $length);
          return;
        case "MISSING_HEX_DIGIT":
          _this.errorReporter.reportErrorForOffset$3(C.ScannerErrorCode_wsa, offset, $length);
          return;
        case "MISSING_IDENTIFIER":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_xxH, offset, $length);
          return;
        case "MISSING_METHOD_PARAMETERS":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_qJw, offset, $length);
          return;
        case "MISSING_STAR_AFTER_SYNC":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_GDx, offset, $length);
          return;
        case "MISSING_TYPEDEF_PARAMETERS":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_46c, offset, $length);
          return;
        case "MULTIPLE_IMPLEMENTS_CLAUSES":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_6Vh, offset, $length);
          return;
        case "NAMED_FUNCTION_EXPRESSION":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_VaT, offset, $length);
          return;
        case "NAMED_PARAMETER_OUTSIDE_GROUP":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_uT8, offset, $length);
          return;
        case "NON_PART_OF_DIRECTIVE_IN_PART":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_qlV, offset, $length);
          return;
        case "NON_SYNC_FACTORY":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_IcR, offset, $length);
          return;
        case "POSITIONAL_AFTER_NAMED_ARGUMENT":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_2Lp, offset, $length);
          return;
        case "RECURSIVE_CONSTRUCTOR_REDIRECT":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_ckJ, offset, $length);
          return;
        case "RETURN_IN_GENERATOR":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_lm1, offset, $length);
          return;
        case "SUPER_IN_REDIRECTING_CONSTRUCTOR":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_SfA, offset, $length);
          return;
        case "TYPE_PARAMETER_ON_OPERATOR":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_oqh, offset, $length);
          return;
        case "UNDEFINED_CLASS":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_G7N, offset, $length);
          return;
        case "UNDEFINED_GETTER":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_lQF, offset, $length);
          return;
        case "UNDEFINED_METHOD":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_VWp, offset, $length);
          return;
        case "UNDEFINED_SETTER":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_SW7, offset, $length);
          return;
        case "UNEXPECTED_DOLLAR_IN_STRING":
          _this.errorReporter.reportErrorForOffset$3(C.ScannerErrorCode_gXq, offset, $length);
          return;
        case "UNEXPECTED_TOKEN":
          _this.errorReporter.reportErrorForOffset$4(C.ParserErrorCode_uUr, offset, $length, [t1.call$0()]);
          return;
        case "UNTERMINATED_MULTI_LINE_COMMENT":
          _this.errorReporter.reportErrorForOffset$3(C.ScannerErrorCode_g9V, offset, $length);
          return;
        case "UNTERMINATED_STRING_LITERAL":
          _this.errorReporter.reportErrorForOffset$3(C.ScannerErrorCode_CJo, offset, $length);
          return;
        case "WRONG_NUMBER_OF_PARAMETERS_FOR_SETTER":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_6t1, offset, $length);
          return;
        case string$.WRONG_:
          t1 = _this.errorReporter;
          t1._errorListener.onError$1(0, V.AnalysisError$withNamedArguments(t1._listener$_source, offset, $length, C.CompileTimeErrorCode_86y, message.get$$arguments()));
          return;
        case "WRONG_SEPARATOR_FOR_POSITIONAL_PARAMETER":
          _this.errorReporter.reportErrorForOffset$3(C.ParserErrorCode_iLh, offset, $length);
          return;
        case "YIELD_IN_NON_GENERATOR":
          _this.errorReporter.reportErrorForOffset$3(C.CompileTimeErrorCode_s0P, offset, $length);
          return;
      }
    },
    reportMessage$3(message, offset, $length) {
      var errorCode, t1,
        code = message.get$code(message),
        index = code.index;
      if (index > 0 && index < 118) {
        if (index < 0 || index >= 118)
          return H.ioore($.fastaAnalyzerErrorCodes, index);
        errorCode = $.fastaAnalyzerErrorCodes[index];
        if (errorCode != null) {
          t1 = this.errorReporter;
          t1._errorListener.onError$1(0, V.AnalysisError$withNamedArguments(t1._listener$_source, offset, $length, errorCode, message.get$$arguments()));
          return;
        }
      }
      t1 = code.analyzerCodes;
      this.reportByCode$4(t1 == null ? null : C.JSArray_methods.get$first(t1), offset, $length, message);
    },
    reportScannerError$3(errorCode, offset, $arguments) {
      this.errorReporter.reportErrorForOffset$4(errorCode, offset, 1, $arguments);
    },
    _reportByCode$4(errorCode, message, offset, $length) {
      var t1 = this.errorReporter;
      t1._errorListener.onError$1(0, V.AnalysisError$withNamedArguments(t1._listener$_source, offset, $length, errorCode, message.get$$arguments()));
    }
  };
  N.FastaErrorReporter_reportByCode_lexeme.prototype = {
    call$0() {
      return type$.Token._as(this.$arguments.$index(0, "lexeme")).get$lexeme();
    },
    $signature: 40
  };
  F.formatList_closure.prototype = {
    call$1(match) {
      var index,
        t1 = match.group$1(1);
      t1.toString;
      index = P.int_parse(t1, null);
      t1 = this.$arguments;
      if (index < 0 || index >= t1.length)
        return H.ioore(t1, index);
      return J.toString$0$(t1[index]);
    },
    $signature: 18
  };
  X.Parser0.prototype = {
    get$fastaParser() {
      var t1 = this.__Parser_fastaParser;
      return t1 === $ ? H.throwExpression(H.LateError$fieldNI("fastaParser")) : t1;
    }
  };
  Z.Source.prototype = {};
  Q.ParameterKind.prototype = {
    get$hashCode(_) {
      return this.ordinal;
    },
    toString$0(_) {
      return this.name;
    }
  };
  K.StringSource.prototype = {
    get$hashCode(_) {
      return C.JSString_methods.get$hashCode(this._string_source$_contents) ^ C.JSString_methods.get$hashCode(this.fullName);
    },
    $eq(_, object) {
      if (object == null)
        return false;
      return object instanceof K.StringSource && object._string_source$_contents === this._string_source$_contents && object.fullName === this.fullName;
    },
    toString$0(_) {
      return "StringSource (" + this.fullName + ")";
    }
  };
  Q.CopyOnWriteList.prototype = {
    get$length(_) {
      return J.get$length$asx(this._copy_on_write_list$_list);
    },
    $index(_, index) {
      return J.$index$asx(this._copy_on_write_list$_list, index);
    },
    any$1(_, test) {
      this.$ti._eval$1("bool(1)")._as(test);
      return J.any$1$ax(this._copy_on_write_list$_list, test);
    },
    fold$1$2(_, initialValue, combine, $T) {
      $T._as(initialValue);
      this.$ti._bind$1($T)._eval$1("1(1,2)")._as(combine);
      return J.fold$1$2$ax(this._copy_on_write_list$_list, initialValue, combine, $T);
    },
    forEach$1(_, f) {
      this.$ti._eval$1("~(1)")._as(f);
      return J.forEach$1$ax(this._copy_on_write_list$_list, f);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this._copy_on_write_list$_list);
    },
    get$isNotEmpty(_) {
      return J.get$isNotEmpty$asx(this._copy_on_write_list$_list);
    },
    get$iterator(_) {
      return J.get$iterator$ax(this._copy_on_write_list$_list);
    },
    map$1$1(_, f, $T) {
      this.$ti._bind$1($T)._eval$1("1(2)")._as(f);
      return J.map$1$1$ax(this._copy_on_write_list$_list, f, $T);
    },
    skip$1(_, count) {
      return J.skip$1$ax(this._copy_on_write_list$_list, count);
    },
    toList$1$growable(_, growable) {
      return J.toList$1$growable$ax(this._copy_on_write_list$_list, true);
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1(_, value) {
      this.$ti._precomputed1._as(value);
      this._maybeCopyBeforeWrite$0();
      J.add$1$ax(this._copy_on_write_list$_list, value);
    },
    sort$1(_, compare) {
      this.$ti._eval$1("int(1,1)?")._as(compare);
      this._maybeCopyBeforeWrite$0();
      J.sort$1$ax(this._copy_on_write_list$_list, compare);
    },
    toString$0(_) {
      return J.toString$0$(this._copy_on_write_list$_list);
    },
    _maybeCopyBeforeWrite$0() {
      var _this = this;
      if (!_this._copyBeforeWrite)
        return;
      _this._copyBeforeWrite = false;
      _this.set$_copy_on_write_list$_list(P.List_List$from(_this._copy_on_write_list$_list, true, _this.$ti._precomputed1));
    },
    set$_copy_on_write_list$_list(_list) {
      this._copy_on_write_list$_list = this.$ti._eval$1("List<1>")._as(_list);
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  A.hashObjects_closure.prototype = {
    call$2(h, i) {
      var t1, hash;
      H._asIntS(h);
      t1 = J.get$hashCode$(i);
      if (typeof h !== "number")
        return h.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      hash = h + t1 & 536870911;
      hash = hash + ((hash & 524287) << 10) & 536870911;
      return hash ^ hash >>> 6;
    },
    $signature: 41
  };
  D.BuiltList.prototype = {
    get$hashCode(_) {
      var t1 = this._list$_hashCode;
      return t1 == null ? this._list$_hashCode = A.hashObjects(this._list) : t1;
    },
    $eq(_, other) {
      var t1, t2, t3, t4, i, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (!(other instanceof D.BuiltList))
        return false;
      t1 = other._list;
      t2 = J.getInterceptor$asx(t1);
      t3 = _this._list;
      t4 = J.getInterceptor$asx(t3);
      if (t2.get$length(t1) !== t4.get$length(t3))
        return false;
      if (other.get$hashCode(other) != _this.get$hashCode(_this))
        return false;
      for (i = 0; i !== t4.get$length(t3); ++i)
        if (!J.$eq$(t2.$index(t1, i), t4.$index(t3, i)))
          return false;
      return true;
    },
    toString$0(_) {
      return J.toString$0$(this._list);
    },
    get$length(_) {
      return J.get$length$asx(this._list);
    },
    get$iterator(_) {
      return J.get$iterator$ax(this._list);
    },
    forEach$1(_, f) {
      return J.forEach$1$ax(this._list, this.$ti._eval$1("~(1)")._as(f));
    },
    toList$1$growable(_, growable) {
      return new Q.CopyOnWriteList(true, this._list, this.$ti._eval$1("CopyOnWriteList<1>"));
    },
    toList$0($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$isEmpty(_) {
      return J.get$isEmpty$asx(this._list);
    },
    $isIterable: 1
  };
  D._BuiltList.prototype = {};
  D.ListBuilder.prototype = {
    get$_list() {
      var t1 = this.__ListBuilder__list;
      return t1 === $ ? H.throwExpression(H.LateError$fieldNI("_list")) : t1;
    },
    build$0() {
      var t1, t2, t3, _this = this;
      if (_this._listOwner == null) {
        t1 = _this.get$_list();
        t2 = _this.$ti;
        t3 = t2._eval$1("_BuiltList<1>");
        t3 = t3._as(new D._BuiltList(t1, t3));
        _this.set$__ListBuilder__list(t2._eval$1("List<1>")._as(t1));
        _this.set$_listOwner(t3);
      }
      t1 = _this._listOwner;
      t1.toString;
      return t1;
    },
    get$length(_) {
      return J.get$length$asx(this.get$_list());
    },
    get$_safeList() {
      var t1, _this = this;
      if (_this._listOwner != null) {
        t1 = _this.$ti;
        _this.set$__ListBuilder__list(t1._eval$1("List<1>")._as(P.List_List$from(_this.get$_list(), true, t1._precomputed1)));
        _this.set$_listOwner(null);
      }
      return _this.get$_list();
    },
    set$__ListBuilder__list(__ListBuilder__list) {
      this.__ListBuilder__list = this.$ti._eval$1("List<1>?")._as(__ListBuilder__list);
    },
    set$_listOwner(_listOwner) {
      this._listOwner = this.$ti._eval$1("_BuiltList<1>?")._as(_listOwner);
    }
  };
  Y.newBuiltValueToStringHelper_closure.prototype = {
    call$1(className) {
      var t1 = new P.StringBuffer("");
      t1._contents = className;
      t1._contents = className + " {\n";
      $._indentingBuiltValueToStringHelperIndent = $._indentingBuiltValueToStringHelperIndent + 2;
      return new Y.IndentingBuiltValueToStringHelper(t1);
    },
    $signature: 42
  };
  Y.IndentingBuiltValueToStringHelper.prototype = {
    add$2(_, field, value) {
      var t1, t2;
      if (value != null) {
        t1 = this._result;
        t1.toString;
        t2 = t1._contents += C.JSString_methods.$mul(" ", $._indentingBuiltValueToStringHelperIndent);
        t2 += field;
        t1._contents = t2;
        t1._contents = t2 + "=";
        t2 = t1._contents += H.S(value);
        t1._contents = t2 + ",\n";
      }
    },
    toString$0(_) {
      var t2, stringResult,
        t1 = $._indentingBuiltValueToStringHelperIndent - 2;
      $._indentingBuiltValueToStringHelperIndent = t1;
      t2 = this._result;
      t2.toString;
      t1 = t2._contents += C.JSString_methods.$mul(" ", t1);
      t2._contents = t1 + "}";
      stringResult = J.toString$0$(this._result);
      this._result = null;
      return stringResult;
    }
  };
  Y.BuiltValueNullFieldError.prototype = {
    toString$0(_) {
      var t1 = this.field;
      return 'Tried to construct class "' + this.type + '" with null field "' + t1 + '". This is forbidden; to allow it, mark "' + t1 + '" with @nullable.';
    }
  };
  Y.BuiltValueNestedFieldError.prototype = {
    toString$0(_) {
      return 'Tried to build class "' + this.type + '" but nested builder for field "' + H.S(this.field) + '" threw: ' + H.S(this.error);
    }
  };
  D._NullAllocator.prototype = {};
  D.DartEmitter.prototype = {
    visitAnnotation$2(spec, output) {
      var t1;
      if (output == null) {
        output = new P.StringBuffer("");
        t1 = output;
      } else
        t1 = output;
      t1._contents += "@";
      spec.accept$1$2(0, this, output, type$.StringSink);
      output._contents += " ";
      return output;
    },
    visitClass$2(spec, output) {
      var t2, t3, _this = this,
        out = output == null ? new P.StringBuffer("") : output,
        t1 = spec.docs;
      t1.toString;
      J.forEach$1$ax(t1._list, t1.$ti._eval$1("~(1)")._as(out.get$writeln()));
      t1 = spec.annotations;
      t1.toString;
      J.forEach$1$ax(t1._list, t1.$ti._eval$1("~(1)")._as(new D.DartEmitter_visitClass_closure(_this, out)));
      if (spec.abstract)
        out._contents += "abstract ";
      out._contents += "class " + spec.name;
      t1 = spec.types;
      t1.toString;
      _this.visitTypeParameters$2(J.map$1$1$ax(t1._list, t1.$ti._eval$1("Reference(1)")._as(new D.DartEmitter_visitClass_closure0()), type$.Reference), out);
      t1 = spec.mixins;
      t2 = t1._list;
      t3 = J.getInterceptor$asx(t2);
      if (t3.get$isNotEmpty(t2)) {
        out._contents += " with ";
        t1 = t3.map$1$1(t2, H._instanceType(t1)._eval$1("StringSink(1)")._as(new D.DartEmitter_visitClass_closure1(_this)), type$.StringSink);
        out._contents = P.StringBuffer__writeAll(out._contents, t1, ",");
      }
      t1 = spec.$implements;
      t2 = t1._list;
      t3 = J.getInterceptor$asx(t2);
      if (t3.get$isNotEmpty(t2)) {
        out._contents += " implements ";
        t1 = t3.map$1$1(t2, H._instanceType(t1)._eval$1("StringSink(1)")._as(new D.DartEmitter_visitClass_closure2(_this)), type$.StringSink);
        out._contents = P.StringBuffer__writeAll(out._contents, t1, ",");
      }
      out._contents += " {";
      t1 = spec.constructors;
      t1.toString;
      J.forEach$1$ax(t1._list, t1.$ti._eval$1("~(1)")._as(new D.DartEmitter_visitClass_closure3(_this, spec, out)));
      t1 = spec.fields;
      t1.toString;
      J.forEach$1$ax(t1._list, t1.$ti._eval$1("~(1)")._as(new D.DartEmitter_visitClass_closure4(_this, out)));
      t1 = spec.methods;
      t1.toString;
      J.forEach$1$ax(t1._list, t1.$ti._eval$1("~(1)")._as(new D.DartEmitter_visitClass_closure5(_this, out)));
      out._contents += " }\n";
      return out;
    },
    visitConstructor$3(spec, clazz, output) {
      var t1, t2, t3, t4, count, named, _this = this, _box_0 = {};
      _box_0.output = output;
      t1 = spec.docs;
      t1.toString;
      J.forEach$1$ax(t1._list, t1.$ti._eval$1("~(1)")._as(output.get$writeln()));
      t1 = spec.annotations;
      t1.toString;
      J.forEach$1$ax(t1._list, t1.$ti._eval$1("~(1)")._as(new D.DartEmitter_visitConstructor_closure(_box_0, _this)));
      if (spec.external)
        _box_0.output._contents += "external ";
      if (spec.constant)
        _box_0.output._contents += "const ";
      if (spec.factory)
        _box_0.output._contents += "factory ";
      t1 = _box_0.output;
      t2 = t1._contents += clazz;
      t3 = spec.name;
      if (t3 != null) {
        t1._contents = t2 + ".";
        t1._contents += t3;
      }
      _box_0.output._contents += "(";
      t1 = spec.requiredParameters._list;
      t2 = J.getInterceptor$asx(t1);
      if (t2.get$isNotEmpty(t1))
        for (t3 = t2.get$iterator(t1), t4 = spec.optionalParameters, count = 0; t3.moveNext$0();) {
          ++count;
          _this._visitParameter$2(t3.get$current(), _box_0.output);
          if (t2.get$length(t1) !== count || J.get$isNotEmpty$asx(t4._list))
            _box_0.output._contents += ", ";
        }
      t1 = spec.optionalParameters;
      t2 = t1._list;
      t3 = J.getInterceptor$asx(t2);
      if (t3.get$isNotEmpty(t2)) {
        named = t3.any$1(t2, H._instanceType(t1)._eval$1("bool(1)")._as(new D.DartEmitter_visitConstructor_closure0()));
        t1 = _box_0.output;
        if (named)
          t1._contents += "{";
        else
          t1._contents += "[";
        for (t1 = t3.get$iterator(t2), count = 0; t1.moveNext$0();) {
          ++count;
          _this._visitParameter$4$named$optional(t1.get$current(), _box_0.output, named, true);
          if (t3.get$length(t2) !== count)
            _box_0.output._contents += ", ";
        }
        t1 = _box_0.output;
        if (named)
          t1._contents += "}";
        else
          t1._contents += "]";
      }
      _box_0.output._contents += ")";
      t1 = spec.initializers._list;
      t2 = J.getInterceptor$asx(t1);
      if (t2.get$isNotEmpty(t1)) {
        _box_0.output._contents += " : ";
        for (t3 = t2.get$iterator(t1), t4 = type$.StringSink, count = 0; t3.moveNext$0();) {
          ++count;
          t3.get$current().accept$1$2(0, _this, _box_0.output, t4);
          if (count !== t2.get$length(t1))
            _box_0.output._contents += ", ";
        }
      }
      t1 = spec.redirect;
      if (t1 != null) {
        _box_0.output._contents += " = ";
        t1 = t1.get$type(t1);
        t2 = _box_0.output;
        t1.toString;
        type$.SpecVisitor_StringSink._as(_this).visitType$2(t1, type$.nullable_StringSink._as(t2));
        t2 = _box_0.output;
        t2._contents += ";";
        t1 = t2;
      } else {
        t1 = _box_0.output;
        t1._contents += ";";
      }
      t1._contents += "\n";
      return t1;
    },
    visitField$2(spec, output) {
      var t1, t2, previousConstContext, _this = this, _box_0 = {};
      _box_0.output = output;
      spec.get$docs().forEach$1(0, output.get$writeln());
      spec.get$annotations().forEach$1(0, new D.DartEmitter_visitField_closure(_box_0, _this));
      if (spec.get$$static())
        _box_0.output._contents += "static ";
      if (spec.get$late())
        _box_0.output._contents += "late ";
      switch (spec.get$modifier()) {
        case C.FieldModifier_0:
          spec.get$type(spec);
          break;
        case C.FieldModifier_1:
          _box_0.output._contents += "final ";
          break;
        case C.FieldModifier_2:
          _box_0.output._contents += "const ";
          break;
        default:
          throw H.wrapException(H.ReachabilityError$(string$.x60null_c));
      }
      spec.get$type(spec);
      t1 = spec.get$type(spec);
      t1.get$type(t1).accept$1$2(0, _this, _box_0.output, type$.StringSink);
      t1 = _box_0.output;
      t1._contents += " ";
      t2 = spec.get$name(spec);
      t1.toString;
      t1._contents += H.S(t2);
      spec.get$assignment();
      t1 = _box_0.output;
      t1._contents += " = ";
      spec.get$modifier();
      t1 = type$.Null_Function._as(new D.DartEmitter_visitField_closure0(_box_0, _this, spec));
      previousConstContext = _this.ExpressionEmitter__withInConstExpression;
      t1.call$0();
      _this.ExpressionEmitter__withInConstExpression = previousConstContext;
      t1 = _box_0.output;
      t1._contents += ";\n";
      return t1;
    },
    visitMethod$2(spec, output) {
      var t1, t2, t3, t4, count, named, _this = this, _box_0 = {};
      _box_0.output = output;
      t1 = spec.docs;
      t1.toString;
      J.forEach$1$ax(t1._list, t1.$ti._eval$1("~(1)")._as(output.get$writeln()));
      t1 = spec.annotations;
      t1.toString;
      J.forEach$1$ax(t1._list, t1.$ti._eval$1("~(1)")._as(new D.DartEmitter_visitMethod_closure(_box_0, _this)));
      if (spec.external)
        _box_0.output._contents += "external ";
      if (spec.$static)
        _box_0.output._contents += "static ";
      t1 = spec.returns;
      if (t1 != null) {
        t2 = _box_0.output;
        type$.SpecVisitor_StringSink._as(_this).visitReference$2(t1, type$.nullable_StringSink._as(t2));
        _box_0.output._contents += " ";
      }
      t1 = spec.type;
      if (t1 === C.MethodType_0) {
        t1 = _box_0.output;
        t1._contents += "get ";
        t1._contents += H.S(spec.name);
      } else {
        if (t1 === C.MethodType_1)
          _box_0.output._contents += "set ";
        t1 = spec.name;
        if (t1 != null)
          _box_0.output._contents += t1;
        t1 = spec.types;
        t1.toString;
        _this.visitTypeParameters$2(J.map$1$1$ax(t1._list, t1.$ti._eval$1("Reference(1)")._as(new D.DartEmitter_visitMethod_closure0()), type$.Reference), _box_0.output);
        _box_0.output._contents += "(";
        t1 = spec.requiredParameters._list;
        t2 = J.getInterceptor$asx(t1);
        if (t2.get$isNotEmpty(t1))
          for (t3 = t2.get$iterator(t1), t4 = spec.optionalParameters, count = 0; t3.moveNext$0();) {
            ++count;
            _this._visitParameter$2(t3.get$current(), _box_0.output);
            if (t2.get$length(t1) !== count || J.get$isNotEmpty$asx(t4._list))
              _box_0.output._contents += ", ";
          }
        t1 = spec.optionalParameters;
        t2 = t1._list;
        t3 = J.getInterceptor$asx(t2);
        if (t3.get$isNotEmpty(t2)) {
          named = t3.any$1(t2, H._instanceType(t1)._eval$1("bool(1)")._as(new D.DartEmitter_visitMethod_closure1()));
          t1 = _box_0.output;
          if (named)
            t1._contents += "{";
          else
            t1._contents += "[";
          for (t1 = t3.get$iterator(t2), count = 0; t1.moveNext$0();) {
            ++count;
            _this._visitParameter$4$named$optional(t1.get$current(), _box_0.output, named, true);
            if (t3.get$length(t2) !== count)
              _box_0.output._contents += ", ";
          }
          t1 = _box_0.output;
          if (named)
            t1._contents += "}";
          else
            t1._contents += "]";
        }
        _box_0.output._contents += ")";
      }
      t1 = spec.body;
      if (t1 != null) {
        t2 = D.DartEmitter__isLambdaMethod(spec);
        t3 = _box_0.output;
        if (t2)
          t3._contents += " => ";
        else
          t3._contents += " { ";
        type$.CodeVisitor_StringSink._as(_this).visitStaticCode$2(t1, type$.nullable_StringSink._as(t3));
        if (!D.DartEmitter__isLambdaMethod(spec))
          _box_0.output._contents += " } ";
      } else
        _box_0.output._contents += ";";
      return _box_0.output;
    },
    _visitParameter$4$named$optional(spec, output, named, optional) {
      var t1 = spec.docs,
        t2 = output.get$writeln();
      t1.toString;
      J.forEach$1$ax(t1._list, t1.$ti._eval$1("~(1)")._as(t2));
      t2 = spec.annotations;
      t2.toString;
      J.forEach$1$ax(t2._list, t2.$ti._eval$1("~(1)")._as(new D.DartEmitter__visitParameter_closure(this, output)));
      if (spec.required)
        output._contents += "required ";
      if (spec.covariant)
        output._contents += "covariant ";
      t1 = spec.type;
      if (t1 != null) {
        t1 = t1.get$type(t1);
        t1.toString;
        type$.SpecVisitor_StringSink._as(this).visitType$2(t1, output);
        output._contents += " ";
      }
      if (spec.toThis)
        output._contents += "this.";
      t1 = output._contents += spec.name;
      if (optional && spec.defaultTo != null) {
        output._contents = t1 + " = ";
        t1 = spec.defaultTo;
        t1.toString;
        type$.CodeVisitor_StringSink._as(this).visitStaticCode$2(t1, output);
      }
    },
    _visitParameter$2(spec, output) {
      return this._visitParameter$4$named$optional(spec, output, false, false);
    },
    visitReference$2(spec, output) {
      var t1 = output == null ? new P.StringBuffer("") : output;
      t1._contents += spec.get$symbol();
      return t1;
    },
    visitType$2(spec, output) {
      var t1;
      if (output == null)
        output = new P.StringBuffer("");
      this.visitReference$2(spec, output);
      t1 = spec.types;
      t1.toString;
      this.visitTypeParameters$2(J.map$1$1$ax(t1._list, t1.$ti._eval$1("Reference(1)")._as(new D.DartEmitter_visitType_closure()), type$.Reference), output);
      return output;
    },
    visitTypeParameters$2(specs, output) {
      var t1, t2;
      type$.Iterable_Reference._as(specs);
      if (output == null)
        output = new P.StringBuffer("");
      if (!specs.get$isEmpty(specs)) {
        t1 = output._contents += "<";
        t2 = specs.$ti;
        t2 = P.StringBuffer__writeAll(t1, new H.MappedListIterable(specs, t2._eval$1("StringSink(ListIterable.E)")._as(new D.DartEmitter_visitTypeParameters_closure(this)), t2._eval$1("MappedListIterable<ListIterable.E,StringSink>")), ",");
        output._contents = t2;
        output._contents = t2 + ">";
      }
      return output;
    },
    $isCodeVisitor: 1,
    $isExpressionVisitor: 1,
    $isSpecVisitor: 1
  };
  D.DartEmitter_visitClass_closure.prototype = {
    call$1(a) {
      return this.$this.visitAnnotation$2(type$.Expression_2._as(a), this.out);
    },
    $signature: 2
  };
  D.DartEmitter_visitClass_closure0.prototype = {
    call$1(r) {
      type$.Reference._as(r);
      return r.get$type(r);
    },
    $signature: 7
  };
  D.DartEmitter_visitClass_closure1.prototype = {
    call$1(m) {
      var t1;
      type$.Reference._as(m);
      t1 = m.get$type(m);
      t1.toString;
      return type$.SpecVisitor_StringSink._as(this.$this).visitType$2(t1, type$.nullable_StringSink._as(null));
    },
    $signature: 8
  };
  D.DartEmitter_visitClass_closure2.prototype = {
    call$1(m) {
      var t1;
      type$.Reference._as(m);
      t1 = m.get$type(m);
      t1.toString;
      return type$.SpecVisitor_StringSink._as(this.$this).visitType$2(t1, type$.nullable_StringSink._as(null));
    },
    $signature: 8
  };
  D.DartEmitter_visitClass_closure3.prototype = {
    call$1(c) {
      var t1 = this.out;
      this.$this.visitConstructor$3(type$.Constructor._as(c), this.spec.name, t1);
      t1._contents += "\n";
    },
    $signature: 46
  };
  D.DartEmitter_visitClass_closure4.prototype = {
    call$1(f) {
      var t1 = this.out;
      this.$this.visitField$2(type$.Field._as(f), t1);
      t1._contents += "\n";
    },
    $signature: 47
  };
  D.DartEmitter_visitClass_closure5.prototype = {
    call$1(m) {
      var t1;
      type$.Method._as(m);
      t1 = this.out;
      this.$this.visitMethod$2(m, t1);
      if (D.DartEmitter__isLambdaMethod(m))
        t1._contents += ";";
      t1._contents += "\n";
    },
    $signature: 48
  };
  D.DartEmitter_visitConstructor_closure.prototype = {
    call$1(a) {
      return this.$this.visitAnnotation$2(type$.Expression_2._as(a), this._box_0.output);
    },
    $signature: 2
  };
  D.DartEmitter_visitConstructor_closure0.prototype = {
    call$1(p) {
      return type$.Parameter._as(p).named;
    },
    $signature: 21
  };
  D.DartEmitter_visitField_closure.prototype = {
    call$1(a) {
      return this.$this.visitAnnotation$2(a, this._box_0.output);
    },
    $signature: 2
  };
  D.DartEmitter_visitField_closure0.prototype = {
    call$0() {
      this.spec.get$assignment().accept$1$2(0, this.$this, this._box_0.output, type$.StringSink);
    },
    $signature: 5
  };
  D.DartEmitter_visitMethod_closure.prototype = {
    call$1(a) {
      return this.$this.visitAnnotation$2(type$.Expression_2._as(a), this._box_0.output);
    },
    $signature: 2
  };
  D.DartEmitter_visitMethod_closure0.prototype = {
    call$1(r) {
      type$.Reference._as(r);
      return r.get$type(r);
    },
    $signature: 7
  };
  D.DartEmitter_visitMethod_closure1.prototype = {
    call$1(p) {
      return type$.Parameter._as(p).named;
    },
    $signature: 21
  };
  D.DartEmitter__visitParameter_closure.prototype = {
    call$1(a) {
      return this.$this.visitAnnotation$2(type$.Expression_2._as(a), this.output);
    },
    $signature: 2
  };
  D.DartEmitter_visitType_closure.prototype = {
    call$1(r) {
      type$.Reference._as(r);
      return r.get$type(r);
    },
    $signature: 7
  };
  D.DartEmitter_visitTypeParameters_closure.prototype = {
    call$1(s) {
      return type$.Reference._as(s).accept$1$1(0, this.$this, type$.StringSink);
    },
    $signature: 8
  };
  D._DartEmitter_Object_CodeEmitter.prototype = {};
  D._DartEmitter_Object_CodeEmitter_ExpressionEmitter.prototype = {};
  V.HasAnnotations.prototype = {};
  V.HasAnnotationsBuilder.prototype = {};
  B.HasDartDocs.prototype = {};
  B.HasDartDocsBuilder.prototype = {};
  Y.HasGenerics.prototype = {};
  Y.HasGenericsBuilder.prototype = {};
  X.Class.prototype = {
    accept$1$2(_, visitor, context, $R) {
      return $R._eval$1("SpecVisitor<0>")._as(visitor).visitClass$2(this, $R._eval$1("0?")._as(context));
    },
    $isSpec: 1
  };
  X.ClassBuilder.prototype = {};
  X._$Class.prototype = {
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (other instanceof X.Class)
        if (_this.abstract === other.abstract)
          if (J.$eq$(_this.annotations, other.annotations))
            if (J.$eq$(_this.docs, other.docs))
              t1 = J.$eq$(_this.$implements, other.$implements) && J.$eq$(_this.mixins, other.mixins) && J.$eq$(_this.types, other.types) && J.$eq$(_this.constructors, other.constructors) && J.$eq$(_this.methods, other.methods) && J.$eq$(_this.fields, other.fields) && _this.name === other.name;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return Y.$jf(Y.$jc(Y.$jc(Y.$jc(Y.$jc(Y.$jc(Y.$jc(Y.$jc(Y.$jc(Y.$jc(Y.$jc(Y.$jc(0, _this.abstract ? 519018 : 218159), J.get$hashCode$(_this.annotations)), J.get$hashCode$(_this.docs)), C.JSNull_methods.get$hashCode(_this.extend)), J.get$hashCode$(_this.$implements)), J.get$hashCode$(_this.mixins)), J.get$hashCode$(_this.types)), J.get$hashCode$(_this.constructors)), J.get$hashCode$(_this.methods)), J.get$hashCode$(_this.fields)), C.JSString_methods.get$hashCode(_this.name)));
    },
    toString$0(_) {
      var _this = this,
        t1 = $.$get$newBuiltValueToStringHelper().call$1("Class"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "abstract", _this.abstract);
      t2.add$2(t1, "annotations", _this.annotations);
      t2.add$2(t1, "docs", _this.docs);
      t2.add$2(t1, "extend", _this.extend);
      t2.add$2(t1, "implements", _this.$implements);
      t2.add$2(t1, "mixins", _this.mixins);
      t2.add$2(t1, "types", _this.types);
      t2.add$2(t1, "constructors", _this.constructors);
      t2.add$2(t1, "methods", _this.methods);
      t2.add$2(t1, "fields", _this.fields);
      t2.add$2(t1, "name", _this.name);
      return t2.toString$0(t1);
    }
  };
  X._$ClassBuilder.prototype = {
    get$_class$_$this() {
      var t1, _this = this,
        $$v = _this._$v;
      if ($$v != null) {
        _this.abstract = $$v.abstract;
        t1 = $$v.annotations;
        t1.toString;
        _this.annotations = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        t1 = $$v.docs;
        t1.toString;
        _this.docs = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        _this.extend = $$v.extend;
        t1 = $$v.$implements;
        t1.toString;
        _this.$implements = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        t1 = $$v.mixins;
        t1.toString;
        _this.mixins = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        t1 = $$v.types;
        t1.toString;
        _this.types = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        t1 = $$v.constructors;
        t1.toString;
        _this.constructors = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        t1 = $$v.methods;
        t1.toString;
        _this.methods = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        t1 = $$v.fields;
        t1.toString;
        _this.fields = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        _this.name = $$v.name;
        _this._$v = null;
      }
      return _this;
    },
    build$0() {
      var _$failedField, e, _$result0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, exception, _this = this, _s5_ = "Class",
        _s11_ = "annotations",
        _s10_ = "implements",
        _s12_ = "constructors",
        _$result = null;
      try {
        _$result0 = _this._$v;
        if (_$result0 == null) {
          _this.get$_class$_$this();
          t1 = _this.abstract;
          if (t1 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s5_, "abstract"));
          _this.get$_class$_$this();
          t2 = _this.annotations.build$0();
          _this.get$_class$_$this();
          t3 = _this.docs.build$0();
          _this.get$_class$_$this();
          t4 = _this.extend;
          _this.get$_class$_$this();
          t5 = _this.$implements.build$0();
          _this.get$_class$_$this();
          t6 = _this.mixins.build$0();
          _this.get$_class$_$this();
          t7 = _this.types.build$0();
          _this.get$_class$_$this();
          t8 = _this.constructors.build$0();
          _this.get$_class$_$this();
          t9 = _this.methods.build$0();
          _this.get$_class$_$this();
          t10 = _this.fields.build$0();
          _this.get$_class$_$this();
          t11 = _this.name;
          if (t11 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s5_, "name"));
          _$result0 = new X._$Class(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11);
          if (t2 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s5_, _s11_));
          if (t3 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s5_, "docs"));
          if (t5 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s5_, _s10_));
          if (t6 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s5_, "mixins"));
          if (t7 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s5_, "types"));
          if (t8 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s5_, _s12_));
          if (t9 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s5_, "methods"));
          if (t10 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s5_, "fields"));
        }
        _$result = _$result0;
      } catch (exception) {
        H.unwrapException(exception);
        _$failedField = H._Cell$named("_$failedField");
        try {
          _$failedField._value = _s11_;
          _this.get$_class$_$this();
          _this.annotations.build$0();
          _$failedField._value = "docs";
          _this.get$_class$_$this();
          _this.docs.build$0();
          _$failedField._value = _s10_;
          _this.get$_class$_$this();
          _this.$implements.build$0();
          _$failedField._value = "mixins";
          _this.get$_class$_$this();
          _this.mixins.build$0();
          _$failedField._value = "types";
          _this.get$_class$_$this();
          _this.types.build$0();
          _$failedField._value = _s12_;
          _this.get$_class$_$this();
          _this.constructors.build$0();
          _$failedField._value = "methods";
          _this.get$_class$_$this();
          _this.methods.build$0();
          _$failedField._value = "fields";
          _this.get$_class$_$this();
          _this.fields.build$0();
        } catch (exception) {
          e = H.unwrapException(exception);
          t1 = Y.BuiltValueNestedFieldError$(_s5_, _$failedField.readLocal$0(), J.toString$0$(e));
          throw H.wrapException(t1);
        }
        throw exception;
      }
      t1 = type$.Class._as(_$result);
      if (t1 == null)
        H.throwExpression(P.ArgumentError$notNull("other"));
      _this._$v = t1;
      return _$result;
    }
  };
  X._Class_Object_HasAnnotations.prototype = {};
  X._Class_Object_HasAnnotations_HasDartDocs.prototype = {};
  X._Class_Object_HasAnnotations_HasDartDocs_HasGenerics.prototype = {};
  X._ClassBuilder_Object_HasAnnotationsBuilder.prototype = {};
  X._ClassBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder.prototype = {};
  X._ClassBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder_HasGenericsBuilder.prototype = {};
  X.CodeEmitter.prototype = {
    visitStaticCode$2(code, output) {
      if (output == null)
        output = new P.StringBuffer("");
      output._contents += code.code;
      return output;
    }
  };
  X.StaticCode.prototype = {
    accept$1$2(_, visitor, context, $R) {
      var output;
      $R._eval$1("CodeVisitor<0>")._as(visitor);
      $R._eval$1("0?")._as(context);
      output = context == null ? new P.StringBuffer("") : context;
      output._contents += this.code;
      return output;
    },
    toString$0(_) {
      return this.code;
    },
    $isSpec: 1,
    $isCode0: 1
  };
  Y.Constructor.prototype = {};
  Y.ConstructorBuilder.prototype = {};
  Y._$Constructor.prototype = {
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (other instanceof Y.Constructor)
        if (J.$eq$(_this.annotations, other.annotations))
          if (J.$eq$(_this.docs, other.docs))
            if (J.$eq$(_this.optionalParameters, other.optionalParameters))
              if (J.$eq$(_this.requiredParameters, other.requiredParameters))
                if (J.$eq$(_this.initializers, other.initializers))
                  if (_this.external === other.external)
                    if (_this.constant === other.constant)
                      if (_this.factory === other.factory)
                        t1 = _this.name == other.name && J.$eq$(_this.redirect, other.redirect);
                      else
                        t1 = false;
                    else
                      t1 = false;
                  else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var _this = this, _519018 = 519018, _218159 = 218159,
        t1 = Y.$jc(Y.$jc(Y.$jc(Y.$jc(Y.$jc(Y.$jc(0, J.get$hashCode$(_this.annotations)), J.get$hashCode$(_this.docs)), J.get$hashCode$(_this.optionalParameters)), J.get$hashCode$(_this.requiredParameters)), J.get$hashCode$(_this.initializers)), C.JSNull_methods.get$hashCode(_this.body));
      t1 = Y.$jc(t1, _this.external ? _519018 : _218159);
      t1 = Y.$jc(t1, _this.constant ? _519018 : _218159);
      return Y.$jf(Y.$jc(Y.$jc(Y.$jc(Y.$jc(t1, _this.factory ? _519018 : _218159), C.JSNull_methods.get$hashCode(_this.lambda)), J.get$hashCode$(_this.name)), J.get$hashCode$(_this.redirect)));
    },
    toString$0(_) {
      var _this = this,
        t1 = $.$get$newBuiltValueToStringHelper().call$1("Constructor"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "annotations", _this.annotations);
      t2.add$2(t1, "docs", _this.docs);
      t2.add$2(t1, "optionalParameters", _this.optionalParameters);
      t2.add$2(t1, "requiredParameters", _this.requiredParameters);
      t2.add$2(t1, "initializers", _this.initializers);
      t2.add$2(t1, "body", _this.body);
      t2.add$2(t1, "external", _this.external);
      t2.add$2(t1, "constant", _this.constant);
      t2.add$2(t1, "factory", _this.factory);
      t2.add$2(t1, "lambda", _this.lambda);
      t2.add$2(t1, "name", _this.name);
      t2.add$2(t1, "redirect", _this.redirect);
      return t2.toString$0(t1);
    }
  };
  Y._$ConstructorBuilder.prototype = {
    get$_constructor$_$this() {
      var t1, _this = this,
        $$v = _this._constructor$_$v;
      if ($$v != null) {
        t1 = $$v.annotations;
        t1.toString;
        _this.annotations = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        t1 = $$v.docs;
        t1.toString;
        _this.docs = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        t1 = $$v.optionalParameters;
        t1.toString;
        _this.optionalParameters = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        t1 = $$v.requiredParameters;
        t1.toString;
        _this.requiredParameters = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        t1 = $$v.initializers;
        t1.toString;
        _this.initializers = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        _this.body = $$v.body;
        _this.external = $$v.external;
        _this.constant = $$v.constant;
        _this.factory = $$v.factory;
        _this.lambda = $$v.lambda;
        _this.name = $$v.name;
        _this.redirect = $$v.redirect;
        _this._constructor$_$v = null;
      }
      return _this;
    },
    build$0() {
      var _$failedField, e, _$result0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, exception, _this = this,
        _s11_ = "Constructor",
        _s11_0 = "annotations",
        _s18_ = "optionalParameters",
        _s18_0 = "requiredParameters",
        _s12_ = "initializers",
        _$result = null;
      try {
        _$result0 = _this._constructor$_$v;
        if (_$result0 == null) {
          _this.get$_constructor$_$this();
          t1 = _this.annotations.build$0();
          _this.get$_constructor$_$this();
          t2 = _this.docs.build$0();
          _this.get$_constructor$_$this();
          t3 = _this.optionalParameters.build$0();
          _this.get$_constructor$_$this();
          t4 = _this.requiredParameters.build$0();
          _this.get$_constructor$_$this();
          t5 = _this.initializers.build$0();
          _this.get$_constructor$_$this();
          t6 = _this.body;
          _this.get$_constructor$_$this();
          t7 = _this.external;
          if (t7 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s11_, "external"));
          _this.get$_constructor$_$this();
          t8 = _this.constant;
          if (t8 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s11_, "constant"));
          _this.get$_constructor$_$this();
          t9 = _this.factory;
          if (t9 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s11_, "factory"));
          _this.get$_constructor$_$this();
          t10 = _this.lambda;
          _this.get$_constructor$_$this();
          t11 = _this.name;
          _this.get$_constructor$_$this();
          _$result0 = new Y._$Constructor(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, _this.redirect);
          if (t1 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s11_, _s11_0));
          if (t2 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s11_, "docs"));
          if (t3 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s11_, _s18_));
          if (t4 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s11_, _s18_0));
          if (t5 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s11_, _s12_));
        }
        _$result = _$result0;
      } catch (exception) {
        H.unwrapException(exception);
        _$failedField = H._Cell$named("_$failedField");
        try {
          _$failedField._value = _s11_0;
          _this.get$_constructor$_$this();
          _this.annotations.build$0();
          _$failedField._value = "docs";
          _this.get$_constructor$_$this();
          _this.docs.build$0();
          _$failedField._value = _s18_;
          _this.get$_constructor$_$this();
          _this.optionalParameters.build$0();
          _$failedField._value = _s18_0;
          _this.get$_constructor$_$this();
          _this.requiredParameters.build$0();
          _$failedField._value = _s12_;
          _this.get$_constructor$_$this();
          _this.initializers.build$0();
        } catch (exception) {
          e = H.unwrapException(exception);
          t1 = Y.BuiltValueNestedFieldError$(_s11_, _$failedField.readLocal$0(), J.toString$0$(e));
          throw H.wrapException(t1);
        }
        throw exception;
      }
      t1 = type$.Constructor._as(_$result);
      if (t1 == null)
        H.throwExpression(P.ArgumentError$notNull("other"));
      _this._constructor$_$v = t1;
      return _$result;
    }
  };
  Y._Constructor_Object_HasAnnotations.prototype = {};
  Y._Constructor_Object_HasAnnotations_HasDartDocs.prototype = {};
  Y._ConstructorBuilder_Object_HasAnnotationsBuilder.prototype = {};
  Y._ConstructorBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder.prototype = {};
  B.Expression0.prototype = {
    call$3(positionalArguments, namedArguments, typeArguments) {
      type$.Iterable_Expression._as(positionalArguments);
      type$.Map_String_Expression._as(namedArguments);
      type$.List_Reference._as(typeArguments);
      return new B.InvokeExpression(this, J.toList$0$ax(positionalArguments), namedArguments, typeArguments);
    },
    call$1(positionalArguments) {
      return this.call$3(positionalArguments, C.Map_empty2, C.List_empty6);
    },
    call$2(positionalArguments, namedArguments) {
      return this.call$3(positionalArguments, namedArguments, C.List_empty6);
    },
    $isSpec: 1
  };
  B.ExpressionEmitter.prototype = {
    visitInvokeExpression$2(expression, output) {
      var out = output == null ? new P.StringBuffer("") : output,
        t1 = type$.StringSink_Function._as(new B.ExpressionEmitter_visitInvokeExpression_closure(this, expression, out)),
        previousConstContext = this.ExpressionEmitter__withInConstExpression;
      t1.call$0();
      this.ExpressionEmitter__withInConstExpression = previousConstContext;
      return out;
    }
  };
  B.ExpressionEmitter_visitInvokeExpression_closure.prototype = {
    call$0() {
      var t4,
        t1 = this.expression,
        t2 = this.$this,
        t3 = this.out;
      t1.target.accept$1$2(0, t2, t3, type$.StringSink);
      t4 = t1.typeArguments;
      if (J.get$isNotEmpty$asx(t4)) {
        t3._contents += "<";
        D.visitAll(t4, t3, new B.ExpressionEmitter_visitInvokeExpression__closure(t2, t3), type$.Reference);
        t3._contents += ">";
      }
      t3._contents += "(";
      t4 = t1.positionalArguments;
      D.visitAll(t4, t3, new B.ExpressionEmitter_visitInvokeExpression__closure0(t2, t3), type$.Spec);
      if (J.get$isNotEmpty$asx(t4)) {
        t4 = t1.namedArguments;
        t4 = t4.get$isNotEmpty(t4);
      } else
        t4 = false;
      if (t4)
        t3._contents += ", ";
      D.visitAll(t1.namedArguments.get$keys(), t3, new B.ExpressionEmitter_visitInvokeExpression__closure1(t2, t3, t1), type$.String);
      t3._contents += ")";
      return t3;
    },
    $signature: 50
  };
  B.ExpressionEmitter_visitInvokeExpression__closure.prototype = {
    call$1(type) {
      type$.Reference._as(type).accept$1$2(0, this.$this, this.out, type$.StringSink);
    },
    $signature: 51
  };
  B.ExpressionEmitter_visitInvokeExpression__closure0.prototype = {
    call$1(spec) {
      type$.Spec._as(spec).accept$1$2(0, this.$this, this.out, type$.StringSink);
    },
    $signature: 52
  };
  B.ExpressionEmitter_visitInvokeExpression__closure1.prototype = {
    call$1($name) {
      var t1, t2;
      H._asStringS($name);
      t1 = this.out;
      t2 = t1._contents += H.S($name);
      t1._contents = t2 + ": ";
      t2 = this.expression.namedArguments.$index(0, $name);
      t2.toString;
      J.accept$1$2$z(t2, this.$this, t1, type$.StringSink);
    },
    $signature: 53
  };
  B.CodeExpression.prototype = {
    accept$1$2(_, visitor, context, $R) {
      var output, t1;
      $R._eval$1("ExpressionVisitor<0>")._as(visitor);
      $R._eval$1("0?")._as(context);
      output = context == null ? new P.StringBuffer("") : context;
      t1 = type$.CodeVisitor_StringSink;
      return t1._as(t1._as(visitor)).visitStaticCode$2(this.code, output);
    }
  };
  B.InvokeExpression.prototype = {
    accept$1$2(_, visitor, context, $R) {
      return $R._eval$1("ExpressionVisitor<0>")._as(visitor).visitInvokeExpression$2(this, $R._eval$1("0?")._as(context));
    },
    toString$0(_) {
      return " " + this.target.toString$0(0) + "(" + H.S(this.positionalArguments) + ", " + H.S(this.namedArguments) + ")";
    }
  };
  F.FieldModifier.prototype = {
    toString$0(_) {
      return this._field$_name;
    }
  };
  D.Method.prototype = {
    accept$1$2(_, visitor, context, $R) {
      return $R._eval$1("SpecVisitor<0>")._as(visitor).visitMethod$2(this, $R._eval$1("0?")._as(context));
    },
    $isSpec: 1
  };
  D.MethodBuilder.prototype = {};
  D.MethodType.prototype = {
    toString$0(_) {
      return this._method$_name;
    }
  };
  D.Parameter.prototype = {};
  D.ParameterBuilder.prototype = {
    get$name(_) {
      var t1 = this.__ParameterBuilder_name;
      return t1 === $ ? H.throwExpression(H.LateError$fieldNI("name")) : t1;
    },
    set$name(_, t1) {
      if (this.__ParameterBuilder_name === $)
        this.__ParameterBuilder_name = t1;
      else
        throw H.wrapException(H.LateError$fieldAI("name"));
    }
  };
  D._$Method.prototype = {
    $eq(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      if (other instanceof D.Method)
        if (J.$eq$(_this.annotations, other.annotations))
          if (J.$eq$(_this.docs, other.docs))
            if (J.$eq$(_this.types, other.types))
              if (J.$eq$(_this.optionalParameters, other.optionalParameters))
                if (J.$eq$(_this.requiredParameters, other.requiredParameters))
                  if (_this.body == other.body)
                    if (_this.external === other.external)
                      if (_this.lambda == other.lambda)
                        if (_this.$static === other.$static)
                          if (_this.name == other.name)
                            if (_this.type == other.type)
                              t1 = J.$eq$(_this.returns, other.returns);
                            else
                              t1 = false;
                          else
                            t1 = false;
                        else
                          t1 = false;
                      else
                        t1 = false;
                    else
                      t1 = false;
                  else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var _this = this,
        t1 = Y.$jc(Y.$jc(Y.$jc(Y.$jc(Y.$jc(Y.$jc(0, J.get$hashCode$(_this.annotations)), J.get$hashCode$(_this.docs)), J.get$hashCode$(_this.types)), J.get$hashCode$(_this.optionalParameters)), J.get$hashCode$(_this.requiredParameters)), J.get$hashCode$(_this.body));
      t1 = Y.$jc(Y.$jc(t1, _this.external ? 519018 : 218159), J.get$hashCode$(_this.lambda));
      return Y.$jf(Y.$jc(Y.$jc(Y.$jc(Y.$jc(Y.$jc(t1, _this.$static ? 519018 : 218159), J.get$hashCode$(_this.name)), J.get$hashCode$(_this.type)), C.JSNull_methods.get$hashCode(_this.modifier)), J.get$hashCode$(_this.returns)));
    },
    toString$0(_) {
      var _this = this,
        t1 = $.$get$newBuiltValueToStringHelper().call$1("Method"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "annotations", _this.annotations);
      t2.add$2(t1, "docs", _this.docs);
      t2.add$2(t1, "types", _this.types);
      t2.add$2(t1, "optionalParameters", _this.optionalParameters);
      t2.add$2(t1, "requiredParameters", _this.requiredParameters);
      t2.add$2(t1, "body", _this.body);
      t2.add$2(t1, "external", _this.external);
      t2.add$2(t1, "lambda", _this.lambda);
      t2.add$2(t1, "static", _this.$static);
      t2.add$2(t1, "name", _this.name);
      t2.add$2(t1, "type", _this.type);
      t2.add$2(t1, "modifier", _this.modifier);
      t2.add$2(t1, "returns", _this.returns);
      return t2.toString$0(t1);
    }
  };
  D._$MethodBuilder.prototype = {
    get$_method$_$this() {
      var t1, _this = this,
        $$v = _this._method$_$v;
      if ($$v != null) {
        t1 = $$v.annotations;
        t1.toString;
        _this.annotations = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        t1 = $$v.docs;
        t1.toString;
        _this.docs = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        t1 = $$v.types;
        t1.toString;
        _this.types = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        t1 = $$v.optionalParameters;
        t1.toString;
        _this.optionalParameters = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        t1 = $$v.requiredParameters;
        t1.toString;
        _this.requiredParameters = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        _this.body = $$v.body;
        _this.external = $$v.external;
        _this.lambda = $$v.lambda;
        _this.$static = $$v.$static;
        _this.name = $$v.name;
        _this.type = $$v.type;
        _this.modifier = $$v.modifier;
        _this.returns = $$v.returns;
        _this._method$_$v = null;
      }
      return _this;
    },
    build$0() {
      var _$failedField, e, _$result0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, exception, _this = this, _s6_ = "Method",
        _s11_ = "annotations",
        _s18_ = "optionalParameters",
        _s18_0 = "requiredParameters",
        _$result = null;
      try {
        _$result0 = _this._method$_$v;
        if (_$result0 == null) {
          _this.get$_method$_$this();
          t1 = _this.annotations.build$0();
          _this.get$_method$_$this();
          t2 = _this.docs.build$0();
          _this.get$_method$_$this();
          t3 = _this.types.build$0();
          _this.get$_method$_$this();
          t4 = _this.optionalParameters.build$0();
          _this.get$_method$_$this();
          t5 = _this.requiredParameters.build$0();
          _this.get$_method$_$this();
          t6 = _this.body;
          _this.get$_method$_$this();
          t7 = _this.external;
          if (t7 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s6_, "external"));
          _this.get$_method$_$this();
          t8 = _this.lambda;
          _this.get$_method$_$this();
          t9 = _this.$static;
          if (t9 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s6_, "static"));
          _this.get$_method$_$this();
          t10 = _this.name;
          _this.get$_method$_$this();
          t11 = _this.type;
          _this.get$_method$_$this();
          t12 = _this.modifier;
          _this.get$_method$_$this();
          _$result0 = new D._$Method(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, _this.returns);
          if (t1 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s6_, _s11_));
          if (t2 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s6_, "docs"));
          if (t3 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s6_, "types"));
          if (t4 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s6_, _s18_));
          if (t5 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s6_, _s18_0));
        }
        _$result = _$result0;
      } catch (exception) {
        H.unwrapException(exception);
        _$failedField = H._Cell$named("_$failedField");
        try {
          _$failedField._value = _s11_;
          _this.get$_method$_$this();
          _this.annotations.build$0();
          _$failedField._value = "docs";
          _this.get$_method$_$this();
          _this.docs.build$0();
          _$failedField._value = "types";
          _this.get$_method$_$this();
          _this.types.build$0();
          _$failedField._value = _s18_;
          _this.get$_method$_$this();
          _this.optionalParameters.build$0();
          _$failedField._value = _s18_0;
          _this.get$_method$_$this();
          _this.requiredParameters.build$0();
        } catch (exception) {
          e = H.unwrapException(exception);
          t1 = Y.BuiltValueNestedFieldError$(_s6_, _$failedField.readLocal$0(), J.toString$0$(e));
          throw H.wrapException(t1);
        }
        throw exception;
      }
      t1 = type$.Method._as(_$result);
      if (t1 == null)
        H.throwExpression(P.ArgumentError$notNull("other"));
      _this._method$_$v = t1;
      return _$result;
    }
  };
  D._$Parameter.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (other === _this)
        return true;
      return other instanceof D.Parameter && _this.defaultTo == other.defaultTo && _this.name === other.name && _this.named === other.named && _this.toThis === other.toThis && J.$eq$(_this.annotations, other.annotations) && J.$eq$(_this.docs, other.docs) && J.$eq$(_this.types, other.types) && J.$eq$(_this.type, other.type) && _this.required === other.required && _this.covariant === other.covariant;
    },
    get$hashCode(_) {
      var _this = this, _519018 = 519018, _218159 = 218159,
        t1 = Y.$jc(Y.$jc(0, J.get$hashCode$(_this.defaultTo)), C.JSString_methods.get$hashCode(_this.name));
      t1 = Y.$jc(t1, _this.named ? _519018 : _218159);
      t1 = Y.$jc(Y.$jc(Y.$jc(Y.$jc(Y.$jc(t1, _this.toThis ? _519018 : _218159), J.get$hashCode$(_this.annotations)), J.get$hashCode$(_this.docs)), J.get$hashCode$(_this.types)), J.get$hashCode$(_this.type));
      t1 = Y.$jc(t1, _this.required ? _519018 : _218159);
      return Y.$jf(Y.$jc(t1, _this.covariant ? _519018 : _218159));
    },
    toString$0(_) {
      var _this = this,
        t1 = $.$get$newBuiltValueToStringHelper().call$1("Parameter"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "defaultTo", _this.defaultTo);
      t2.add$2(t1, "name", _this.name);
      t2.add$2(t1, "named", _this.named);
      t2.add$2(t1, "toThis", _this.toThis);
      t2.add$2(t1, "annotations", _this.annotations);
      t2.add$2(t1, "docs", _this.docs);
      t2.add$2(t1, "types", _this.types);
      t2.add$2(t1, "type", _this.type);
      t2.add$2(t1, "required", _this.required);
      t2.add$2(t1, "covariant", _this.covariant);
      return t2.toString$0(t1);
    }
  };
  D._$ParameterBuilder.prototype = {
    get$_method$_$this() {
      var t1, _this = this,
        $$v = _this._method$_$v;
      if ($$v != null) {
        _this.defaultTo = $$v.defaultTo;
        _this.super$ParameterBuilder$name(0, $$v.name);
        _this.named = $$v.named;
        _this.toThis = $$v.toThis;
        t1 = $$v.annotations;
        t1.toString;
        _this.annotations = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        t1 = $$v.docs;
        t1.toString;
        _this.docs = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        t1 = $$v.types;
        t1.toString;
        _this.types = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        _this.type = $$v.type;
        _this.required = $$v.required;
        _this.covariant = $$v.covariant;
        _this._method$_$v = null;
      }
      return _this;
    },
    build$0() {
      var _$failedField, e, _$result0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, exception, _this = this,
        _s9_ = "Parameter",
        _s11_ = "annotations",
        _$result = null;
      try {
        _$result0 = _this._method$_$v;
        if (_$result0 == null) {
          _this.get$_method$_$this();
          t1 = _this.defaultTo;
          _this.get$_method$_$this();
          t2 = D.ParameterBuilder.prototype.get$name.call(_this, _this);
          if (t2 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s9_, "name"));
          _this.get$_method$_$this();
          t3 = _this.named;
          if (t3 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s9_, "named"));
          _this.get$_method$_$this();
          t4 = _this.toThis;
          if (t4 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s9_, "toThis"));
          _this.get$_method$_$this();
          t5 = _this.annotations.build$0();
          _this.get$_method$_$this();
          t6 = _this.docs.build$0();
          _this.get$_method$_$this();
          t7 = _this.types.build$0();
          _this.get$_method$_$this();
          t8 = _this.type;
          _this.get$_method$_$this();
          t9 = _this.required;
          if (t9 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s9_, "required"));
          _this.get$_method$_$this();
          t10 = _this.covariant;
          if (t10 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s9_, "covariant"));
          _$result0 = new D._$Parameter(t1, t2, t3, t4, t5, t6, t7, t8, t9, t10);
          if (t5 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s9_, _s11_));
          if (t6 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s9_, "docs"));
          if (t7 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s9_, "types"));
        }
        _$result = _$result0;
      } catch (exception) {
        H.unwrapException(exception);
        _$failedField = H._Cell$named("_$failedField");
        try {
          _$failedField._value = _s11_;
          _this.get$_method$_$this();
          _this.annotations.build$0();
          _$failedField._value = "docs";
          _this.get$_method$_$this();
          _this.docs.build$0();
          _$failedField._value = "types";
          _this.get$_method$_$this();
          _this.types.build$0();
        } catch (exception) {
          e = H.unwrapException(exception);
          t1 = Y.BuiltValueNestedFieldError$(_s9_, _$failedField.readLocal$0(), J.toString$0$(e));
          throw H.wrapException(t1);
        }
        throw exception;
      }
      t1 = type$.Parameter._as(_$result);
      if (t1 == null)
        H.throwExpression(P.ArgumentError$notNull("other"));
      _this._method$_$v = t1;
      return _$result;
    }
  };
  D._Method_Object_HasAnnotations.prototype = {};
  D._Method_Object_HasAnnotations_HasGenerics.prototype = {};
  D._Method_Object_HasAnnotations_HasGenerics_HasDartDocs.prototype = {};
  D._MethodBuilder_Object_HasAnnotationsBuilder.prototype = {};
  D._MethodBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder.prototype = {};
  D._MethodBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder_HasDartDocsBuilder.prototype = {};
  D._Parameter_Object_HasAnnotations.prototype = {};
  D._Parameter_Object_HasAnnotations_HasGenerics.prototype = {};
  D._Parameter_Object_HasAnnotations_HasGenerics_HasDartDocs.prototype = {};
  D._ParameterBuilder_Object_HasAnnotationsBuilder.prototype = {};
  D._ParameterBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder.prototype = {};
  D._ParameterBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder_HasDartDocsBuilder.prototype = {};
  U.Reference.prototype = {
    accept$1$2(_, visitor, context, $R) {
      return $R._eval$1("SpecVisitor<0>")._as(visitor).visitReference$2(this, $R._eval$1("0?")._as(context));
    },
    accept$1$1($receiver, visitor, $R) {
      return this.accept$1$2($receiver, visitor, null, $R);
    },
    get$hashCode(_) {
      return C.JSString_methods.get$hashCode(H.S(this.url) + "#" + this.symbol);
    },
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (type$.Reference._is(other)) {
        other.get$url(other);
        t1 = other.get$symbol() === this.symbol;
      } else
        t1 = false;
      return t1;
    },
    toString$0(_) {
      var t1 = $.$get$newBuiltValueToStringHelper().call$1("Reference"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "url", this.url);
      t2.add$2(t1, "symbol", this.symbol);
      return t2.toString$0(t1);
    },
    get$type(_) {
      var t1 = new E._$TypeReferenceBuilder(D.ListBuilder_ListBuilder(C.List_empty, type$.Reference));
      type$.nullable_void_Function_TypeReferenceBuilder._as(new U.Reference_type_closure(this)).call$1(t1);
      return t1.build$0();
    },
    get$url(receiver) {
      return this.url;
    },
    get$symbol() {
      return this.symbol;
    }
  };
  U.Reference_type_closure.prototype = {
    call$1(b) {
      var t1 = this.$this;
      b.get$_$this();
      b.url = t1.url;
      b.get$_$this();
      b.symbol = t1.symbol;
      return b;
    },
    $signature: 54
  };
  E.TypeReference.prototype = {
    accept$1$2(_, visitor, context, $R) {
      return $R._eval$1("SpecVisitor<0>")._as(visitor).visitType$2(this, $R._eval$1("0?")._as(context));
    },
    accept$1$1($receiver, visitor, $R) {
      return this.accept$1$2($receiver, visitor, null, $R);
    },
    get$type(_) {
      return this;
    },
    $isReference: 1
  };
  E.TypeReferenceBuilder.prototype = {};
  E._$TypeReference.prototype = {
    $eq(_, other) {
      var t1;
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (other instanceof E.TypeReference)
        if (this.symbol === other.symbol)
          t1 = J.$eq$(this.types, other.types) && true;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode(_) {
      var _this = this;
      return Y.$jf(Y.$jc(Y.$jc(Y.$jc(Y.$jc(Y.$jc(0, C.JSString_methods.get$hashCode(_this.symbol)), C.JSNull_methods.get$hashCode(_this.url)), C.JSNull_methods.get$hashCode(_this.bound)), J.get$hashCode$(_this.types)), C.JSNull_methods.get$hashCode(_this.isNullable)));
    },
    toString$0(_) {
      var _this = this,
        t1 = $.$get$newBuiltValueToStringHelper().call$1("TypeReference"),
        t2 = J.getInterceptor$ax(t1);
      t2.add$2(t1, "symbol", _this.symbol);
      t2.add$2(t1, "url", _this.url);
      t2.add$2(t1, "bound", _this.bound);
      t2.add$2(t1, "types", _this.types);
      t2.add$2(t1, "isNullable", _this.isNullable);
      return t2.toString$0(t1);
    },
    get$symbol() {
      return this.symbol;
    },
    get$url(receiver) {
      return this.url;
    }
  };
  E._$TypeReferenceBuilder.prototype = {
    get$_$this() {
      var t1, _this = this,
        $$v = _this._type_reference$_$v;
      if ($$v != null) {
        _this.symbol = $$v.symbol;
        _this.url = $$v.url;
        _this.bound = $$v.bound;
        t1 = $$v.types;
        t1.toString;
        _this.types = D.ListBuilder_ListBuilder(t1, t1.$ti._precomputed1);
        _this.isNullable = $$v.isNullable;
        _this._type_reference$_$v = null;
      }
      return _this;
    },
    build$0() {
      var _$failedField, e, _$result0, t1, t2, t3, t4, exception, _this = this,
        _s13_ = "TypeReference",
        _$result = null;
      try {
        _$result0 = _this._type_reference$_$v;
        if (_$result0 == null) {
          _this.get$_$this();
          t1 = _this.symbol;
          if (t1 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s13_, "symbol"));
          _this.get$_$this();
          t2 = _this.url;
          _this.get$_$this();
          t3 = _this.bound;
          _this.get$_$this();
          t4 = _this.types.build$0();
          _this.get$_$this();
          _$result0 = new E._$TypeReference(t1, t2, t3, t4, _this.isNullable);
          if (t4 == null)
            H.throwExpression(Y.BuiltValueNullFieldError$(_s13_, "types"));
        }
        _$result = _$result0;
      } catch (exception) {
        H.unwrapException(exception);
        _$failedField = H._Cell$named("_$failedField");
        try {
          _$failedField._value = "types";
          _this.get$_$this();
          _this.types.build$0();
        } catch (exception) {
          e = H.unwrapException(exception);
          t1 = Y.BuiltValueNestedFieldError$(_s13_, _$failedField.readLocal$0(), J.toString$0$(e));
          throw H.wrapException(t1);
        }
        throw exception;
      }
      t1 = type$.TypeReference._as(_$result);
      if (t1 == null)
        H.throwExpression(P.ArgumentError$notNull("other"));
      _this._type_reference$_$v = t1;
      return _$result;
    }
  };
  E._TypeReference_Expression_HasGenerics.prototype = {};
  E._TypeReferenceBuilder_Object_HasGenericsBuilder.prototype = {};
  U.DefaultEquality.prototype = {};
  U.IterableEquality.prototype = {
    equals$2(elements1, elements2) {
      var it1, it2, hasNext,
        t1 = this.$ti._eval$1("Iterable<1>?");
      t1._as(elements1);
      t1._as(elements2);
      if (elements1 === elements2)
        return true;
      it1 = new J.ArrayIterator(elements1, elements1.length, H._arrayInstanceType(elements1)._eval$1("ArrayIterator<1>"));
      it2 = new J.ArrayIterator(elements2, elements2.length, H._arrayInstanceType(elements2)._eval$1("ArrayIterator<1>"));
      for (; true;) {
        hasNext = it1.moveNext$0();
        if (hasNext !== it2.moveNext$0())
          return false;
        if (!hasNext)
          return true;
        if (!J.$eq$(it1._current, it2._current))
          return false;
      }
    },
    hash$1(_, elements) {
      var t1, hash, _i, c;
      this.$ti._eval$1("Iterable<1>?")._as(elements);
      for (t1 = elements.length, hash = 0, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i) {
        c = J.get$hashCode$(elements[_i]);
        if (typeof c !== "number")
          return H.iae(c);
        hash = hash + c & 2147483647;
        hash = hash + (hash << 10 >>> 0) & 2147483647;
        hash ^= hash >>> 6;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    }
  };
  U.ArgumentListVisitor.prototype = {
    get$_isSingle() {
      var t1 = this._allArguments,
        t2 = J.getInterceptor$asx(t1);
      return t2.get$length(t1) === 1 && !type$.NamedExpression._is(t2.get$single(t1));
    },
    visit$0() {
      var t1, t2, functions, t3, _i, argument, _this = this;
      if (_this.get$_isSingle()) {
        t1 = _this._argument_list_visitor$_visitor.builder;
        C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
      }
      t1 = _this._argument_list_visitor$_visitor;
      t2 = t1.builder;
      C.JSArray_methods.add$1(t2._openSpans, new Q.OpenSpan(t2.get$_currentChunkIndex(), 1));
      t1.token$1(_this._leftParenthesis);
      _this._argument_list_visitor$_arguments.visit$1(t1);
      t1.builder.endSpan$0();
      functions = _this._functions;
      if (functions != null) {
        if (J.$eq$(C.JSArray_methods.get$first(functions), J.get$first$ax(_this._allArguments)))
          t1.soloZeroSplit$0();
        else
          t1.soloSplit$0();
        for (t2 = functions.length, t3 = type$.AstNode, _i = 0; _i < functions.length; functions.length === t2 || (0, H.throwConcurrentModificationError)(functions), ++_i) {
          argument = functions[_i];
          if (!J.$eq$(argument, C.JSArray_methods.get$first(functions)))
            t1.builder._pendingWhitespace = C.Whitespace_space;
          t1.visit$1(argument);
          t3._as(argument);
          if (t1._commaAfter$1(argument) != null)
            t1.token$1(argument.get$endToken().next);
        }
        t2 = t1.builder;
        C.JSArray_methods.add$1(t2._openSpans, new Q.OpenSpan(t2.get$_currentChunkIndex(), 1));
        _this._argumentsAfterFunctions.visit$1(t1);
        t1.builder.endSpan$0();
      }
      t1.token$1(_this._rightParenthesis);
      if (_this.get$_isSingle())
        t1.builder.endSpan$0();
    }
  };
  U.ArgumentListVisitor_ArgumentListVisitor$forArguments_isArrow.prototype = {
    call$1(named) {
      var expression = named._expression;
      if (type$.FunctionExpression._is(expression))
        return type$.ExpressionFunctionBody._is(expression._body);
      return false;
    },
    $signature: 55
  };
  U.ArgumentSublist.prototype = {
    visit$1(visitor) {
      var _this = this,
        t1 = _this._blocks;
      if (t1.get$isNotEmpty(t1))
        _this._blockRule = K.Rule$(2);
      _this._visitNamed$2(visitor, _this._visitPositional$1(visitor));
    },
    _visitPositional$1(visitor) {
      var leadingBlocks, trailingBlocks, rule, _this = this,
        t1 = _this._positional,
        t2 = t1.length;
      if (t2 === 0)
        return null;
      leadingBlocks = Math.min(_this._leadingBlocks, t2);
      trailingBlocks = Math.max(_this._trailingBlocks - _this._argument_list_visitor$_named.length, 0);
      rule = Z.PositionalRule$(_this._blockRule, leadingBlocks, trailingBlocks);
      _this._visitArguments$3(visitor, t1, rule);
      return rule;
    },
    _visitNamed$2(visitor, positionalRule) {
      var leadingBlocks, trailingBlocks, namedRule, _this = this,
        t1 = _this._argument_list_visitor$_named,
        t2 = t1.length;
      if (t2 === 0)
        return;
      leadingBlocks = Math.max(_this._leadingBlocks - _this._positional.length, 0);
      trailingBlocks = Math.min(_this._trailingBlocks, t2);
      namedRule = Z.NamedRule$(_this._blockRule, leadingBlocks, trailingBlocks);
      if (positionalRule != null)
        positionalRule._namedArgsRule = namedRule;
      _this._visitArguments$3(visitor, t1, namedRule);
    },
    _visitArguments$3(visitor, $arguments, rule) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, _i, t12, argumentBlock, t13, t14, t15, t16, _this = this;
      type$.List_Expression._as($arguments);
      visitor.builder.startRule$1(rule);
      t1 = _this._allArguments;
      t2 = J.getInterceptor$ax(t1);
      t3 = visitor.builder.split$1$space(0, !J.$eq$(C.JSArray_methods.get$first($arguments), t2.get$first(t1)));
      _this._previousSplit = t3;
      t4 = rule._argument$_arguments;
      C.JSArray_methods.add$1(t4, t3);
      t3 = $arguments === _this._positional;
      if (t3) {
        t5 = visitor.builder;
        C.JSArray_methods.add$1(t5._openSpans, new Q.OpenSpan(t5.get$_currentChunkIndex(), 2));
      }
      for (t5 = $arguments.length, t6 = type$.NamedExpression, t7 = type$.Expression, t8 = _this._blocks, t9 = visitor._blockRules, t10 = visitor._blockPreviousChunks, t11 = type$.NamedRule, _i = 0; _i < $arguments.length; $arguments.length === t5 || (0, H.throwConcurrentModificationError)($arguments), ++_i) {
        t12 = t7._as($arguments[_i]);
        argumentBlock = t8.$index(0, t12);
        t13 = argumentBlock != null;
        if (t13) {
          rule._trackInnerRules = false;
          t14 = _this._blockRule;
          t14.toString;
          t15 = _this._previousSplit;
          t9.$indexSet(0, argumentBlock, t14);
          if (t15 != null)
            t10.$indexSet(0, argumentBlock, t15);
        } else if (t2.get$length(t1) > 1) {
          t14 = visitor.builder;
          t15 = t14._blockArgumentNesting;
          t14 = t14._chunk_builder$_nesting;
          t16 = t14._pendingNesting;
          C.JSArray_methods.add$1(t15, t16 == null ? t14._nesting : t16);
        } else if (!t6._is(t12))
          rule._trackInnerRules = false;
        t14 = t6._is(t12);
        if (t14)
          visitor.visitNamedArgument$2(t12, t11._as(rule));
        else
          visitor.visit$1(t12);
        if (t13)
          rule._trackInnerRules = true;
        else if (t2.get$length(t1) > 1) {
          t13 = visitor.builder._blockArgumentNesting;
          if (0 >= t13.length)
            return H.ioore(t13, -1);
          t13.pop();
        } else if (!t14)
          rule._trackInnerRules = true;
        if (visitor._commaAfter$1(t12) != null)
          visitor.token$1(t12.get$endToken().next);
        t13 = C.JSArray_methods.get$last($arguments);
        if (t12 == null ? t13 != null : t12 !== t13) {
          t12 = visitor.builder.split$1$space(0, true);
          _this._previousSplit = t12;
          C.JSArray_methods.add$1(t4, t12);
        }
      }
      if (t3)
        visitor.builder.endSpan$0();
      visitor.builder.endRule$0();
    }
  };
  U.ArgumentSublist_ArgumentSublist_closure.prototype = {
    call$1(arg) {
      return !type$.NamedExpression._is(type$.Expression._as(arg));
    },
    $signature: 56
  };
  U.CallChainVisitor.prototype = {
    visit$0() {
      var t2, splitOnTarget, t3, _i, property, t4, t5, $call, blockCalls, _this = this,
        t1 = _this._visitor;
      t1.builder.nestExpression$0();
      t2 = t1.builder;
      C.JSArray_methods.add$1(t2._openSpans, new Q.OpenSpan(t2.get$_currentChunkIndex(), 1));
      t2 = _this._call_chain_visitor$_target;
      splitOnTarget = _this._forcesSplit$1(t2);
      if (splitOnTarget)
        if (_this._properties.length > 1) {
          t3 = Z.PositionalRule$(null, 0, 0);
          _this._propertyRule = t3;
          t1.builder.startLazyRule$1(t3);
        } else
          _this._enableRule$1$lazy(true);
      t1.visit$1(t2);
      t2 = _this._properties;
      t3 = t2.length;
      if (t3 === 1) {
        t1.soloZeroSplit$0();
        C.JSArray_methods.get$single(t2).write$1(_this);
      } else if (t3 > 1) {
        if (!splitOnTarget) {
          t3 = Z.PositionalRule$(null, 0, 0);
          _this._propertyRule = t3;
          t1.builder.startRule$1(t3);
        }
        for (t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          property = t2[_i];
          t4 = _this._propertyRule;
          t4.toString;
          C.JSArray_methods.add$1(t4._argument$_arguments, t1.builder.split$0(0));
          property.write$1(_this);
        }
        t1.builder.endRule$0();
      }
      t2 = _this._calls;
      if (t2.length > 1) {
        t3 = t1.builder;
        t4 = t3._blockArgumentNesting;
        t3 = t3._chunk_builder$_nesting;
        t5 = t3._pendingNesting;
        C.JSArray_methods.add$1(t4, t5 == null ? t3._nesting : t5);
      }
      for (t3 = t2.length, _i = 0; t4 = t2.length, _i < t4; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        $call = t2[_i];
        _this._enableRule$0();
        t1.builder.split$0(0);
        $call.write$1(_this);
      }
      if (t4 > 1) {
        t2 = t1.builder._blockArgumentNesting;
        if (0 >= t2.length)
          return H.ioore(t2, -1);
        t2.pop();
      }
      blockCalls = _this._blockCalls;
      if (blockCalls != null) {
        _this._enableRule$0();
        t1.builder.split$0(0);
        _this._disableRule$0();
        for (t2 = blockCalls.length, _i = 0; _i < blockCalls.length; blockCalls.length === t2 || (0, H.throwConcurrentModificationError)(blockCalls), ++_i)
          blockCalls[_i].write$1(_this);
        t2 = _this._hangingCall;
        if (t2 != null)
          t2.write$1(_this);
      }
      _this._disableRule$0();
      _this._endSpan$0();
      t1.builder.unnest$0();
    },
    _forcesSplit$1(expression) {
      var t1, argumentList, argument;
      for (t1 = type$.ParenthesizedExpression; t1._is(expression);)
        expression = expression._expression;
      if (type$.ListLiteral._is(expression))
        return false;
      if (type$.SetOrMapLiteral._is(expression))
        return false;
      if (type$.FunctionExpression._is(expression)) {
        t1 = expression._body;
        if (!type$.BlockFunctionBody._is(t1))
          return false;
        t1 = t1._block._statements;
        return t1.get$length(t1) === 0;
      }
      if (type$.MethodInvocation._is(expression))
        argumentList = expression._argumentList;
      else if (type$.InstanceCreationExpression._is(expression))
        argumentList = expression._argumentList;
      else
        argumentList = type$.FunctionExpressionInvocation._is(expression) ? expression._argumentList : null;
      if (argumentList == null)
        return true;
      t1 = argumentList._ast$_arguments;
      if (t1.get$length(t1) === 0)
        return true;
      argument = t1.get$last(t1);
      if (this._visitor._commaAfter$1(argument) != null)
        return false;
      return this._forcesSplit$1(type$.NamedExpression._is(argument) ? argument._expression : argument);
    },
    _disableRule$0() {
      if (!this._ruleEnabled)
        return;
      this._visitor.builder.endRule$0();
      this._ruleEnabled = false;
    },
    _enableRule$1$lazy(lazy) {
      var rule, t1, _this = this;
      if (_this._ruleEnabled)
        return;
      rule = K.Rule$(null);
      t1 = _this._propertyRule;
      if (t1 != null)
        t1._namedArgsRule = rule;
      t1 = _this._visitor.builder;
      if (lazy)
        t1.startLazyRule$1(rule);
      else
        t1.startRule$1(rule);
      _this._ruleEnabled = true;
    },
    _enableRule$0() {
      return this._enableRule$1$lazy(false);
    },
    _endSpan$0() {
      if (this._spanEnded)
        return;
      this._visitor.builder.endSpan$0();
      this._spanEnded = true;
    }
  };
  U.CallChainVisitor_CallChainVisitor_closure.prototype = {
    call$1($call) {
      return type$._Selector._as($call).get$isProperty();
    },
    $signature: 57
  };
  U._Selector.prototype = {
    get$isProperty() {
      return true;
    },
    isBlockCall$1(visitor) {
      return false;
    },
    write$1(visitor) {
      var t1, t2, t3, t4, t5, t6, t7, _i, postfix, t8, t9, rule, t10;
      this.writeSelector$1(visitor);
      t1 = visitor._visitor;
      t1.builder.nestExpression$0();
      for (t2 = this._postfixes, t3 = t2.length, t4 = type$.PostfixExpression, t5 = type$.IndexExpression, t6 = type$.FunctionExpressionInvocation, t7 = type$.Rule, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        postfix = t2[_i];
        if (t6._is(postfix)) {
          t8 = t1.builder;
          t8.toString;
          t9 = $.FastHash__nextId + 1 & 268435455;
          $.FastHash__nextId = t9;
          rule = new K.Rule(1, P.LinkedHashSet_LinkedHashSet$_empty(t7), t9);
          t9 = t8._lazyRules;
          C.JSArray_methods.forEach$1(t9, t8.get$_activateRule());
          C.JSArray_methods.set$length(t9, 0);
          t8._activateRule$1(rule);
          t1.builder.split$0(0);
          t8 = t1.builder;
          t9 = t8._lazyRules;
          t10 = t9.length;
          if (t10 !== 0) {
            if (0 >= t10)
              return H.ioore(t9, -1);
            t9.pop();
          } else {
            t8 = t8._rules;
            if (0 >= t8.length)
              return H.ioore(t8, -1);
            t8.pop();
          }
          t1.visit$1(postfix._typeArguments);
          t1.visitArgumentList$1(postfix._argumentList);
        } else if (t5._is(postfix))
          t1.finishIndexExpression$1(postfix);
        else if (t4._is(postfix))
          t1.token$1(postfix.operator);
      }
      t1.builder.unnest$0();
    }
  };
  U._MethodSelector.prototype = {
    get$isProperty() {
      return false;
    },
    isBlockCall$1(visitor) {
      var t2,
        t1 = this._node._argumentList;
      t1 = U.ArgumentListVisitor_ArgumentListVisitor$forArguments(visitor, t1.leftParenthesis, t1.rightParenthesis, t1._ast$_arguments);
      t2 = t1._argument_list_visitor$_arguments._blocks;
      return t2.get$isNotEmpty(t2) || t1._functions != null;
    },
    writeSelector$1(visitor) {
      var t3, t4,
        t1 = visitor._visitor,
        t2 = this._node;
      t1.token$1(t2.operator);
      t1.token$1(t2._methodName.token);
      t3 = visitor._blockCalls == null;
      if (t3) {
        t4 = visitor._calls;
        t4 = t4.length !== 0 && this === C.JSArray_methods.get$last(t4);
      } else
        t4 = false;
      if (t4)
        visitor._disableRule$0();
      if (visitor._properties.length === 0 && visitor._calls.length === 1 && t3 && type$.SimpleIdentifier._is(visitor._call_chain_visitor$_target))
        visitor._endSpan$0();
      t1.builder.nestExpression$0();
      t1.visit$1(t2._typeArguments);
      t1.visitArgumentList$2$nestExpression(t2._argumentList, false);
      t1.builder.unnest$0();
    }
  };
  U._PrefixedSelector.prototype = {
    writeSelector$1(visitor) {
      var t1 = visitor._visitor,
        t2 = this._node;
      t1.token$1(t2.period);
      t1.visit$1(t2._identifier);
    }
  };
  U._PropertySelector.prototype = {
    writeSelector$1(visitor) {
      var t1 = visitor._visitor,
        t2 = this._node;
      t1.token$1(t2.operator);
      t1.visit$1(t2._propertyName);
    }
  };
  Q.Selection.prototype = {};
  Q.Chunk.prototype = {
    get$text(_) {
      return this._text;
    },
    get$flushLeftAfter() {
      var t1 = this._chunk$_block;
      if (t1 == null)
        return this._flushLeft;
      return C.JSArray_methods.get$last(t1.chunks).get$flushLeftAfter();
    },
    get$length(_) {
      var t1 = this._text.length;
      return t1 + (this._spaceWhenUnsplit ? 1 : 0);
    },
    get$unsplitBlockLength() {
      var t2, $length, _i, chunk, t3, t4,
        t1 = this._chunk$_block;
      if (t1 == null)
        return 0;
      for (t1 = t1.chunks, t2 = t1.length, $length = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        chunk = t1[_i];
        t3 = chunk._text.length;
        t4 = chunk._spaceWhenUnsplit ? 1 : 0;
        $length += t3 + t4 + chunk.get$unsplitBlockLength();
      }
      return $length;
    },
    applySplit$6$flushLeft$isDouble$space(rule, indent, nesting, flushLeft, isDouble, space) {
      var _this = this;
      if (rule._isHardened)
        _this._rule = rule;
      else if (_this._rule == null)
        _this._rule = rule;
      _this._flushLeft = flushLeft === true;
      _this._chunk$_nesting = nesting;
      _this._indent = indent;
      _this._spaceWhenUnsplit = space === true;
      if (_this._isDouble == null)
        _this._isDouble = isDouble;
    },
    applySplit$4$flushLeft(rule, indent, nesting, flushLeft) {
      return this.applySplit$6$flushLeft$isDouble$space(rule, indent, nesting, flushLeft, null, null);
    },
    indentBlock$1(getValue) {
      var t1, argument, rule;
      type$.int_Function_Rule._as(getValue);
      t1 = this._chunk$_block;
      if (t1 == null)
        return false;
      argument = t1.argument;
      if (argument == null)
        return false;
      rule = argument._rule;
      if (rule == null)
        return true;
      return rule.isSplit$2(getValue.call$1(rule), argument);
    },
    toString$0(_) {
      var rule, _this = this, parts = [],
        t1 = _this._text;
      if (t1.length !== 0)
        parts.push(t1);
      t1 = _this._indent;
      if (t1 != null)
        parts.push("indent:" + H.S(t1));
      if (_this._spaceWhenUnsplit)
        parts.push("space");
      if (_this._isDouble === true)
        parts.push("double");
      if (_this._flushLeft)
        parts.push("flush");
      rule = _this._rule;
      if (rule == null)
        parts.push("(no split)");
      else {
        parts.push(rule.toString$0(0));
        if (rule._isHardened)
          parts.push("(hard)");
        t1 = rule.get$constrainedRules();
        if (t1.get$isNotEmpty(t1))
          parts.push("-> " + rule.get$constrainedRules().join$1(0, " "));
      }
      return C.JSArray_methods.join$1(parts, " ");
    }
  };
  Q.ChunkBlock.prototype = {};
  Q.OpenSpan.prototype = {
    toString$0(_) {
      return "OpenSpan(" + this.start + ", $" + this.cost + ")";
    }
  };
  Q.Span.prototype = {
    toString$0(_) {
      return "" + this.id + "$" + this.cost;
    }
  };
  Q.CommentType.prototype = {
    toString$0(_) {
      return this._chunk$_name;
    }
  };
  Q.SourceComment.prototype = {
    get$text(receiver) {
      return this.text;
    }
  };
  U.ChunkBuilder.prototype = {
    get$_currentChunkIndex() {
      var t1 = this._chunks;
      if (t1.length === 0)
        return 0;
      if (C.JSArray_methods.get$last(t1)._rule == null)
        return t1.length - 1;
      return t1.length;
    },
    split$3$isDouble$nest$space(_, isDouble, nest, space) {
      var _this = this;
      space = space === true;
      if (_this._preventSplitNesting > 0) {
        if (space)
          _this._pendingWhitespace = C.Whitespace_space;
        return Q.Chunk$dummy();
      }
      return _this._writeSplit$5$flushLeft$isDouble$nest$space(C.JSArray_methods.get$last(_this._rules), null, isDouble, nest, space);
    },
    split$1$space($receiver, space) {
      return this.split$3$isDouble$nest$space($receiver, null, null, space);
    },
    split$2$nest$space($receiver, nest, space) {
      return this.split$3$isDouble$nest$space($receiver, null, nest, space);
    },
    split$0($receiver) {
      return this.split$3$isDouble$nest$space($receiver, null, null, null);
    },
    writeComments$3(comments, linesBeforeToken, token) {
      var t1, i, t2, t3, comment, t4, t5, linesAfter, _this = this;
      type$.List_SourceComment._as(comments);
      if (_this._pendingWhitespace === C.Whitespace_twoNewlines && C.JSArray_methods.get$first(comments).linesBefore < 2)
        if (linesBeforeToken > 1)
          _this._pendingWhitespace = C.Whitespace_newline;
        else
          for (t1 = comments.length, i = 1; i < t1; ++i)
            if (comments[i].linesBefore > 1) {
              _this._pendingWhitespace = C.Whitespace_newline;
              break;
            }
      t1 = _this._pendingWhitespace;
      if (t1 === C.Whitespace_afterHardSplit) {
        C.JSArray_methods.get$first(comments).linesBefore = 1;
        t1 = _this._pendingWhitespace = C.Whitespace_none;
      }
      t2 = linesBeforeToken === 0;
      if (t2 && t1.get$minimumLines() > C.JSArray_methods.get$first(comments).linesBefore && C.JSArray_methods.every$1(comments, new U.ChunkBuilder_writeComments_closure()))
        C.JSArray_methods.get$first(comments).linesBefore = _this._pendingWhitespace.get$minimumLines();
      for (t1 = type$.Rule, t3 = _this._chunks, i = 0; i < comments.length; ++i) {
        comment = comments[i];
        _this.preserveNewlines$1(comment.linesBefore);
        if (_this._pendingWhitespace === C.Whitespace_space)
          _this._pendingWhitespace = C.Whitespace_none;
        _this._emitPendingWhitespace$0();
        t4 = comment.linesBefore;
        if (t4 === 0 || comment.type === C.CommentType_3) {
          if (_this._shouldMoveCommentBeforeSplit$1(comment))
            C.JSArray_methods.get$last(t3)._rule = null;
          if (_this._needsSpaceBeforeComment$1(comment))
            _this._chunk_builder$_writeText$1(" ");
        } else {
          _this._pendingWhitespace = C.Whitespace_afterHardSplit;
          t5 = $.FastHash__nextId + 1 & 268435455;
          $.FastHash__nextId = t5;
          t5 = new K.Rule(0, P.LinkedHashSet_LinkedHashSet$_empty(t1), t5);
          t5._isHardened = true;
          _this._writeSplit$4$flushLeft$isDouble$nest(t5, comment.flushLeft, t4 > 1, true);
        }
        _this._writeCommentText$1(comment);
        t4 = comment._chunk$_selectionStart;
        if (t4 != null) {
          t5 = C.JSArray_methods.get$last(t3);
          t5.toString;
          t5._chunk$_selectionStart = J.get$text$x(t5).length - (comment.text.length - t4);
        }
        t4 = comment._chunk$_selectionEnd;
        if (t4 != null) {
          t5 = C.JSArray_methods.get$last(t3);
          t5.toString;
          t5._chunk$_selectionEnd = J.get$text$x(t5).length - (comment.text.length - t4);
        }
        if (i < comments.length - 1)
          linesAfter = comments[i + 1].linesBefore;
        else {
          if (t2) {
            t4 = C.JSArray_methods.get$last(comments);
            t4 = H.stringContainsUnchecked(t4.text, "\n", 0);
          } else
            t4 = false;
          linesAfter = t4 ? 1 : linesBeforeToken;
        }
        if (linesAfter > 0) {
          _this._pendingWhitespace = C.Whitespace_afterHardSplit;
          t4 = $.FastHash__nextId + 1 & 268435455;
          $.FastHash__nextId = t4;
          t4 = new K.Rule(0, P.LinkedHashSet_LinkedHashSet$_empty(t1), t4);
          t4._isHardened = true;
          _this._writeSplit$4$flushLeft$isDouble$nest(t4, null, linesAfter > 1, true);
        }
      }
      if (_this._needsSpaceAfterLastComment$2(comments, token))
        _this._pendingWhitespace = C.Whitespace_space;
      _this.preserveNewlines$1(linesBeforeToken);
    },
    _writeCommentText$1(comment) {
      var t1, match, t2, t3, lines, leastIndentation, i, line, _i, _this = this;
      if (!_this._formatter.fixes.contains$1(0, C.StyleFix_hj7)) {
        _this._chunk_builder$_writeText$1(comment.text);
        return;
      }
      t1 = comment.text;
      match = $.$get$_javaDocComment().firstMatch$1(t1);
      if (match == null) {
        _this._chunk_builder$_writeText$1(t1);
        return;
      }
      t2 = match._match;
      if (1 >= t2.length)
        return H.ioore(t2, 1);
      t3 = type$.JSArray_String;
      lines = H._setArrayType(H._setArrayType(t2[1].split("\n"), t3).slice(0), t3);
      leastIndentation = t1.length;
      for (i = 0; i < lines.length; ++i) {
        line = J.trimRight$0$s(lines[i]);
        if (i > 0 && i < lines.length - 1) {
          match = $.$get$_javaDocLine().firstMatch$1(line);
          if (match != null) {
            t1 = match._match;
            if (1 >= t1.length)
              return H.ioore(t1, 1);
            t1 = t1[1];
            t1.toString;
            line = t1;
          }
        }
        if (line.length !== 0) {
          t1 = $.$get$_leadingIndentation().firstMatch$1(line)._match;
          if (1 >= t1.length)
            return H.ioore(t1, 1);
          leastIndentation = Math.min(leastIndentation, t1[1].length);
        }
        C.JSArray_methods.$indexSet(lines, i, line);
      }
      t1 = C.JSArray_methods.get$first(lines);
      t1.toString;
      if (J.get$length$asx(t1) === 0)
        C.JSArray_methods.removeAt$1(lines, 0);
      if (lines.length !== 0) {
        t1 = C.JSArray_methods.get$last(lines);
        t1.toString;
        t1 = J.get$length$asx(t1) === 0;
      } else
        t1 = false;
      if (t1) {
        if (0 < 0 || 0 >= lines.length)
          return H.ioore(lines, -1);
        lines.pop();
      }
      if (lines.length === 0)
        C.JSArray_methods.add$1(lines, "");
      for (t1 = lines.length, _i = 0; _i < lines.length; lines.length === t1 || (0, H.throwConcurrentModificationError)(lines), ++_i) {
        line = lines[_i];
        _this._chunk_builder$_writeText$1("///");
        line.toString;
        t2 = J.getInterceptor$asx(line);
        if (t2.get$length(line) !== 0)
          _this._chunk_builder$_writeText$1(" " + t2.substring$1(line, leastIndentation));
        _this._pendingWhitespace = C.Whitespace_newline;
        _this._emitPendingWhitespace$0();
      }
    },
    preserveNewlines$1(numLines) {
      var _this = this;
      switch (_this._pendingWhitespace) {
        case C.Whitespace_splitOrNewline:
          if (numLines > 0)
            _this._pendingWhitespace = C.Whitespace_nestedNewline;
          else {
            _this._pendingWhitespace = C.Whitespace_none;
            _this.split$1$space(0, true);
          }
          break;
        case C.Whitespace_splitOrTwoNewlines:
          if (numLines > 1)
            _this._pendingWhitespace = C.Whitespace_twoNewlines;
          else {
            _this._pendingWhitespace = C.Whitespace_none;
            _this.split$1$space(0, true);
          }
          break;
        case C.Whitespace_oneOrTwoNewlines:
          if (numLines > 1)
            _this._pendingWhitespace = C.Whitespace_twoNewlines;
          else
            _this._pendingWhitespace = C.Whitespace_newline;
          break;
      }
    },
    endSpan$0() {
      var openSpan, end, i, span, chunk,
        t1 = this._openSpans;
      if (0 >= t1.length)
        return H.ioore(t1, -1);
      openSpan = t1.pop();
      end = this.get$_currentChunkIndex();
      i = openSpan.start;
      if (i === end)
        return;
      t1 = $.FastHash__nextId + 1 & 268435455;
      $.FastHash__nextId = t1;
      span = new Q.Span(openSpan.cost, t1);
      for (t1 = this._chunks; i < end; ++i) {
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        chunk = t1[i];
        if (!chunk._rule._isHardened)
          C.JSArray_methods.add$1(chunk.spans, span);
      }
    },
    startRule$1(rule) {
      var t1;
      if (rule == null)
        rule = K.Rule$(null);
      t1 = this._lazyRules;
      C.JSArray_methods.forEach$1(t1, this.get$_activateRule());
      C.JSArray_methods.set$length(t1, 0);
      this._activateRule$1(rule);
    },
    startRule$0() {
      return this.startRule$1(null);
    },
    _activateRule$1(rule) {
      var t1, t2, _i, outer;
      type$.Rule._as(rule);
      for (t1 = this._rules, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        outer = t1[_i];
        if (!outer.get$splitsOnInnerRules())
          continue;
        rule._implied.add$1(0, outer);
      }
      C.JSArray_methods.add$1(t1, rule);
    },
    startLazyRule$1(rule) {
      if (rule == null)
        rule = K.Rule$(null);
      C.JSArray_methods.add$1(this._lazyRules, rule);
    },
    startLazyRule$0() {
      return this.startLazyRule$1(null);
    },
    endRule$0() {
      var t1 = this._lazyRules,
        t2 = t1.length;
      if (t2 !== 0) {
        if (0 >= t2)
          return H.ioore(t1, -1);
        t1.pop();
      } else {
        t1 = this._rules;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
    },
    nestExpression$2$indent$now(indent, now) {
      var t2,
        t1 = this._chunk_builder$_nesting;
      if (indent == null)
        indent = 4;
      t2 = t1._pendingNesting;
      if (t2 != null)
        t1._pendingNesting = M.NestingLevel$_(t2, indent);
      else {
        t2 = t1._nesting;
        t2.toString;
        t1._pendingNesting = M.NestingLevel$_(t2, indent);
      }
      if (now === true)
        t1.commitNesting$0();
    },
    nestExpression$0() {
      return this.nestExpression$2$indent$now(null, null);
    },
    nestExpression$1$now(now) {
      return this.nestExpression$2$indent$now(null, now);
    },
    unnest$1$now(now) {
      var t1 = this._chunk_builder$_nesting,
        t2 = t1._pendingNesting;
      if (t2 != null)
        t1._pendingNesting = t2.parent;
      else
        t1._pendingNesting = t1._nesting.parent;
      if (now !== false)
        t1.commitNesting$0();
    },
    unnest$0() {
      return this.unnest$1$now(null);
    },
    startBlock$2$indent(argumentChunk, indent) {
      var t1, t2, t3, t4, t5, t6, t7, _this = this,
        chunk = C.JSArray_methods.get$last(_this._chunks);
      chunk.toString;
      t1 = H._setArrayType([], type$.JSArray_Chunk);
      chunk._chunk$_block = new Q.ChunkBlock(argumentChunk, indent, t1);
      t2 = type$.JSArray_Rule;
      t3 = H._setArrayType([], t2);
      t2 = H._setArrayType([], t2);
      t4 = H._setArrayType([], type$.JSArray_OpenSpan);
      t5 = H._setArrayType([0], type$.JSArray_int);
      t6 = M.NestingLevel$();
      t5 = new F.NestingBuilder(t5, t6);
      t7 = H._setArrayType([], type$.JSArray_NestingLevel);
      C.JSArray_methods.add$1(t7, t6);
      if (indent)
        t5.indent$1(null);
      return new U.ChunkBuilder(_this._formatter, _this, _this._chunk_builder$_source, t1, C.Whitespace_none, t3, P.LinkedHashSet_LinkedHashSet$_empty(type$.Rule), t2, t4, t5, t7);
    },
    startBlock$1(argumentChunk) {
      return this.startBlock$2$indent(argumentChunk, true);
    },
    endBlock$2$forceSplit(ignoredSplit, forceSplit) {
      var t1, t2, t3, $length, _i, chunk, t4, t5, _this = this;
      _this._divideChunks$0();
      if (!forceSplit) {
        t1 = _this._chunks;
        t2 = t1.length;
        t3 = _this._formatter.pageWidth;
        $length = 0;
        _i = 0;
        while (true) {
          if (!(_i < t1.length)) {
            forceSplit = false;
            break;
          }
          chunk = t1[_i];
          t4 = chunk._text.length;
          t5 = chunk._spaceWhenUnsplit ? 1 : 0;
          $length += t4 + t5 + chunk.get$unsplitBlockLength();
          if ($length > t3) {
            forceSplit = true;
            break;
          }
          t4 = chunk._rule;
          if (t4 != null && t4._isHardened && t4 !== ignoredSplit) {
            forceSplit = true;
            break;
          }
          t1.length === t2 || (0, H.throwConcurrentModificationError)(t1);
          ++_i;
        }
      }
      t1 = _this._parent;
      t1.toString;
      t2 = _this._firstFlushLeft;
      if (forceSplit)
        t1._handleHardSplit$0();
      chunk = C.JSArray_methods.get$last(t1._chunks);
      chunk.applySplit$4$flushLeft(C.JSArray_methods.get$last(t1._rules), C.JSArray_methods.get$last(t1._chunk_builder$_nesting._stack), C.JSArray_methods.get$last(t1._blockArgumentNesting), t2);
      if (chunk._rule._isHardened)
        t1._handleHardSplit$0();
      return t1;
    },
    _emitPendingWhitespace$0() {
      var _this = this;
      switch (_this._pendingWhitespace) {
        case C.Whitespace_space:
          _this._chunk_builder$_writeText$1(" ");
          break;
        case C.Whitespace_newline:
          _this._writeHardSplit$0();
          break;
        case C.Whitespace_nestedNewline:
          _this._writeHardSplit$1$nest(true);
          break;
        case C.Whitespace_newlineFlushLeft:
          _this._writeHardSplit$2$flushLeft$nest(true, true);
          break;
        case C.Whitespace_twoNewlines:
          _this._writeHardSplit$1$isDouble(true);
          break;
        case C.Whitespace_splitOrNewline:
        case C.Whitespace_splitOrTwoNewlines:
        case C.Whitespace_oneOrTwoNewlines:
          break;
      }
      _this._pendingWhitespace = C.Whitespace_none;
    },
    _shouldMoveCommentBeforeSplit$1(comment) {
      var t2, text,
        t1 = this._chunks;
      if (t1.length === 0)
        return false;
      if (comment.linesBefore !== 0)
        return false;
      t2 = comment.type;
      if (t2 === C.CommentType_0)
        return false;
      if (t2 === C.CommentType_2)
        return false;
      text = C.JSArray_methods.get$last(t1)._text;
      if (J.endsWith$1$s(text, ",") && t2 === C.CommentType_3)
        return false;
      return !C.JSString_methods.endsWith$1(text, "(") && !C.JSString_methods.endsWith$1(text, "[") && !C.JSString_methods.endsWith$1(text, "{");
    },
    _isGenericMethodComment$1(comment) {
      var t1 = comment.text;
      return C.JSString_methods.startsWith$1(t1, "/*<") || C.JSString_methods.startsWith$1(t1, "/*=");
    },
    _needsSpaceBeforeComment$1(comment) {
      var text,
        t1 = this._chunks;
      if (t1.length === 0)
        return false;
      if (C.JSArray_methods.get$last(t1)._rule != null)
        return false;
      if (comment.type === C.CommentType_1)
        return true;
      text = C.JSArray_methods.get$last(t1)._text;
      if (this._isGenericMethodComment$1(comment)) {
        t1 = $.$get$_trailingIdentifierChar()._nativeRegExp;
        if (typeof text != "string")
          H.throwExpression(H.argumentErrorValue(text));
        t1 = t1.test(text);
      } else
        t1 = false;
      if (t1)
        return false;
      return !J.endsWith$1$s(text, "(") && !C.JSString_methods.endsWith$1(text, "[") && !C.JSString_methods.endsWith$1(text, "{");
    },
    _needsSpaceAfterLastComment$2(comments, token) {
      type$.List_SourceComment._as(comments);
      if (comments.length === 0)
        return false;
      if (C.JSArray_methods.get$last(this._chunks)._rule != null)
        return false;
      if (this._isGenericMethodComment$1(C.JSArray_methods.get$last(comments)) && token === "(")
        return false;
      return token !== ")" && token !== "]" && token !== "}" && token !== "," && token !== ";" && token !== "";
    },
    _writeHardSplit$3$flushLeft$isDouble$nest(flushLeft, isDouble, nest) {
      this._pendingWhitespace = C.Whitespace_afterHardSplit;
      this._writeSplit$4$flushLeft$isDouble$nest(K.Rule$hard(), flushLeft, isDouble, nest);
    },
    _writeHardSplit$0() {
      return this._writeHardSplit$3$flushLeft$isDouble$nest(null, null, false);
    },
    _writeHardSplit$1$nest(nest) {
      return this._writeHardSplit$3$flushLeft$isDouble$nest(null, null, nest);
    },
    _writeHardSplit$2$flushLeft$nest(flushLeft, nest) {
      return this._writeHardSplit$3$flushLeft$isDouble$nest(flushLeft, null, nest);
    },
    _writeHardSplit$1$isDouble(isDouble) {
      return this._writeHardSplit$3$flushLeft$isDouble$nest(null, isDouble, false);
    },
    _writeSplit$5$flushLeft$isDouble$nest$space(rule, flushLeft, isDouble, nest, space) {
      var t2, t3, t4, _this = this,
        t1 = _this._chunks;
      if (t1.length === 0) {
        if (flushLeft != null)
          _this._firstFlushLeft = flushLeft;
        return Q.Chunk$dummy();
      }
      t2 = C.JSArray_methods.get$last(t1);
      t3 = _this._chunk_builder$_nesting;
      t4 = C.JSArray_methods.get$last(t3._stack);
      t3 = nest !== false ? t3._nesting : M.NestingLevel$();
      t2.applySplit$6$flushLeft$isDouble$space(rule, t4, t3, flushLeft, isDouble, space === true);
      if (C.JSArray_methods.get$last(t1)._rule._isHardened)
        _this._handleHardSplit$0();
      return C.JSArray_methods.get$last(t1);
    },
    _writeSplit$4$flushLeft$isDouble$nest(rule, flushLeft, isDouble, nest) {
      return this._writeSplit$5$flushLeft$isDouble$nest$space(rule, flushLeft, isDouble, nest, null);
    },
    _chunk_builder$_writeText$1(text) {
      var t1 = this._chunks;
      if (t1.length !== 0 && C.JSArray_methods.get$last(t1)._rule == null) {
        t1 = C.JSArray_methods.get$last(t1);
        t1._text = J.$add$ansx(t1._text, text);
      } else
        C.JSArray_methods.add$1(t1, new Q.Chunk(text, H._setArrayType([], type$.JSArray_Span)));
    },
    _canDivideAt$1(i) {
      var chunk,
        t1 = this._chunks,
        t2 = t1.length;
      if (i === t2 - 1)
        return false;
      if (i >= t2)
        return H.ioore(t1, i);
      chunk = t1[i];
      if (!chunk._rule._isHardened)
        return false;
      if (chunk._chunk$_nesting.parent != null)
        return false;
      if (chunk._chunk$_block != null)
        return false;
      return true;
    },
    _divideChunks$0() {
      var t1, i, t2, t3;
      this._hardenRules$0();
      for (t1 = this._chunks, i = 0; i < t1.length; ++i) {
        t2 = t1[i];
        t3 = this._canDivideAt$1(i);
        if (t2.__Chunk__canDivide === $)
          t2.__Chunk__canDivide = t3;
        else
          H.throwExpression(H.LateError$fieldAI("_canDivide"));
      }
    },
    _handleHardSplit$0() {
      var t1 = this._rules;
      if (t1.length === 0)
        return;
      if (!C.JSArray_methods.get$last(t1).get$splitsOnInnerRules())
        return;
      this._hardSplitRules.add$1(0, C.JSArray_methods.get$last(t1));
    },
    _hardenRules$0() {
      var walkConstraints, t2, _i, chunk, t3,
        t1 = this._hardSplitRules;
      if (t1._collection$_length === 0)
        return;
      walkConstraints = new U.ChunkBuilder__hardenRules_walkConstraints();
      for (t1 = P._LinkedHashSetIterator$(t1, t1._modifications, H._instanceType(t1)._precomputed1); t1.moveNext$0();)
        walkConstraints.call$1(t1._collection$_current);
      for (t1 = this._chunks, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        chunk = t1[_i];
        t3 = chunk._rule;
        if (t3 != null && t3._isHardened)
          C.JSArray_methods.set$length(chunk.spans, 0);
      }
    }
  };
  U.ChunkBuilder_writeComments_closure.prototype = {
    call$1(comment) {
      return type$.SourceComment._as(comment).type === C.CommentType_3;
    },
    $signature: 59
  };
  U.ChunkBuilder__hardenRules_walkConstraints.prototype = {
    call$1(rule) {
      var t1, other;
      rule.harden$0();
      for (t1 = rule.get$constrainedRules(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        other = t1.get$current();
        if (J.$eq$(other, rule))
          continue;
        if (!other.get$isHardened() && rule.constrain$2(rule.get$fullySplitValue(), other) === other.get$fullySplitValue())
          this.call$1(other);
      }
    },
    $signature: 13
  };
  Y.DartFormatter.prototype = {
    formatSource$1(source) {
      var text0, t2, unitSourceCode, inputOffset, parseResult, lineStarts, t3, t4, t5, syntacticErrors, node, node0, token, t6, t7, t8, t9, t10, t11, t12, visitor, result, selectionStart, selectionEnd, selectionLength, output, _this = this, _null = null,
        t1 = T.Version_Version(2, 13, 0),
        featureSet = K.ExperimentStatus_ExperimentStatus$fromStrings2(H._setArrayType(["constructor-tearoffs", "generic-metadata", "nonfunction-type-aliases", "triple-shift"], type$.JSArray_String), t1),
        text = source.text;
      t1 = source.isCompilationUnit;
      if (!t1) {
        text0 = "void foo() { " + text + " }";
        t2 = source.selectionStart;
        t2 = t2 != null ? t2 + 13 : _null;
        unitSourceCode = A.SourceCode$(text0, false, source.selectionLength, t2, source.uri);
        inputOffset = 13;
      } else {
        unitSourceCode = source;
        text0 = text;
        inputOffset = 0;
      }
      t2 = source.uri;
      parseResult = A.parseString(text0, featureSet, t2, false);
      if (_this.lineEnding == null) {
        lineStarts = parseResult.unit.lineInfo.lineStarts;
        if (lineStarts.length > 1) {
          t3 = lineStarts[1];
          if (typeof t3 !== "number")
            return t3.$ge();
          t3 = t3 >= 2 && C.JSString_methods.$index(text0, t3 - 2) === "\r";
        } else
          t3 = false;
        if (t3)
          _this.lineEnding = "\r\n";
        else
          _this.lineEnding = "\n";
      }
      t3 = parseResult.errors;
      t4 = H._arrayInstanceType(t3);
      t5 = t4._eval$1("WhereIterable<1>");
      syntacticErrors = P.List_List$of(new H.WhereIterable(t3, t4._eval$1("bool(1)")._as(new Y.DartFormatter_formatSource_closure()), t5), true, t5._eval$1("Iterable.E"));
      if (syntacticErrors.length !== 0)
        throw H.wrapException(A.FormatterException$(syntacticErrors));
      node = parseResult.unit;
      if (t1)
        node0 = node;
      else {
        node0 = type$.BlockFunctionBody._as(type$.FunctionDeclaration._as(node._declarations.$index(0, 0))._functionExpression._body)._block._statements.$index(0, 0);
        token = node0.get$endToken().next;
        if (token.type !== C.TokenType_2ty)
          throw H.wrapException(A.FormatterException$(H._setArrayType([V.AnalysisError$(K.StringSource$(text0, t2), token.offset - inputOffset, Math.max(token.get$length(token), 1), C.ParserErrorCode_uUr, [token.get$lexeme()], C.List_empty0)], type$.JSArray_AnalysisError)));
      }
      t1 = node.lineInfo;
      t1.toString;
      t2 = H._setArrayType([], type$.JSArray_bool);
      t3 = H._setArrayType([], type$.JSArray_MetadataRule);
      t4 = type$.Token;
      t5 = type$.Rule;
      t6 = type$.JSArray_Rule;
      t7 = H._setArrayType([], t6);
      t6 = H._setArrayType([], t6);
      t8 = H._setArrayType([], type$.JSArray_OpenSpan);
      t9 = new F.NestingBuilder(H._setArrayType([0], type$.JSArray_int), M.NestingLevel$());
      t10 = H._setArrayType([], type$.JSArray_NestingLevel);
      t11 = H._setArrayType([], type$.JSArray_Chunk);
      t9.indent$1(_this.indent);
      t12 = t9._pendingNesting;
      C.JSArray_methods.add$1(t10, t12 == null ? t9._nesting : t12);
      visitor = new Q.SourceVisitor(new U.ChunkBuilder(_this, _null, unitSourceCode, t11, C.Whitespace_none, t7, P.LinkedHashSet_LinkedHashSet$_empty(t5), t6, t8, t9, t10), _this, t1, unitSourceCode, t2, t3, P.LinkedHashMap_LinkedHashMap$_empty(t4, t5), P.LinkedHashMap_LinkedHashMap$_empty(t4, type$.Chunk), P.LinkedHashSet_LinkedHashSet$_empty(t4));
      visitor.visit$1(node0);
      t1 = node0.get$endToken().next;
      t1.toString;
      visitor.writePrecedingCommentsAndNewlines$1(t1);
      t1 = visitor.builder;
      t1._writeHardSplit$0();
      t1._divideChunks$0();
      t2 = t1._formatter;
      t3 = t1._chunks;
      t4 = new P.StringBuffer("");
      t5 = t2.lineEnding;
      t5.toString;
      t1 = t1._chunk_builder$_source;
      t6 = t1.isCompilationUnit;
      result = new A.LineWriter(t4, t3, t5, t2.pageWidth, 0, P.LinkedHashMap_LinkedHashMap$_empty(type$._BlockKey, type$.FormatResult)).writeLines$2$isCompilationUnit(t2.indent, t6);
      if (t1.selectionStart != null) {
        selectionStart = result.selectionStart;
        selectionEnd = result.selectionEnd;
        if (selectionStart == null)
          selectionStart = t4._contents.length;
        selectionLength = (selectionEnd == null ? t4._contents.length : selectionEnd) - selectionStart;
      } else {
        selectionLength = _null;
        selectionStart = selectionLength;
      }
      output = A.SourceCode$(result.text, t6, selectionLength, selectionStart, t1.uri);
      if (_this.fixes._collection$_length === 0 && !H.boolConversionCheck(N.equalIgnoringWhitespace(text, output.text)))
        throw H.wrapException(new A.UnexpectedOutputException(text, output.text));
      return output;
    }
  };
  Y.DartFormatter_formatSource_closure.prototype = {
    call$1(error) {
      var t1 = type$.AnalysisError._as(error).errorCode;
      return t1.get$type(t1) === C.ErrorType_SYNTACTIC_ERROR_6;
    },
    $signature: 60
  };
  A.FormatterException.prototype = {
    message$0(_) {
      var t1, t2, _i, t3, t4, error, source, t5, t6, t7, t8, file, end, span, highlight,
        _s15_ = "_problemMessage",
        shownErrors = this.errors,
        shownErrors0 = shownErrors.length > 10 ? H.SubListIterable$(shownErrors, 0, H.checkNotNullable(10, "count", type$.int), H._arrayInstanceType(shownErrors)._precomputed1).toList$0(0) : shownErrors;
      for (t1 = shownErrors0.length, t2 = type$.JSArray_int, _i = 0, t3 = "Could not format because the source could not be parsed:\n"; t4 = shownErrors0.length, _i < t4; shownErrors0.length === t1 || (0, H.throwConcurrentModificationError)(shownErrors0), ++_i, t3 = t4) {
        error = shownErrors0[_i];
        t4 = error.source;
        source = t4._string_source$_contents;
        t5 = error.__AnalysisError__problemMessage;
        t6 = (t5 === $ ? H.throwExpression(H.LateError$fieldNI(_s15_)) : t5).offset;
        t7 = source.length;
        if (t6 + t5.length > t7) {
          t6 = t5.offset;
          source += C.JSString_methods.$mul(" ", t6 + t5.length - t7);
        }
        t4 = t4.fullName;
        t5 = new H.CodeUnits(source);
        t6 = H._setArrayType([0], t2);
        t7 = P.Uri_parse(t4);
        t8 = new Uint32Array(H._ensureNativeList(t5.toList$0(t5)));
        file = new Y.SourceFile(t7, t6, t8);
        file.SourceFile$decoded$2$url(t5, t4);
        t4 = error.__AnalysisError__problemMessage;
        t5 = (t4 === $ ? H.throwExpression(H.LateError$fieldNI(_s15_)) : t4).offset;
        t6 = t4.offset;
        end = t6 + t4.length;
        span = new Y._FileSpan(file, t5, end);
        if (end < t5)
          H.throwExpression(P.ArgumentError$("End " + end + " must come after start " + t5 + ".", null));
        else if (end > t8.length)
          H.throwExpression(P.RangeError$("End " + end + string$.x20must_ + file.get$length(file) + "."));
        else if (t5 < 0)
          H.throwExpression(P.RangeError$("Start may not be negative, was " + t5 + "."));
        if (t3.length !== 0)
          t3 += "\n";
        t4 = t4.messageText$1$includeUrl(true);
        t5 = span.get$start(span).get$line();
        if (typeof t5 !== "number")
          return t5.$add();
        t5 = "line " + (t5 + 1) + ", column " + (span.get$start(span).get$column() + 1);
        span.get$sourceUrl();
        t6 = span.get$sourceUrl();
        t6 = t5 + (" of " + H.S($.$get$context().prettyUri$1(t6)));
        t4 = t6 + (": " + t4);
        highlight = span.highlight$1$color(null);
        if (highlight.length !== 0)
          t4 = t4 + "\n" + highlight;
        t4 = t3 + (t4.charCodeAt(0) == 0 ? t4 : t4);
      }
      t1 = shownErrors.length;
      t1 = t4 !== t1 ? t3 + "\n" + ("(" + (t1 - t4) + " more errors...)") : t3;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toString$0(_) {
      return this.message$0(0);
    },
    $isException: 1
  };
  A.UnexpectedOutputException.prototype = {
    toString$0(_) {
      return "The formatter produced unexpected output. Input was:\n" + this._input + "\nWhich formatted to:\n" + this._output;
    },
    $isException: 1
  };
  N.FastHash.prototype = {
    get$hashCode(_) {
      return this.id;
    }
  };
  Z.LineSplitter.prototype = {
    LineSplitter$5$flushLeft(writer, chunks, blockIndentation, firstLineIndent, flushLeft) {
      var i, t2, _i,
        t1 = this._queue;
      if (t1.__SolveStateQueue__splitter === $)
        t1.__SolveStateQueue__splitter = this;
      else
        H.throwExpression(H.LateError$fieldAI("_splitter"));
      for (t1 = this.rules, i = 0; t2 = t1.length, i < t2; ++i)
        t1[i].index = i;
      for (_i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].forgetUnusedRules$0();
    },
    apply$0() {
      var bestSolution, attempts, t2, t3, t4, t5, attempts0,
        t1 = this._queue;
      t1.add$1(0, B.SolveState$(this, new G.RuleSet(P.List_List$filled(this.rules.length, null, false, type$.nullable_int))));
      for (bestSolution = null, attempts = 0; t2 = t1._solve_state_queue$_length, t2 !== 0; attempts = attempts0) {
        t3 = t1._solve_state_queue$_queue;
        t4 = t3.length;
        if (0 >= t4)
          return H.ioore(t3, 0);
        t5 = t3[0];
        t5.toString;
        t2 = t1._solve_state_queue$_length = t2 - 1;
        if (t2 > 0) {
          if (t2 >= t4)
            return H.ioore(t3, t2);
          t4 = t3[t2];
          t4.toString;
          C.JSArray_methods.$indexSet(t3, t2, null);
          t1._bubbleDown$2(t4, 0);
        }
        if (t5.isBetterThan$1(bestSolution)) {
          if (t5._overflowChars === 0) {
            bestSolution = t5;
            break;
          }
          bestSolution = t5;
        }
        attempts0 = attempts + 1;
        if (attempts > 5000)
          break;
        t5.expand$0(0);
      }
      return bestSolution.get$_splits();
    }
  };
  Z.LineSplitter_closure.prototype = {
    call$1(chunk) {
      return type$.Chunk._as(chunk)._rule;
    },
    $signature: 61
  };
  G.RuleSet.prototype = {
    contains$1(_, rule) {
      var t1, t2;
      if (rule._isHardened)
        return true;
      t1 = this._values;
      t2 = rule.index;
      t2.toString;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2] != null;
    },
    getValue$1(rule) {
      var t1, t2, value;
      if (rule._isHardened)
        return rule.get$numValues() - 1;
      t1 = this._values;
      t2 = rule.index;
      t2.toString;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      value = t1[t2];
      if (value != null)
        return value;
      return 0;
    },
    forEach$2(_, rules, callback) {
      var t1, t2, i, _i, rule, value;
      type$.List_Rule._as(rules);
      type$.void_Function_Rule_int._as(callback);
      for (t1 = rules.length, t2 = this._values, i = 0, _i = 0; _i < rules.length; rules.length === t1 || (0, H.throwConcurrentModificationError)(rules), ++_i) {
        rule = rules[_i];
        if (i >= t2.length)
          return H.ioore(t2, i);
        value = t2[i];
        if (value != null)
          callback.call$2(rule, value);
        ++i;
      }
    },
    tryBind$4(rules, rule, value, onSplitRule) {
      var t1, t2, t3, t4, otherValue, t5, constraint;
      type$.List_Rule._as(rules);
      type$.void_Function_Rule._as(onSplitRule);
      t1 = this._values;
      t2 = rule.index;
      t2.toString;
      C.JSArray_methods.$indexSet(t1, t2, value);
      for (t2 = rule.get$constrainedRules(), t2 = t2.get$iterator(t2), t3 = value === 0; t2.moveNext$0();) {
        t4 = t2.get$current();
        if (t4._isHardened)
          otherValue = t4.get$numValues() - 1;
        else {
          t5 = t4.index;
          t5.toString;
          if (t5 >= t1.length)
            return H.ioore(t1, t5);
          otherValue = t1[t5];
        }
        constraint = rule.constrain$2(value, t4);
        if (otherValue == null) {
          if (constraint === -1)
            if (t4.get$numValues() === 2) {
              if (!this.tryBind$4(rules, t4, 1, onSplitRule))
                return false;
            } else
              onSplitRule.call$1(t4);
          else if (constraint != null)
            if (!this.tryBind$4(rules, t4, constraint, onSplitRule))
              return false;
        } else {
          if (constraint === -1) {
            if (J.$eq$(otherValue, 0))
              return false;
          } else if (constraint != null)
            if (!J.$eq$(otherValue, constraint))
              return false;
          constraint = t4.constrain$2(H._asIntS(otherValue), rule);
          if (constraint === -1) {
            if (t3)
              return false;
          } else if (constraint != null)
            if (value !== constraint)
              return false;
        }
      }
      return true;
    },
    toString$0(_) {
      var t1 = this._values,
        t2 = H._arrayInstanceType(t1);
      return new H.MappedListIterable(t1, t2._eval$1("Object(1)")._as(new G.RuleSet_toString_closure()), t2._eval$1("MappedListIterable<1,Object>")).join$1(0, " ");
    }
  };
  G.RuleSet_toString_closure.prototype = {
    call$1(value) {
      H._asIntQ(value);
      return value == null ? "?" : value;
    },
    $signature: 62
  };
  G.SplitSet.prototype = {
    get$_cost() {
      var t1 = this.__SplitSet__cost;
      return t1 === $ ? H.throwExpression(H.LateError$fieldNI("_cost")) : t1;
    },
    toString$0(_) {
      var t1, t2, i, result = [];
      for (t1 = this._columns, t2 = t1.length, i = 0; i < t2; ++i)
        if (t1[i] !== -1)
          result.push("" + i + ":" + t1[i]);
      return C.JSArray_methods.join$1(result, " ");
    }
  };
  B.SolveState.prototype = {
    get$_boundRules() {
      var t1 = this.__SolveState__boundRules;
      return t1 === $ ? H.throwExpression(H.LateError$fieldNI("_boundRules")) : t1;
    },
    get$_unboundRules() {
      var t1 = this.__SolveState__unboundRules;
      return t1 === $ ? H.throwExpression(H.LateError$fieldNI("_unboundRules")) : t1;
    },
    get$_splits() {
      var t1 = this.__SolveState__splits;
      return t1 === $ ? H.throwExpression(H.LateError$fieldNI("_splits")) : t1;
    },
    get$_constraints() {
      var _this = this,
        t1 = _this.__SolveState__constraints;
      if (t1 === $) {
        t1 = _this._initConstraints$0();
        if (_this.__SolveState__constraints === $)
          _this.set$__SolveState__constraints(t1);
        else
          t1 = H.throwExpression(H.LateError$fieldADI("_constraints"));
      }
      return t1;
    },
    get$_unboundConstraints() {
      var _this = this,
        t1 = _this.__SolveState__unboundConstraints;
      if (t1 === $) {
        t1 = _this._initUnboundConstraints$0();
        if (_this.__SolveState__unboundConstraints === $)
          _this.set$__SolveState__unboundConstraints(t1);
        else
          t1 = H.throwExpression(H.LateError$fieldADI("_unboundConstraints"));
      }
      return t1;
    },
    get$_boundRulesInUnboundLines() {
      var _this = this,
        t1 = _this.__SolveState__boundRulesInUnboundLines;
      if (t1 === $) {
        t1 = _this._initBoundRulesInUnboundLines$0();
        if (_this.__SolveState__boundRulesInUnboundLines === $)
          _this.set$__SolveState__boundRulesInUnboundLines(t1);
        else
          t1 = H.throwExpression(H.LateError$fieldADI("_boundRulesInUnboundLines"));
      }
      return t1;
    },
    getValue$1(rule) {
      return this._ruleValues.getValue$1(rule);
    },
    isBetterThan$1(other) {
      var t1, t2;
      if (!this._isComplete)
        return false;
      if (other == null)
        return true;
      t1 = this._overflowChars;
      t2 = other._overflowChars;
      if (t1 !== t2)
        return t1 < t2;
      t1 = this.get$_splits().get$_cost();
      t2 = other.get$_splits().get$_cost();
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 < t2;
    },
    compareOverlap$1(other) {
      var t1, t2, t3, t4, _i, rule, value, otherValue;
      if (!this._isOverlapping$1(other))
        return 0;
      for (t1 = this._splitter.rules, t2 = t1.length, t3 = this._ruleValues, t4 = other._ruleValues, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        rule = t1[_i];
        value = t3.getValue$1(rule);
        otherValue = t4.getValue$1(rule);
        if (value !== otherValue)
          return C.JSInt_methods.compareTo$1(value, otherValue);
      }
      throw H.wrapException("unreachable");
    },
    expand$0(_) {
      var unsplitRules, t3, t4, t5, t6, t7, t8, triedRules, _i, rule, value, _box_0, t9, boundRules, state,
        t1 = this._ruleValues,
        t2 = t1._values;
      t2 = J.JSArray_JSArray$markFixed(t2.slice(0), H._arrayInstanceType(t2)._precomputed1);
      unsplitRules = new G.RuleSet(t2);
      for (t3 = this._splitter, t4 = t3.rules, t5 = t4.length, t6 = this._liveRules, t7 = t3._queue, t8 = H._arrayInstanceType(t2), triedRules = 0, _i = 0; _i < t4.length; t4.length === t5 || (0, H.throwConcurrentModificationError)(t4), ++_i) {
        rule = t4[_i];
        if (t6.contains$1(0, rule)) {
          for (value = 1; value < rule.get$numValues(); ++value) {
            _box_0 = {};
            t9 = H._setArrayType(t2.slice(0), t8);
            t9.fixed$length = Array;
            boundRules = new G.RuleSet(t9);
            _box_0.mustSplitRules = null;
            if (!boundRules.tryBind$4(t4, rule, value, new B.SolveState_expand_closure(_box_0)))
              continue;
            state = B.SolveState$(t3, boundRules);
            t9 = _box_0.mustSplitRules;
            if (t9 != null) {
              state._isComplete = false;
              state._liveRules.addAll$1(0, t9);
            }
            t7.add$1(0, state);
          }
          ++triedRules;
          if (triedRules === t6._collection$_length)
            break;
        }
        if (!t1.contains$1(0, rule))
          if (!unsplitRules.tryBind$4(t4, rule, 0, new B.SolveState_expand_closure0()))
            break;
      }
    },
    _isOverlapping$1(other) {
      var t2, t3, t4, _this = this,
        t1 = _this.get$_boundRulesInUnboundLines();
      t1 = t1.get$length(t1);
      t2 = other.get$_boundRulesInUnboundLines();
      if (t1 !== t2.get$length(t2))
        return false;
      for (t1 = _this.get$_boundRulesInUnboundLines(), t1 = t1.get$iterator(t1), t2 = _this._ruleValues, t3 = other._ruleValues; t1.moveNext$0();) {
        t4 = t1.get$current();
        if (!other.get$_boundRulesInUnboundLines().contains$1(0, t4))
          return false;
        if (t2.getValue$1(t4) !== t3.getValue$1(t4))
          return false;
      }
      t1 = _this.get$_constraints();
      t1 = t1.get$length(t1);
      t2 = other.get$_constraints();
      if (t1 !== t2.get$length(t2))
        return false;
      for (t1 = _this.get$_constraints().get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current();
        if (!J.$eq$(_this.get$_constraints().$index(0, t2), other.get$_constraints().$index(0, t2)))
          return false;
      }
      t1 = _this.get$_unboundConstraints();
      t1 = t1.get$length(t1);
      t2 = other.get$_unboundConstraints();
      if (t1 !== t2.get$length(t2))
        return false;
      for (t1 = _this.get$_unboundConstraints().get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current();
        t3 = _this.get$_unboundConstraints().$index(0, t2);
        t3.toString;
        t2 = other.get$_unboundConstraints().$index(0, t2);
        t2.toString;
        if (t3.get$length(t3) !== t2.get$length(t2))
          return false;
        for (t3 = t3.get$iterator(t3); t3.moveNext$0();)
          if (!t2.contains$1(0, t3.get$current()))
            return false;
      }
      return true;
    },
    _calculateSplits$0() {
      var t1, t2, t3, i, chunk, t4, t5, t6, indent, _this = this,
        usedNestingLevels = P.LinkedHashSet_LinkedHashSet$_empty(type$.NestingLevel);
      for (t1 = _this._splitter, t2 = t1.chunks, t3 = _this._ruleValues, i = 0; i < t2.length - 1; ++i) {
        chunk = t2[i];
        t4 = chunk._rule;
        t4.toString;
        if (t4.isSplit$2(t3.getValue$1(t4), chunk)) {
          t4 = chunk._chunk$_nesting;
          t4.toString;
          usedNestingLevels.add$1(0, t4);
          t4 = chunk._chunk$_nesting;
          t4._totalUsedIndent = null;
          t4 = t4.parent;
          if (t4 != null)
            t4.clearTotalUsedIndent$0();
        }
      }
      for (t4 = P._LinkedHashSetIterator$(usedNestingLevels, usedNestingLevels._modifications, usedNestingLevels.$ti._precomputed1); t4.moveNext$0();)
        t4._collection$_current.refreshTotalUsedIndent$1(usedNestingLevels);
      t4 = P.List_List$filled(t2.length - 1, -1, false, type$.int);
      if (_this.__SolveState__splits === $)
        _this.__SolveState__splits = new G.SplitSet(t4);
      else
        H.throwExpression(H.LateError$fieldAI("_splits"));
      for (t4 = _this.get$getValue(), t1 = t1.blockIndentation, i = 0; i < t2.length - 1; ++i) {
        chunk = t2[i];
        t5 = chunk._rule;
        t5.toString;
        if (t5.isSplit$2(t3.getValue$1(t5), chunk)) {
          if (!chunk.get$flushLeftAfter()) {
            t5 = chunk._indent;
            t5.toString;
            t6 = chunk._chunk$_nesting._totalUsedIndent;
            t6.toString;
            indent = t1 + t5 + t6;
            if (chunk.indentBlock$1(t4))
              indent += 4;
          } else
            indent = 0;
          t5 = _this.__SolveState__splits;
          C.JSArray_methods.$indexSet((t5 === $ ? H.throwExpression(H.LateError$fieldNI("_splits")) : t5)._columns, i, indent);
        }
      }
    },
    _calculateCost$0() {
      var t1, t2, endLine, splitSpans, t3, t4, previousNesting, i, t5, chunk, $length, previousNesting0, _this = this,
        _s7_ = "_splits",
        _box_0 = {};
      _box_0.cost = 0;
      t1 = _this._splitter;
      t2 = _box_0.length = t1.firstLineIndent;
      _box_0.foundOverflowRules = false;
      _box_0.start = 0;
      endLine = new B.SolveState__calculateCost_endLine(_box_0, _this);
      splitSpans = P.LinkedHashSet_LinkedHashSet$_empty(type$.Span);
      for (t3 = t1.chunks, t4 = t1.writer, previousNesting = null, i = 0; t5 = t3.length, i < t5; ++i) {
        chunk = t3[i];
        $length = _box_0.length = t2 + chunk._text.length;
        if (i === t5 - 1)
          break;
        t2 = _this.__SolveState__splits;
        t2 = (t2 === $ ? H.throwExpression(H.LateError$fieldNI(_s7_)) : t2)._columns;
        if (i < t2.length && t2[i] !== -1) {
          endLine.call$1(i);
          splitSpans.addAll$1(0, chunk.spans);
          if (chunk._chunk$_block != null) {
            t2 = _box_0.cost;
            t5 = _this.__SolveState__splits;
            t5 = (t5 === $ ? H.throwExpression(H.LateError$fieldNI(_s7_)) : t5)._columns;
            if (i >= t5.length)
              return H.ioore(t5, i);
            _box_0.cost = t2 + t4.formatBlock$2(chunk, t5[i]).cost;
          }
          previousNesting0 = chunk._chunk$_nesting;
          t2 = previousNesting0._totalUsedIndent;
          t2.toString;
          if (previousNesting != null)
            if (t2 !== 0) {
              t5 = previousNesting._totalUsedIndent;
              t5.toString;
              t2 = t2 === t5 && previousNesting0 !== previousNesting;
            } else
              t2 = false;
          else
            t2 = false;
          if (t2)
            _this._overflowChars += 10000;
          t2 = _this.__SolveState__splits;
          t2 = (t2 === $ ? H.throwExpression(H.LateError$fieldNI(_s7_)) : t2)._columns;
          if (i >= t2.length)
            return H.ioore(t2, i);
          $length = t2[i];
          _box_0.length = $length;
          t2 = $length;
          previousNesting = previousNesting0;
        } else {
          t2 = chunk._spaceWhenUnsplit ? _box_0.length = $length + 1 : $length;
          $length = t2 + chunk.get$unsplitBlockLength();
          _box_0.length = $length;
          t2 = $length;
        }
      }
      _this._ruleValues.forEach$2(0, t1.rules, new B.SolveState__calculateCost_closure(_box_0));
      for (t1 = P._LinkedHashSetIterator$(splitSpans, splitSpans._modifications, splitSpans.$ti._precomputed1); t1.moveNext$0();) {
        t2 = t1._collection$_current;
        _box_0.cost = _box_0.cost + t2.cost;
      }
      endLine.call$1(t3.length);
      t1 = _this.get$_splits();
      t2 = _box_0.cost;
      if (t1.__SplitSet__cost === $)
        t1.__SplitSet__cost = t2;
      else
        H.throwExpression(H.LateError$fieldAI("_cost"));
    },
    _addLiveRules$1(rule) {
      var t1, t2, t3, added, t4;
      if (rule == null)
        return false;
      for (t1 = rule.get$allConstrainedRules(), t1 = P._LinkedHashSetIterator$(t1, t1._modifications, H._instanceType(t1)._precomputed1), t2 = this._liveRules, t3 = this._ruleValues, added = false; t1.moveNext$0();) {
        t4 = t1._collection$_current;
        if (t3.contains$1(0, t4))
          continue;
        t2.add$1(0, t4);
        added = true;
      }
      return added;
    },
    _initBoundRulesInUnboundLines$0() {
      var t2, hasUnbound, i, t3, rule,
        t1 = type$.Rule,
        rules = P.LinkedHashSet_LinkedHashSet$_empty(t1),
        boundInLine = P.LinkedHashSet_LinkedHashSet$_empty(t1);
      for (t1 = this._splitter.chunks, t2 = this._ruleValues, hasUnbound = false, i = 0; i < t1.length - 1; ++i) {
        t3 = this.__SolveState__splits;
        t3 = (t3 === $ ? H.throwExpression(H.LateError$fieldNI("_splits")) : t3)._columns;
        if (i < t3.length && t3[i] !== -1) {
          if (hasUnbound)
            rules.addAll$1(0, boundInLine);
          if (boundInLine._collection$_length > 0) {
            boundInLine._strings = boundInLine._nums = boundInLine._collection$_rest = boundInLine._first = boundInLine._last = null;
            boundInLine._collection$_length = 0;
            boundInLine._modifications = boundInLine._modifications + 1 & 1073741823;
          }
          hasUnbound = false;
        }
        if (i >= t1.length)
          return H.ioore(t1, i);
        rule = t1[i]._rule;
        if (rule != null)
          if (t2.contains$1(0, rule))
            boundInLine.add$1(0, rule);
          else
            hasUnbound = true;
      }
      if (hasUnbound)
        rules.addAll$1(0, boundInLine);
      return rules;
    },
    _initConstraints$0() {
      var t3, t4, _i, rule, t5, constraints, t6, constraint, _this = this,
        _s13_ = "_unboundRules",
        t1 = type$.Rule,
        t2 = type$.Set_Rule;
      _this.set$__SolveState__unboundRules(t2._as(P.LinkedHashSet_LinkedHashSet$_empty(t1)));
      _this.set$__SolveState__boundRules(t2._as(P.LinkedHashSet_LinkedHashSet$_empty(t1)));
      for (t2 = _this._splitter.rules, t3 = t2.length, t4 = _this._ruleValues, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
        rule = t2[_i];
        if (t4.contains$1(0, rule)) {
          t5 = _this.__SolveState__boundRules;
          (t5 === $ ? H.throwExpression(H.LateError$fieldNI("_boundRules")) : t5).add$1(0, rule);
        } else {
          t5 = _this.__SolveState__unboundRules;
          (t5 === $ ? H.throwExpression(H.LateError$fieldNI(_s13_)) : t5).add$1(0, rule);
        }
      }
      constraints = P.LinkedHashMap_LinkedHashMap$_empty(t1, type$.int);
      for (t1 = _this.get$_boundRules(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current();
        for (t3 = t2.get$constrainedRules(), t3 = t3.get$iterator(t3); t3.moveNext$0();) {
          t5 = t3.get$current();
          t6 = _this.__SolveState__unboundRules;
          if (!(t6 === $ ? H.throwExpression(H.LateError$fieldNI(_s13_)) : t6).contains$1(0, t5))
            continue;
          constraint = t2.constrain$2(t4.getValue$1(t2), t5);
          if (constraint != null)
            constraints.$indexSet(0, t5, constraint);
        }
      }
      return constraints;
    },
    _initUnboundConstraints$0() {
      var t1, t2, t3, disallowedValues, t4, t5, t6, t7, boundValue, value, constraint, t8, result,
        unboundConstraints = P.LinkedHashMap_LinkedHashMap$_empty(type$.Rule, type$.Set_int);
      for (t1 = this.get$_unboundRules(), t1 = t1.get$iterator(t1), t2 = this._ruleValues; t1.moveNext$0();) {
        t3 = t1.get$current();
        disallowedValues = H._InitializedCell$named("disallowedValues", new B.SolveState__initUnboundConstraints_closure(unboundConstraints, t3));
        for (t4 = t3.get$constrainedRules(), t4 = t4.get$iterator(t4), t5 = disallowedValues.__late_helper$_name; t4.moveNext$0();) {
          t6 = t4.get$current();
          t7 = this.__SolveState__boundRules;
          if (!(t7 === $ ? H.throwExpression(H.LateError$fieldNI("_boundRules")) : t7).contains$1(0, t6))
            continue;
          boundValue = t2.getValue$1(t6);
          for (t7 = boundValue !== 0, value = 0; value < t3.get$numValues(); ++value) {
            constraint = t3.constrain$2(value, t6);
            if (constraint == null)
              continue;
            if (constraint === boundValue)
              continue;
            if (constraint === -1 && t7)
              continue;
            t8 = disallowedValues._value;
            if (t8 === disallowedValues) {
              result = disallowedValues._initializer.call$0();
              if (disallowedValues._value !== disallowedValues)
                H.throwExpression(new H.LateError("Local '" + t5 + string$.x27_has_));
              disallowedValues._value = result;
              t8 = result;
            }
            J.add$1$ax(t8, value);
          }
        }
      }
      return unboundConstraints;
    },
    toString$0(_) {
      var _this = this,
        t1 = _this._splitter.rules,
        t2 = H._arrayInstanceType(t1);
      t2 = P.StringBuffer__writeAll("", new H.MappedListIterable(t1, t2._eval$1("@(1)")._as(new B.SolveState_toString_closure(_this)), t2._eval$1("MappedListIterable<1,@>")), " ") + ("   $" + H.S(_this.get$_splits().get$_cost()));
      t1 = _this._overflowChars;
      t1 = t1 > 0 ? t2 + (" (" + t1 + " over)") : t2;
      if (!_this._isComplete)
        t1 += " (incomplete)";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    set$__SolveState__boundRules(__SolveState__boundRules) {
      this.__SolveState__boundRules = type$.nullable_Set_Rule._as(__SolveState__boundRules);
    },
    set$__SolveState__unboundRules(__SolveState__unboundRules) {
      this.__SolveState__unboundRules = type$.nullable_Set_Rule._as(__SolveState__unboundRules);
    },
    set$__SolveState__constraints(__SolveState__constraints) {
      this.__SolveState__constraints = type$.nullable_Map_Rule_int._as(__SolveState__constraints);
    },
    set$__SolveState__unboundConstraints(__SolveState__unboundConstraints) {
      this.__SolveState__unboundConstraints = type$.nullable_Map_of_Rule_and_Set_int._as(__SolveState__unboundConstraints);
    },
    set$__SolveState__boundRulesInUnboundLines(__SolveState__boundRulesInUnboundLines) {
      this.__SolveState__boundRulesInUnboundLines = type$.nullable_Set_Rule._as(__SolveState__boundRulesInUnboundLines);
    }
  };
  B.SolveState_expand_closure.prototype = {
    call$1(rule) {
      var t1 = this._box_0,
        t2 = t1.mustSplitRules;
      C.JSArray_methods.add$1(t2 == null ? t1.mustSplitRules = H._setArrayType([], type$.JSArray_Rule) : t2, rule);
    },
    $signature: 9
  };
  B.SolveState_expand_closure0.prototype = {
    call$1(_) {
    },
    $signature: 9
  };
  B.SolveState__calculateCost_endLine.prototype = {
    call$1(end) {
      var i,
        t1 = this._box_0,
        t2 = t1.length,
        t3 = this.$this,
        t4 = t3._splitter,
        t5 = t4.writer.pageWidth;
      if (t2 > t5) {
        t3._overflowChars = t3._overflowChars + (t2 - t5);
        if (!t1.foundOverflowRules)
          for (i = t1.start, t2 = t4.chunks; i < end; ++i) {
            if (i >= t2.length)
              return H.ioore(t2, i);
            if (t3._addLiveRules$1(t2[i]._rule))
              t1.foundOverflowRules = true;
          }
      }
      t1.start = end;
    },
    $signature: 64
  };
  B.SolveState__calculateCost_closure.prototype = {
    call$2(rule, value) {
      var t1;
      if (value !== 0) {
        t1 = this._box_0;
        t1.cost = t1.cost + rule.get$cost();
      }
    },
    $signature: 65
  };
  B.SolveState__initUnboundConstraints_closure.prototype = {
    call$0() {
      var t1 = P.LinkedHashSet_LinkedHashSet$_empty(type$.int);
      this.unboundConstraints.$indexSet(0, this.unbound, t1);
      return t1;
    },
    $signature: 84
  };
  B.SolveState_toString_closure.prototype = {
    call$1(rule) {
      var t1, t2, t3, value;
      type$.Rule._as(rule);
      t1 = "" + (rule.get$numValues() - 1);
      t2 = this.$this;
      t3 = t2._ruleValues;
      value = t3.contains$1(0, rule) ? "" + t3.getValue$1(rule) : "?";
      value = C.JSString_methods.padLeft$1(value, t1.length);
      return t2._liveRules.contains$1(0, rule) ? H.S($.$get$_bold()) + value + H.S($.$get$_none()) : H.S($.$get$_gray()) + value + H.S($.$get$_none());
    },
    $signature: 67
  };
  O.SolveStateQueue.prototype = {
    add$1(_, state) {
      var t1, t2, newCapacity, newQueue, _this = this;
      if (_this._tryOverlap$1(state))
        return;
      t1 = _this._solve_state_queue$_length;
      t2 = _this._solve_state_queue$_queue.length;
      if (t1 === t2) {
        newCapacity = t2 * 2 + 1;
        if (newCapacity < 7)
          newCapacity = 7;
        newQueue = P.List_List$filled(newCapacity, null, false, type$.nullable_SolveState);
        C.JSArray_methods.setRange$3(newQueue, 0, _this._solve_state_queue$_length, _this._solve_state_queue$_queue);
        _this.set$_solve_state_queue$_queue(newQueue);
      }
      _this._bubbleUp$2(state, _this._solve_state_queue$_length++);
    },
    _compare$2(a, b) {
      var comparison = this._compareScore$2(a, b);
      if (comparison !== 0)
        return comparison;
      return this._compareRules$2(a, b);
    },
    _compareScore$2(a, b) {
      if (a.get$_splits().get$_cost() != b.get$_splits().get$_cost())
        return J.compareTo$1$ns(a.get$_splits().get$_cost(), b.get$_splits().get$_cost());
      return C.JSInt_methods.compareTo$1(a._overflowChars, b._overflowChars);
    },
    _compareRules$2(a, b) {
      var t2, t3, _i, rule, aValue, bValue,
        t1 = this.__SolveStateQueue__splitter;
      t1 = (t1 === $ ? H.throwExpression(H.LateError$fieldNI("_splitter")) : t1).rules;
      t2 = t1.length;
      t3 = type$.Rule;
      _i = 0;
      for (; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        rule = t1[_i];
        a.toString;
        t3._as(rule);
        aValue = a._ruleValues.getValue$1(rule);
        bValue = b._ruleValues.getValue$1(rule);
        if (aValue !== bValue)
          return C.JSInt_methods.compareTo$1(aValue, bValue);
      }
      throw H.wrapException("unreachable");
    },
    _tryOverlap$1(state) {
      var position, index, t1, comparison, overlap, leftChildPosition, _this = this;
      if (_this._solve_state_queue$_length === 0)
        return false;
      position = 1;
      do
        c$0: {
          index = position - 1;
          t1 = _this._solve_state_queue$_queue;
          if (index < 0 || index >= t1.length)
            return H.ioore(t1, index);
          t1 = t1[index];
          t1.toString;
          comparison = _this._compareScore$2(t1, state);
          if (comparison === 0) {
            overlap = t1.compareOverlap$1(state);
            if (overlap < 0)
              return true;
            else if (overlap > 0) {
              C.JSArray_methods.$indexSet(_this._solve_state_queue$_queue, index, state);
              return true;
            } else
              comparison = _this._compareRules$2(t1, state);
          }
          if (comparison < 0) {
            leftChildPosition = position * 2;
            if (leftChildPosition <= _this._solve_state_queue$_length) {
              position = leftChildPosition;
              break c$0;
            }
          }
          t1 = _this._solve_state_queue$_length;
          do {
            for (; (position & 1) === 1;)
              position = position >>> 1;
            ++position;
          } while (position > t1);
        }
      while (position !== 1);
      return false;
    },
    _bubbleUp$2(element, index) {
      var parentIndex, t1, _this = this;
      for (; index > 0; index = parentIndex) {
        parentIndex = C.JSInt_methods._tdivFast$1(index - 1, 2);
        t1 = _this._solve_state_queue$_queue;
        if (parentIndex < 0 || parentIndex >= t1.length)
          return H.ioore(t1, parentIndex);
        t1 = t1[parentIndex];
        t1.toString;
        if (_this._compare$2(element, t1) > 0)
          break;
        C.JSArray_methods.$indexSet(_this._solve_state_queue$_queue, index, t1);
      }
      C.JSArray_methods.$indexSet(_this._solve_state_queue$_queue, index, element);
    },
    _bubbleDown$2(element, index) {
      var t1, leftChildIndex, t2, t3, minChild, minChildIndex, _this = this,
        rightChildIndex = index * 2 + 2;
      for (; t1 = _this._solve_state_queue$_length, rightChildIndex < t1; index = minChildIndex) {
        leftChildIndex = rightChildIndex - 1;
        t1 = _this._solve_state_queue$_queue;
        t2 = t1.length;
        if (leftChildIndex < 0 || leftChildIndex >= t2)
          return H.ioore(t1, leftChildIndex);
        t3 = t1[leftChildIndex];
        t3.toString;
        if (rightChildIndex < 0 || rightChildIndex >= t2)
          return H.ioore(t1, rightChildIndex);
        t1 = t1[rightChildIndex];
        t1.toString;
        if (_this._compare$2(t3, t1) < 0) {
          minChild = t3;
          minChildIndex = leftChildIndex;
        } else {
          minChild = t1;
          minChildIndex = rightChildIndex;
        }
        if (_this._compare$2(element, minChild) <= 0) {
          C.JSArray_methods.$indexSet(_this._solve_state_queue$_queue, index, element);
          return;
        }
        C.JSArray_methods.$indexSet(_this._solve_state_queue$_queue, index, minChild);
        rightChildIndex = minChildIndex * 2 + 2;
      }
      leftChildIndex = rightChildIndex - 1;
      if (leftChildIndex < t1) {
        t1 = _this._solve_state_queue$_queue;
        if (leftChildIndex < 0 || leftChildIndex >= t1.length)
          return H.ioore(t1, leftChildIndex);
        t1 = t1[leftChildIndex];
        t1.toString;
        if (_this._compare$2(element, t1) > 0) {
          C.JSArray_methods.$indexSet(_this._solve_state_queue$_queue, index, t1);
          index = leftChildIndex;
        }
      }
      C.JSArray_methods.$indexSet(_this._solve_state_queue$_queue, index, element);
    },
    set$_solve_state_queue$_queue(_queue) {
      this._solve_state_queue$_queue = type$.List_nullable_SolveState._as(_queue);
    }
  };
  A.LineWriter.prototype = {
    get$length(_) {
      return this._buffer._contents.length;
    },
    formatBlock$2(chunk, column) {
      var t2, t3, t4, t5, result,
        key = new A._BlockKey(chunk, column),
        t1 = this._blockCache,
        cached = t1.$index(0, key);
      if (cached != null)
        return cached;
      t2 = chunk._chunk$_block.chunks;
      t3 = this._lineEnding;
      t4 = new P.StringBuffer("");
      t4._contents += H.S(t3);
      t5 = chunk._chunk$_block.indent ? 2 : 0;
      result = new A.LineWriter(t4, t2, t3, this.pageWidth, column, t1).writeLines$2$flushLeft(t5, chunk._flushLeft);
      t1.$indexSet(0, key, result);
      return result;
    },
    writeLines$3$flushLeft$isCompilationUnit(firstLineIndent, flushLeft, isCompilationUnit) {
      var t1, indent, newlines, totalCost, start, i, t2, chunk, start0, _this = this;
      for (t1 = _this._line_writer$_chunks, indent = firstLineIndent, newlines = 0, totalCost = 0, start = 0, i = 0; t2 = t1.length, i < t2; ++i) {
        chunk = t1[i];
        t2 = chunk.__Chunk__canDivide;
        if (!H.boolConversionCheck(t2 === $ ? H.throwExpression(H.LateError$fieldNI("_canDivide")) : t2))
          continue;
        start0 = i + 1;
        t2 = _this._completeLine$5$flushLeft(newlines, indent, start, start0, flushLeft);
        if (typeof t2 !== "number")
          return H.iae(t2);
        totalCost += t2;
        t2 = chunk._isDouble;
        newlines = t2 === true ? 2 : 1;
        t2 = chunk._indent;
        t2.toString;
        flushLeft = chunk._flushLeft;
        start = start0;
        indent = t2;
      }
      if (start < t2) {
        t1 = _this._completeLine$5$flushLeft(newlines, indent, start, t2, flushLeft);
        if (typeof t1 !== "number")
          return H.iae(t1);
        totalCost += t1;
      }
      if (isCompilationUnit)
        _this._buffer._contents += H.S(_this._lineEnding);
      t1 = _this._buffer._contents;
      return new A.FormatResult(t1.charCodeAt(0) == 0 ? t1 : t1, totalCost, _this._selectionStart, _this._selectionEnd);
    },
    writeLines$2$isCompilationUnit(firstLineIndent, isCompilationUnit) {
      return this.writeLines$3$flushLeft$isCompilationUnit(firstLineIndent, false, isCompilationUnit);
    },
    writeLines$2$flushLeft(firstLineIndent, flushLeft) {
      return this.writeLines$3$flushLeft$isCompilationUnit(firstLineIndent, flushLeft, false);
    },
    _completeLine$5$flushLeft(newlines, indent, start, end, flushLeft) {
      var t1, t2, j, chunks, t3, splits, i, chunk, t4, block, t5, _this = this;
      for (t1 = _this._buffer, t2 = _this._lineEnding, j = 0; j < newlines; ++j)
        t1._contents += H.S(t2);
      chunks = C.JSArray_methods.sublist$2(_this._line_writer$_chunks, start, end);
      t3 = _this._blockIndentation;
      splits = Z.LineSplitter$(_this, chunks, t3, indent, flushLeft).apply$0();
      if (!flushLeft) {
        if (typeof indent !== "number")
          return indent.$add();
        t1._contents += C.JSString_methods.$mul(" ", indent + t3);
      }
      for (i = 0; i < chunks.length; ++i) {
        chunk = chunks[i];
        _this._writeChunk$1(chunk);
        if (chunk._chunk$_block != null) {
          t3 = splits._columns;
          t4 = t3.length;
          if (!(i < t4 && t3[i] !== -1))
            _this._writeChunksUnsplit$1(chunk);
          else {
            if (i >= t4)
              return H.ioore(t3, i);
            block = _this.formatBlock$2(chunk, t3[i]);
            t3 = block.selectionStart;
            if (t3 != null)
              _this._selectionStart = t1._contents.length + t3;
            t3 = block.selectionEnd;
            if (t3 != null)
              _this._selectionEnd = t1._contents.length + t3;
            t1._contents += block.text;
          }
        }
        if (i !== chunks.length - 1) {
          t3 = splits._columns;
          t4 = t3.length;
          if (i < t4 && t3[i] !== -1) {
            t1._contents += H.S(t2);
            t5 = chunk._isDouble;
            if (t5 === true)
              t1._contents += H.S(t2);
            if (i >= t4)
              return H.ioore(t3, i);
            t1._contents += C.JSString_methods.$mul(" ", t3[i]);
          } else if (chunk._spaceWhenUnsplit)
            t1._contents += " ";
        }
      }
      return splits.get$_cost();
    },
    _writeChunksUnsplit$1(chunk) {
      var t2, t3, _i, blockChunk,
        t1 = chunk._chunk$_block;
      if (t1 == null)
        return;
      for (t1 = t1.chunks, t2 = t1.length, t3 = this._buffer, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        blockChunk = t1[_i];
        this._writeChunk$1(blockChunk);
        if (blockChunk._spaceWhenUnsplit)
          t3._contents += " ";
        this._writeChunksUnsplit$1(blockChunk);
      }
    },
    _writeChunk$1(chunk) {
      var _this = this,
        t1 = chunk._chunk$_selectionStart;
      if (t1 != null)
        _this._selectionStart = _this._buffer._contents.length + t1;
      t1 = chunk._chunk$_selectionEnd;
      if (t1 != null)
        _this._selectionEnd = _this._buffer._contents.length + t1;
      _this._buffer._contents += H.S(chunk._text);
    }
  };
  A._BlockKey.prototype = {
    $eq(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof A._BlockKey))
        return false;
      return this.chunk === other.chunk && this.column === other.column;
    },
    get$hashCode(_) {
      return (H.Primitives_objectHashCode(this.chunk) ^ C.JSInt_methods.get$hashCode(this.column)) >>> 0;
    }
  };
  A.FormatResult.prototype = {};
  F.NestingBuilder.prototype = {
    indent$1(spaces) {
      var t1;
      if (spaces == null)
        spaces = 2;
      t1 = this._stack;
      C.JSArray_methods.add$1(t1, C.JSArray_methods.get$last(t1) + spaces);
    },
    commitNesting$0() {
      var t1 = this._pendingNesting;
      if (t1 == null)
        return;
      this._nesting = t1;
      this._pendingNesting = null;
    }
  };
  M.NestingLevel.prototype = {
    clearTotalUsedIndent$0() {
      this._totalUsedIndent = null;
      var t1 = this.parent;
      if (t1 != null)
        t1.clearTotalUsedIndent$0();
    },
    refreshTotalUsedIndent$1(usedNesting) {
      var t1, totalIndent, _this = this;
      type$.Set_NestingLevel._as(usedNesting);
      if (_this._totalUsedIndent != null)
        return;
      t1 = _this.parent;
      if (t1 != null) {
        t1.refreshTotalUsedIndent$1(usedNesting);
        t1 = t1._totalUsedIndent;
        t1.toString;
        totalIndent = t1;
      } else
        totalIndent = 0;
      _this._totalUsedIndent = usedNesting.contains$1(0, _this) ? totalIndent + _this.indent : totalIndent;
    },
    toString$0(_) {
      var t1 = this.parent;
      if (t1 == null)
        return C.JSInt_methods.toString$0(this.indent);
      return t1.toString$0(0) + ":" + this.indent;
    }
  };
  Z.ArgumentRule.prototype = {
    get$splitsOnInnerRules() {
      return this._trackInnerRules;
    },
    addConstrainedRules$1(rules) {
      var t1;
      type$.Set_Rule._as(rules);
      this.super$Rule$addConstrainedRules(rules);
      t1 = this._collectionRule;
      if (t1 != null)
        rules.add$1(0, t1);
    },
    forgetUnusedRules$0() {
      this.super$Rule$forgetUnusedRules();
      var t1 = this._collectionRule;
      if ((t1 == null ? null : t1.index) == null)
        this._collectionRule = null;
    }
  };
  Z.PositionalRule.prototype = {
    get$numValues() {
      var t1 = this._argument$_arguments.length,
        result = t1 + 1;
      if (t1 > 1)
        ++result;
      return this._leadingCollections > 0 || this._trailingCollections > 0 ? result + 1 : result;
    },
    addConstrainedRules$1(rules) {
      var t1;
      type$.Set_Rule._as(rules);
      this.super$ArgumentRule$addConstrainedRules(rules);
      t1 = this._namedArgsRule;
      if (t1 != null)
        rules.add$1(0, t1);
    },
    forgetUnusedRules$0() {
      this.super$ArgumentRule$forgetUnusedRules();
      var t1 = this._namedArgsRule;
      if ((t1 == null ? null : t1.index) == null)
        this._namedArgsRule = null;
    },
    isSplitAtValue$2(value, chunk) {
      var t1, t2, argument, t3, i, _this = this;
      if (value === 1)
        return chunk === C.JSArray_methods.get$first(_this._argument$_arguments);
      t1 = _this._argument$_arguments;
      t2 = t1.length;
      if (typeof value !== "number")
        return value.$le();
      if (value <= t2) {
        argument = t2 - value + 1;
        if (argument < 0 || argument >= t2)
          return H.ioore(t1, argument);
        return chunk === t1[argument];
      }
      if (value === t2 + 1) {
        for (t3 = _this._leadingCollections, i = 0; i < t3; ++i) {
          if (i >= t2)
            return H.ioore(t1, i);
          if (chunk === t1[i])
            return false;
        }
        for (i = t2 - _this._trailingCollections; i < t2; ++i) {
          if (i < 0)
            return H.ioore(t1, i);
          if (chunk === t1[i])
            return false;
        }
        return true;
      }
      return true;
    },
    constrain$2(value, other) {
      var constrained, t1, t2, argument, _this = this, _null = null;
      type$.Rule._as(other);
      constrained = _this.super$Rule$constrain(value, other);
      if (constrained != null)
        return constrained;
      if (other == _this._namedArgsRule) {
        if (value === _this.get$numValues() - 1)
          return _this._namedArgsRule.get$numValues() - 1;
        if (value !== 0)
          return -1;
      }
      if (other != _this._collectionRule)
        return _null;
      t1 = _this._leadingCollections;
      if (t1 === 0 && _this._trailingCollections === 0)
        return _null;
      if (value === 0)
        return _null;
      if (value === 1)
        if (t1 > 0)
          return 0;
        else
          return _null;
      t2 = _this._argument$_arguments.length;
      if (value <= t2) {
        argument = t2 - value + 1;
        if (argument < t1 || argument >= t2 - _this._trailingCollections)
          return 0;
        return _null;
      }
      if (value === t2 + 1)
        return 1;
      return _null;
    },
    toString$0(_) {
      return "Pos" + this.super$Rule$toString(0);
    }
  };
  Z.NamedRule.prototype = {
    get$numValues() {
      return 3;
    },
    isSplitAtValue$2(value, chunk) {
      if (value === 1)
        return chunk === C.JSArray_methods.get$first(this._argument$_arguments);
      return true;
    },
    constrain$2(value, other) {
      var constrained, _this = this, _null = null;
      type$.Rule._as(other);
      constrained = _this.super$Rule$constrain(value, other);
      if (constrained != null)
        return constrained;
      if (other != _this._collectionRule)
        return _null;
      if (_this._leadingCollections === 0 && _this._trailingCollections === 0)
        return _null;
      if (value === 0)
        return _null;
      if (value === 1)
        return 0;
      return _null;
    },
    toString$0(_) {
      return "Named" + this.super$Rule$toString(0);
    }
  };
  Q.CombinatorRule.prototype = {
    get$numValues() {
      return this._names.length === 2 ? 5 : 3;
    },
    isSplitAtValue$2(value, chunk) {
      var _this = this;
      switch (value) {
        case 1:
          return _this._combinator$_combinators.contains$1(0, chunk);
        case 2:
          return _this._isCombinatorSplit$2(0, chunk);
        case 3:
          if (_this._names.length === 2)
            return _this._isCombinatorSplit$2(1, chunk);
          return true;
        default:
          return true;
      }
    },
    _isCombinatorSplit$2(combinator, chunk) {
      var t1;
      if (!this._combinator$_combinators.contains$1(0, chunk)) {
        t1 = this._names;
        if (combinator >= t1.length)
          return H.ioore(t1, combinator);
        t1 = t1[combinator].contains$1(0, chunk);
      } else
        t1 = true;
      return t1;
    },
    toString$0(_) {
      return "Comb" + this.super$Rule$toString(0);
    }
  };
  O.MetadataRule.prototype = {
    constrain$2(value, other) {
      var constrained, t1;
      type$.Rule._as(other);
      constrained = this.super$Rule$constrain(value, other);
      if (constrained != null)
        return constrained;
      if (value === 0)
        return null;
      t1 = this._positionalRule;
      if (other == t1)
        return t1.get$numValues() - 1;
      t1 = this._namedRule;
      if (other == t1)
        return t1.get$numValues() - 1;
      return null;
    },
    addConstrainedRules$1(rules) {
      var t1;
      type$.Set_Rule._as(rules);
      t1 = this._positionalRule;
      if (t1 != null)
        rules.add$1(0, t1);
      t1 = this._namedRule;
      if (t1 != null)
        rules.add$1(0, t1);
    },
    forgetUnusedRules$0() {
      var t1, _this = this;
      _this.super$Rule$forgetUnusedRules();
      t1 = _this._positionalRule;
      if ((t1 == null ? null : t1.index) == null)
        _this._positionalRule = null;
      t1 = _this._namedRule;
      if ((t1 == null ? null : t1.index) == null)
        _this._namedRule = null;
    }
  };
  K.Rule.prototype = {
    get$numValues() {
      return 2;
    },
    get$fullySplitValue() {
      return this.get$numValues() - 1;
    },
    get$cost() {
      return this._rule$_cost;
    },
    get$isHardened() {
      return this._isHardened;
    },
    get$splitsOnInnerRules() {
      return true;
    },
    harden$0() {
      this._isHardened = true;
    },
    isSplit$2(value, chunk) {
      if (this._isHardened)
        return true;
      if (value === 0)
        return false;
      return this.isSplitAtValue$2(value, chunk);
    },
    isSplitAtValue$2(value, chunk) {
      return true;
    },
    constrain$2(value, other) {
      type$.Rule._as(other);
      if (value === 0)
        return null;
      if (this._implied.contains$1(0, other))
        return other.get$numValues() - 1;
      return null;
    },
    addConstrainedRules$1(rules) {
      type$.Set_Rule._as(rules);
    },
    forgetUnusedRules$0() {
      var t1 = this._implied;
      t1._filterWhere$2(H._instanceType(t1)._eval$1("bool(1)")._as(new K.Rule_forgetUnusedRules_closure()), false);
      this.set$_constrainedRules(null);
      this.set$_allConstrainedRules(null);
    },
    get$constrainedRules() {
      var _this = this,
        rules = _this._constrainedRules;
      if (rules != null)
        return rules;
      rules = _this._implied.toSet$0(0);
      _this.addConstrainedRules$1(rules);
      _this.set$_constrainedRules(rules);
      return rules;
    },
    get$allConstrainedRules() {
      var _this = this,
        rules = _this._allConstrainedRules;
      if (rules != null)
        return rules;
      rules = P.LinkedHashSet_LinkedHashSet$_empty(type$.Rule);
      _this._traverseConstraints$2(rules, _this);
      _this.set$_allConstrainedRules(rules);
      return rules;
    },
    _traverseConstraints$2(rules, rule) {
      var t1;
      type$.Set_Rule._as(rules);
      if (rules.contains$1(0, rule))
        return;
      rules.add$1(0, rule);
      for (t1 = rule.get$constrainedRules(), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        this._traverseConstraints$2(rules, t1.get$current());
    },
    toString$0(_) {
      return "" + this.id;
    },
    set$_constrainedRules(_constrainedRules) {
      this._constrainedRules = type$.nullable_Set_Rule._as(_constrainedRules);
    },
    set$_allConstrainedRules(_allConstrainedRules) {
      this._allConstrainedRules = type$.nullable_Set_Rule._as(_allConstrainedRules);
    }
  };
  K.Rule_forgetUnusedRules_closure.prototype = {
    call$1(rule) {
      return type$.Rule._as(rule).index != null;
    },
    $signature: 68
  };
  Y.TypeArgumentRule.prototype = {
    get$cost() {
      return 4;
    },
    get$numValues() {
      var t1 = this._type_argument$_arguments.length;
      return t1 === 1 ? 2 : t1 + 2;
    },
    isSplit$2(value, chunk) {
      var t1, t2, t3;
      if (value === 0)
        return false;
      if (value === this.get$numValues() - 1)
        return true;
      t1 = this._type_argument$_arguments;
      t2 = t1.length;
      if (typeof value !== "number")
        return H.iae(value);
      t3 = t2 - value;
      if (t3 < 0 || t3 >= t2)
        return H.ioore(t1, t3);
      return chunk === t1[t3];
    },
    toString$0(_) {
      return "TypeArg" + this.super$Rule$toString(0);
    }
  };
  A.SourceCode.prototype = {};
  Q.SourceVisitor.prototype = {
    visitAdjacentStrings$1(node) {
      var shouldNest, t1, t2, t3, _this = this,
        $parent = node._ast$_parent;
      if (type$.ArgumentList._is($parent)) {
        t1 = $parent._ast$_arguments;
        t1 = new H.ListIterator(t1, t1.get$length(t1), t1.$ti._eval$1("ListIterator<ListMixin.E>"));
        t2 = type$.StringLiteral;
        while (true) {
          if (!t1.moveNext$0()) {
            shouldNest = false;
            break;
          }
          c$0: {
            t3 = t1.__internal$_current;
            if (t3 === node)
              break c$0;
            if (t2._is(t3)) {
              shouldNest = true;
              break;
            }
          }
        }
      } else if (type$.Assertion._is($parent)) {
        shouldNest = $parent.get$condition() !== node && type$.StringLiteral._is($parent.get$condition()) && true;
        if ($parent.get$message($parent) !== node && type$.StringLiteral._is($parent.get$message($parent)))
          shouldNest = true;
      } else {
        if (!type$.VariableDeclaration._is($parent))
          t1 = type$.AssignmentExpression._is($parent) && $parent._rightHandSide === node && type$.ExpressionStatement._is($parent._ast$_parent);
        else
          t1 = true;
        if (t1)
          shouldNest = false;
        else
          shouldNest = !(type$.NamedExpression._is($parent) || type$.ExpressionFunctionBody._is($parent)) || false;
      }
      t1 = _this.builder;
      C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
      _this.builder.startRule$0();
      if (shouldNest)
        _this.builder.nestExpression$0();
      _this.visitNodes$2$between(node._ast$_strings, _this.get$splitOrNewline());
      if (shouldNest)
        _this.builder.unnest$0();
      _this.builder.endRule$0();
      _this.builder.endSpan$0();
    },
    visitAnnotation$1(node) {
      var t1, _this = this;
      _this.token$1(node.atSign);
      _this.visit$1(node._ast$_name);
      _this.builder.nestExpression$0();
      _this.visit$1(node._typeArguments);
      _this.token$1(node.period);
      _this.visit$1(node._constructorName);
      t1 = node._ast$_arguments;
      if (t1 != null) {
        ++_this._constNesting;
        _this.visitArgumentList$2$nestExpression(t1, false);
        --_this._constNesting;
      }
      _this.builder.unnest$0();
    },
    visitArgumentList$2$nestExpression(node, nestExpression) {
      var _this = this,
        t1 = node._ast$_arguments;
      if (t1.get$length(t1) === 0) {
        _this.token$1(node.leftParenthesis);
        t1 = node.rightParenthesis;
        if (t1._precedingComment != null)
          _this.soloZeroSplit$0();
        _this.token$1(t1);
        return;
      }
      if (_this._commaAfter$1(type$.AstNode._as(t1.get$last(t1))) != null) {
        _this._visitCollectionLiteral$4(null, node.leftParenthesis, t1, node.rightParenthesis);
        return;
      }
      if (nestExpression)
        _this.builder.nestExpression$0();
      U.ArgumentListVisitor_ArgumentListVisitor$forArguments(_this, node.leftParenthesis, node.rightParenthesis, t1).visit$0();
      if (nestExpression)
        _this.builder.unnest$0();
    },
    visitArgumentList$1(node) {
      return this.visitArgumentList$2$nestExpression(node, true);
    },
    visitAsExpression$1(node) {
      var _this = this,
        t1 = _this.builder;
      C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
      _this.builder.nestExpression$0();
      _this.visit$1(node._expression);
      _this.soloSplit$0();
      _this.token$1(node.asOperator);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.visit$1(node._type);
      _this.builder.unnest$0();
      _this.builder.endSpan$0();
    },
    visitAssertInitializer$1(node) {
      var $arguments, t1, _this = this;
      _this.token$1(node.assertKeyword);
      $arguments = H._setArrayType([node._condition], type$.JSArray_Expression);
      t1 = node._ast$_message;
      if (t1 != null)
        C.JSArray_methods.add$1($arguments, t1);
      if (_this._commaAfter$1(C.JSArray_methods.get$last($arguments)) != null) {
        _this._visitCollectionLiteral$4(null, node.leftParenthesis, $arguments, node.rightParenthesis);
        return;
      }
      _this.builder.nestExpression$0();
      U.ArgumentListVisitor_ArgumentListVisitor$forArguments(_this, node.leftParenthesis, node.rightParenthesis, $arguments).visit$0();
      _this.builder.unnest$0();
    },
    visitAssertStatement$1(node) {
      this._simpleStatement$2(node, new Q.SourceVisitor_visitAssertStatement_closure(this, node));
    },
    visitAssignmentExpression$1(node) {
      var _this = this;
      _this.builder.nestExpression$0();
      _this.visit$1(node._leftHandSide);
      _this._visitAssignment$2(node.operator, node._rightHandSide);
      _this.builder.unnest$0();
    },
    visitAwaitExpression$1(node) {
      this.token$1(node.awaitKeyword);
      this.builder._pendingWhitespace = C.Whitespace_space;
      this.visit$1(node._expression);
    },
    visitBinaryExpression$1(node) {
      var precedence, t2, t3, t4, _this = this,
        t1 = _this.builder;
      C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
      t1 = !type$.ExpressionFunctionBody._is(node._ast$_parent);
      if (t1)
        _this.builder.nestExpression$0();
      _this.builder.startLazyRule$0();
      precedence = node.operator.type.precedence;
      t2 = _this.builder;
      t3 = t2._blockArgumentNesting;
      t2 = t2._chunk_builder$_nesting;
      t4 = t2._pendingNesting;
      C.JSArray_methods.add$1(t3, t4 == null ? t2._nesting : t4);
      new Q.SourceVisitor_visitBinaryExpression_traverse(_this, precedence).call$1(node);
      t2 = _this.builder._blockArgumentNesting;
      if (0 >= t2.length)
        return H.ioore(t2, -1);
      t2.pop();
      if (t1)
        _this.builder.unnest$0();
      _this.builder.endSpan$0();
      _this.builder.endRule$0();
    },
    visitBlock$1(node) {
      var t3, t4, t5, needsDouble, t6, t7, body, _this = this,
        t1 = node.rightBracket,
        t2 = type$.Iterable_AstNode._as(node._statements);
      if (t2.get$isEmpty(t2) && t1._precedingComment == null) {
        _this.token$1(node.leftBracket);
        if (_this._splitEmptyBlock$1(node))
          _this.builder._pendingWhitespace = C.Whitespace_newline;
        _this.token$1(t1);
        return;
      }
      t3 = type$.BlockFunctionBody;
      t4 = node.leftBracket;
      if (t3._is(node._ast$_parent))
        _this._startLiteralBody$1(t4);
      else
        _this._beginBody$1(t4);
      for (t4 = new H.ListIterator(t2, t2.get$length(t2), t2.$ti._eval$1("ListIterator<ListMixin.E>")), t5 = type$.FunctionDeclarationStatement, needsDouble = true; t4.moveNext$0();) {
        t6 = t4.__internal$_current;
        t7 = _this.builder;
        if (needsDouble)
          t7._pendingWhitespace = C.Whitespace_twoNewlines;
        else
          t7._pendingWhitespace = C.Whitespace_oneOrTwoNewlines;
        _this.visit$1(t6);
        if (t5._is(t6)) {
          body = t6._functionDeclaration._functionExpression._body;
          if (t3._is(body)) {
            t6 = body._block._statements;
            needsDouble = t6.get$length(t6) !== 0;
          } else
            needsDouble = false;
        } else
          needsDouble = false;
      }
      if (t2.get$length(t2) !== 0)
        _this.builder._pendingWhitespace = C.Whitespace_newline;
      if (t3._is(node._ast$_parent))
        _this._endLiteralBody$2$forceSplit(t1, t2.get$length(t2) !== 0);
      else
        _this._endBody$1(t1);
    },
    visitBlockFunctionBody$1(node) {
      var t1, _this = this;
      _this.builder._pendingWhitespace = C.Whitespace_space;
      t1 = node.keyword;
      _this.token$1(t1);
      _this.token$1(node.star);
      if (t1 != null)
        _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.visit$1(node._block);
    },
    visitBooleanLiteral$1(node) {
      this.token$1(node.literal);
    },
    visitBreakStatement$1(node) {
      this._simpleStatement$2(node, new Q.SourceVisitor_visitBreakStatement_closure(this, node));
    },
    visitCascadeExpression$1(node) {
      var t2, splitIfOperandsSplit, t3, t4, _this = this,
        t1 = node._cascadeSections;
      if (t1._elements.length > 1) {
        _this._visitSplitCascade$1(node);
        return;
      }
      t2 = node._ast$_target;
      splitIfOperandsSplit = _this._isCollectionLike$1(t2);
      if (splitIfOperandsSplit) {
        t3 = _this.builder;
        t3.startLazyRule$1(_this._allowInlineCascade$1(node) ? K.Rule$(null) : K.Rule$hard());
      }
      _this.visit$1(t2);
      _this.builder.nestExpression$2$indent$now(2, true);
      t2 = _this.builder;
      t3 = t2._blockArgumentNesting;
      t2 = t2._chunk_builder$_nesting;
      t4 = t2._pendingNesting;
      C.JSArray_methods.add$1(t3, t4 == null ? t2._nesting : t4);
      t2 = !splitIfOperandsSplit;
      if (t2) {
        t3 = _this.builder;
        t3.startRule$1(_this._allowInlineCascade$1(node) ? K.Rule$(null) : K.Rule$hard());
      }
      _this.builder.split$0(0);
      if (t2)
        _this.builder.endRule$0();
      _this.visitNodes$2$between(t1, _this.get$zeroSplit());
      if (splitIfOperandsSplit)
        _this.builder.endRule$0();
      t1 = _this.builder._blockArgumentNesting;
      if (0 >= t1.length)
        return H.ioore(t1, -1);
      t1.pop();
      _this.builder.unnest$0();
    },
    _visitSplitCascade$1(node) {
      var t1, t2, t3, firstCommentToken, i, lastCommentToken, _this = this;
      _this.builder.startLazyRule$1(K.Rule$hard());
      _this.visit$1(node._ast$_target);
      _this.builder.nestExpression$2$indent$now(2, true);
      t1 = _this.builder;
      t2 = t1._blockArgumentNesting;
      t1 = t1._chunk_builder$_nesting;
      t3 = t1._pendingNesting;
      C.JSArray_methods.add$1(t2, t3 == null ? t1._nesting : t3);
      _this.builder.split$0(0);
      t1 = node._cascadeSections;
      firstCommentToken = t1.get$first(t1).get$beginToken();
      _this.writePrecedingCommentsAndNewlines$1(firstCommentToken);
      t2 = _this._suppressPrecedingCommentsAndNewLines;
      t2.add$1(0, firstCommentToken);
      _this.builder = _this.builder.startBlock$2$indent(null, false);
      for (i = 0; i < t1._elements.length - 1; ++i) {
        if (i > 0)
          _this.builder._pendingWhitespace = C.Whitespace_newline;
        _this.visit$1(t1.$index(0, i));
      }
      lastCommentToken = t1.get$last(t1).get$beginToken();
      _this.writePrecedingCommentsAndNewlines$1(lastCommentToken);
      t2.add$1(0, lastCommentToken);
      _this.builder = _this.builder.endBlock$2$forceSplit(null, true);
      _this.visit$1(t1.get$last(t1));
      _this.builder.endRule$0();
      t1 = _this.builder._blockArgumentNesting;
      if (0 >= t1.length)
        return H.ioore(t1, -1);
      t1.pop();
      _this.builder.unnest$0();
    },
    _isCollectionLike$1(expression) {
      var $arguments, t1;
      if (type$.ListLiteral._is(expression))
        return false;
      if (type$.SetOrMapLiteral._is(expression))
        return false;
      if (type$.InvocationExpression._is(expression))
        $arguments = expression._argumentList;
      else
        $arguments = type$.InstanceCreationExpression._is(expression) ? expression._argumentList : null;
      if ($arguments != null) {
        t1 = $arguments._ast$_arguments;
        t1 = t1.get$length(t1) === 0 || this._commaAfter$1(type$.AstNode._as(t1.get$last(t1))) == null;
      } else
        t1 = true;
      return t1;
    },
    _allowInlineCascade$1(node) {
      var t1 = node._ast$_target;
      if (type$.ConditionalExpression._is(t1))
        return false;
      if (type$.BinaryExpression._is(t1))
        return false;
      if (type$.PrefixExpression._is(t1))
        return false;
      if (type$.AwaitExpression._is(t1))
        return false;
      return true;
    },
    visitCatchClause$1(node) {
      var t2, t3, _this = this,
        t1 = _this.get$space();
      _this.token$2$after(node.onKeyword, t1);
      t2 = node._exceptionType;
      _this.visit$1(t2);
      t3 = node.catchKeyword;
      if (t3 != null) {
        if (t2 != null)
          _this.builder._pendingWhitespace = C.Whitespace_space;
        _this.token$1(t3);
        _this.builder._pendingWhitespace = C.Whitespace_space;
        _this.token$1(node.leftParenthesis);
        _this.visit$1(node._exceptionParameter);
        _this.token$2$after(node.comma, t1);
        _this.visit$1(node._stackTraceParameter);
        _this.token$1(node.rightParenthesis);
        _this.builder._pendingWhitespace = C.Whitespace_space;
      } else
        _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.visit$1(node._body);
    },
    visitClassDeclaration$1(node) {
      var _this = this,
        t1 = _this.get$newline();
      _this.visitNodes$3$after$between(type$.NodeList_Annotation._as(node._metadata), t1, t1);
      _this.builder.nestExpression$0();
      t1 = _this.get$space();
      _this.token$2$after(node.abstractKeyword, t1);
      _this.token$1(node.classKeyword);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.visit$1(node._ast$_name);
      _this.visit$1(node._typeParameters);
      _this.visit$1(node._extendsClause);
      _this.builder.startRule$1(Q.CombinatorRule$());
      _this.visit$1(node._withClause);
      _this.visit$1(node._implementsClause);
      _this.builder.endRule$0();
      _this.visit$2$before(node._nativeClause, t1);
      t1 = _this.builder;
      t1._pendingWhitespace = C.Whitespace_space;
      t1.unnest$0();
      _this._beginBody$1(node.leftBracket);
      _this._visitMembers$1(node._members);
      _this._endBody$1(node.rightBracket);
    },
    visitClassTypeAlias$1(node) {
      var _this = this,
        t1 = _this.get$newline();
      _this.visitNodes$3$after$between(type$.NodeList_Annotation._as(node._metadata), t1, t1);
      _this._simpleStatement$2(node, new Q.SourceVisitor_visitClassTypeAlias_closure(_this, node));
    },
    visitComment$1(node) {
      return null;
    },
    visitCommentReference$1(node) {
      return null;
    },
    visitCompilationUnit$1(node) {
      var directives, t1, t2, t3, t4, t5, needsDouble, t6, hasClassBody, t7, body, _this = this;
      _this.visit$1(node._scriptTag);
      directives = node._directives;
      if (directives.get$length(directives) !== 0 && type$.LibraryDirective._is(directives.get$first(directives))) {
        _this.visit$1(directives.get$first(directives));
        _this.builder._pendingWhitespace = C.Whitespace_twoNewlines;
        directives = H.SubListIterable$(directives, 1, null, directives.$ti._eval$1("ListMixin.E"));
      }
      _this.visitNodes$2$between(directives, _this.get$oneOrTwoNewlines());
      for (t1 = node._declarations, t1 = new H.ListIterator(t1, t1.get$length(t1), t1.$ti._eval$1("ListIterator<ListMixin.E>")), t2 = type$.FunctionDeclaration, t3 = type$.ClassDeclaration, t4 = type$.ExtensionDeclaration, t5 = type$.BlockFunctionBody, needsDouble = true; t1.moveNext$0();) {
        t6 = t1.__internal$_current;
        hasClassBody = t3._is(t6) || t4._is(t6);
        if (hasClassBody)
          needsDouble = true;
        t7 = _this.builder;
        if (needsDouble)
          t7._pendingWhitespace = C.Whitespace_twoNewlines;
        else
          t7._pendingWhitespace = C.Whitespace_oneOrTwoNewlines;
        _this.visit$1(t6);
        if (hasClassBody)
          needsDouble = true;
        else if (t2._is(t6)) {
          body = t6._functionExpression._body;
          if (t5._is(body)) {
            t6 = body._block._statements;
            needsDouble = t6.get$length(t6) !== 0;
          } else
            needsDouble = false;
        } else
          needsDouble = false;
      }
    },
    visitConditionalExpression$1(node) {
      var t1, t2, t3, _this = this;
      _this.builder.nestExpression$0();
      _this.builder.startLazyRule$0();
      _this.visit$1(node._condition);
      _this.builder.nestExpression$2$indent$now(2, true);
      t1 = _this.builder;
      t2 = t1._blockArgumentNesting;
      t1 = t1._chunk_builder$_nesting;
      t3 = t1._pendingNesting;
      C.JSArray_methods.add$1(t2, t3 == null ? t1._nesting : t3);
      _this.builder.unnest$0();
      t1 = _this.builder;
      C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
      _this.builder.split$1$space(0, true);
      _this.token$1(node.question);
      t1 = _this.builder;
      t1._pendingWhitespace = C.Whitespace_space;
      t1.nestExpression$0();
      _this.visit$1(node._thenExpression);
      _this.builder.unnest$0();
      _this.builder.split$1$space(0, true);
      _this.token$1(node.colon);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.visit$1(node._elseExpression);
      if (type$.ConditionalExpression._is(node._ast$_parent))
        _this.builder._handleHardSplit$0();
      _this.builder.endRule$0();
      _this.builder.endSpan$0();
      t1 = _this.builder._blockArgumentNesting;
      if (0 >= t1.length)
        return H.ioore(t1, -1);
      t1.pop();
      _this.builder.unnest$0();
    },
    visitConfiguration$1(node) {
      var t1, _this = this;
      _this.token$1(node.ifKeyword);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.token$1(node.leftParenthesis);
      _this.visit$1(node._ast$_name);
      t1 = node.equalToken;
      if (t1 != null) {
        _this.builder.nestExpression$0();
        _this.builder._pendingWhitespace = C.Whitespace_space;
        _this.token$1(t1);
        _this.soloSplit$0();
        _this.visit$1(node._ast$_value);
        _this.builder.unnest$0();
      }
      _this.token$1(node.rightParenthesis);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.visit$1(node._ast$_uri);
    },
    visitConstructorDeclaration$1(node) {
      var _this = this,
        t1 = _this.get$newline();
      _this.visitNodes$3$after$between(type$.NodeList_Annotation._as(node._metadata), t1, t1);
      t1 = _this.get$space();
      _this.token$2$after(node.externalKeyword, t1);
      _this.token$2$after(node.constKeyword, t1);
      _this.token$2$after(node.factoryKeyword, t1);
      _this.visit$1(node._returnType);
      _this.token$1(node.period);
      _this.visit$1(node._ast$_name);
      t1 = node._initializers;
      if (t1.get$length(t1) !== 0)
        _this.builder.startRule$0();
      if (node._redirectedConstructor != null)
        _this.builder.nestExpression$0();
      _this._visitBody$4(null, node._parameters, node._body, new Q.SourceVisitor_visitConstructorDeclaration_closure(_this, node));
    },
    _visitConstructorInitializers$1(node) {
      var padding, i, _this = this,
        t1 = node._parameters._parameters,
        hasTrailingComma = t1.get$length(t1) !== 0 && _this._commaAfter$1(type$.AstNode._as(t1.get$last(t1))) != null,
        t2 = _this.builder;
      if (hasTrailingComma) {
        t2._pendingWhitespace = C.Whitespace_space;
        if (node._initializers._elements.length > 1) {
          t2 = t1.get$last(t1);
          t2.toString;
          if (!J.get$kind$z(t2).isNamed) {
            t1 = t1.get$last(t1);
            t1.toString;
            t1 = J.get$kind$z(t1).isOptionalPositional;
          } else
            t1 = true;
          padding = t1 ? " " : "  ";
          _this._source_visitor$_writeText$2(padding, node.separator.offset);
        }
        _this.token$1(node.separator);
        t1 = _this.builder;
        t1._pendingWhitespace = C.Whitespace_space;
        t1._chunk_builder$_nesting.indent$1(6);
      } else {
        t2._chunk_builder$_nesting.indent$1(4);
        _this.builder.split$1$space(0, true);
        _this.token$1(node.separator);
        t1 = _this.builder;
        t1._pendingWhitespace = C.Whitespace_space;
        t1._chunk_builder$_nesting.indent$1(2);
      }
      for (t1 = node._initializers, t2 = type$.dynamic, i = 0; i < t1._elements.length; ++i) {
        if (i > 0) {
          _this.token$1(t1.$index(0, i).get$beginToken().previous);
          _this.builder._pendingWhitespace = C.Whitespace_newline;
        }
        t1.$index(0, i).accept$1$1(0, _this, t2);
      }
      t1 = _this.builder._chunk_builder$_nesting._stack;
      if (0 >= t1.length)
        return H.ioore(t1, -1);
      t1.pop();
      if (!hasTrailingComma) {
        t1 = _this.builder._chunk_builder$_nesting._stack;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
    },
    visitConstructorFieldInitializer$1(node) {
      var _this = this;
      _this.builder.nestExpression$0();
      _this.token$1(node.thisKeyword);
      _this.token$1(node.period);
      _this.visit$1(node._fieldName);
      _this._visitAssignment$2(node.equals, node._expression);
      _this.builder.unnest$0();
    },
    visitConstructorName$1(node) {
      this.visit$1(node._type);
      this.token$1(node.period);
      this.visit$1(node._ast$_name);
    },
    visitContinueStatement$1(node) {
      this._simpleStatement$2(node, new Q.SourceVisitor_visitContinueStatement_closure(this, node));
    },
    visitDeclaredIdentifier$1(node) {
      var _this = this,
        t1 = _this.get$space();
      _this.token$2$after(node.keyword, t1);
      _this.visit$2$after(node._type, t1);
      _this.visit$1(node._identifier);
    },
    visitDefaultFormalParameter$1(node) {
      var t1, t2, _this = this;
      _this.visit$1(node._parameter);
      t1 = node.separator;
      if (t1 != null) {
        t2 = _this.builder;
        C.JSArray_methods.add$1(t2._openSpans, new Q.OpenSpan(t2.get$_currentChunkIndex(), 1));
        _this.builder.nestExpression$0();
        if (_this._source_visitor$_formatter.fixes.contains$1(0, C.StyleFix_U4w)) {
          _this.builder._pendingWhitespace = C.Whitespace_space;
          _this.writePrecedingCommentsAndNewlines$1(t1);
          _this._source_visitor$_writeText$2("=", t1.offset);
        } else {
          if (t1.type === C.TokenType_tca)
            _this.builder._pendingWhitespace = C.Whitespace_space;
          _this.token$1(t1);
        }
        t1 = node._defaultValue;
        t1.toString;
        _this.soloSplit$1(_this._assignmentCost$1(t1));
        _this.visit$1(t1);
        _this.builder.unnest$0();
        _this.builder.endSpan$0();
      }
    },
    visitDoStatement$1(node) {
      var t1, _this = this;
      _this.builder.nestExpression$0();
      _this.token$1(node.doKeyword);
      t1 = _this.builder;
      t1._pendingWhitespace = C.Whitespace_space;
      t1.unnest$1$now(false);
      _this.visit$1(node._body);
      _this.builder.nestExpression$0();
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.token$1(node.whileKeyword);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.token$1(node.leftParenthesis);
      _this.soloZeroSplit$0();
      _this.visit$1(node._condition);
      _this.token$1(node.rightParenthesis);
      _this.token$1(node.semicolon);
      _this.builder.unnest$0();
    },
    visitDottedName$1(node) {
      var t1, t2, t3;
      for (t1 = node._components, t2 = new H.ListIterator(t1, t1.get$length(t1), t1.$ti._eval$1("ListIterator<ListMixin.E>")); t2.moveNext$0();) {
        t3 = t2.__internal$_current;
        if (t1.get$length(t1) === 0)
          H.throwExpression(H.IterableElementError_noElement());
        if (t3 != t1.$index(0, 0))
          this.token$1(t3.token.previous);
        this.visit$1(t3);
      }
    },
    visitDoubleLiteral$1(node) {
      this.token$1(node.literal);
    },
    visitEmptyFunctionBody$1(node) {
      this.token$1(node.semicolon);
    },
    visitEmptyStatement$1(node) {
      this.token$1(node.semicolon);
    },
    visitEnumConstantDeclaration$1(node) {
      var t1 = this.get$newline();
      this.visitNodes$3$after$between(type$.NodeList_Annotation._as(node._metadata), t1, t1);
      this.visit$1(node._ast$_name);
    },
    visitEnumDeclaration$1(node) {
      var _this = this,
        t1 = _this.get$newline();
      _this.visitNodes$3$after$between(type$.NodeList_Annotation._as(node._metadata), t1, t1);
      _this.token$1(node.enumKeyword);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.visit$1(node._ast$_name);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this._beginBody$2$space(node.leftBracket, true);
      t1 = node._constants;
      _this.visitCommaSeparatedNodes$2$between(t1, _this.get$splitOrTwoNewlines());
      if (_this._commaAfter$1(type$.AstNode._as(t1.get$last(t1))) != null)
        _this.builder._handleHardSplit$0();
      _this._endBody$2$space(node.rightBracket, true);
    },
    visitExportDirective$1(node) {
      this._visitDirectiveMetadata$1(node);
      this._simpleStatement$2(node, new Q.SourceVisitor_visitExportDirective_closure(this, node));
    },
    visitExpressionFunctionBody$1(node) {
      var t1, t2, t3, t4, $parent, isArgWithTrailingComma, t5, t6, _this = this;
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.token$2$after(node.keyword, _this.get$space());
      t1 = node._ast$_parent;
      t2 = type$.FunctionExpression;
      if (t2._is(t1) && !type$.FunctionDeclaration._is(t1.get$parent(t1))) {
        t1 = _this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
      }
      _this.token$1(node.functionDefinition);
      _this.builder.split$1$space(0, true);
      t1 = node._expression;
      t3 = type$.BinaryExpression._is(t1);
      if (!t3)
        _this.builder.endRule$0();
      t4 = node._ast$_parent;
      if (t2._is(t4) && !type$.FunctionDeclaration._is(t4.get$parent(t4)))
        _this.builder.endSpan$0();
      $parent = node._ast$_parent;
      if (t2._is($parent)) {
        $parent = $parent._ast$_parent;
        if (type$.NamedExpression._is($parent))
          $parent = $parent._ast$_parent;
        if (type$.ArgumentList._is($parent)) {
          t2 = $parent._ast$_arguments;
          isArgWithTrailingComma = _this._commaAfter$1(type$.AstNode._as(t2.get$last(t2))) != null;
        } else
          isArgWithTrailingComma = false;
      } else
        isArgWithTrailingComma = false;
      t2 = !isArgWithTrailingComma;
      if (t2) {
        t4 = _this.builder;
        t5 = t4._blockArgumentNesting;
        t4 = t4._chunk_builder$_nesting;
        t6 = t4._pendingNesting;
        C.JSArray_methods.add$1(t5, t6 == null ? t4._nesting : t6);
      }
      t4 = _this.builder;
      C.JSArray_methods.add$1(t4._openSpans, new Q.OpenSpan(t4.get$_currentChunkIndex(), 1));
      _this.visit$1(t1);
      _this.builder.endSpan$0();
      if (t2) {
        t1 = _this.builder._blockArgumentNesting;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      if (t3)
        _this.builder.endRule$0();
      _this.token$1(node.semicolon);
    },
    _fixSingleCascadeStatement$1(statement) {
      var target, t2, t3, t4, t5, subexpression, _this = this,
        cascade = type$.CascadeExpression._as(statement._expression),
        t1 = cascade._cascadeSections;
      if (t1._elements.length !== 1)
        return false;
      target = cascade._ast$_target;
      if (type$.AsExpression._is(target) || type$.AwaitExpression._is(target) || type$.BinaryExpression._is(target) || type$.ConditionalExpression._is(target) || type$.IsExpression._is(target) || type$.PostfixExpression._is(target) || type$.PrefixExpression._is(target)) {
        _this.writePrecedingCommentsAndNewlines$1(target.get$beginToken());
        _this._suppressPrecedingCommentsAndNewLines.add$1(0, target.get$beginToken());
        t2 = $.$get$astFactory0();
        t3 = L.SimpleToken$(C.TokenType_5uk, 0, null);
        t3.previous = cascade.get$beginToken().previous;
        t3.next = target.get$beginToken();
        t4 = L.SimpleToken$(C.TokenType_coy, 0, null);
        t4.previous = target.get$endToken();
        t5 = statement.semicolon;
        t4.next = t5;
        t2.toString;
        _this.visit$1(U.ExpressionStatementImpl$(U.CascadeExpressionImpl$(U.ParenthesizedExpressionImpl$(t3, target, t4), type$.List_Expression._as(t1)), t5));
        return true;
      } else if (type$.BooleanLiteral._is(target) || type$.FunctionExpression._is(target) || type$.IndexExpression._is(target) || type$.InstanceCreationExpression._is(target) || type$.IntegerLiteral._is(target) || type$.ListLiteral._is(target) || type$.NullLiteral._is(target) || type$.MethodInvocation._is(target) || type$.ParenthesizedExpression._is(target) || type$.PrefixedIdentifier._is(target) || type$.PropertyAccess._is(target) || type$.SimpleIdentifier._is(target) || type$.StringLiteral._is(target) || type$.ThisExpression._is(target)) {
        subexpression = t1.get$single(t1);
        _this.builder.nestExpression$0();
        if (type$.AssignmentExpression._is(subexpression)) {
          t1 = $.$get$astFactory0();
          t2 = Q.SourceVisitor__insertCascadeTargetIntoExpression(subexpression._leftHandSide, target);
          t3 = subexpression.operator;
          t4 = subexpression._rightHandSide;
          t1.toString;
          _this.visit$1(U.AssignmentExpressionImpl$(t2, t3, t4));
        } else if (type$.MethodInvocation._is(subexpression) || type$.PropertyAccess._is(subexpression))
          _this.visit$1(Q.SourceVisitor__insertCascadeTargetIntoExpression(subexpression, target));
        else
          H.throwExpression(P.UnsupportedError$('--fix-single-cascade-statements: subexpression of cascade "' + cascade.toString$0(0) + '" has unsupported type ' + J.get$runtimeType$(subexpression).toString$0(0) + "."));
        _this.token$1(statement.semicolon);
        _this.builder.unnest$0();
        return true;
      } else
        return false;
    },
    visitExpressionStatement$1(node) {
      var _this = this;
      if (_this._source_visitor$_formatter.fixes.contains$1(0, C.StyleFix_MQu) && type$.CascadeExpression._is(node._expression) && _this._fixSingleCascadeStatement$1(node))
        return;
      _this._simpleStatement$2(node, new Q.SourceVisitor_visitExpressionStatement_closure(_this, node));
    },
    visitExtendsClause$1(node) {
      var _this = this;
      _this.soloSplit$0();
      _this.token$1(node.extendsKeyword);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.visit$1(node._superclass);
    },
    visitExtensionDeclaration$1(node) {
      var _this = this,
        t1 = _this.get$newline();
      _this.visitNodes$3$after$between(type$.NodeList_Annotation._as(node._metadata), t1, t1);
      _this.builder.nestExpression$0();
      _this.token$1(node.extensionKeyword);
      t1 = node._ast$_name;
      if (t1 != null) {
        _this.builder._pendingWhitespace = C.Whitespace_space;
        _this.visit$1(t1);
      }
      _this.visit$1(node._typeParameters);
      _this.soloSplit$0();
      _this.token$1(node.onKeyword);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.visit$1(node._extendedType);
      t1 = _this.builder;
      t1._pendingWhitespace = C.Whitespace_space;
      t1.unnest$0();
      _this._beginBody$1(node.leftBracket);
      _this._visitMembers$1(node._members);
      _this._endBody$1(node.rightBracket);
    },
    visitFieldDeclaration$1(node) {
      var _this = this,
        t1 = _this.get$newline();
      _this.visitNodes$3$after$between(type$.NodeList_Annotation._as(node._metadata), t1, t1);
      _this._simpleStatement$2(node, new Q.SourceVisitor_visitFieldDeclaration_closure(_this, node));
    },
    visitFieldFormalParameter$1(node) {
      this.visitParameterMetadata$2(node._metadata, new Q.SourceVisitor_visitFieldFormalParameter_closure(this, node));
    },
    visitFormalParameterList$2$nestExpression(node, nestExpression) {
      var t2, t3, t4, requiredParams, optionalParams, rule, t5, _i, param, namedRule, _this = this, _null = null,
        t1 = node._parameters;
      if (t1.get$length(t1) === 0) {
        _this.token$1(node.leftParenthesis);
        t1 = node.rightParenthesis;
        if (t1._precedingComment != null)
          _this.soloZeroSplit$0();
        _this.token$1(t1);
        return;
      }
      t2 = type$.AstNode;
      if (_this._commaAfter$1(t2._as(t1.get$last(t1))) != null) {
        _this._visitTrailingCommaParameterList$1(node);
        return;
      }
      t3 = t1.$ti;
      t4 = t3._eval$1("WhereIterable<ListMixin.E>");
      requiredParams = P.List_List$of(new H.WhereIterable(t1, t3._eval$1("bool(ListMixin.E)")._as(new Q.SourceVisitor_visitFormalParameterList_closure()), t4), true, t4._eval$1("Iterable.E"));
      t4 = type$.WhereTypeIterable_DefaultFormalParameter;
      optionalParams = P.List_List$of(new H.WhereTypeIterable(t1, t4), true, t4._eval$1("Iterable.E"));
      if (nestExpression)
        _this.builder.nestExpression$0();
      _this.token$1(node.leftParenthesis);
      t1 = _this._metadataRules;
      C.JSArray_methods.add$1(t1, O.MetadataRule$());
      t3 = requiredParams.length;
      if (t3 !== 0) {
        rule = Z.PositionalRule$(_null, 0, 0);
        C.JSArray_methods.get$last(t1)._positionalRule = rule;
        _this.builder.startRule$1(rule);
        t4 = node._ast$_parent;
        t4 = type$.FunctionExpression._is(t4) && !type$.FunctionDeclaration._is(t4.get$parent(t4));
        t5 = rule._argument$_arguments;
        if (t4)
          C.JSArray_methods.add$1(t5, _null);
        else
          C.JSArray_methods.add$1(t5, _this.builder.split$0(0));
        t4 = _this.builder;
        C.JSArray_methods.add$1(t4._openSpans, new Q.OpenSpan(t4.get$_currentChunkIndex(), 1));
        for (_i = 0; _i < requiredParams.length; requiredParams.length === t3 || (0, H.throwConcurrentModificationError)(requiredParams), ++_i) {
          param = requiredParams[_i];
          _this.visit$1(param);
          t2._as(param);
          _this.token$1(_this._commaAfter$1(param));
          t4 = C.JSArray_methods.get$last(requiredParams);
          if (param == null ? t4 != null : param !== t4)
            C.JSArray_methods.add$1(t5, _this.builder.split$1$space(0, true));
        }
        _this.builder.endSpan$0();
        _this.builder.endRule$0();
      } else
        rule = _null;
      if (optionalParams.length !== 0) {
        namedRule = Z.NamedRule$(_null, 0, 0);
        if (rule != null)
          rule._namedArgsRule = namedRule;
        C.JSArray_methods.get$last(t1)._namedRule = namedRule;
        _this.builder.startRule$1(namedRule);
        t3 = _this.builder;
        t4 = t3._blockArgumentNesting;
        t3 = t3._chunk_builder$_nesting;
        t5 = t3._pendingNesting;
        C.JSArray_methods.add$1(t4, t5 == null ? t3._nesting : t5);
        t3 = namedRule._argument$_arguments;
        C.JSArray_methods.add$1(t3, _this.builder.split$1$space(0, requiredParams.length !== 0));
        _this.token$1(node.leftDelimiter);
        for (t4 = optionalParams.length, _i = 0; _i < optionalParams.length; optionalParams.length === t4 || (0, H.throwConcurrentModificationError)(optionalParams), ++_i) {
          param = optionalParams[_i];
          _this.visit$1(param);
          t2._as(param);
          _this.token$1(_this._commaAfter$1(param));
          t5 = C.JSArray_methods.get$last(optionalParams);
          if (param == null ? t5 != null : param !== t5)
            C.JSArray_methods.add$1(t3, _this.builder.split$1$space(0, true));
        }
        t2 = _this.builder._blockArgumentNesting;
        if (0 >= t2.length)
          return H.ioore(t2, -1);
        t2.pop();
        _this.builder.endRule$0();
        _this.token$1(node.rightDelimiter);
      }
      if (0 >= t1.length)
        return H.ioore(t1, -1);
      t1.pop();
      _this.token$1(node.rightParenthesis);
      if (nestExpression)
        _this.builder.unnest$0();
    },
    visitFormalParameterList$1(node) {
      return this.visitFormalParameterList$2$nestExpression(node, true);
    },
    visitForElement$1(node) {
      var t3, t4, t5, _this = this,
        t1 = node._body,
        t2 = _this._findSpreadCollectionBracket$1(t1) == null;
      _this.builder.nestExpression$0();
      _this.token$2$after(node.awaitKeyword, _this.get$space());
      _this.token$1(node.forKeyword);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.token$1(node.leftParenthesis);
      _this.builder.startRule$0();
      _this.builder.startRule$0();
      _this.visit$1(node._forLoopParts);
      _this.token$1(node.rightParenthesis);
      _this.builder.endRule$0();
      _this.builder.unnest$0();
      _this.builder.nestExpression$2$indent$now(2, true);
      t3 = _this.builder;
      if (!t2)
        t3._pendingWhitespace = C.Whitespace_space;
      else {
        t3.split$1$space(0, true);
        t3 = _this.builder;
        t4 = t3._blockArgumentNesting;
        t3 = t3._chunk_builder$_nesting;
        t5 = t3._pendingNesting;
        C.JSArray_methods.add$1(t4, t5 == null ? t3._nesting : t5);
      }
      _this.visit$1(t1);
      if (t2) {
        t2 = _this.builder._blockArgumentNesting;
        if (0 >= t2.length)
          return H.ioore(t2, -1);
        t2.pop();
      }
      _this.builder.unnest$0();
      if (type$.IfElement._is(t1) || type$.ForElement._is(t1))
        _this.builder._handleHardSplit$0();
      _this.builder.endRule$0();
    },
    visitForStatement$1(node) {
      var _this = this;
      _this.builder.nestExpression$0();
      _this.token$2$after(node.awaitKeyword, _this.get$space());
      _this.token$1(node.forKeyword);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.token$1(node.leftParenthesis);
      _this.builder.startRule$0();
      _this.visit$1(node._forLoopParts);
      _this.token$1(node.rightParenthesis);
      _this.builder.endRule$0();
      _this.builder.unnest$0();
      _this._visitLoopBody$1(node._body);
    },
    visitForEachPartsWithDeclaration$1(node) {
      var _this = this,
        t1 = node._loopVariable,
        t2 = _this.get$split(_this);
      _this.visitNodes$3$after$between(t1._metadata, t2, t2);
      _this.visit$1(t1);
      _this._visitForEachPartsFromIn$1(node);
    },
    _visitForEachPartsFromIn$1(node) {
      var _this = this;
      _this.soloSplit$0();
      _this.token$1(node.inKeyword);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.visit$1(node._ast$_iterable);
    },
    visitForEachPartsWithIdentifier$1(node) {
      this.visit$1(node._identifier);
      this._visitForEachPartsFromIn$1(node);
    },
    visitForPartsWithDeclarations$1(node) {
      var declaration, t1, _this = this;
      _this.builder.nestExpression$0();
      _this.builder.startRule$0();
      declaration = node._variableList;
      t1 = _this.get$newline();
      _this.visitNodes$3$after$between(type$.NodeList_Annotation._as(declaration._metadata), t1, t1);
      t1 = _this.get$space();
      _this.token$2$after(declaration.keyword, t1);
      _this.visit$2$after(declaration._type, t1);
      _this.visitCommaSeparatedNodes$2$between(declaration._variables, new Q.SourceVisitor_visitForPartsWithDeclarations_closure(_this));
      _this.builder.endRule$0();
      _this.builder.unnest$0();
      _this._visitForPartsFromLeftSeparator$1(node);
    },
    visitForPartsWithExpression$1(node) {
      this.visit$1(node._initialization);
      this._visitForPartsFromLeftSeparator$1(node);
    },
    _visitForPartsFromLeftSeparator$1(node) {
      var t1, _this = this;
      _this.token$1(node.leftSeparator);
      t1 = node._condition;
      if (t1 != null)
        _this.builder.split$1$space(0, true);
      _this.visit$1(t1);
      _this.token$1(node.rightSeparator);
      t1 = node._updaters;
      if (t1.get$length(t1) !== 0) {
        _this.builder.split$1$space(0, true);
        _this.builder.startRule$0();
        _this.visitCommaSeparatedNodes$2$between(t1, _this.get$split(_this));
        _this.builder.endRule$0();
      }
    },
    visitFunctionDeclaration$1(node) {
      this._visitMemberDeclaration$2(node, node._functionExpression);
    },
    visitFunctionDeclarationStatement$1(node) {
      this.visit$1(node._functionDeclaration);
    },
    visitFunctionExpression$1(node) {
      var _this = this,
        oldConstNesting = _this._constNesting;
      _this._constNesting = 0;
      _this._visitBody$3(node._typeParameters, node._parameters, node._body);
      _this._constNesting = oldConstNesting;
    },
    visitFunctionExpressionInvocation$1(node) {
      var _this = this,
        t1 = _this.builder;
      C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
      _this.builder.nestExpression$0();
      _this.visit$1(node._function);
      _this.visit$1(node._typeArguments);
      _this.visitArgumentList$2$nestExpression(node._argumentList, false);
      _this.builder.unnest$0();
      _this.builder.endSpan$0();
    },
    visitFunctionReference$1(node) {
      this.visit$1(node._function);
      this.visit$1(node._typeArguments);
    },
    visitFunctionTypeAlias$1(node) {
      var _this = this,
        t1 = _this.get$newline();
      _this.visitNodes$3$after$between(type$.NodeList_Annotation._as(node._metadata), t1, t1);
      if (_this._source_visitor$_formatter.fixes.contains$1(0, C.StyleFix_UEC)) {
        _this._simpleStatement$2(node, new Q.SourceVisitor_visitFunctionTypeAlias_closure(_this, node));
        return;
      }
      _this._simpleStatement$2(node, new Q.SourceVisitor_visitFunctionTypeAlias_closure0(_this, node));
    },
    visitFunctionTypedFormalParameter$1(node) {
      this.visitParameterMetadata$2(node._metadata, new Q.SourceVisitor_visitFunctionTypedFormalParameter_closure(this, node));
    },
    visitGenericFunctionType$1(node) {
      this._visitGenericFunctionType$5(node._returnType, node.functionKeyword, null, node._typeParameters, node._parameters);
      this.token$1(node.question);
    },
    visitGenericTypeAlias$1(node) {
      var _this = this,
        t1 = _this.get$newline();
      _this.visitNodes$3$after$between(node._metadata, t1, t1);
      _this._simpleStatement$2(node, new Q.SourceVisitor_visitGenericTypeAlias_closure(_this, node));
    },
    visitHideCombinator$1(node) {
      this._visitCombinator$2(node.keyword, node._hiddenNames);
    },
    visitIfElement$1(node) {
      var t2, thisNode, spreadRule, spreadBrackets, t3, t4, _i, element, spreadBracket, elseSpreadBracket, visitChild, hasInnerControlFlow, t5, t6, lastElse, _this = this,
        t1 = H._setArrayType([], type$.JSArray_IfElement);
      for (t2 = type$.IfElement, thisNode = node; t2._is(thisNode); thisNode = thisNode._elseElement)
        t1.push(thisNode);
      spreadRule = K.Rule$(null);
      spreadBrackets = P.LinkedHashMap_LinkedHashMap$_empty(type$.CollectionElement, type$.Token);
      for (t3 = t1.length, t4 = _this._blockRules, _i = 0; _i < t1.length; t1.length === t3 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        element = t1[_i];
        spreadBracket = _this._findSpreadCollectionBracket$1(element._thenElement);
        if (spreadBracket != null) {
          spreadBrackets.$indexSet(0, element, spreadBracket);
          t4.$indexSet(0, spreadBracket, spreadRule);
        }
      }
      elseSpreadBracket = _this._findSpreadCollectionBracket$1(C.JSArray_methods.get$last(t1)._elseElement);
      if (elseSpreadBracket != null) {
        t3 = C.JSArray_methods.get$last(t1)._elseElement;
        t3.toString;
        spreadBrackets.$indexSet(0, t3, elseSpreadBracket);
        _this.beforeBlock$3(elseSpreadBracket, spreadRule, null);
      }
      visitChild = new Q.SourceVisitor_visitIfElement_visitChild(_this, spreadBrackets);
      _this.builder.startLazyRule$0();
      for (t3 = t1.length, t4 = type$.ForElement, hasInnerControlFlow = false, _i = 0; _i < t1.length; t1.length === t3 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        element = t1[_i];
        _this.token$1(element.ifKeyword);
        _this.builder._pendingWhitespace = C.Whitespace_space;
        _this.token$1(element.leftParenthesis);
        _this.visit$1(element._condition);
        _this.token$1(element.rightParenthesis);
        t5 = element._thenElement;
        visitChild.call$2(element, t5);
        if (t2._is(t5) || t4._is(t5))
          hasInnerControlFlow = true;
        if (element._elseElement != null) {
          t5 = spreadBrackets.containsKey$1(element);
          t6 = _this.builder;
          if (t5)
            t6._pendingWhitespace = C.Whitespace_space;
          else
            t6.split$1$space(0, true);
          _this.token$1(element.elseKeyword);
          if (element !== C.JSArray_methods.get$last(t1))
            _this.builder._pendingWhitespace = C.Whitespace_space;
        }
      }
      lastElse = C.JSArray_methods.get$last(t1)._elseElement;
      if (lastElse != null) {
        visitChild.call$2(lastElse, lastElse);
        if (t2._is(lastElse) || t4._is(lastElse))
          hasInnerControlFlow = true;
      }
      if (hasInnerControlFlow)
        _this.builder._handleHardSplit$0();
      _this.builder.endRule$0();
    },
    visitIfStatement$1(node) {
      var t1, t2, t3, t4, _this = this;
      _this.builder.nestExpression$0();
      _this.token$1(node.ifKeyword);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.token$1(node.leftParenthesis);
      _this.visit$1(node._condition);
      _this.token$1(node.rightParenthesis);
      _this.builder.unnest$0();
      t1 = new Q.SourceVisitor_visitIfStatement_visitClause(_this, node);
      t2 = node._thenStatement;
      t1.call$1(t2);
      t3 = node._elseStatement;
      if (t3 != null) {
        t4 = _this.builder;
        if (type$.Block._is(t2))
          t4._pendingWhitespace = C.Whitespace_space;
        else
          t4._pendingWhitespace = C.Whitespace_newline;
        _this.token$1(node.elseKeyword);
        t1.call$1(t3);
      }
    },
    visitImplementsClause$1(node) {
      this._visitCombinator$2(node.implementsKeyword, node._interfaces);
    },
    visitImportDirective$1(node) {
      this._visitDirectiveMetadata$1(node);
      this._simpleStatement$2(node, new Q.SourceVisitor_visitImportDirective_closure(this, node));
    },
    visitIndexExpression$1(node) {
      var t1, _this = this;
      _this.builder.nestExpression$0();
      t1 = node.period;
      if (t1 != null)
        _this.token$1(t1);
      else
        _this.visit$1(node._ast$_target);
      _this.finishIndexExpression$1(node);
      _this.builder.unnest$0();
    },
    finishIndexExpression$1(node) {
      var t1, _this = this;
      if (type$.IndexExpression._is(node._ast$_target))
        _this.soloZeroSplit$0();
      t1 = _this.builder;
      C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 4));
      _this.token$1(node.question);
      _this.token$1(node.leftBracket);
      _this.soloZeroSplit$0();
      _this.visit$1(node._ast$_index);
      _this.token$1(node.rightBracket);
      _this.builder.endSpan$0();
    },
    visitInstanceCreationExpression$1(node) {
      var includeKeyword, t2, _this = this,
        t1 = _this.builder;
      C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
      t1 = node.keyword;
      if (t1 != null)
        if (t1.get$keyword() === C.Keyword_wbZ && _this._source_visitor$_formatter.fixes.contains$1(0, C.StyleFix_8aB))
          includeKeyword = false;
        else
          includeKeyword = !(t1.get$keyword() === C.Keyword_oXM && _this._source_visitor$_formatter.fixes.contains$1(0, C.StyleFix_xoD) && _this._constNesting > 0) || false;
      else
        includeKeyword = true;
      if (includeKeyword)
        _this.token$2$after(t1, _this.get$space());
      else {
        t1.toString;
        _this.writePrecedingCommentsAndNewlines$1(t1);
      }
      t2 = _this.builder;
      C.JSArray_methods.add$1(t2._openSpans, new Q.OpenSpan(t2.get$_currentChunkIndex(), 4));
      _this.builder.nestExpression$0();
      _this.visit$1(node._constructorName);
      _this._startPossibleConstContext$1(t1);
      _this.builder.endSpan$0();
      _this.visitArgumentList$2$nestExpression(node._argumentList, false);
      _this.builder.endSpan$0();
      _this._endPossibleConstContext$1(t1);
      _this.builder.unnest$0();
    },
    visitIntegerLiteral$1(node) {
      this.token$1(node.literal);
    },
    visitInterpolationExpression$1(node) {
      var t1, _this = this;
      ++_this.builder._preventSplitNesting;
      _this.token$1(node.leftBracket);
      t1 = _this.builder;
      C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
      _this.visit$1(node._expression);
      _this.builder.endSpan$0();
      _this.token$1(node.rightBracket);
      --_this.builder._preventSplitNesting;
    },
    visitInterpolationString$1(node) {
      this._writeStringLiteral$1(node.contents);
    },
    visitIsExpression$1(node) {
      var _this = this,
        t1 = _this.builder;
      C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
      _this.builder.nestExpression$0();
      _this.visit$1(node._expression);
      _this.soloSplit$0();
      _this.token$1(node.isOperator);
      _this.token$1(node.notOperator);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.visit$1(node._type);
      _this.builder.unnest$0();
      _this.builder.endSpan$0();
    },
    visitLabel$1(node) {
      this.visit$1(node._label);
      this.token$1(node.colon);
    },
    visitLabeledStatement$1(node) {
      var t1 = this.get$newline();
      this.visitNodes$3$after$between(type$.NodeList_Label._as(node._labels), t1, t1);
      this.visit$1(node._statement);
    },
    visitLibraryDirective$1(node) {
      this._visitDirectiveMetadata$1(node);
      this._simpleStatement$2(node, new Q.SourceVisitor_visitLibraryDirective_closure(this, node));
    },
    visitLibraryIdentifier$1(node) {
      var t2,
        t1 = node._components;
      this.visit$1(t1.get$first(t1));
      for (t1 = H.SubListIterable$(t1, 1, null, t1.$ti._eval$1("ListMixin.E")), t1 = new H.ListIterator(t1, t1.get$length(t1), t1.$ti._eval$1("ListIterator<ListIterable.E>")); t1.moveNext$0();) {
        t2 = t1.__internal$_current;
        this.token$1(t2.token.previous);
        this.visit$1(t2);
      }
    },
    visitListLiteral$1(node) {
      var t1 = node._elements,
        cost = t1._elements.length <= 1 ? 2 : 1;
      this._visitCollectionLiteral$5(node, node.leftBracket, t1, node.rightBracket, cost);
    },
    visitMapLiteralEntry$1(node) {
      var _this = this;
      _this.builder.nestExpression$0();
      _this.visit$1(node._key);
      _this.token$1(node.separator);
      _this.soloSplit$0();
      _this.visit$1(node._ast$_value);
      _this.builder.unnest$0();
    },
    visitMethodDeclaration$1(node) {
      this._visitMemberDeclaration$2(node, node);
    },
    visitMethodInvocation$1(node) {
      var t1, _this = this;
      if (node._ast$_target == null || Q.SourceVisitor_looksLikeStaticCall(node)) {
        _this.builder.nestExpression$0();
        t1 = _this.builder;
        C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
        if (node._ast$_target != null) {
          t1 = _this.builder;
          C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 4));
          _this.visit$1(node._ast$_target);
          _this.soloZeroSplit$0();
        }
        _this.token$1(node.operator);
        _this.visit$1(node._methodName);
        if (node._ast$_target != null)
          _this.builder.endSpan$0();
        _this.builder.nestExpression$0();
        _this.visit$1(node._typeArguments);
        _this.visitArgumentList$2$nestExpression(node._argumentList, false);
        _this.builder.unnest$0();
        _this.builder.endSpan$0();
        _this.builder.unnest$0();
        return;
      }
      U.CallChainVisitor_CallChainVisitor(_this, node).visit$0();
    },
    visitMixinDeclaration$1(node) {
      var onClause, t2, _this = this,
        t1 = _this.get$newline();
      _this.visitNodes$3$after$between(type$.NodeList_Annotation._as(node._metadata), t1, t1);
      _this.builder.nestExpression$0();
      _this.token$1(node.mixinKeyword);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.visit$1(node._ast$_name);
      _this.visit$1(node._typeParameters);
      onClause = node._onClause;
      t1 = onClause != null;
      if (t1 && onClause._superclassConstraints._elements.length === 1) {
        _this.soloSplit$0();
        _this.token$1(onClause.onKeyword);
        _this.builder._pendingWhitespace = C.Whitespace_space;
        t2 = onClause._superclassConstraints;
        _this.visit$1(t2.get$single(t2));
      }
      _this.builder.startRule$1(Q.CombinatorRule$());
      if (t1 && onClause._superclassConstraints._elements.length > 1)
        _this.visit$1(onClause);
      _this.visit$1(node._implementsClause);
      _this.builder.endRule$0();
      t1 = _this.builder;
      t1._pendingWhitespace = C.Whitespace_space;
      t1.unnest$0();
      _this._beginBody$1(node.leftBracket);
      _this._visitMembers$1(node._members);
      _this._endBody$1(node.rightBracket);
    },
    visitNamedExpression$1(node) {
      this.visitNamedArgument$1(node);
    },
    visitNativeClause$1(node) {
      this.token$1(node.nativeKeyword);
      this.visit$2$before(node._ast$_name, this.get$space());
    },
    visitNativeFunctionBody$1(node) {
      this._simpleStatement$2(node, new Q.SourceVisitor_visitNativeFunctionBody_closure(this, node));
    },
    visitNullLiteral$1(node) {
      this.token$1(node.literal);
    },
    visitOnClause$1(node) {
      this._visitCombinator$2(node.onKeyword, node._superclassConstraints);
    },
    visitParenthesizedExpression$1(node) {
      var _this = this;
      _this.builder.nestExpression$0();
      _this.token$1(node.leftParenthesis);
      _this.visit$1(node._expression);
      _this.builder.unnest$0();
      _this.token$1(node.rightParenthesis);
    },
    visitPartDirective$1(node) {
      this._visitDirectiveMetadata$1(node);
      this._simpleStatement$2(node, new Q.SourceVisitor_visitPartDirective_closure(this, node));
    },
    visitPartOfDirective$1(node) {
      this._visitDirectiveMetadata$1(node);
      this._simpleStatement$2(node, new Q.SourceVisitor_visitPartOfDirective_closure(this, node));
    },
    visitPostfixExpression$1(node) {
      this.visit$1(node._operand);
      this.token$1(node.operator);
    },
    visitPrefixedIdentifier$1(node) {
      U.CallChainVisitor_CallChainVisitor(this, node).visit$0();
    },
    visitPrefixExpression$1(node) {
      var operand, t1;
      this.token$1(node.operator);
      operand = node._operand;
      if (type$.PrefixExpression._is(operand)) {
        t1 = operand.operator;
        t1 = t1.get$lexeme() === "-" || t1.get$lexeme() === "--";
      } else
        t1 = false;
      if (t1)
        this.builder._pendingWhitespace = C.Whitespace_space;
      this.visit$1(operand);
    },
    visitPropertyAccess$1(node) {
      if (node.get$isCascaded()) {
        this.token$1(node.operator);
        this.visit$1(node._propertyName);
        return;
      }
      U.CallChainVisitor_CallChainVisitor(this, node).visit$0();
    },
    visitRedirectingConstructorInvocation$1(node) {
      var _this = this,
        t1 = _this.builder;
      C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
      _this.token$1(node.thisKeyword);
      _this.token$1(node.period);
      _this.visit$1(node._constructorName);
      _this.visit$1(node._argumentList);
      _this.builder.endSpan$0();
    },
    visitRethrowExpression$1(node) {
      this.token$1(node.rethrowKeyword);
    },
    visitReturnStatement$1(node) {
      this._simpleStatement$2(node, new Q.SourceVisitor_visitReturnStatement_closure(this, node));
    },
    visitScriptTag$1(node) {
      this._source_visitor$_writeText$2(J.trim$0$s(node.scriptTag.get$lexeme()), node.get$beginToken().offset);
      this.builder._pendingWhitespace = C.Whitespace_twoNewlines;
    },
    visitSetOrMapLiteral$1(node) {
      this._visitCollectionLiteral$4(node, node.leftBracket, node._elements, node.rightBracket);
    },
    visitShowCombinator$1(node) {
      this._visitCombinator$2(node.keyword, node._shownNames);
    },
    visitSimpleFormalParameter$1(node) {
      this.visitParameterMetadata$2(node._metadata, new Q.SourceVisitor_visitSimpleFormalParameter_closure(this, node));
    },
    visitSimpleIdentifier$1(node) {
      this.token$1(node.token);
    },
    visitSimpleStringLiteral$1(node) {
      this._writeStringLiteral$1(node.literal);
    },
    visitSpreadElement$1(node) {
      this.token$1(node.spreadOperator);
      this.visit$1(node._expression);
    },
    visitStringInterpolation$1(node) {
      var t1;
      for (t1 = node._elements, t1 = new H.ListIterator(t1, t1.get$length(t1), t1.$ti._eval$1("ListIterator<ListMixin.E>")); t1.moveNext$0();)
        this.visit$1(t1.__internal$_current);
    },
    visitSuperConstructorInvocation$1(node) {
      var _this = this,
        t1 = _this.builder;
      C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
      _this.token$1(node.superKeyword);
      _this.token$1(node.period);
      _this.visit$1(node._constructorName);
      _this.visit$1(node._argumentList);
      _this.builder.endSpan$0();
    },
    visitSuperExpression$1(node) {
      this.token$1(node.superKeyword);
    },
    visitSwitchCase$1(node) {
      var _this = this,
        t1 = _this.get$newline();
      _this.visitNodes$3$after$between(type$.NodeList_Label._as(node._labels), t1, t1);
      _this.token$1(node.keyword);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.visit$1(node._expression);
      _this.token$1(node.colon);
      _this.builder._chunk_builder$_nesting.indent$1(null);
      _this.builder._pendingWhitespace = C.Whitespace_newline;
      _this.visitNodes$2$between(node._statements, _this.get$oneOrTwoNewlines());
      t1 = _this.builder._chunk_builder$_nesting._stack;
      if (0 >= t1.length)
        return H.ioore(t1, -1);
      t1.pop();
    },
    visitSwitchDefault$1(node) {
      var _this = this,
        t1 = _this.get$newline();
      _this.visitNodes$3$after$between(type$.NodeList_Label._as(node._labels), t1, t1);
      _this.token$1(node.keyword);
      _this.token$1(node.colon);
      _this.builder._chunk_builder$_nesting.indent$1(null);
      _this.builder._pendingWhitespace = C.Whitespace_newline;
      _this.visitNodes$2$between(node._statements, _this.get$oneOrTwoNewlines());
      t1 = _this.builder._chunk_builder$_nesting._stack;
      if (0 >= t1.length)
        return H.ioore(t1, -1);
      t1.pop();
    },
    visitSwitchStatement$1(node) {
      var _this = this;
      _this.builder.nestExpression$0();
      _this.token$1(node.switchKeyword);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.token$1(node.leftParenthesis);
      _this.soloZeroSplit$0();
      _this.visit$1(node._expression);
      _this.token$1(node.rightParenthesis);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.token$1(node.leftBracket);
      _this.builder.unnest$0();
      _this.builder._chunk_builder$_nesting.indent$1(null);
      _this.builder._pendingWhitespace = C.Whitespace_newline;
      _this.visitNodes$3$after$between(node._members, _this.get$newline(), _this.get$oneOrTwoNewlines());
      _this.token$2$before(node.rightBracket, new Q.SourceVisitor_visitSwitchStatement_closure(_this));
    },
    visitSymbolLiteral$1(node) {
      var components, t1, _i, component;
      this.token$1(node.poundSign);
      components = node.components;
      for (t1 = components.length, _i = 0; _i < components.length; components.length === t1 || (0, H.throwConcurrentModificationError)(components), ++_i) {
        component = components[_i];
        if (component.previous.get$lexeme() === ".")
          this.token$1(component.previous);
        this.token$1(component);
      }
    },
    visitThisExpression$1(node) {
      this.token$1(node.thisKeyword);
    },
    visitThrowExpression$1(node) {
      this.token$1(node.throwKeyword);
      this.builder._pendingWhitespace = C.Whitespace_space;
      this.visit$1(node._expression);
    },
    visitTopLevelVariableDeclaration$1(node) {
      var _this = this,
        t1 = _this.get$newline();
      _this.visitNodes$3$after$between(type$.NodeList_Annotation._as(node._metadata), t1, t1);
      _this._simpleStatement$2(node, new Q.SourceVisitor_visitTopLevelVariableDeclaration_closure(_this, node));
    },
    visitTryStatement$1(node) {
      var t1, _this = this;
      _this.token$1(node.tryKeyword);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.visit$1(node._body);
      t1 = _this.get$space();
      _this.visitNodes$3$before$between(node._catchClauses, t1, t1);
      _this.token$3$after$before(node.finallyKeyword, t1, t1);
      _this.visit$1(node._finallyBlock);
    },
    visitTypeArgumentList$1(node) {
      this._visitGenericList$3(node.leftBracket, node.rightBracket, node._ast$_arguments);
    },
    visitTypeName$1(node) {
      this.visit$1(node._ast$_name);
      this.visit$1(node._typeArguments);
      this.token$1(node.question);
    },
    visitTypeParameter$1(node) {
      this.visitParameterMetadata$2(node._metadata, new Q.SourceVisitor_visitTypeParameter_closure(this, node));
    },
    visitTypeParameterList$1(node) {
      var t1 = this._metadataRules;
      C.JSArray_methods.add$1(t1, O.MetadataRule$());
      this._visitGenericList$3(node.leftBracket, node.rightBracket, node._typeParameters);
      if (0 >= t1.length)
        return H.ioore(t1, -1);
      t1.pop();
    },
    visitVariableDeclaration$1(node) {
      var t1, t2, t3;
      this.visit$1(node._ast$_name);
      t1 = node._ast$_initializer;
      if (t1 == null)
        return;
      t2 = type$.VariableDeclarationList._as(node._ast$_parent)._variables._elements.length;
      t3 = node.equals;
      t3.toString;
      this._visitAssignment$3$nest(t3, t1, t2 > 1);
    },
    visitVariableDeclarationList$1(node) {
      var t2, t3, t4, t5, _this = this,
        t1 = _this.get$newline();
      _this.visitNodes$3$after$between(type$.NodeList_Annotation._as(node._metadata), t1, t1);
      t1 = _this.builder;
      C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
      t1 = _this.get$space();
      _this.token$2$after(node.lateKeyword, t1);
      t2 = node.keyword;
      _this.token$2$after(t2, t1);
      _this.visit$2$after(node._type, _this.get$soloSplit());
      _this.builder.endSpan$0();
      _this._startPossibleConstContext$1(t2);
      _this.builder.startRule$0();
      t1 = node._variables;
      if (t1._elements.length > 1) {
        t3 = _this.builder;
        t4 = t3._blockArgumentNesting;
        t3 = t3._chunk_builder$_nesting;
        t5 = t3._pendingNesting;
        C.JSArray_methods.add$1(t4, t5 == null ? t3._nesting : t5);
      }
      _this.visitCommaSeparatedNodes$2$between(t1, _this.get$split(_this));
      if (t1._elements.length > 1) {
        t1 = _this.builder._blockArgumentNesting;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      _this.builder.endRule$0();
      _this._endPossibleConstContext$1(t2);
    },
    visitVariableDeclarationStatement$1(node) {
      this._simpleStatement$2(node, new Q.SourceVisitor_visitVariableDeclarationStatement_closure(this, node));
    },
    visitWhileStatement$1(node) {
      var _this = this;
      _this.builder.nestExpression$0();
      _this.token$1(node.whileKeyword);
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.token$1(node.leftParenthesis);
      _this.soloZeroSplit$0();
      _this.visit$1(node._condition);
      _this.token$1(node.rightParenthesis);
      _this.builder.unnest$0();
      _this._visitLoopBody$1(node._body);
    },
    visitWithClause$1(node) {
      this._visitCombinator$2(node.withKeyword, node._mixinTypes);
    },
    visitYieldStatement$1(node) {
      this._simpleStatement$2(node, new Q.SourceVisitor_visitYieldStatement_closure(this, node));
    },
    visit$3$after$before(node, after, before) {
      var t1 = type$.nullable_void_Function;
      t1._as(before);
      t1._as(after);
      if (node == null)
        return;
      if (before != null)
        before.call$0();
      node.accept$1$1(0, this, type$.dynamic);
      if (after != null)
        after.call$0();
    },
    visit$1(node) {
      return this.visit$3$after$before(node, null, null);
    },
    visit$2$before(node, before) {
      return this.visit$3$after$before(node, null, before);
    },
    visit$2$after(node, after) {
      return this.visit$3$after$before(node, after, null);
    },
    _visitDirectiveMetadata$1(directive) {
      var t1 = type$.CompilationUnit._as(directive._ast$_parent)._directives,
        t2 = this.get$newline();
      t1 = directive === t1.get$first(t1) ? this.get$oneOrTwoNewlines() : t2;
      this.visitNodes$3$after$between(directive._metadata, t1, t2);
    },
    visitParameterMetadata$2(metadata, visitParameter) {
      var _this = this;
      type$.NodeList_Annotation._as(metadata);
      type$.void_Function._as(visitParameter);
      if (metadata.get$length(metadata) === 0) {
        visitParameter.call$0();
        return;
      }
      _this.builder.startLazyRule$1(C.JSArray_methods.get$last(_this._metadataRules));
      _this.visitNodes$3$after$between(metadata, new Q.SourceVisitor_visitParameterMetadata_closure(_this), _this.get$split(_this));
      visitParameter.call$0();
      _this.builder.unnest$0();
      _this.builder.endRule$0();
    },
    visitNamedArgument$2(node, rule) {
      var t1, split, _this = this;
      _this.builder.nestExpression$0();
      t1 = _this.builder;
      C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
      _this.visit$1(node._ast$_name);
      t1 = node._expression;
      if (type$.ListLiteral._is(t1) || type$.SetOrMapLiteral._is(t1))
        _this.builder._pendingWhitespace = C.Whitespace_space;
      else {
        split = _this.soloSplit$0();
        if (rule != null)
          split._implied.add$1(0, rule);
      }
      _this.visit$1(t1);
      _this.builder.endSpan$0();
      _this.builder.unnest$0();
    },
    visitNamedArgument$1(node) {
      return this.visitNamedArgument$2(node, null);
    },
    _visitAssignment$3$nest(equalsOperator, rightHandSide, nest) {
      var t1, _this = this;
      _this.builder._pendingWhitespace = C.Whitespace_space;
      _this.token$1(equalsOperator);
      if (nest)
        _this.builder.nestExpression$1$now(true);
      _this.soloSplit$1(_this._assignmentCost$1(rightHandSide));
      t1 = _this.builder;
      C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
      _this.visit$1(rightHandSide);
      _this.builder.endSpan$0();
      if (nest)
        _this.builder.unnest$0();
    },
    _visitAssignment$2(equalsOperator, rightHandSide) {
      return this._visitAssignment$3$nest(equalsOperator, rightHandSide, false);
    },
    _visitGenericList$3(leftBracket, rightBracket, nodes) {
      var rule, t1, t2, t3, _this = this;
      type$.List_AstNode._as(nodes);
      rule = Y.TypeArgumentRule$();
      _this.builder.startLazyRule$1(rule);
      t1 = _this.builder;
      C.JSArray_methods.add$1(t1._openSpans, new Q.OpenSpan(t1.get$_currentChunkIndex(), 1));
      _this.builder.nestExpression$0();
      _this.token$1(leftBracket);
      t1 = rule._type_argument$_arguments;
      C.JSArray_methods.add$1(t1, _this.builder.split$0(0));
      for (t2 = new H.ListIterator(nodes, nodes.get$length(nodes), nodes.$ti._eval$1("ListIterator<ListMixin.E>")); t2.moveNext$0();) {
        t3 = t2.__internal$_current;
        _this.visit$1(t3);
        if (nodes.get$length(nodes) === 0)
          H.throwExpression(H.IterableElementError_noElement());
        if (t3 != nodes.$index(0, nodes.get$length(nodes) - 1)) {
          _this.token$1(t3.get$endToken().next);
          C.JSArray_methods.add$1(t1, _this.builder.split$1$space(0, true));
        }
      }
      _this.token$1(rightBracket);
      _this.builder.unnest$0();
      _this.builder.endSpan$0();
      _this.builder.endRule$0();
    },
    _visitMembers$1(members) {
      var t1, t2, t3, t4, needsDouble;
      type$.NodeList_ClassMember._as(members);
      for (t1 = new H.ListIterator(members, members.get$length(members), members.$ti._eval$1("ListIterator<ListMixin.E>")), t2 = type$.MethodDeclaration, t3 = type$.BlockFunctionBody; t1.moveNext$0();) {
        t4 = t1.__internal$_current;
        this.visit$1(t4);
        if (members.get$length(members) === 0)
          H.throwExpression(H.IterableElementError_noElement());
        if (t4 == members.$index(0, members.get$length(members) - 1)) {
          this.builder._pendingWhitespace = C.Whitespace_newline;
          break;
        }
        if (t2._is(t4) && t3._is(t4._body)) {
          t4 = t3._as(t4._body)._block._statements;
          needsDouble = t4.get$length(t4) !== 0;
        } else
          needsDouble = false;
        t4 = this.builder;
        if (needsDouble)
          t4._pendingWhitespace = C.Whitespace_twoNewlines;
        else
          t4._pendingWhitespace = C.Whitespace_oneOrTwoNewlines;
      }
    },
    _visitMemberDeclaration$2(node, $function) {
      var t3, typeParameters, _this = this,
        t1 = type$.NodeList_Annotation,
        t2 = _this.get$newline();
      _this.visitNodes$3$after$between(t1._as(t1._as(node._metadata)), t2, t2);
      _this.builder.nestExpression$0();
      t2 = _this.builder;
      C.JSArray_methods.add$1(t2._openSpans, new Q.OpenSpan(t2.get$_currentChunkIndex(), 1));
      t2 = _this.get$space();
      _this.token$2$after(node.get$externalKeyword(), t2);
      t1 = type$.MethodDeclaration;
      t3 = t1._is(node);
      if (t3)
        _this.token$2$after(node.modifierKeyword, t2);
      _this.visit$2$after(node.get$returnType(), _this.get$soloSplit());
      _this.token$2$after(node.get$propertyKeyword(), t2);
      if (t3)
        _this.token$2$after(node.operatorKeyword, t2);
      _this.visit$1(node.get$name(node));
      _this.builder.endSpan$0();
      typeParameters = type$.FunctionDeclaration._is(node) ? node._functionExpression._typeParameters : t1._as(node)._typeParameters;
      _this._visitBody$4(typeParameters, $function.get$parameters(), $function.get$body($function), new Q.SourceVisitor__visitMemberDeclaration_closure(_this, $function));
      if (type$.ExpressionFunctionBody._is($function.get$body($function)))
        _this.builder.unnest$0();
    },
    _visitBody$4(typeParameters, parameters, body, beforeBody) {
      var t1, _this = this;
      type$.nullable_void_Function._as(beforeBody);
      t1 = type$.ExpressionFunctionBody._is(body);
      if (t1) {
        _this.builder.nestExpression$0();
        _this.builder.startLazyRule$1(K.Rule$(0));
      }
      _this._visitParameterSignature$2(typeParameters, parameters);
      if (beforeBody != null)
        beforeBody.call$0();
      _this.visit$1(body);
      if (t1)
        _this.builder.unnest$0();
    },
    _visitBody$3(typeParameters, parameters, body) {
      return this._visitBody$4(typeParameters, parameters, body, null);
    },
    _visitParameterSignature$2(typeParameters, parameters) {
      var _this = this;
      _this.builder.nestExpression$0();
      _this.visit$1(typeParameters);
      if (parameters != null)
        _this.visitFormalParameterList$2$nestExpression(parameters, false);
      _this.builder.unnest$0();
    },
    _visitLoopBody$1(body) {
      var t1, _this = this;
      if (type$.EmptyStatement._is(body))
        _this.visit$1(body);
      else {
        t1 = _this.builder;
        if (type$.Block._is(body)) {
          t1._pendingWhitespace = C.Whitespace_space;
          _this.visit$1(body);
        } else {
          t1._chunk_builder$_nesting.indent$1(null);
          _this.builder.startRule$0();
          _this.builder.split$2$nest$space(0, false, true);
          _this.visit$1(body);
          _this.builder.endRule$0();
          t1 = _this.builder._chunk_builder$_nesting._stack;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
        }
      }
    },
    visitNodes$4$after$before$between(nodes, after, before, between) {
      var t1, t2, t3;
      type$.Iterable_AstNode._as(nodes);
      t1 = type$.nullable_void_Function;
      t1._as(before);
      t1._as(between);
      t1._as(after);
      if (nodes.get$isEmpty(nodes))
        return;
      if (before != null)
        before.call$0();
      this.visit$1(nodes.get$first(nodes));
      for (t1 = nodes.skip$1(nodes, 1), t1 = t1.get$iterator(t1), t2 = between != null; t1.moveNext$0();) {
        t3 = t1.get$current();
        if (t2)
          between.call$0();
        this.visit$1(t3);
      }
      if (after != null)
        after.call$0();
    },
    visitNodes$2$between(nodes, between) {
      return this.visitNodes$4$after$before$between(nodes, null, null, between);
    },
    visitNodes$3$after$between(nodes, after, between) {
      return this.visitNodes$4$after$before$between(nodes, after, null, between);
    },
    visitNodes$3$before$between(nodes, before, between) {
      return this.visitNodes$4$after$before$between(nodes, null, before, between);
    },
    visitNodes$1(nodes) {
      return this.visitNodes$4$after$before$between(nodes, null, null, null);
    },
    visitCommaSeparatedNodes$2$between(nodes, between) {
      var t1, first, t2;
      type$.Iterable_AstNode._as(nodes);
      type$.nullable_void_Function._as(between);
      if (nodes.get$length(nodes) === 0)
        return;
      if (between == null)
        between = this.get$space();
      for (t1 = new H.ListIterator(nodes, nodes.get$length(nodes), nodes.$ti._eval$1("ListIterator<ListMixin.E>")), first = true; t1.moveNext$0(); first = false) {
        t2 = t1.__internal$_current;
        if (!first)
          between.call$0();
        this.visit$1(t2);
        if (t2.get$endToken().next.get$lexeme() === ",")
          this.token$1(t2.get$endToken().next);
      }
    },
    visitCommaSeparatedNodes$1(nodes) {
      return this.visitCommaSeparatedNodes$2$between(nodes, null);
    },
    _visitCollectionLiteral$5(node, leftBracket, elements, rightBracket, cost) {
      var t1, t2, t3, i, preserveNewlines, lineRule, rule, t4, t5, t6, t7, t8, t9, force, _this = this;
      type$.nullable_TypedLiteral._as(node);
      type$.Iterable_AstNode._as(elements);
      t1 = node != null;
      if (t1) {
        t2 = node.constKeyword;
        if (t2 != null && _this._constNesting > 0 && _this._source_visitor$_formatter.fixes.contains$1(0, C.StyleFix_xoD)) {
          t2.toString;
          _this.writePrecedingCommentsAndNewlines$1(t2);
        } else
          _this.token$2$after(t2, _this.get$space());
        _this.visit$1(node._typeArguments);
      }
      t2 = J.getInterceptor$asx(elements);
      if (t2.get$isEmpty(elements) && rightBracket._precedingComment == null) {
        _this.token$1(leftBracket);
        _this.token$1(rightBracket);
        return;
      }
      for (t3 = _this._collectionSplits, i = 0; i < t3.length; ++i)
        C.JSArray_methods.$indexSet(t3, i, true);
      C.JSArray_methods.add$1(t3, false);
      _this._startLiteralBody$1(leftBracket);
      if (t1)
        _this._startPossibleConstContext$1(node.constKeyword);
      preserveNewlines = _this._containsLineComments$2(elements, rightBracket);
      if (preserveNewlines) {
        lineRule = Y.TypeArgumentRule$();
        _this.builder.startLazyRule$1(lineRule);
        rule = null;
      } else {
        rule = K.Rule$hard();
        _this.builder.startRule$1(rule);
        lineRule = null;
      }
      for (t4 = t2.get$iterator(elements), t5 = _this._lineInfo; t4.moveNext$0();) {
        t6 = t4.get$current();
        t7 = t2.get$first(elements);
        if (t6 == null ? t7 != null : t6 !== t7)
          if (preserveNewlines) {
            t7 = t6.get$beginToken().previous;
            t7 = t5.getLocation$1(t7.offset + t7.get$length(t7));
            t8 = t5.getLocation$1(t6.get$beginToken().offset);
            t9 = _this.builder;
            if (t7.lineNumber !== t8.lineNumber) {
              t9._pendingWhitespace = C.Whitespace_oneOrTwoNewlines;
              t7 = t9._lazyRules;
              t8 = t7.length;
              if (t8 !== 0) {
                if (0 >= t8)
                  return H.ioore(t7, -1);
                t7.pop();
              } else {
                t7 = t9._rules;
                if (0 >= t7.length)
                  return H.ioore(t7, -1);
                t7.pop();
              }
              lineRule = Y.TypeArgumentRule$();
              t7 = _this.builder;
              C.JSArray_methods.add$1(t7._lazyRules, lineRule);
            } else {
              t7 = t9.split$1$space(0, true);
              C.JSArray_methods.add$1(lineRule._type_argument$_arguments, t7);
            }
          } else
            _this.builder.split$2$nest$space(0, false, true);
        _this.visit$1(t6);
        _this.token$1(_this._commaAfter$1(t6));
      }
      _this.builder.endRule$0();
      if (0 >= t3.length)
        return H.ioore(t3, -1);
      force = t3.pop();
      if (t2.get$isNotEmpty(elements) && _this._commaAfter$1(type$.AstNode._as(t2.get$last(elements))) != null)
        force = true;
      if (t1)
        _this._endPossibleConstContext$1(node.constKeyword);
      _this._endLiteralBody$3$forceSplit$ignoredRule(rightBracket, force, rule);
    },
    _visitCollectionLiteral$4(node, leftBracket, elements, rightBracket) {
      return this._visitCollectionLiteral$5(node, leftBracket, elements, rightBracket, null);
    },
    _visitTrailingCommaParameterList$1(parameters) {
      var lastRequired, t2, t3, i, t4, firstDelimiter, _this = this, _null = null,
        t1 = _this._metadataRules;
      C.JSArray_methods.add$1(t1, O.MetadataRule$());
      _this.builder.startRule$1(K.Rule$hard());
      _this.token$1(parameters.leftParenthesis);
      t2 = parameters._parameters;
      t3 = type$.DefaultFormalParameter;
      i = 0;
      while (true) {
        if (!(i < t2._elements.length)) {
          lastRequired = _null;
          break;
        }
        if (t3._is(t2.$index(0, i))) {
          lastRequired = i > 0 ? t2.$index(0, i - 1) : _null;
          break;
        }
        ++i;
      }
      if (t3._is(t2.get$first(t2)))
        _this.token$1(parameters.leftDelimiter);
      _this.builder = _this.builder.startBlock$1(_null);
      for (t2 = new H.ListIterator(t2, t2.get$length(t2), t2.$ti._eval$1("ListIterator<ListMixin.E>")), t3 = parameters.leftDelimiter; t2.moveNext$0();) {
        t4 = t2.__internal$_current;
        _this.visit$1(t4);
        _this.token$1(_this._commaAfter$1(t4));
        if (t4 == lastRequired) {
          _this.builder._pendingWhitespace = C.Whitespace_space;
          _this.token$1(t3);
          lastRequired = _null;
        }
        _this.builder._pendingWhitespace = C.Whitespace_newline;
      }
      firstDelimiter = parameters.rightDelimiter;
      if (firstDelimiter == null)
        firstDelimiter = parameters.rightParenthesis;
      _this.writePrecedingCommentsAndNewlines$1(firstDelimiter);
      t2 = _this.builder.endBlock$2$forceSplit(_null, true);
      _this.builder = t2;
      t2.endRule$0();
      if (0 >= t1.length)
        return H.ioore(t1, -1);
      t1.pop();
      _this._source_visitor$_writeText$2(firstDelimiter.get$lexeme(), firstDelimiter.offset);
      t1 = parameters.rightParenthesis;
      if (firstDelimiter !== t1)
        _this.token$1(t1);
    },
    _beginFormalParameter$1(node) {
      var t1, _this = this;
      _this.builder.startLazyRule$1(K.Rule$(4));
      _this.builder.nestExpression$0();
      t1 = _this.get$space();
      _this.token$2$after(node.requiredKeyword, t1);
      _this.token$2$after(node.covariantKeyword, t1);
    },
    _visitGenericFunctionType$5(returnType, functionKeyword, functionKeywordPosition, typeParameters, parameters) {
      var _this = this;
      _this.builder.startLazyRule$0();
      _this.builder.nestExpression$0();
      _this.visit$2$after(returnType, _this.get$split(_this));
      if (functionKeyword != null)
        _this.token$1(functionKeyword);
      else {
        functionKeywordPosition.toString;
        _this._source_visitor$_writeText$2("Function", functionKeywordPosition);
      }
      _this.builder.unnest$0();
      _this.builder.endRule$0();
      _this._visitParameterSignature$2(typeParameters, parameters);
    },
    _visitGenericTypeAliasHeader$5(typedefKeyword, $name, typeParameters, equals, equalsPosition) {
      var t1, _this = this;
      _this.token$1(typedefKeyword);
      t1 = _this.builder;
      t1._pendingWhitespace = C.Whitespace_space;
      t1.startRule$0();
      _this.visit$1($name);
      _this.visit$1(typeParameters);
      _this.builder.split$1$space(0, true);
      if (equals != null)
        _this.token$1(equals);
      else {
        equalsPosition.toString;
        _this._source_visitor$_writeText$2("=", equalsPosition);
      }
      _this.builder.endRule$0();
    },
    _splitEmptyBlock$1(node) {
      var tryStatement,
        t1 = node._ast$_parent;
      if (type$.IfStatement._is(t1))
        return t1._elseStatement != null && t1._thenStatement === node;
      if (type$.CatchClause._is(t1) && type$.TryStatement._is(t1.get$parent(t1))) {
        t1 = node._ast$_parent;
        tryStatement = type$.TryStatement._as(t1.get$parent(t1));
        if (tryStatement._finallyBlock == null) {
          t1 = tryStatement._catchClauses;
          t1 = node !== t1.get$last(t1)._body;
        } else
          t1 = true;
        return t1;
      }
      return false;
    },
    _findSpreadCollectionBracket$1(node) {
      var expression, t1, t2;
      if (type$.SpreadElement._is(node)) {
        expression = node._expression;
        if (type$.ListLiteral._is(expression)) {
          t1 = expression._elements;
          t2 = expression.rightBracket;
          type$.Iterable_AstNode._as(t1);
          if (!(t1.get$isEmpty(t1) && t2._precedingComment == null))
            return expression.leftBracket;
        } else if (type$.SetOrMapLiteral._is(expression)) {
          t1 = expression._elements;
          t2 = expression.rightBracket;
          type$.Iterable_AstNode._as(t1);
          if (!(t1.get$isEmpty(t1) && t2._precedingComment == null))
            return expression.leftBracket;
        }
      }
      return null;
    },
    _assignmentCost$1(rightHandSide) {
      if (type$.ListLiteral._is(rightHandSide))
        return 2;
      if (type$.SetOrMapLiteral._is(rightHandSide))
        return 2;
      if (type$.CascadeExpression._is(rightHandSide))
        return 2;
      return 1;
    },
    _containsLineComments$2(elements, rightBracket) {
      var t1,
        hasLineCommentBefore = new Q.SourceVisitor__containsLineComments_hasLineCommentBefore();
      for (t1 = J.get$iterator$ax(type$.Iterable_AstNode._as(elements)); t1.moveNext$0();)
        if (H.boolConversionCheck(hasLineCommentBefore.call$1(t1.get$current().get$beginToken())))
          return true;
      return hasLineCommentBefore.call$1(rightBracket);
    },
    _startLiteralBody$1(leftBracket) {
      var rule, argumentChunk, _this = this;
      _this.token$1(leftBracket);
      rule = _this._blockRules.$index(0, leftBracket);
      argumentChunk = _this._blockPreviousChunks.$index(0, leftBracket);
      _this.builder.startRule$1(rule);
      _this.builder = _this.builder.startBlock$1(argumentChunk);
    },
    _endLiteralBody$3$forceSplit$ignoredRule(rightBracket, forceSplit, ignoredRule) {
      var _this = this,
        hasLeadingNewline = _this.writePrecedingCommentsAndNewlines$1(rightBracket),
        t1 = _this.builder;
      t1 = t1.endBlock$2$forceSplit(ignoredRule, hasLeadingNewline || forceSplit);
      _this.builder = t1;
      t1.endRule$0();
      _this._source_visitor$_writeText$2(rightBracket.get$lexeme(), rightBracket.offset);
    },
    _endLiteralBody$2$forceSplit(rightBracket, forceSplit) {
      return this._endLiteralBody$3$forceSplit$ignoredRule(rightBracket, forceSplit, null);
    },
    _visitConfigurations$1(configurations) {
      var t1, t2, _this = this;
      type$.NodeList_Configuration._as(configurations);
      if (configurations.get$length(configurations) === 0)
        return;
      _this.builder.startRule$0();
      for (t1 = new H.ListIterator(configurations, configurations.get$length(configurations), configurations.$ti._eval$1("ListIterator<ListMixin.E>")); t1.moveNext$0();) {
        t2 = t1.__internal$_current;
        _this.builder.split$1$space(0, true);
        _this.visit$1(t2);
      }
      _this.builder.endRule$0();
    },
    _visitCombinator$2(keyword, nodes) {
      var rule, t1, t2, _this = this;
      type$.Iterable_AstNode._as(nodes);
      rule = type$.CombinatorRule._as(C.JSArray_methods.get$last(_this.builder._rules));
      t1 = _this.builder.split$1$space(0, true);
      rule._combinator$_combinators.add$1(0, t1);
      t1 = rule._names;
      C.JSArray_methods.add$1(t1, P.LinkedHashSet_LinkedHashSet$_empty(type$.Chunk));
      _this.builder.nestExpression$0();
      _this.token$1(keyword);
      t2 = _this.builder.split$1$space(0, true);
      C.JSArray_methods.get$last(t1).add$1(0, t2);
      _this.visitCommaSeparatedNodes$2$between(nodes, new Q.SourceVisitor__visitCombinator_closure(_this, rule));
      _this.builder.unnest$0();
    },
    _startPossibleConstContext$1(keyword) {
      if (keyword != null && keyword.get$keyword() === C.Keyword_oXM)
        ++this._constNesting;
    },
    _endPossibleConstContext$1(keyword) {
      if (keyword != null && keyword.get$keyword() === C.Keyword_oXM)
        --this._constNesting;
    },
    _simpleStatement$2(node, body) {
      type$.void_Function._as(body);
      this.builder.nestExpression$0();
      body.call$0();
      this.token$1(node.get$semicolon());
      this.builder.unnest$0();
    },
    beforeBlock$3(token, rule, previousChunk) {
      this._blockRules.$indexSet(0, token, rule);
      if (previousChunk != null)
        this._blockPreviousChunks.$indexSet(0, token, previousChunk);
    },
    _beginBody$2$space(leftBracket, space) {
      var _this = this;
      _this.token$1(leftBracket);
      _this.builder._chunk_builder$_nesting.indent$1(null);
      _this.builder.startRule$0();
      _this.builder.split$3$isDouble$nest$space(0, false, false, space);
    },
    _beginBody$1(leftBracket) {
      return this._beginBody$2$space(leftBracket, false);
    },
    _endBody$2$space(rightBracket, space) {
      this.token$2$before(rightBracket, new Q.SourceVisitor__endBody_closure(this, space));
      this.builder.endRule$0();
    },
    _endBody$1(rightBracket) {
      return this._endBody$2$space(rightBracket, false);
    },
    _writeStringLiteral$1(string) {
      var t1, t2, lines, offset, _this = this;
      _this.writePrecedingCommentsAndNewlines$1(string);
      t1 = string.get$lexeme();
      t2 = _this._source_visitor$_formatter.lineEnding;
      t2.toString;
      lines = H._setArrayType(t1.split(t2), type$.JSArray_String);
      offset = string.offset;
      _this._source_visitor$_writeText$2(C.JSArray_methods.get$first(lines), offset);
      offset += J.get$length$asx(C.JSArray_methods.get$first(lines));
      for (t1 = H.SubListIterable$(lines, 1, null, type$.String), t1 = new H.ListIterator(t1, t1.get$length(t1), t1.$ti._eval$1("ListIterator<ListIterable.E>")); t1.moveNext$0();) {
        t2 = t1.__internal$_current;
        _this.builder._pendingWhitespace = C.Whitespace_newlineFlushLeft;
        ++offset;
        _this._source_visitor$_writeText$2(t2, offset);
        offset += t2.length;
      }
    },
    _commaAfter$1(node) {
      var next = node.get$endToken().next,
        t1 = next.type;
      if (t1 === C.TokenType_O55)
        return next;
      if (t1 === C.TokenType_V43 && next.next.type === C.TokenType_O55)
        return next.next;
      return null;
    },
    space$0() {
      this.builder._pendingWhitespace = C.Whitespace_space;
    },
    newline$0() {
      this.builder._pendingWhitespace = C.Whitespace_newline;
    },
    splitOrNewline$0() {
      this.builder._pendingWhitespace = C.Whitespace_splitOrNewline;
    },
    splitOrTwoNewlines$0() {
      this.builder._pendingWhitespace = C.Whitespace_splitOrTwoNewlines;
    },
    oneOrTwoNewlines$0() {
      this.builder._pendingWhitespace = C.Whitespace_oneOrTwoNewlines;
    },
    split$0(_) {
      return this.builder.split$1$space(0, true);
    },
    zeroSplit$0() {
      return this.builder.split$0(0);
    },
    soloSplit$1(cost) {
      var rule = K.Rule$(cost);
      this.builder.startRule$1(rule);
      this.builder.split$1$space(0, true);
      this.builder.endRule$0();
      return rule;
    },
    soloSplit$0() {
      return this.soloSplit$1(null);
    },
    soloZeroSplit$0() {
      this.builder.startRule$0();
      this.builder.split$0(0);
      this.builder.endRule$0();
    },
    token$3$after$before(token, after, before) {
      var t1 = type$.nullable_void_Function;
      t1._as(before);
      t1._as(after);
      if (token == null)
        return;
      this.writePrecedingCommentsAndNewlines$1(token);
      if (before != null)
        before.call$0();
      this._source_visitor$_writeText$2(token.get$lexeme(), token.offset);
      if (after != null)
        after.call$0();
    },
    token$1(token) {
      return this.token$3$after$before(token, null, null);
    },
    token$2$before(token, before) {
      return this.token$3$after$before(token, null, before);
    },
    token$2$after(token, after) {
      return this.token$3$after$before(token, after, null);
    },
    writePrecedingCommentsAndNewlines$1(token) {
      var t1, t2, t3, t4, previousLine, tokenLine, comments, commentLine, text, linesBefore, flushLeft, type, sourceComment, start, end, _this = this,
        comment = token._precedingComment;
      if (comment == null) {
        t1 = _this.builder;
        t2 = t1._pendingWhitespace;
        if (t2 === C.Whitespace_oneOrTwoNewlines || t2 === C.Whitespace_splitOrTwoNewlines || t2 === C.Whitespace_splitOrNewline) {
          t2 = _this._lineInfo;
          t3 = t2.getLocation$1(token.offset);
          t4 = token.previous;
          t1.preserveNewlines$1(t3.lineNumber - t2.getLocation$1(t4.offset + t4.get$length(t4)).lineNumber);
        }
        return false;
      }
      if (_this._suppressPrecedingCommentsAndNewLines.contains$1(0, token))
        return false;
      t1 = token.previous;
      t2 = _this._lineInfo;
      previousLine = t2.getLocation$1(t1.offset + t1.get$length(t1)).lineNumber;
      tokenLine = t2.getLocation$1(token.offset).lineNumber;
      if (token.previous.type === C.TokenType_oZ3)
        previousLine = tokenLine;
      comments = H._setArrayType([], type$.JSArray_SourceComment);
      for (; comment != null;) {
        commentLine = t2.getLocation$1(comment.offset).lineNumber;
        if (comment === token._precedingComment && token.previous.type === C.TokenType_Emx)
          previousLine = commentLine;
        text = J.trim$0$s(comment.get$lexeme());
        linesBefore = commentLine - previousLine;
        flushLeft = t2.getLocation$1(comment.offset).columnNumber === 1;
        t1 = C.JSString_methods.startsWith$1(text, "///");
        if (t1 && !C.JSString_methods.startsWith$1(text, "////")) {
          if (comment === token._precedingComment)
            linesBefore = 2;
          flushLeft = false;
        }
        if (t1 && !C.JSString_methods.startsWith$1(text, "////") || C.JSString_methods.startsWith$1(text, "/**"))
          type = C.CommentType_0;
        else if (comment.type === C.TokenType_WjT)
          type = C.CommentType_1;
        else
          type = commentLine === previousLine || commentLine === tokenLine ? C.CommentType_3 : C.CommentType_2;
        sourceComment = new Q.SourceComment(text, type, linesBefore, flushLeft);
        start = _this._getSelectionStartWithin$2(comment.offset, comment.get$length(comment));
        if (start != null)
          sourceComment._chunk$_selectionStart = start;
        end = _this._getSelectionEndWithin$2(comment.offset, comment.get$length(comment));
        if (end != null)
          sourceComment._chunk$_selectionEnd = end;
        C.JSArray_methods.add$1(comments, sourceComment);
        previousLine = t2.getLocation$1(comment.offset + comment.get$length(comment)).lineNumber;
        comment = comment.next;
      }
      _this.builder.writeComments$3(comments, tokenLine - previousLine, token.get$lexeme());
      return C.JSArray_methods.get$first(comments).linesBefore > 0;
    },
    _source_visitor$_writeText$2(text, offset) {
      var t2, start, end, _this = this,
        t1 = _this.builder;
      t1._emitPendingWhitespace$0();
      t1._chunk_builder$_writeText$1(text);
      t2 = t1._lazyRules;
      C.JSArray_methods.forEach$1(t2, t1.get$_activateRule());
      C.JSArray_methods.set$length(t2, 0);
      t1._chunk_builder$_nesting.commitNesting$0();
      t1 = text.length;
      start = _this._getSelectionStartWithin$2(offset, t1);
      if (start != null) {
        t2 = C.JSArray_methods.get$last(_this.builder._chunks);
        t2.toString;
        t2._chunk$_selectionStart = J.get$text$x(t2).length - (t1 - start);
      }
      end = _this._getSelectionEndWithin$2(offset, t1);
      if (end != null) {
        t2 = C.JSArray_methods.get$last(_this.builder._chunks);
        t2.toString;
        t2._chunk$_selectionEnd = J.get$text$x(t2).length - (t1 - end);
      }
    },
    _getSelectionStartWithin$2(offset, $length) {
      var start,
        t1 = this._source_visitor$_source.selectionStart;
      if (t1 == null)
        return null;
      if (this._passedSelectionStart)
        return null;
      if (typeof offset !== "number")
        return H.iae(offset);
      start = t1 - offset;
      if (start < 0)
        start = 0;
      if (start >= $length)
        return null;
      this._passedSelectionStart = true;
      return start;
    },
    _getSelectionEndWithin$2(offset, $length) {
      var t2, end, _this = this, _null = null,
        t1 = _this._source_visitor$_source;
      if (t1.selectionLength == null)
        return _null;
      if (_this._passedSelectionEnd)
        return _null;
      t2 = _this._findSelectionEnd$0();
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof offset !== "number")
        return H.iae(offset);
      end = t2 - offset;
      if (end < 0)
        end = 0;
      if (end > $length)
        return _null;
      if (end === $length && _this._findSelectionEnd$0() == t1.selectionStart)
        return _null;
      _this._passedSelectionEnd = true;
      return end;
    },
    _findSelectionEnd$0() {
      var t2, t3, end, end0, char, _this = this,
        t1 = _this._source_visitor$_selectionEnd;
      if (t1 != null)
        return t1;
      t1 = _this._source_visitor$_source;
      t2 = t1.selectionStart;
      t2.toString;
      t3 = t1.selectionLength;
      t3.toString;
      end = t2 + t3;
      t1 = t1.text;
      if (end === t1.length)
        return _this._source_visitor$_selectionEnd = end;
      for (; end > t2; end = end0) {
        end0 = end - 1;
        char = C.JSString_methods.codeUnitAt$1(t1, end0);
        if (char !== 32 && char !== 9 && char !== 10 && char !== 13)
          break;
      }
      return _this._source_visitor$_selectionEnd = end;
    }
  };
  Q.SourceVisitor_visitAssertStatement_closure.prototype = {
    call$0() {
      var $arguments, t3,
        t1 = this.$this,
        t2 = this.node;
      t1.token$1(t2.assertKeyword);
      $arguments = H._setArrayType([t2._condition], type$.JSArray_Expression);
      t3 = t2._ast$_message;
      if (t3 != null)
        C.JSArray_methods.add$1($arguments, t3);
      if (t1._commaAfter$1(C.JSArray_methods.get$last($arguments)) != null) {
        t1._visitCollectionLiteral$4(null, t2.leftParenthesis, $arguments, t2.rightParenthesis);
        return;
      }
      U.ArgumentListVisitor_ArgumentListVisitor$forArguments(t1, t2.leftParenthesis, t2.rightParenthesis, $arguments).visit$0();
    },
    $signature: 0
  };
  Q.SourceVisitor_visitBinaryExpression_traverse.prototype = {
    call$1(e) {
      var _this = this,
        t1 = type$.BinaryExpression._is(e) && e.operator.type.precedence === _this.precedence,
        t2 = _this.$this;
      if (t1) {
        _this.call$1(e._leftOperand);
        t2.builder._pendingWhitespace = C.Whitespace_space;
        t2.token$1(e.operator);
        t2.builder.split$1$space(0, true);
        _this.call$1(e._rightOperand);
      } else
        t2.visit$1(e);
    },
    $signature: 71
  };
  Q.SourceVisitor_visitBreakStatement_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1.token$1(t2.breakKeyword);
      t1.visit$2$before(t2._label, t1.get$space());
    },
    $signature: 0
  };
  Q.SourceVisitor_visitClassTypeAlias_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1.token$2$after(t2.abstractKeyword, t1.get$space());
      t1.token$1(t2.typedefKeyword);
      t1.builder._pendingWhitespace = C.Whitespace_space;
      t1.visit$1(t2._ast$_name);
      t1.visit$1(t2._typeParameters);
      t1.builder._pendingWhitespace = C.Whitespace_space;
      t1.token$1(t2.equals);
      t1.builder._pendingWhitespace = C.Whitespace_space;
      t1.visit$1(t2._superclass);
      t1.builder.startRule$1(Q.CombinatorRule$());
      t1.visit$1(t2._withClause);
      t1.visit$1(t2._implementsClause);
      t1.builder.endRule$0();
    },
    $signature: 0
  };
  Q.SourceVisitor_visitConstructorDeclaration_closure.prototype = {
    call$0() {
      var t3,
        t1 = this.node,
        t2 = t1._redirectedConstructor;
      if (t2 != null) {
        t3 = this.$this;
        t3.token$2$before(t1.separator, t3.get$space());
        t3.soloSplit$0();
        t3.visitCommaSeparatedNodes$1(t1._initializers);
        t3.visit$1(t2);
        t3.builder.unnest$0();
      } else {
        t2 = t1._initializers;
        if (t2.get$length(t2) !== 0) {
          t2 = this.$this;
          t2._visitConstructorInitializers$1(t1);
          t2.builder.endRule$0();
        }
      }
    },
    $signature: 0
  };
  Q.SourceVisitor_visitContinueStatement_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1.token$1(t2.continueKeyword);
      t1.visit$2$before(t2._label, t1.get$space());
    },
    $signature: 0
  };
  Q.SourceVisitor_visitExportDirective_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1.token$1(t2.keyword);
      t1.builder._pendingWhitespace = C.Whitespace_space;
      t1.visit$1(t2._ast$_uri);
      t1._visitConfigurations$1(t2._configurations);
      t1.builder.startRule$1(Q.CombinatorRule$());
      t1.visitNodes$1(t2._combinators);
      t1.builder.endRule$0();
    },
    $signature: 0
  };
  Q.SourceVisitor_visitExpressionStatement_closure.prototype = {
    call$0() {
      this.$this.visit$1(this.node._expression);
    },
    $signature: 0
  };
  Q.SourceVisitor_visitFieldDeclaration_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node,
        t3 = t1.get$space();
      t1.token$2$after(t2.externalKeyword, t3);
      t1.token$2$after(t2.staticKeyword, t3);
      t1.token$2$after(t2.abstractKeyword, t3);
      t1.token$2$after(t2.covariantKeyword, t3);
      t1.visit$1(t2._fieldList);
    },
    $signature: 0
  };
  Q.SourceVisitor_visitFieldFormalParameter_closure.prototype = {
    call$0() {
      var t3,
        t1 = this.$this,
        t2 = this.node;
      t1._beginFormalParameter$1(t2);
      t1.token$2$after(t2.keyword, t1.get$space());
      t1.visit$2$after(t2._type, t1.get$split(t1));
      t1.token$1(t2.thisKeyword);
      t1.token$1(t2.period);
      t3 = U.NormalFormalParameterImpl.prototype.get$identifier.call(t2);
      t3.toString;
      t1.visit$1(t3);
      t1.visit$1(t2._parameters);
      t1.token$1(t2.question);
      t1.builder.unnest$0();
      t1.builder.endRule$0();
    },
    $signature: 0
  };
  Q.SourceVisitor_visitFormalParameterList_closure.prototype = {
    call$1(param) {
      return !type$.DefaultFormalParameter._is(type$.FormalParameter._as(param));
    },
    $signature: 72
  };
  Q.SourceVisitor_visitForPartsWithDeclarations_closure.prototype = {
    call$0() {
      this.$this.builder.split$1$space(0, true);
    },
    $signature: 0
  };
  Q.SourceVisitor_visitFunctionTypeAlias_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node,
        t3 = t2._ast$_name,
        t4 = t2._returnType;
      t1._visitGenericTypeAliasHeader$5(t2.typedefKeyword, t3, t2._typeParameters, null, (t4 == null ? t3 : t4).get$beginToken().offset);
      t1.builder._pendingWhitespace = C.Whitespace_space;
      t1._insideNewTypedefFix = true;
      t1._visitGenericFunctionType$5(t4, null, t3.get$beginToken().offset, null, t2._parameters);
      t1._insideNewTypedefFix = false;
    },
    $signature: 0
  };
  Q.SourceVisitor_visitFunctionTypeAlias_closure0.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1.token$1(t2.typedefKeyword);
      t1.builder._pendingWhitespace = C.Whitespace_space;
      t1.visit$2$after(t2._returnType, t1.get$space());
      t1.visit$1(t2._ast$_name);
      t1.visit$1(t2._typeParameters);
      t1.visit$1(t2._parameters);
    },
    $signature: 0
  };
  Q.SourceVisitor_visitFunctionTypedFormalParameter_closure.prototype = {
    call$0() {
      var t7,
        t1 = this.$this,
        t2 = this.node,
        t3 = t2._returnType,
        t4 = t2._typeParameters,
        t5 = t2._parameters,
        t6 = t2.question;
      if (!t1._insideNewTypedefFix) {
        t7 = t1.get$space();
        t1.token$2$after(t2.requiredKeyword, t7);
        t1.token$2$after(t2.covariantKeyword, t7);
        t1.visit$2$after(t3, t7);
        t7 = t1.builder;
        C.JSArray_methods.add$1(t7._openSpans, new Q.OpenSpan(t7.get$_currentChunkIndex(), 1));
        t2 = U.NormalFormalParameterImpl.prototype.get$identifier.call(t2);
        t2.toString;
        t1.visit$1(t2);
        t1._visitParameterSignature$2(t4, t5);
        t1.token$1(t6);
        t1.builder.endSpan$0();
      } else {
        t1._beginFormalParameter$1(t2);
        t1._visitGenericFunctionType$5(t3, null, U.NormalFormalParameterImpl.prototype.get$identifier.call(t2).get$beginToken().offset, t4, t5);
        t1.token$1(t6);
        t1.builder.split$1$space(0, true);
        t2 = U.NormalFormalParameterImpl.prototype.get$identifier.call(t2);
        t2.toString;
        t1.visit$1(t2);
        t1.builder.unnest$0();
        t1.builder.endRule$0();
      }
    },
    $signature: 0
  };
  Q.SourceVisitor_visitGenericTypeAlias_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1._visitGenericTypeAliasHeader$5(t2.typedefKeyword, t2._ast$_name, t2._typeParameters, t2.equals, null);
      t1.builder._pendingWhitespace = C.Whitespace_space;
      t1.visit$1(t2._type);
    },
    $signature: 0
  };
  Q.SourceVisitor_visitIfElement_visitChild.prototype = {
    call$2(element, child) {
      var isSpread, t2, t3, t4,
        t1 = this.$this;
      t1.builder.nestExpression$2$indent$now(2, true);
      isSpread = this.spreadBrackets.containsKey$1(element);
      t2 = t1.builder;
      if (isSpread)
        t2._pendingWhitespace = C.Whitespace_space;
      else {
        t2.split$1$space(0, true);
        t2 = t1.builder;
        t3 = t2._blockArgumentNesting;
        t2 = t2._chunk_builder$_nesting;
        t4 = t2._pendingNesting;
        C.JSArray_methods.add$1(t3, t4 == null ? t2._nesting : t4);
      }
      t1.visit$1(child);
      if (!isSpread) {
        t2 = t1.builder._blockArgumentNesting;
        if (0 >= t2.length)
          return H.ioore(t2, -1);
        t2.pop();
      }
      t1.builder.unnest$0();
    },
    $signature: 73
  };
  Q.SourceVisitor_visitIfStatement_visitClause.prototype = {
    call$1(clause) {
      var t1 = type$.Block._is(clause) || type$.IfStatement._is(clause),
        t2 = this.$this,
        t3 = t2.builder;
      if (t1) {
        t3._pendingWhitespace = C.Whitespace_space;
        t2.visit$1(clause);
      } else {
        t3._chunk_builder$_nesting.indent$1(null);
        t2.builder.startRule$0();
        t1 = t2.builder;
        if (this.node._elseStatement != null)
          t1._pendingWhitespace = C.Whitespace_newline;
        else
          t1.split$2$nest$space(0, false, true);
        t2.visit$1(clause);
        t2.builder.endRule$0();
        t1 = t2.builder._chunk_builder$_nesting._stack;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
    },
    $signature: 74
  };
  Q.SourceVisitor_visitImportDirective_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1.token$1(t2.keyword);
      t1.builder._pendingWhitespace = C.Whitespace_space;
      t1.visit$1(t2._ast$_uri);
      t1._visitConfigurations$1(t2._configurations);
      if (t2.asKeyword != null) {
        t1.soloSplit$0();
        t1.token$2$after(t2.deferredKeyword, t1.get$space());
        t1.token$1(t2.asKeyword);
        t1.builder._pendingWhitespace = C.Whitespace_space;
        t1.visit$1(t2._prefix);
      }
      t1.builder.startRule$1(Q.CombinatorRule$());
      t1.visitNodes$1(t2._combinators);
      t1.builder.endRule$0();
    },
    $signature: 0
  };
  Q.SourceVisitor_visitLibraryDirective_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1.token$1(t2.libraryKeyword);
      t1.builder._pendingWhitespace = C.Whitespace_space;
      t1.visit$1(t2._ast$_name);
    },
    $signature: 0
  };
  Q.SourceVisitor_visitNativeFunctionBody_closure.prototype = {
    call$0() {
      var t2,
        t1 = this.$this;
      t1.builder.nestExpression$1$now(true);
      t1.soloSplit$0();
      t2 = this.node;
      t1.token$1(t2.nativeKeyword);
      t1.visit$2$before(t2._stringLiteral, t1.get$space());
      t1.builder.unnest$0();
    },
    $signature: 0
  };
  Q.SourceVisitor_visitPartDirective_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1.token$1(t2.partKeyword);
      t1.builder._pendingWhitespace = C.Whitespace_space;
      t1.visit$1(t2._ast$_uri);
    },
    $signature: 0
  };
  Q.SourceVisitor_visitPartOfDirective_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1.token$1(t2.partKeyword);
      t1.builder._pendingWhitespace = C.Whitespace_space;
      t1.token$1(t2.ofKeyword);
      t1.builder._pendingWhitespace = C.Whitespace_space;
      t1.visit$1(t2._libraryName);
      t1.visit$1(t2._ast$_uri);
    },
    $signature: 0
  };
  Q.SourceVisitor_visitReturnStatement_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1.token$1(t2.returnKeyword);
      t1.visit$2$before(t2._expression, t1.get$space());
    },
    $signature: 0
  };
  Q.SourceVisitor_visitSimpleFormalParameter_closure.prototype = {
    call$0() {
      var t3, t4,
        t1 = this.$this,
        t2 = this.node;
      t1._beginFormalParameter$1(t2);
      t3 = t2._type;
      t4 = t3 == null;
      if (t1._insideNewTypedefFix && t4) {
        t3 = t2.keyword;
        if (t3 != null)
          if (t3.type !== C.Keyword_NcA)
            t1.token$2$after(t3, t1.get$space());
          else
            t1.writePrecedingCommentsAndNewlines$1(t3);
        t1.token$2$before(t2._identifier.token, new Q.SourceVisitor_visitSimpleFormalParameter__closure(t1, t2));
      } else {
        t1.token$2$after(t2.keyword, t1.get$space());
        t1.visit$1(t3);
        if (!t4 && t2._identifier != null)
          t1.builder.split$1$space(0, true);
        t1.visit$1(t2._identifier);
      }
      t1.builder.unnest$0();
      t1.builder.endRule$0();
    },
    $signature: 0
  };
  Q.SourceVisitor_visitSimpleFormalParameter__closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1._source_visitor$_writeText$2("dynamic", this.node._identifier.get$beginToken().offset);
      t1.builder.split$1$space(0, true);
    },
    $signature: 0
  };
  Q.SourceVisitor_visitSwitchStatement_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1.builder._chunk_builder$_nesting._stack;
      if (0 >= t2.length)
        return H.ioore(t2, -1);
      t2.pop();
      t1.builder._pendingWhitespace = C.Whitespace_newline;
    },
    $signature: 0
  };
  Q.SourceVisitor_visitTopLevelVariableDeclaration_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1.token$2$after(t2.externalKeyword, t1.get$space());
      t1.visit$1(t2._variableList);
    },
    $signature: 0
  };
  Q.SourceVisitor_visitTypeParameter_closure.prototype = {
    call$0() {
      var t3,
        t1 = this.$this,
        t2 = this.node;
      t1.visit$1(t2._ast$_name);
      t3 = t1.get$space();
      t1.token$3$after$before(t2.extendsKeyword, t3, t3);
      t1.visit$1(t2._bound);
    },
    $signature: 0
  };
  Q.SourceVisitor_visitVariableDeclarationStatement_closure.prototype = {
    call$0() {
      this.$this.visit$1(this.node._variableList);
    },
    $signature: 0
  };
  Q.SourceVisitor_visitYieldStatement_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = this.node;
      t1.token$1(t2.yieldKeyword);
      t1.token$1(t2.star);
      t1.builder._pendingWhitespace = C.Whitespace_space;
      t1.visit$1(t2._expression);
    },
    $signature: 0
  };
  Q.SourceVisitor_visitParameterMetadata_closure.prototype = {
    call$0() {
      var t1 = this.$this;
      t1.builder.nestExpression$1$now(true);
      t1.builder.split$1$space(0, true);
    },
    $signature: 0
  };
  Q.SourceVisitor__visitMemberDeclaration_closure.prototype = {
    call$0() {
      var t1 = this.$function;
      if (!type$.ExpressionFunctionBody._is(t1.get$body(t1)))
        this.$this.builder.unnest$0();
    },
    $signature: 0
  };
  Q.SourceVisitor__containsLineComments_hasLineCommentBefore.prototype = {
    call$1(token) {
      var comment = token._precedingComment;
      for (; comment != null; comment = comment.next)
        if (comment.type === C.TokenType_WjT)
          return true;
      return false;
    },
    $signature: 14
  };
  Q.SourceVisitor__visitCombinator_closure.prototype = {
    call$0() {
      var t1 = this.$this.builder.split$1$space(0, true);
      C.JSArray_methods.get$last(this.rule._names).add$1(0, t1);
      return null;
    },
    $signature: 0
  };
  Q.SourceVisitor__endBody_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1.builder._chunk_builder$_nesting._stack;
      if (0 >= t2.length)
        return H.ioore(t2, -1);
      t2.pop();
      t1.builder.split$2$nest$space(0, false, this.space);
    },
    $signature: 0
  };
  Q.StyleFix.prototype = {};
  L.Whitespace.prototype = {
    get$minimumLines() {
      switch (this) {
        case C.Whitespace_newline:
        case C.Whitespace_nestedNewline:
        case C.Whitespace_newlineFlushLeft:
        case C.Whitespace_oneOrTwoNewlines:
          return 1;
        case C.Whitespace_twoNewlines:
          return 2;
        default:
          return 0;
      }
    },
    toString$0(_) {
      return this.name;
    }
  };
  G.Parser.prototype = {
    parse$2(jsonString, topLevelName) {
      var _this = this,
        decode = C.C_JsonCodec.decode$1(0, jsonString),
        allClasses = H._setArrayType([], type$.JSArray_legacy_Tuple2_of_legacy_String_and_legacy_List_legacy_Subtype),
        topLevel = _this._getTypedClassFields$1(decode);
      C.JSArray_methods.add$1(allClasses, new S.Tuple2(topLevelName, topLevel, type$.Tuple2_of_legacy_String_and_legacy_List_legacy_Subtype));
      C.JSArray_methods.forEach$1(topLevel, new G.Parser_parse_closure(_this, allClasses));
      _this._generateStringClass$2(topLevel, topLevelName);
      return new H.MappedListIterable(allClasses, type$.legacy_String_Function_legacy_Tuple2_of_legacy_String_and_legacy_List_legacy_Subtype._as(new G.Parser_parse_closure0(_this)), type$.MappedListIterable_of_legacy_Tuple2_of_legacy_String_and_legacy_List_legacy_Subtype_and_legacy_String).reduce$1(0, new G.Parser_parse_closure1());
    },
    _generateStringClass$2(topLevel, $name) {
      var t1, topLevelClass;
      type$.legacy_List_legacy_Subtype._as(topLevel);
      t1 = type$.Reference;
      t1 = new X._$ClassBuilder(D.ListBuilder_ListBuilder(C.List_empty, type$.Expression_2), D.ListBuilder_ListBuilder(C.List_empty, type$.String), D.ListBuilder_ListBuilder(C.List_empty, t1), D.ListBuilder_ListBuilder(C.List_empty, t1), D.ListBuilder_ListBuilder(C.List_empty, t1), D.ListBuilder_ListBuilder(C.List_empty, type$.Constructor), D.ListBuilder_ListBuilder(C.List_empty, type$.Method), D.ListBuilder_ListBuilder(C.List_empty, type$.Field));
      type$.nullable_void_Function_ClassBuilder._as(new G.Parser__generateStringClass_closure(this, $name, topLevel)).call$1(t1);
      topLevelClass = t1.build$0();
      topLevelClass.toString;
      t1 = type$.SpecVisitor_legacy_StringSink._as(new D.DartEmitter(false)).visitClass$2(topLevelClass, type$.nullable_StringSink._as(null))._contents;
      t1 = "\n    \n      /// " + M.ReCase$($name)._getSnakeCase$0() + ";   \n    " + (t1.charCodeAt(0) == 0 ? t1 : t1);
      return this._dartfmt.formatSource$1(A.SourceCode$(t1, true, null, null, null)).text;
    },
    _buildMethods$1(topLevel) {
      var t1;
      type$.legacy_List_legacy_Subtype._as(topLevel);
      t1 = H._arrayInstanceType(topLevel);
      return D.ListBuilder_ListBuilder(new H.MappedListIterable(topLevel, t1._eval$1("@(1)")._as(new G.Parser__buildMethods_closure(this)), t1._eval$1("MappedListIterable<1,@>")), type$.legacy_Method);
    },
    _getDartType$1(subtype) {
      var _null = null;
      switch (subtype.type) {
        case C.JsonType_0:
          return new U.Reference(_null, "int");
        case C.JsonType_1:
          return new U.Reference(_null, "double");
        case C.JsonType_2:
          return new U.Reference(_null, "bool");
        case C.JsonType_3:
          return new U.Reference(_null, "String");
        case C.JsonType_4:
          return new U.Reference(_null, M.ReCase$(subtype.name)._getPascalCase$0());
        case C.JsonType_5:
          return new U.Reference(_null, "BuiltList<" + this._getDartTypeFromJsonType$1(subtype) + ">");
        default:
          return new U.Reference(_null, "dynamic");
      }
    },
    _getDartTypeFromJsonType$1(subtype) {
      switch (subtype.listType) {
        case C.JsonType_0:
          return "int";
        case C.JsonType_1:
          return "double";
        case C.JsonType_3:
          return "String";
        case C.JsonType_4:
          return M.ReCase$(subtype.name)._getPascalCase$0();
        default:
          return "dynamic";
      }
    },
    _getTypedClassFields$1(decode) {
      var topLevelClass = H._setArrayType([], type$.JSArray_legacy_Subtype),
        toDecode = type$.legacy_List_dynamic._is(decode) ? J.$index$asx(decode, 0) : decode;
      J.forEach$1$ax(toDecode, new G.Parser__getTypedClassFields_closure(this, topLevelClass));
      return topLevelClass;
    },
    _parser$_returnType$2(key, val) {
      var _null = null;
      if (typeof val == "string" || H.S(val) === "null")
        return new O.Subtype(H._asStringS(key), C.JsonType_3, _null, val);
      else if (H._isInt(val))
        return new O.Subtype(H._asStringS(key), C.JsonType_0, _null, val);
      else if (typeof val == "number")
        return new O.Subtype(H._asStringS(key), C.JsonType_1, _null, val);
      else if (H._isBool(val))
        return new O.Subtype(H._asStringS(key), C.JsonType_2, _null, val);
      else if (type$.legacy_List_dynamic._is(val))
        return new O.Subtype(H._asStringS(key), C.JsonType_5, this._returnJsonType$1(val), val);
      else if (type$.legacy_Map_dynamic_dynamic._is(val))
        return new O.Subtype(H._asStringS(key), C.JsonType_4, _null, val);
      else
        throw H.wrapException(P.ArgumentError$("Cannot resolve JSON-encodable type for " + H.S(val) + ".", _null));
    },
    _returnJsonType$1(list) {
      var item = J.$index$asx(list, 0);
      P.print("got item " + H.S(item));
      if (typeof item == "string")
        return C.JsonType_3;
      else if (H._isInt(item))
        return C.JsonType_0;
      else if (typeof item == "number")
        return C.JsonType_1;
      else if (H._isBool(item))
        return C.JsonType_2;
      else if (type$.legacy_Map_dynamic_dynamic._is(item))
        return C.JsonType_4;
      else
        throw H.wrapException(P.ArgumentError$("Cannot resolve JSON-encodable type for " + H.S(item) + ".", null));
    }
  };
  G.Parser_parse_closure.prototype = {
    call$1(s) {
      var t1, getTypedClassFields;
      type$.legacy_Subtype._as(s);
      t1 = s.type;
      if (t1 === C.JsonType_5 && s.listType === C.JsonType_4 || t1 === C.JsonType_4) {
        getTypedClassFields = this.$this._getTypedClassFields$1(s.value);
        C.JSArray_methods.add$1(this.allClasses, new S.Tuple2(s.name, getTypedClassFields, type$.Tuple2_of_legacy_String_and_legacy_List_legacy_Subtype));
      }
    },
    $signature: 75
  };
  G.Parser_parse_closure0.prototype = {
    call$1(tuple) {
      type$.legacy_Tuple2_of_legacy_String_and_legacy_List_legacy_Subtype._as(tuple);
      return this.$this._generateStringClass$2(tuple.item2, tuple.item1);
    },
    $signature: 76
  };
  G.Parser_parse_closure1.prototype = {
    call$2(s1, s2) {
      return J.$add$ansx(H._asStringS(s1), H._asStringS(s2));
    },
    $signature: 77
  };
  G.Parser__generateStringClass_closure.prototype = {
    call$1(b) {
      var t1, t2, t3, t4, t5, t6, _null = null,
        _s12_ = "null element";
      b.get$_class$_$this();
      b.abstract = true;
      b.get$_class$_$this();
      t1 = b.constructors;
      t2 = H._instanceType(t1)._precomputed1;
      t3 = t2._as(Y._$Constructor__$Constructor(new G.Parser__generateStringClass__closure()));
      t4 = !$.$get$isSoundMode();
      if (t4 && !t2._is(null))
        if (t3 == null)
          H.throwExpression(P.ArgumentError$(_s12_, _null));
      J.add$1$ax(t1.get$_safeList(), t3);
      b.get$_class$_$this();
      t1 = b.$implements;
      t2 = this.name;
      t3 = H._instanceType(t1)._precomputed1;
      t5 = t3._as(new U.Reference(_null, "Built<" + M.ReCase$(t2)._getPascalCase$0() + ", " + M.ReCase$(t2)._getPascalCase$0() + "Builder>"));
      t4 && !t3._is(null);
      J.add$1$ax(t1.get$_safeList(), t5);
      t1 = M.ReCase$(t2)._getPascalCase$0();
      b.get$_class$_$this();
      b.name = t1;
      t1 = this.$this;
      t3 = type$.ListBuilder_Method._as(t1._buildMethods$1(this.topLevel));
      b.get$_class$_$this();
      b.methods = t3;
      t3 = type$.ListBuilder_String._as(D.ListBuilder_ListBuilder(["", ""], type$.legacy_String));
      b.get$_class$_$this();
      b.docs = t3;
      b.get$_class$_$this();
      t3 = b.methods;
      t5 = H._instanceType(t3)._precomputed1;
      t6 = t5._as(D._$Method__$Method(new G.Parser__generateStringClass__closure0(t1, t2)));
      if (t4 && !t5._is(null))
        if (t6 == null)
          H.throwExpression(P.ArgumentError$(_s12_, _null));
      J.add$1$ax(t3.get$_safeList(), t6);
      b.get$_class$_$this();
      t3 = b.methods;
      t5 = H._instanceType(t3)._precomputed1;
      t6 = t5._as(D._$Method__$Method(new G.Parser__generateStringClass__closure1(t1, t2)));
      if (t4 && !t5._is(null))
        if (t6 == null)
          H.throwExpression(P.ArgumentError$(_s12_, _null));
      J.add$1$ax(t3.get$_safeList(), t6);
      b.get$_class$_$this();
      t3 = b.methods;
      t5 = H._instanceType(t3)._precomputed1;
      t6 = t5._as(D._$Method__$Method(new G.Parser__generateStringClass__closure2(t1, t2)));
      if (t4 && !t5._is(null))
        if (t6 == null)
          H.throwExpression(P.ArgumentError$(_s12_, _null));
      J.add$1$ax(t3.get$_safeList(), t6);
      b.get$_class$_$this();
      t3 = b.constructors;
      t5 = H._instanceType(t3)._precomputed1;
      t2 = t5._as(Y._$Constructor__$Constructor(new G.Parser__generateStringClass__closure3(t1, t2)));
      if (t4 && !t5._is(null))
        if (t2 == null)
          H.throwExpression(P.ArgumentError$(_s12_, _null));
      J.add$1$ax(t3.get$_safeList(), t2);
      return b;
    },
    $signature: 78
  };
  G.Parser__generateStringClass__closure.prototype = {
    call$1(b) {
      b.get$_constructor$_$this();
      b.name = "_";
      return b;
    },
    $signature: 23
  };
  G.Parser__generateStringClass__closure0.prototype = {
    call$1(b) {
      var t1;
      b.get$_method$_$this();
      b.name = "toJson";
      b.get$_method$_$this();
      b.returns = new U.Reference(null, "Map<String, dynamic>");
      t1 = "return serializers.serializeWith(" + M.ReCase$(this.name)._getPascalCase$0() + ".serializer, this,);";
      b.get$_method$_$this();
      b.body = new X.StaticCode(t1);
      return b;
    },
    $signature: 4
  };
  G.Parser__generateStringClass__closure1.prototype = {
    call$1(b) {
      var t1, t2, t3;
      b.get$_method$_$this();
      b.name = "fromJson";
      b.get$_method$_$this();
      b.$static = true;
      b.get$_method$_$this();
      t1 = b.requiredParameters;
      t2 = H._instanceType(t1)._precomputed1;
      t3 = t2._as(D._$Parameter__$Parameter(new G.Parser__generateStringClass___closure0()));
      if (!$.$get$isSoundMode() && !t2._is(null))
        if (t3 == null)
          H.throwExpression(P.ArgumentError$("null element", null));
      J.add$1$ax(t1.get$_safeList(), t3);
      t1 = this.name;
      t2 = M.ReCase$(t1)._getPascalCase$0();
      b.get$_method$_$this();
      b.returns = new U.Reference(null, t2);
      t1 = "return serializers.deserializeWith(" + M.ReCase$(t1)._getPascalCase$0() + ".serializer, json,);";
      b.get$_method$_$this();
      b.body = new X.StaticCode(t1);
      return b;
    },
    $signature: 4
  };
  G.Parser__generateStringClass___closure0.prototype = {
    call$1(b) {
      b.get$_method$_$this();
      b.super$ParameterBuilder$name(0, "json");
      b.get$_method$_$this();
      b.type = new U.Reference(null, "Map<String, dynamic>");
      return b;
    },
    $signature: 24
  };
  G.Parser__generateStringClass__closure2.prototype = {
    call$1(b) {
      var t1, t2;
      b.get$_method$_$this();
      b.type = C.MethodType_0;
      b.get$_method$_$this();
      b.name = "serializer";
      b.get$_method$_$this();
      b.$static = true;
      b.get$_method$_$this();
      b.lambda = true;
      t1 = this.name;
      t2 = "Serializer<" + M.ReCase$(t1)._getPascalCase$0() + ">";
      b.get$_method$_$this();
      b.returns = new U.Reference(null, t2);
      t1 = "_$" + M.ReCase$(t1)._getCamelCase$0() + "Serializer";
      b.get$_method$_$this();
      b.body = new X.StaticCode(t1);
      return b;
    },
    $signature: 4
  };
  G.Parser__generateStringClass__closure3.prototype = {
    call$1(b) {
      var t1, t2, t3;
      b.get$_constructor$_$this();
      b.factory = true;
      t1 = this.name;
      t2 = " _$" + M.ReCase$(t1)._getPascalCase$0();
      b.get$_constructor$_$this();
      b.redirect = new U.Reference(null, t2);
      b.get$_constructor$_$this();
      t2 = b.requiredParameters;
      t3 = H._instanceType(t2)._precomputed1;
      t1 = t3._as(D._$Parameter__$Parameter(new G.Parser__generateStringClass___closure(this.$this, t1)));
      if (!$.$get$isSoundMode() && !t3._is(null))
        if (t1 == null)
          H.throwExpression(P.ArgumentError$("null element", null));
      J.add$1$ax(t2.get$_safeList(), t1);
      return b;
    },
    $signature: 23
  };
  G.Parser__generateStringClass___closure.prototype = {
    call$1(b) {
      var t1 = this.name,
        t2 = "= _$" + M.ReCase$(t1)._getPascalCase$0();
      b.get$_method$_$this();
      b.defaultTo = new X.StaticCode(t2);
      t1 = "[updates(" + M.ReCase$(t1)._getPascalCase$0() + "Builder b)]";
      b.get$_method$_$this();
      b.super$ParameterBuilder$name(0, t1);
      return b;
    },
    $signature: 24
  };
  G.Parser__buildMethods_closure.prototype = {
    call$1(s) {
      return D._$Method__$Method(new G.Parser__buildMethods__closure(this.$this, type$.legacy_Subtype._as(s)));
    },
    $signature: 82
  };
  G.Parser__buildMethods__closure.prototype = {
    call$1(b) {
      var t4, t5,
        t1 = this.s,
        t2 = t1.name,
        t3 = type$.ListBuilder_String._as(D.ListBuilder_ListBuilder(["/// " + M.ReCase$(t2)._getCamelCase$0()], type$.legacy_String));
      b.get$_method$_$this();
      b.docs = t3;
      t3 = M.ReCase$(t2)._getCamelCase$0();
      b.get$_method$_$this();
      b.name = t3;
      t1 = this.$this._getDartType$1(t1);
      b.get$_method$_$this();
      b.returns = t1;
      b.get$_method$_$this();
      t1 = b.annotations;
      t3 = H._instanceType(t1)._precomputed1;
      t4 = t3._as(new B.CodeExpression(new X.StaticCode("nullable")));
      t5 = !$.$get$isSoundMode();
      t5 && !t3._is(null);
      J.add$1$ax(t1.get$_safeList(), t4);
      b.get$_method$_$this();
      t1 = b.annotations;
      t3 = H._instanceType(t1)._precomputed1;
      t2 = t3._as(new B.CodeExpression(new X.StaticCode("BuiltValueField(wireName: '" + H.S(t2) + "')")));
      t5 && !t3._is(null);
      J.add$1$ax(t1.get$_safeList(), t2);
      b.get$_method$_$this();
      b.type = C.MethodType_0;
      return b;
    },
    $signature: 4
  };
  G.Parser__getTypedClassFields_closure.prototype = {
    call$2(key, val) {
      C.JSArray_methods.add$1(this.topLevelClass, this.$this._parser$_returnType$2(key, val));
    },
    $signature: 83
  };
  O.Subtype.prototype = {
    toString$0(_) {
      var _this = this;
      return "Subtype{name: " + H.S(_this.name) + ", type: " + _this.type.toString$0(0) + ", listType: " + H.S(_this.listType) + ", value: " + H.S(_this.value) + "}";
    }
  };
  O.JsonType.prototype = {
    toString$0(_) {
      return this._root$_name;
    }
  };
  M.Context.prototype = {
    absolute$1(_, part1) {
      var t1, _null = null;
      M._validateArgList("absolute", H._setArrayType([part1, null, null, null, null, null, null], type$.JSArray_nullable_String));
      t1 = this.style;
      t1 = t1.rootLength$1(part1) > 0 && !t1.isRootRelative$1(part1);
      if (t1)
        return part1;
      t1 = this._context$_current;
      return this.join$8(0, t1 == null ? D.current() : t1, part1, _null, _null, _null, _null, _null, _null);
    },
    join$8(_, part1, part2, part3, part4, part5, part6, part7, part8) {
      var parts = H._setArrayType([part1, part2, part3, part4, part5, part6, part7, part8], type$.JSArray_nullable_String);
      M._validateArgList("join", parts);
      return this.joinAll$1(new H.WhereTypeIterable(parts, type$.WhereTypeIterable_String));
    },
    join$2($receiver, part1, part2) {
      return this.join$8($receiver, part1, part2, null, null, null, null, null, null);
    },
    joinAll$1(parts) {
      var t1, t2, t3, needsSeparator, isAbsoluteAndNotRootRelative, t4, t5, parsed, path, t6;
      type$.Iterable_String._as(parts);
      for (t1 = parts.$ti, t2 = t1._eval$1("bool(Iterable.E)")._as(new M.Context_joinAll_closure()), t3 = parts.get$iterator(parts), t1 = new H.WhereIterator(t3, t2, t1._eval$1("WhereIterator<Iterable.E>")), t2 = this.style, needsSeparator = false, isAbsoluteAndNotRootRelative = false, t4 = ""; t1.moveNext$0();) {
        t5 = t3.get$current();
        if (t2.isRootRelative$1(t5) && isAbsoluteAndNotRootRelative) {
          parsed = X.ParsedPath_ParsedPath$parse(t5, t2);
          path = t4.charCodeAt(0) == 0 ? t4 : t4;
          t4 = C.JSString_methods.substring$2(path, 0, t2.rootLength$2$withDrive(path, true));
          parsed.root = t4;
          if (t2.needsSeparator$1(t4))
            C.JSArray_methods.$indexSet(parsed.separators, 0, t2.get$separator());
          t4 = parsed.toString$0(0);
        } else if (t2.rootLength$1(t5) > 0) {
          isAbsoluteAndNotRootRelative = !t2.isRootRelative$1(t5);
          t4 = H.S(t5);
        } else {
          t6 = t5.length;
          if (t6 !== 0) {
            if (0 >= t6)
              return H.ioore(t5, 0);
            t6 = t2.containsSeparator$1(t5[0]);
          } else
            t6 = false;
          if (!t6)
            if (needsSeparator)
              t4 += t2.get$separator();
          t4 += t5;
        }
        needsSeparator = t2.needsSeparator$1(t5);
      }
      return t4.charCodeAt(0) == 0 ? t4 : t4;
    },
    split$1(_, path) {
      var parsed = X.ParsedPath_ParsedPath$parse(path, this.style),
        t1 = parsed.parts,
        t2 = H._arrayInstanceType(t1),
        t3 = t2._eval$1("WhereIterable<1>");
      parsed.set$parts(P.List_List$of(new H.WhereIterable(t1, t2._eval$1("bool(1)")._as(new M.Context_split_closure()), t3), true, t3._eval$1("Iterable.E")));
      t1 = parsed.root;
      if (t1 != null)
        C.JSArray_methods.insert$2(parsed.parts, 0, t1);
      return parsed.parts;
    },
    normalize$1(path) {
      var parsed;
      if (!this._needsNormalization$1(path))
        return path;
      parsed = X.ParsedPath_ParsedPath$parse(path, this.style);
      parsed.normalize$0();
      return parsed.toString$0(0);
    },
    _needsNormalization$1(path) {
      var t1, root, i, start, previous, t2, t3, previousPrevious, codeUnit, t4;
      path.toString;
      t1 = this.style;
      root = t1.rootLength$1(path);
      if (root !== 0) {
        if (t1 === $.$get$Style_windows())
          for (i = 0; i < root; ++i)
            if (C.JSString_methods._codeUnitAt$1(path, i) === 47)
              return true;
        start = root;
        previous = 47;
      } else {
        start = 0;
        previous = null;
      }
      for (t2 = new H.CodeUnits(path)._string, t3 = t2.length, i = start, previousPrevious = null; i < t3; ++i, previousPrevious = previous, previous = codeUnit) {
        codeUnit = C.JSString_methods.codeUnitAt$1(t2, i);
        if (t1.isSeparator$1(codeUnit)) {
          if (t1 === $.$get$Style_windows() && codeUnit === 47)
            return true;
          if (previous != null && t1.isSeparator$1(previous))
            return true;
          if (previous === 46)
            t4 = previousPrevious == null || previousPrevious === 46 || t1.isSeparator$1(previousPrevious);
          else
            t4 = false;
          if (t4)
            return true;
        }
      }
      if (previous == null)
        return true;
      if (t1.isSeparator$1(previous))
        return true;
      if (previous === 46)
        t1 = previousPrevious == null || t1.isSeparator$1(previousPrevious) || previousPrevious === 46;
      else
        t1 = false;
      if (t1)
        return true;
      return false;
    },
    relative$1(path) {
      var from, fromParsed, pathParsed, t3, t4, t5, _this = this,
        _s26_ = 'Unable to find a path to "',
        t1 = _this.style,
        t2 = t1.rootLength$1(path);
      if (t2 <= 0)
        return _this.normalize$1(path);
      t2 = _this._context$_current;
      from = t2 == null ? D.current() : t2;
      if (t1.rootLength$1(from) <= 0 && t1.rootLength$1(path) > 0)
        return _this.normalize$1(path);
      if (t1.rootLength$1(path) <= 0 || t1.isRootRelative$1(path))
        path = _this.absolute$1(0, path);
      if (t1.rootLength$1(path) <= 0 && t1.rootLength$1(from) > 0)
        throw H.wrapException(X.PathException$(_s26_ + H.S(path) + '" from "' + H.S(from) + '".'));
      fromParsed = X.ParsedPath_ParsedPath$parse(from, t1);
      fromParsed.normalize$0();
      pathParsed = X.ParsedPath_ParsedPath$parse(path, t1);
      pathParsed.normalize$0();
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return H.ioore(t2, 0);
        t2 = J.$eq$(t2[0], ".");
      } else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      t2 = fromParsed.root;
      t3 = pathParsed.root;
      if (t2 != t3)
        t2 = t2 == null || t3 == null || !t1.pathsEqual$2(t2, t3);
      else
        t2 = false;
      if (t2)
        return pathParsed.toString$0(0);
      while (true) {
        t2 = fromParsed.parts;
        t3 = t2.length;
        if (t3 !== 0) {
          t4 = pathParsed.parts;
          t5 = t4.length;
          if (t5 !== 0) {
            if (0 >= t3)
              return H.ioore(t2, 0);
            t2 = t2[0];
            if (0 >= t5)
              return H.ioore(t4, 0);
            t4 = t1.pathsEqual$2(t2, t4[0]);
            t2 = t4;
          } else
            t2 = false;
        } else
          t2 = false;
        if (!t2)
          break;
        C.JSArray_methods.removeAt$1(fromParsed.parts, 0);
        C.JSArray_methods.removeAt$1(fromParsed.separators, 1);
        C.JSArray_methods.removeAt$1(pathParsed.parts, 0);
        C.JSArray_methods.removeAt$1(pathParsed.separators, 1);
      }
      t2 = fromParsed.parts;
      t3 = t2.length;
      if (t3 !== 0) {
        if (0 >= t3)
          return H.ioore(t2, 0);
        t2 = J.$eq$(t2[0], "..");
      } else
        t2 = false;
      if (t2)
        throw H.wrapException(X.PathException$(_s26_ + H.S(path) + '" from "' + H.S(from) + '".'));
      t2 = type$.String;
      C.JSArray_methods.insertAll$2(pathParsed.parts, 0, P.List_List$filled(fromParsed.parts.length, "..", false, t2));
      C.JSArray_methods.$indexSet(pathParsed.separators, 0, "");
      C.JSArray_methods.insertAll$2(pathParsed.separators, 1, P.List_List$filled(fromParsed.parts.length, t1.get$separator(), false, t2));
      t1 = pathParsed.parts;
      t2 = t1.length;
      if (t2 === 0)
        return ".";
      if (t2 > 1 && J.$eq$(C.JSArray_methods.get$last(t1), ".")) {
        C.JSArray_methods.removeLast$0(pathParsed.parts);
        t1 = pathParsed.separators;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
        C.JSArray_methods.add$1(t1, "");
      }
      pathParsed.root = "";
      pathParsed.removeTrailingSeparators$0();
      return pathParsed.toString$0(0);
    },
    toUri$1(path) {
      var t2,
        t1 = this.style;
      if (t1.rootLength$1(path) <= 0)
        return t1.relativePathToUri$1(path);
      else {
        t2 = this._context$_current;
        return t1.absolutePathToUri$1(this.join$2(0, t2 == null ? D.current() : t2, path));
      }
    },
    prettyUri$1(uri) {
      var path, rel, _this = this,
        typedUri = M._parseUri(uri);
      if (typedUri.get$scheme() === "file" && _this.style == $.$get$Style_url())
        return typedUri.toString$0(0);
      else if (typedUri.get$scheme() !== "file" && typedUri.get$scheme() !== "" && _this.style != $.$get$Style_url())
        return typedUri.toString$0(0);
      path = _this.normalize$1(_this.style.pathFromUri$1(M._parseUri(typedUri)));
      rel = _this.relative$1(path);
      return _this.split$1(0, rel).length > _this.split$1(0, path).length ? path : rel;
    }
  };
  M.Context_joinAll_closure.prototype = {
    call$1(part) {
      return H._asStringS(part) !== "";
    },
    $signature: 6
  };
  M.Context_split_closure.prototype = {
    call$1(part) {
      return H._asStringS(part).length !== 0;
    },
    $signature: 6
  };
  M._validateArgList_closure.prototype = {
    call$1(arg) {
      H._asStringQ(arg);
      return arg == null ? "null" : '"' + arg + '"';
    },
    $signature: 85
  };
  B.InternalStyle.prototype = {
    getRoot$1(path) {
      var t1,
        $length = this.rootLength$1(path);
      if ($length > 0)
        return J.substring$2$s(path, 0, $length);
      if (this.isRootRelative$1(path)) {
        if (0 >= path.length)
          return H.ioore(path, 0);
        t1 = path[0];
      } else
        t1 = null;
      return t1;
    },
    relativePathToUri$1(path) {
      var segments = new M.Context(this, ".").split$1(0, path);
      if (this.isSeparator$1(C.JSString_methods.codeUnitAt$1(path, path.length - 1)))
        C.JSArray_methods.add$1(segments, "");
      return P._Uri__Uri(null, null, segments, null);
    },
    pathsEqual$2(path1, path2) {
      return path1 == path2;
    }
  };
  X.ParsedPath.prototype = {
    get$hasTrailingSeparator() {
      var t1 = this.parts;
      if (t1.length !== 0)
        t1 = J.$eq$(C.JSArray_methods.get$last(t1), "") || !J.$eq$(C.JSArray_methods.get$last(this.separators), "");
      else
        t1 = false;
      return t1;
    },
    removeTrailingSeparators$0() {
      var t1, t2, _this = this;
      while (true) {
        t1 = _this.parts;
        if (!(t1.length !== 0 && J.$eq$(C.JSArray_methods.get$last(t1), "")))
          break;
        C.JSArray_methods.removeLast$0(_this.parts);
        t1 = _this.separators;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
      t1 = _this.separators;
      t2 = t1.length;
      if (t2 !== 0)
        C.JSArray_methods.$indexSet(t1, t2 - 1, "");
    },
    normalize$0() {
      var t1, t2, leadingDoubles, _i, part, t3, _this = this,
        newParts = H._setArrayType([], type$.JSArray_String);
      for (t1 = _this.parts, t2 = t1.length, leadingDoubles = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        part = t1[_i];
        t3 = J.getInterceptor$(part);
        if (!(t3.$eq(part, ".") || t3.$eq(part, "")))
          if (t3.$eq(part, "..")) {
            t3 = newParts.length;
            if (t3 !== 0) {
              if (0 >= t3)
                return H.ioore(newParts, -1);
              newParts.pop();
            } else
              ++leadingDoubles;
          } else
            C.JSArray_methods.add$1(newParts, part);
      }
      if (_this.root == null)
        C.JSArray_methods.insertAll$2(newParts, 0, P.List_List$filled(leadingDoubles, "..", false, type$.String));
      if (newParts.length === 0 && _this.root == null)
        C.JSArray_methods.add$1(newParts, ".");
      _this.set$parts(newParts);
      t1 = _this.style;
      _this.set$separators(P.List_List$filled(newParts.length + 1, t1.get$separator(), true, type$.String));
      t2 = _this.root;
      if (t2 == null || newParts.length === 0 || !t1.needsSeparator$1(t2))
        C.JSArray_methods.$indexSet(_this.separators, 0, "");
      t2 = _this.root;
      if (t2 != null && t1 === $.$get$Style_windows()) {
        t2.toString;
        _this.root = H.stringReplaceAllUnchecked(t2, "/", "\\");
      }
      _this.removeTrailingSeparators$0();
    },
    toString$0(_) {
      var i, t2, _this = this,
        t1 = _this.root;
      t1 = t1 != null ? t1 : "";
      for (i = 0; i < _this.parts.length; ++i) {
        t2 = _this.separators;
        if (i >= t2.length)
          return H.ioore(t2, i);
        t2 = t1 + H.S(t2[i]);
        t1 = _this.parts;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1 = t2 + H.S(t1[i]);
      }
      t1 += H.S(C.JSArray_methods.get$last(_this.separators));
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    set$parts(parts) {
      this.parts = type$.List_String._as(parts);
    },
    set$separators(separators) {
      this.separators = type$.List_String._as(separators);
    }
  };
  X.PathException.prototype = {
    toString$0(_) {
      return "PathException: " + this.message;
    },
    $isException: 1
  };
  O.Style.prototype = {
    toString$0(_) {
      return this.get$name(this);
    }
  };
  E.PosixStyle.prototype = {
    containsSeparator$1(path) {
      return C.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t1 = path.length;
      return t1 !== 0 && C.JSString_methods.codeUnitAt$1(path, t1 - 1) !== 47;
    },
    rootLength$2$withDrive(path, withDrive) {
      if (path.length !== 0 && C.JSString_methods._codeUnitAt$1(path, 0) === 47)
        return 1;
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return false;
    },
    pathFromUri$1(uri) {
      var t1;
      if (uri.get$scheme() === "" || uri.get$scheme() === "file") {
        t1 = uri.get$path(uri);
        return P._Uri__uriDecode(t1, 0, t1.length, C.C_Utf8Codec, false);
      }
      throw H.wrapException(P.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
    },
    absolutePathToUri$1(path) {
      var parsed = X.ParsedPath_ParsedPath$parse(path, this),
        t1 = parsed.parts;
      if (t1.length === 0)
        C.JSArray_methods.addAll$1(t1, H._setArrayType(["", ""], type$.JSArray_String));
      else if (parsed.get$hasTrailingSeparator())
        C.JSArray_methods.add$1(parsed.parts, "");
      return P._Uri__Uri(null, null, parsed.parts, "file");
    },
    get$name() {
      return "posix";
    },
    get$separator() {
      return "/";
    }
  };
  F.UrlStyle.prototype = {
    containsSeparator$1(path) {
      return C.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47;
    },
    needsSeparator$1(path) {
      var t1 = path.length;
      if (t1 === 0)
        return false;
      if (C.JSString_methods.codeUnitAt$1(path, t1 - 1) !== 47)
        return true;
      return C.JSString_methods.endsWith$1(path, "://") && this.rootLength$1(path) === t1;
    },
    rootLength$2$withDrive(path, withDrive) {
      var i, codeUnit, index, t2,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      if (C.JSString_methods._codeUnitAt$1(path, 0) === 47)
        return 1;
      for (i = 0; i < t1; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(path, i);
        if (codeUnit === 47)
          return 0;
        if (codeUnit === 58) {
          if (i === 0)
            return 0;
          index = C.JSString_methods.indexOf$2(path, "/", C.JSString_methods.startsWith$2(path, "//", i + 1) ? i + 3 : i);
          if (index <= 0)
            return t1;
          if (!withDrive || t1 < index + 3)
            return index;
          if (!C.JSString_methods.startsWith$1(path, "file://"))
            return index;
          if (!B.isDriveLetter(path, index + 1))
            return index;
          t2 = index + 3;
          return t1 === t2 ? t2 : index + 4;
        }
      }
      return 0;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return path.length !== 0 && C.JSString_methods._codeUnitAt$1(path, 0) === 47;
    },
    pathFromUri$1(uri) {
      return uri.toString$0(0);
    },
    relativePathToUri$1(path) {
      return P.Uri_parse(path);
    },
    absolutePathToUri$1(path) {
      return P.Uri_parse(path);
    },
    get$name() {
      return "url";
    },
    get$separator() {
      return "/";
    }
  };
  L.WindowsStyle.prototype = {
    containsSeparator$1(path) {
      return C.JSString_methods.contains$1(path, "/");
    },
    isSeparator$1(codeUnit) {
      return codeUnit === 47 || codeUnit === 92;
    },
    needsSeparator$1(path) {
      var t1 = path.length;
      if (t1 === 0)
        return false;
      t1 = C.JSString_methods.codeUnitAt$1(path, t1 - 1);
      return !(t1 === 47 || t1 === 92);
    },
    rootLength$2$withDrive(path, withDrive) {
      var t2, index,
        t1 = path.length;
      if (t1 === 0)
        return 0;
      t2 = C.JSString_methods._codeUnitAt$1(path, 0);
      if (t2 === 47)
        return 1;
      if (t2 === 92) {
        if (t1 < 2 || C.JSString_methods._codeUnitAt$1(path, 1) !== 92)
          return 1;
        index = C.JSString_methods.indexOf$2(path, "\\", 2);
        if (index > 0) {
          index = C.JSString_methods.indexOf$2(path, "\\", index + 1);
          if (index > 0)
            return index;
        }
        return t1;
      }
      if (t1 < 3)
        return 0;
      if (!B.isAlphabetic(t2))
        return 0;
      if (C.JSString_methods._codeUnitAt$1(path, 1) !== 58)
        return 0;
      t1 = C.JSString_methods._codeUnitAt$1(path, 2);
      if (!(t1 === 47 || t1 === 92))
        return 0;
      return 3;
    },
    rootLength$1(path) {
      return this.rootLength$2$withDrive(path, false);
    },
    isRootRelative$1(path) {
      return this.rootLength$1(path) === 1;
    },
    pathFromUri$1(uri) {
      var path, t1;
      if (uri.get$scheme() !== "" && uri.get$scheme() !== "file")
        throw H.wrapException(P.ArgumentError$("Uri " + uri.toString$0(0) + " must have scheme 'file:'.", null));
      path = uri.get$path(uri);
      if (uri.get$host(uri) === "") {
        t1 = path.length;
        if (t1 >= 3 && C.JSString_methods.startsWith$1(path, "/") && B.isDriveLetter(path, 1)) {
          P.RangeError_checkValueInInterval(0, 0, t1, "startIndex");
          path = H.stringReplaceFirstUnchecked(path, "/", "", 0);
        }
      } else
        path = "\\\\" + uri.get$host(uri) + path;
      t1 = H.stringReplaceAllUnchecked(path, "/", "\\");
      return P._Uri__uriDecode(t1, 0, t1.length, C.C_Utf8Codec, false);
    },
    absolutePathToUri$1(path) {
      var rootParts, t2,
        parsed = X.ParsedPath_ParsedPath$parse(path, this),
        t1 = parsed.root;
      t1.toString;
      if (C.JSString_methods.startsWith$1(t1, "\\\\")) {
        rootParts = new H.WhereIterable(H._setArrayType(t1.split("\\"), type$.JSArray_String), type$.bool_Function_String._as(new L.WindowsStyle_absolutePathToUri_closure()), type$.WhereIterable_String);
        C.JSArray_methods.insert$2(parsed.parts, 0, rootParts.get$last(rootParts));
        if (parsed.get$hasTrailingSeparator())
          C.JSArray_methods.add$1(parsed.parts, "");
        return P._Uri__Uri(rootParts.get$first(rootParts), null, parsed.parts, "file");
      } else {
        if (parsed.parts.length === 0 || parsed.get$hasTrailingSeparator())
          C.JSArray_methods.add$1(parsed.parts, "");
        t1 = parsed.parts;
        t2 = parsed.root;
        t2.toString;
        t2 = H.stringReplaceAllUnchecked(t2, "/", "");
        C.JSArray_methods.insert$2(t1, 0, H.stringReplaceAllUnchecked(t2, "\\", ""));
        return P._Uri__Uri(null, null, parsed.parts, "file");
      }
    },
    codeUnitsEqual$2(codeUnit1, codeUnit2) {
      var upperCase1;
      if (codeUnit1 === codeUnit2)
        return true;
      if (codeUnit1 === 47)
        return codeUnit2 === 92;
      if (codeUnit1 === 92)
        return codeUnit2 === 47;
      if ((codeUnit1 ^ codeUnit2) !== 32)
        return false;
      upperCase1 = codeUnit1 | 32;
      return upperCase1 >= 97 && upperCase1 <= 122;
    },
    pathsEqual$2(path1, path2) {
      var t1, t2, i;
      if (path1 == path2)
        return true;
      t1 = path1.length;
      if (t1 !== path2.length)
        return false;
      for (t2 = J.getInterceptor$s(path2), i = 0; i < t1; ++i)
        if (!this.codeUnitsEqual$2(C.JSString_methods._codeUnitAt$1(path1, i), t2._codeUnitAt$1(path2, i)))
          return false;
      return true;
    },
    get$name() {
      return "windows";
    },
    get$separator() {
      return "\\";
    }
  };
  L.WindowsStyle_absolutePathToUri_closure.prototype = {
    call$1(part) {
      return H._asStringS(part) !== "";
    },
    $signature: 6
  };
  T.Version.prototype = {
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      return other instanceof T.Version && _this.major === other.major && _this.minor === other.minor && _this.patch === other.patch && H.boolConversionCheck(C.C_IterableEquality.equals$2(_this.preRelease, other.preRelease)) && H.boolConversionCheck(C.C_IterableEquality.equals$2(_this.build, other.build));
    },
    get$hashCode(_) {
      var _this = this;
      return (_this.major ^ _this.minor ^ _this.patch ^ C.C_IterableEquality.hash$1(0, _this.preRelease) ^ C.C_IterableEquality.hash$1(0, _this.build)) >>> 0;
    },
    compareTo$1(_, other) {
      var t1, t2, t3, comparison, _this = this;
      type$.VersionRange._as(other);
      if (other instanceof T.Version) {
        t1 = _this.major;
        t2 = other.major;
        if (t1 !== t2)
          return C.JSInt_methods.compareTo$1(t1, t2);
        t1 = _this.minor;
        t2 = other.minor;
        if (t1 !== t2)
          return C.JSInt_methods.compareTo$1(t1, t2);
        t1 = _this.patch;
        t2 = other.patch;
        if (t1 !== t2)
          return C.JSInt_methods.compareTo$1(t1, t2);
        t1 = _this.preRelease;
        t2 = t1.length === 0;
        if (t2 && other.preRelease.length !== 0)
          return 1;
        t3 = other.preRelease;
        if (t3.length === 0 && !t2)
          return -1;
        comparison = _this._compareLists$2(t1, t3);
        if (comparison !== 0)
          return comparison;
        t1 = _this.build;
        t2 = t1.length === 0;
        if (t2 && other.build.length !== 0)
          return -1;
        t3 = other.build;
        if (t3.length === 0 && !t2)
          return 1;
        return _this._compareLists$2(t1, t3);
      } else
        return -other.compareTo$1(0, _this);
    },
    toString$0(_) {
      return this._version$_text;
    },
    _compareLists$2(a, b) {
      var i, t1, t2, aPart, bPart;
      for (i = 0; t1 = a.length, t2 = b.length, i < Math.max(t1, t2); ++i) {
        aPart = i < t1 ? a[i] : null;
        bPart = i < t2 ? b[i] : null;
        if (J.$eq$(aPart, bPart))
          continue;
        if (aPart == null)
          return -1;
        if (bPart == null)
          return 1;
        if (typeof aPart == "number")
          if (typeof bPart == "number")
            return C.JSNumber_methods.compareTo$1(aPart, bPart);
          else
            return -1;
        else if (typeof bPart == "number")
          return 1;
        else {
          H._asStringS(aPart);
          H._asStringS(bPart);
          if (aPart === bPart)
            t1 = 0;
          else
            t1 = aPart < bPart ? -1 : 1;
          return t1;
        }
      }
      return 0;
    },
    $isVersionRange: 1
  };
  T.Version__splitParts_closure.prototype = {
    call$1(part) {
      var t1;
      H._asStringS(part);
      t1 = H.Primitives_parseInt(part, null);
      return t1 == null ? part : t1;
    },
    $signature: 86
  };
  M.ReCase.prototype = {
    get$_words() {
      var t1 = this.__ReCase__words;
      return t1 === $ ? H.throwExpression(H.LateError$fieldNI("_words")) : t1;
    },
    _groupIntoWords$1(text) {
      var t2, t3, t4, i, char, nextChar, t5, isEndOfWord,
        sb = new P.StringBuffer(""),
        words = H._setArrayType([], type$.JSArray_String),
        t1 = text.toUpperCase();
      for (t2 = text.length, t3 = this.symbolSet, t4 = this._upperAlphaRegex._nativeRegExp, t1 = t1 !== text, i = 0; i < t2;) {
        char = text[i];
        ++i;
        if (i === t2)
          nextChar = null;
        else {
          if (i >= t2)
            return H.ioore(text, i);
          nextChar = text[i];
        }
        if (t3.contains$1(0, char))
          continue;
        t5 = sb._contents += char;
        if (nextChar != null)
          isEndOfWord = t4.test(nextChar) && t1 || t3.contains$1(0, nextChar);
        else
          isEndOfWord = true;
        if (isEndOfWord) {
          C.JSArray_methods.add$1(words, t5.charCodeAt(0) == 0 ? t5 : t5);
          sb._contents = "";
        }
      }
      return words;
    },
    _getCamelCase$0() {
      var t1 = J.map$1$1$ax(this.get$_words(), this.get$_upperCaseFirstLetter(), type$.String),
        words = P.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E"));
      if (J.get$isNotEmpty$asx(this.get$_words())) {
        if (0 >= words.length)
          return H.ioore(words, 0);
        C.JSArray_methods.$indexSet(words, 0, words[0].toLowerCase());
      }
      return C.JSArray_methods.join$1(words, "");
    },
    _getPascalCase$0() {
      var t1 = J.map$1$1$ax(this.get$_words(), this.get$_upperCaseFirstLetter(), type$.String);
      return C.JSArray_methods.join$1(P.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")), "");
    },
    _getSnakeCase$0() {
      var t1 = J.map$1$1$ax(this.get$_words(), new M.ReCase__getSnakeCase_closure(), type$.String);
      return C.JSArray_methods.join$1(P.List_List$of(t1, true, t1.$ti._eval$1("ListIterable.E")), "_");
    },
    _upperCaseFirstLetter$1(word) {
      H._asStringS(word);
      return J.substring$2$s(word, 0, 1).toUpperCase() + C.JSString_methods.substring$1(word, 1).toLowerCase();
    },
    set$__ReCase__words(__ReCase__words) {
      this.__ReCase__words = type$.nullable_List_String._as(__ReCase__words);
    }
  };
  M.ReCase__getSnakeCase_closure.prototype = {
    call$1(word) {
      return H._asStringS(word).toLowerCase();
    },
    $signature: 3
  };
  Y.SourceFile.prototype = {
    get$length(_) {
      return this._decodedChars.length;
    },
    get$lines() {
      return this._lineStarts.length;
    },
    SourceFile$decoded$2$url(decodedChars, url) {
      var t1, t2, t3, i, c, j, t4;
      for (t1 = this._decodedChars, t2 = t1.length, t3 = this._lineStarts, i = 0; i < t2; ++i) {
        c = t1[i];
        if (c === 13) {
          j = i + 1;
          if (j < t2) {
            if (j >= t2)
              return H.ioore(t1, j);
            t4 = t1[j] !== 10;
          } else
            t4 = true;
          if (t4)
            c = 10;
        }
        if (c === 10)
          C.JSArray_methods.add$1(t3, i + 1);
      }
    },
    getLine$1(offset) {
      var t1, _this = this;
      if (offset < 0)
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw H.wrapException(P.RangeError$("Offset " + offset + string$.x20must_ + _this.get$length(_this) + "."));
      t1 = _this._lineStarts;
      if (offset < C.JSArray_methods.get$first(t1))
        return -1;
      if (offset >= C.JSArray_methods.get$last(t1))
        return t1.length - 1;
      if (_this._isNearCachedLine$1(offset)) {
        t1 = _this._cachedLine;
        t1.toString;
        return t1;
      }
      return _this._cachedLine = _this._binarySearch$1(offset) - 1;
    },
    _isNearCachedLine$1(offset) {
      var t2, t3, t4,
        t1 = this._cachedLine;
      if (t1 == null)
        return false;
      t2 = this._lineStarts;
      t3 = t2.length;
      if (t1 >>> 0 !== t1 || t1 >= t3)
        return H.ioore(t2, t1);
      if (offset < t2[t1])
        return false;
      if (!(t1 >= t3 - 1)) {
        t4 = t1 + 1;
        if (t4 >= t3)
          return H.ioore(t2, t4);
        t4 = offset < t2[t4];
      } else
        t4 = true;
      if (t4)
        return true;
      if (!(t1 >= t3 - 2)) {
        t4 = t1 + 2;
        if (t4 >= t3)
          return H.ioore(t2, t4);
        t4 = offset < t2[t4];
        t2 = t4;
      } else
        t2 = true;
      if (t2) {
        this._cachedLine = t1 + 1;
        return true;
      }
      return false;
    },
    _binarySearch$1(offset) {
      var min, half,
        t1 = this._lineStarts,
        t2 = t1.length,
        max = t2 - 1;
      for (min = 0; min < max;) {
        half = min + C.JSInt_methods._tdivFast$1(max - min, 2);
        if (half < 0 || half >= t2)
          return H.ioore(t1, half);
        if (t1[half] > offset)
          max = half;
        else
          min = half + 1;
      }
      return max;
    },
    getColumn$1(offset) {
      var line, lineStart, _this = this;
      if (offset < 0)
        throw H.wrapException(P.RangeError$("Offset may not be negative, was " + offset + "."));
      else if (offset > _this._decodedChars.length)
        throw H.wrapException(P.RangeError$("Offset " + offset + " must be not be greater than the number of characters in the file, " + _this.get$length(_this) + "."));
      line = _this.getLine$1(offset);
      lineStart = C.JSArray_methods.$index(_this._lineStarts, line);
      if (lineStart > offset)
        throw H.wrapException(P.RangeError$("Line " + H.S(line) + " comes after offset " + offset + "."));
      return offset - lineStart;
    },
    getOffset$1(line) {
      var t1, t2, result, t3;
      if (typeof line !== "number")
        return line.$lt();
      if (line < 0)
        throw H.wrapException(P.RangeError$("Line may not be negative, was " + line + "."));
      else {
        t1 = this._lineStarts;
        t2 = t1.length;
        if (line >= t2)
          throw H.wrapException(P.RangeError$("Line " + line + " must be less than the number of lines in the file, " + this.get$lines() + "."));
      }
      result = t1[line];
      if (result <= this._decodedChars.length) {
        t3 = line + 1;
        t1 = t3 < t2 && result >= t1[t3];
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$("Line " + line + " doesn't have 0 columns."));
      return result;
    }
  };
  Y.FileLocation.prototype = {
    get$sourceUrl() {
      return this.file.url;
    },
    get$line() {
      return this.file.getLine$1(this.offset);
    },
    get$column() {
      return this.file.getColumn$1(this.offset);
    },
    get$offset(receiver) {
      return this.offset;
    }
  };
  Y._FileSpan.prototype = {
    get$sourceUrl() {
      return this.file.url;
    },
    get$length(_) {
      return this._end - this._start;
    },
    get$start(_) {
      return Y.FileLocation$_(this.file, this._start);
    },
    get$end() {
      return Y.FileLocation$_(this.file, this._end);
    },
    get$text(_) {
      return P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(this.file._decodedChars, this._start, this._end), 0, null);
    },
    get$context() {
      var t2, _this = this,
        t1 = _this.file,
        endOffset = _this._end,
        endLine = t1.getLine$1(endOffset);
      if (t1.getColumn$1(endOffset) === 0 && endLine !== 0) {
        if (endOffset - _this._start === 0) {
          if (endLine === t1._lineStarts.length - 1)
            t1 = "";
          else {
            t2 = t1.getOffset$1(endLine);
            if (typeof endLine !== "number")
              return endLine.$add();
            t1 = P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(t1._decodedChars, t2, t1.getOffset$1(endLine + 1)), 0, null);
          }
          return t1;
        }
      } else if (endLine === t1._lineStarts.length - 1)
        endOffset = t1._decodedChars.length;
      else {
        if (typeof endLine !== "number")
          return endLine.$add();
        endOffset = t1.getOffset$1(endLine + 1);
      }
      return P.String_String$fromCharCodes(C.NativeUint32List_methods.sublist$2(t1._decodedChars, t1.getOffset$1(t1.getLine$1(_this._start)), endOffset), 0, null);
    },
    compareTo$1(_, other) {
      var result;
      type$.SourceSpan._as(other);
      if (!(other instanceof Y._FileSpan))
        return this.super$SourceSpanMixin$compareTo(0, other);
      result = C.JSInt_methods.compareTo$1(this._start, other._start);
      return result === 0 ? C.JSInt_methods.compareTo$1(this._end, other._end) : result;
    },
    $eq(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!type$.FileSpan._is(other))
        return _this.super$SourceSpanMixin$$eq(0, other);
      return _this._start === other._start && _this._end === other._end && _this.file.url.$eq(0, other.file.url);
    },
    get$hashCode(_) {
      return Y.SourceSpanMixin.prototype.get$hashCode.call(this, this);
    },
    $isFileSpan: 1,
    $isSourceSpanWithContext: 1
  };
  U.Highlighter.prototype = {
    highlight$0() {
      var highlightsByColumn, t2, t3, t4, i, line, lastLine, t5, t6, t7, t8, t9, t10, t11, index, primaryIdx, primary, _i, _this = this, _null = null,
        t1 = _this._lines;
      _this._writeFileStart$1(C.JSArray_methods.get$first(t1).url);
      highlightsByColumn = P.List_List$filled(_this._maxMultilineSpans, _null, false, type$.nullable__Highlight);
      for (t2 = _this._highlighter$_buffer, t3 = highlightsByColumn.length !== 0, t4 = _this._primaryColor, i = 0; i < t1.length; ++i) {
        line = t1[i];
        if (i > 0) {
          lastLine = t1[i - 1];
          t5 = lastLine.url;
          t6 = line.url;
          if (!t5.$eq(0, t6)) {
            _this._writeSidebar$1$end("\u2575");
            t2._contents += "\n";
            _this._writeFileStart$1(t6);
          } else if (lastLine.number + 1 !== line.number) {
            _this._writeSidebar$1$text("...");
            t2._contents += "\n";
          }
        }
        for (t5 = line.highlights, t6 = H._arrayInstanceType(t5)._eval$1("ReversedListIterable<1>"), t7 = new H.ReversedListIterable(t5, t6), t6 = new H.ListIterator(t7, t7.get$length(t7), t6._eval$1("ListIterator<ListIterable.E>")), t7 = line.number, t8 = line.text, t9 = J.getInterceptor$s(t8); t6.moveNext$0();) {
          t10 = t6.__internal$_current;
          t11 = t10.span;
          if (t11.get$start(t11).get$line() != t11.get$end().get$line() && t11.get$start(t11).get$line() === t7 && _this._isOnlyWhitespace$1(t9.substring$2(t8, 0, t11.get$start(t11).get$column()))) {
            index = C.JSArray_methods.indexOf$1(highlightsByColumn, _null);
            if (index < 0)
              H.throwExpression(P.ArgumentError$(H.S(highlightsByColumn) + " contains no null elements.", _null));
            C.JSArray_methods.$indexSet(highlightsByColumn, index, t10);
          }
        }
        _this._writeSidebar$1$line(t7);
        t2._contents += " ";
        _this._writeMultilineHighlights$2(line, highlightsByColumn);
        if (t3)
          t2._contents += " ";
        primaryIdx = C.JSArray_methods.indexWhere$1(t5, new U.Highlighter_highlight_closure());
        if (primaryIdx === -1)
          primary = _null;
        else {
          if (primaryIdx < 0 || primaryIdx >= t5.length)
            return H.ioore(t5, primaryIdx);
          primary = t5[primaryIdx];
        }
        t6 = primary != null;
        if (t6) {
          t9 = primary.span;
          t10 = t9.get$start(t9).get$line() === t7 ? t9.get$start(t9).get$column() : 0;
          _this._writeHighlightedText$4$color(t8, t10, t9.get$end().get$line() === t7 ? t9.get$end().get$column() : t8.length, t4);
        } else
          _this._writeText$1(t8);
        t2._contents += "\n";
        if (t6)
          _this._writeIndicator$3(line, primary, highlightsByColumn);
        for (t6 = t5.length, _i = 0; _i < t6; ++_i) {
          t5[_i].toString;
          continue;
        }
      }
      _this._writeSidebar$1$end("\u2575");
      t1 = t2._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _writeFileStart$1(url) {
      var _this = this;
      if (!_this._multipleFiles || false)
        _this._writeSidebar$1$end("\u2577");
      else {
        _this._writeSidebar$1$end("\u250c");
        _this._colorize$2$color(new U.Highlighter__writeFileStart_closure(_this), "\x1b[34m");
        _this._highlighter$_buffer._contents += " " + H.S($.$get$context().prettyUri$1(url));
      }
      _this._highlighter$_buffer._contents += "\n";
    },
    _writeMultilineHighlights$3$current(line, highlightsByColumn, current) {
      var t1, currentColor, t2, t3, t4, foundCurrent, _i, highlight, t5, startLine, t6, endLine, _this = this, _box_0 = {};
      type$.List_nullable__Highlight._as(highlightsByColumn);
      _box_0.openedOnThisLine = false;
      _box_0.openedOnThisLineColor = null;
      t1 = current == null;
      if (t1)
        currentColor = null;
      else
        currentColor = _this._primaryColor;
      for (t2 = highlightsByColumn.length, t3 = _this._primaryColor, t1 = !t1, t4 = _this._highlighter$_buffer, foundCurrent = false, _i = 0; _i < t2; ++_i) {
        highlight = highlightsByColumn[_i];
        t5 = highlight == null;
        if (t5)
          startLine = null;
        else {
          t6 = highlight.span;
          startLine = t6.get$start(t6).get$line();
        }
        endLine = t5 ? null : highlight.span.get$end().get$line();
        if (t1 && highlight === current) {
          _this._colorize$2$color(new U.Highlighter__writeMultilineHighlights_closure(_this, startLine, line), currentColor);
          foundCurrent = true;
        } else if (foundCurrent)
          _this._colorize$2$color(new U.Highlighter__writeMultilineHighlights_closure0(_this, highlight), currentColor);
        else if (t5)
          if (_box_0.openedOnThisLine)
            _this._colorize$2$color(new U.Highlighter__writeMultilineHighlights_closure1(_this), _box_0.openedOnThisLineColor);
          else
            t4._contents += " ";
        else
          _this._colorize$2$color(new U.Highlighter__writeMultilineHighlights_closure2(_box_0, _this, current, startLine, line, highlight, endLine), t3);
      }
    },
    _writeMultilineHighlights$2(line, highlightsByColumn) {
      return this._writeMultilineHighlights$3$current(line, highlightsByColumn, null);
    },
    _writeHighlightedText$4$color(text, startColumn, endColumn, color) {
      var _this = this;
      _this._writeText$1(J.substring$2$s(text, 0, startColumn));
      _this._colorize$2$color(new U.Highlighter__writeHighlightedText_closure(_this, text, startColumn, endColumn), color);
      _this._writeText$1(C.JSString_methods.substring$2(text, endColumn, text.length));
    },
    _writeIndicator$3(line, highlight, highlightsByColumn) {
      var color, t1, t2, coversWholeLine, _this = this;
      type$.List_nullable__Highlight._as(highlightsByColumn);
      color = _this._primaryColor;
      t1 = highlight.span;
      if (t1.get$start(t1).get$line() == t1.get$end().get$line()) {
        _this._writeSidebar$0();
        t1 = _this._highlighter$_buffer;
        t1._contents += " ";
        _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
        if (highlightsByColumn.length !== 0)
          t1._contents += " ";
        _this._colorize$2$color(new U.Highlighter__writeIndicator_closure(_this, line, highlight), color);
        t1._contents += "\n";
      } else {
        t2 = line.number;
        if (t1.get$start(t1).get$line() === t2) {
          if (C.JSArray_methods.contains$1(highlightsByColumn, highlight))
            return;
          B.replaceFirstNull(highlightsByColumn, highlight, type$._Highlight);
          _this._writeSidebar$0();
          t1 = _this._highlighter$_buffer;
          t1._contents += " ";
          _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
          _this._colorize$2$color(new U.Highlighter__writeIndicator_closure0(_this, line, highlight), color);
          t1._contents += "\n";
        } else if (t1.get$end().get$line() === t2) {
          coversWholeLine = t1.get$end().get$column() === line.text.length;
          if (coversWholeLine && true) {
            B.replaceWithNull(highlightsByColumn, highlight, type$._Highlight);
            return;
          }
          _this._writeSidebar$0();
          t1 = _this._highlighter$_buffer;
          t1._contents += " ";
          _this._writeMultilineHighlights$3$current(line, highlightsByColumn, highlight);
          _this._colorize$2$color(new U.Highlighter__writeIndicator_closure1(_this, coversWholeLine, line, highlight), color);
          t1._contents += "\n";
          B.replaceWithNull(highlightsByColumn, highlight, type$._Highlight);
        }
      }
    },
    _writeArrow$3$beginning(line, column, beginning) {
      var t1 = beginning ? 0 : 1,
        t2 = this._highlighter$_buffer;
      t1 = t2._contents += C.JSString_methods.$mul("\u2500", 1 + column + this._countTabs$1(J.substring$2$s(line.text, 0, column + t1)) * 3);
      t2._contents = t1 + "^";
    },
    _writeArrow$2(line, column) {
      return this._writeArrow$3$beginning(line, column, true);
    },
    _writeText$1(text) {
      var t1, t2, t3;
      text.toString;
      t1 = new H.CodeUnits(text);
      t1 = new H.ListIterator(t1, t1.get$length(t1), type$.CodeUnits._eval$1("ListIterator<ListMixin.E>"));
      t2 = this._highlighter$_buffer;
      for (; t1.moveNext$0();) {
        t3 = t1.__internal$_current;
        if (t3 === 9)
          t2._contents += C.JSString_methods.$mul(" ", 4);
        else
          t2._contents += H.Primitives_stringFromCharCode(t3);
      }
    },
    _writeSidebar$3$end$line$text(end, line, text) {
      var t1 = {};
      t1.text = text;
      if (line != null)
        t1.text = C.JSInt_methods.toString$0(line + 1);
      this._colorize$2$color(new U.Highlighter__writeSidebar_closure(t1, this, end), "\x1b[34m");
    },
    _writeSidebar$1$end(end) {
      return this._writeSidebar$3$end$line$text(end, null, null);
    },
    _writeSidebar$1$text(text) {
      return this._writeSidebar$3$end$line$text(null, null, text);
    },
    _writeSidebar$1$line(line) {
      return this._writeSidebar$3$end$line$text(null, line, null);
    },
    _writeSidebar$0() {
      return this._writeSidebar$3$end$line$text(null, null, null);
    },
    _countTabs$1(text) {
      var t1, count;
      for (t1 = new H.CodeUnits(text), t1 = new H.ListIterator(t1, t1.get$length(t1), type$.CodeUnits._eval$1("ListIterator<ListMixin.E>")), count = 0; t1.moveNext$0();)
        if (t1.__internal$_current === 9)
          ++count;
      return count;
    },
    _isOnlyWhitespace$1(text) {
      var t1, t2;
      for (t1 = new H.CodeUnits(text), t1 = new H.ListIterator(t1, t1.get$length(t1), type$.CodeUnits._eval$1("ListIterator<ListMixin.E>")); t1.moveNext$0();) {
        t2 = t1.__internal$_current;
        if (t2 !== 32 && t2 !== 9)
          return false;
      }
      return true;
    },
    _colorize$2$color(callback, color) {
      var t1;
      type$.void_Function._as(callback);
      t1 = this._primaryColor != null;
      if (t1 && color != null)
        this._highlighter$_buffer._contents += color;
      callback.call$0();
      if (t1 && color != null)
        this._highlighter$_buffer._contents += "\x1b[0m";
    }
  };
  U.Highlighter_closure.prototype = {
    call$0() {
      return this.color;
    },
    $signature: 87
  };
  U.Highlighter$__closure.prototype = {
    call$1(line) {
      var t1 = type$._Line._as(line).highlights,
        t2 = H._arrayInstanceType(t1);
      t2 = new H.WhereIterable(t1, t2._eval$1("bool(1)")._as(new U.Highlighter$___closure()), t2._eval$1("WhereIterable<1>"));
      return t2.get$length(t2);
    },
    $signature: 88
  };
  U.Highlighter$___closure.prototype = {
    call$1(highlight) {
      var t1 = type$._Highlight._as(highlight).span;
      return t1.get$start(t1).get$line() != t1.get$end().get$line();
    },
    $signature: 10
  };
  U.Highlighter$__closure0.prototype = {
    call$1(line) {
      return type$._Line._as(line).url;
    },
    $signature: 90
  };
  U.Highlighter__collateLines_closure.prototype = {
    call$1(highlight) {
      return type$._Highlight._as(highlight).span.get$sourceUrl();
    },
    $signature: 91
  };
  U.Highlighter__collateLines_closure0.prototype = {
    call$2(highlight1, highlight2) {
      var t1 = type$._Highlight;
      t1._as(highlight1);
      t1._as(highlight2);
      return highlight1.span.compareTo$1(0, highlight2.span);
    },
    $signature: 92
  };
  U.Highlighter__collateLines_closure1.prototype = {
    call$1(highlightsForFile) {
      var lines, t1, t2, t3, t4, context, t5, linesBeforeSpan, url, lineNumber, _i, line, activeHighlights, highlightIndex, oldHighlightLength, t6, t7, t8;
      type$.List__Highlight._as(highlightsForFile);
      lines = H._setArrayType([], type$.JSArray__Line);
      for (t1 = J.getInterceptor$ax(highlightsForFile), t2 = t1.get$iterator(highlightsForFile), t3 = type$.JSArray__Highlight; t2.moveNext$0();) {
        t4 = t2.get$current().span;
        context = t4.get$context();
        t5 = B.findLineStart(context, t4.get$text(t4), t4.get$start(t4).get$column());
        t5.toString;
        t5 = C.JSString_methods.allMatches$1("\n", C.JSString_methods.substring$2(context, 0, t5));
        linesBeforeSpan = t5.get$length(t5);
        url = t4.get$sourceUrl();
        t4 = t4.get$start(t4).get$line();
        if (typeof t4 !== "number")
          return t4.$sub();
        lineNumber = t4 - linesBeforeSpan;
        for (t4 = context.split("\n"), t5 = t4.length, _i = 0; _i < t5; ++_i) {
          line = t4[_i];
          if (lines.length === 0 || lineNumber > C.JSArray_methods.get$last(lines).number)
            C.JSArray_methods.add$1(lines, new U._Line(line, lineNumber, url, H._setArrayType([], t3)));
          ++lineNumber;
        }
      }
      activeHighlights = H._setArrayType([], t3);
      for (t2 = lines.length, t3 = type$.bool_Function__Highlight, highlightIndex = 0, _i = 0; _i < lines.length; lines.length === t2 || (0, H.throwConcurrentModificationError)(lines), ++_i) {
        line = lines[_i];
        t4 = t3._as(new U.Highlighter__collateLines__closure(line));
        if (!!activeHighlights.fixed$length)
          H.throwExpression(P.UnsupportedError$("removeWhere"));
        C.JSArray_methods._removeWhere$2(activeHighlights, t4, true);
        oldHighlightLength = activeHighlights.length;
        for (t4 = t1.skip$1(highlightsForFile, highlightIndex), t4 = new H.ListIterator(t4, t4.get$length(t4), t4.$ti._eval$1("ListIterator<ListIterable.E>")); t4.moveNext$0();) {
          t5 = t4.__internal$_current;
          t6 = t5.span;
          t7 = t6.get$start(t6).get$line();
          t8 = line.number;
          if (typeof t7 !== "number")
            return t7.$gt();
          if (t7 > t8)
            break;
          if (!t6.get$sourceUrl().$eq(0, line.url))
            break;
          C.JSArray_methods.add$1(activeHighlights, t5);
        }
        highlightIndex += activeHighlights.length - oldHighlightLength;
        C.JSArray_methods.addAll$1(line.highlights, activeHighlights);
      }
      return lines;
    },
    $signature: 93
  };
  U.Highlighter__collateLines__closure.prototype = {
    call$1(highlight) {
      var t1 = type$._Highlight._as(highlight).span,
        t2 = this.line;
      if (t1.get$sourceUrl().$eq(0, t2.url)) {
        t1 = t1.get$end().get$line();
        t2 = t2.number;
        if (typeof t1 !== "number")
          return t1.$lt();
        t2 = t1 < t2;
        t1 = t2;
      } else
        t1 = true;
      return t1;
    },
    $signature: 10
  };
  U.Highlighter_highlight_closure.prototype = {
    call$1(highlight) {
      type$._Highlight._as(highlight).toString;
      return true;
    },
    $signature: 10
  };
  U.Highlighter__writeFileStart_closure.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += C.JSString_methods.$mul("\u2500", 2) + ">";
      return null;
    },
    $signature: 0
  };
  U.Highlighter__writeMultilineHighlights_closure.prototype = {
    call$0() {
      var t1 = this.startLine === this.line.number ? "\u250c" : "\u2514";
      this.$this._highlighter$_buffer._contents += t1;
    },
    $signature: 0
  };
  U.Highlighter__writeMultilineHighlights_closure0.prototype = {
    call$0() {
      var t1 = this.highlight == null ? "\u2500" : "\u253c";
      this.$this._highlighter$_buffer._contents += t1;
    },
    $signature: 0
  };
  U.Highlighter__writeMultilineHighlights_closure1.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += "\u2500";
      return null;
    },
    $signature: 0
  };
  U.Highlighter__writeMultilineHighlights_closure2.prototype = {
    call$0() {
      var t2, t3, _this = this,
        t1 = _this._box_0,
        vertical = t1.openedOnThisLine ? "\u253c" : "\u2502";
      if (_this.current != null)
        _this.$this._highlighter$_buffer._contents += vertical;
      else {
        t2 = _this.line;
        t3 = t2.number;
        if (_this.startLine === t3) {
          t2 = _this.$this;
          t2._colorize$2$color(new U.Highlighter__writeMultilineHighlights__closure(t1, t2), t1.openedOnThisLineColor);
          t1.openedOnThisLine = true;
          if (t1.openedOnThisLineColor == null)
            t1.openedOnThisLineColor = t2._primaryColor;
        } else {
          t2 = _this.endLine === t3 && _this.highlight.span.get$end().get$column() === t2.text.length;
          t3 = _this.$this;
          if (t2)
            t3._highlighter$_buffer._contents += "\u2514";
          else
            t3._colorize$2$color(new U.Highlighter__writeMultilineHighlights__closure0(t3, vertical), t1.openedOnThisLineColor);
        }
      }
    },
    $signature: 0
  };
  U.Highlighter__writeMultilineHighlights__closure.prototype = {
    call$0() {
      var t1 = this._box_0.openedOnThisLine ? "\u252c" : "\u250c";
      this.$this._highlighter$_buffer._contents += t1;
    },
    $signature: 0
  };
  U.Highlighter__writeMultilineHighlights__closure0.prototype = {
    call$0() {
      this.$this._highlighter$_buffer._contents += this.vertical;
    },
    $signature: 0
  };
  U.Highlighter__writeHighlightedText_closure.prototype = {
    call$0() {
      var _this = this;
      return _this.$this._writeText$1(C.JSString_methods.substring$2(_this.text, _this.startColumn, _this.endColumn));
    },
    $signature: 0
  };
  U.Highlighter__writeIndicator_closure.prototype = {
    call$0() {
      var tabsBefore, tabsInside,
        t1 = this.$this,
        t2 = type$.SourceSpan._as(this.highlight.span),
        startColumn = t2.get$start(t2).get$column(),
        endColumn = t2.get$end().get$column();
      t2 = this.line.text;
      tabsBefore = t1._countTabs$1(J.substring$2$s(t2, 0, startColumn));
      tabsInside = t1._countTabs$1(C.JSString_methods.substring$2(t2, startColumn, endColumn));
      startColumn += tabsBefore * 3;
      t1 = t1._highlighter$_buffer;
      t1._contents += C.JSString_methods.$mul(" ", startColumn);
      t1._contents += C.JSString_methods.$mul("^", Math.max(endColumn + (tabsBefore + tabsInside) * 3 - startColumn, 1));
    },
    $signature: 0
  };
  U.Highlighter__writeIndicator_closure0.prototype = {
    call$0() {
      var t1 = this.highlight.span;
      return this.$this._writeArrow$2(this.line, t1.get$start(t1).get$column());
    },
    $signature: 0
  };
  U.Highlighter__writeIndicator_closure1.prototype = {
    call$0() {
      var _this = this,
        t1 = _this.$this;
      if (_this.coversWholeLine)
        t1._highlighter$_buffer._contents += C.JSString_methods.$mul("\u2500", 3);
      else
        t1._writeArrow$3$beginning(_this.line, Math.max(_this.highlight.span.get$end().get$column() - 1, 0), false);
    },
    $signature: 0
  };
  U.Highlighter__writeSidebar_closure.prototype = {
    call$0() {
      var t1 = this.$this,
        t2 = t1._highlighter$_buffer,
        t3 = this._box_0.text;
      if (t3 == null)
        t3 = "";
      t1 = t2._contents += C.JSString_methods.padRight$1(t3, t1._paddingBeforeSidebar);
      t3 = this.end;
      t2._contents = t1 + (t3 == null ? "\u2502" : t3);
    },
    $signature: 0
  };
  U._Highlight.prototype = {
    toString$0(_) {
      var t1 = this.span;
      t1 = "primary " + (H.S(t1.get$start(t1).get$line()) + ":" + t1.get$start(t1).get$column() + "-" + H.S(t1.get$end().get$line()) + ":" + t1.get$end().get$column());
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  U._Highlight_closure.prototype = {
    call$0() {
      var t2, t3, t4, t5,
        t1 = this.span;
      if (!(type$.SourceSpanWithContext._is(t1) && B.findLineStart(t1.get$context(), t1.get$text(t1), t1.get$start(t1).get$column()) != null)) {
        t2 = t1.get$start(t1);
        t2 = V.SourceLocation$(t2.get$offset(t2), 0, 0, t1.get$sourceUrl());
        t3 = t1.get$end();
        t3 = t3.get$offset(t3);
        t4 = t1.get$sourceUrl();
        t5 = B.countCodeUnits(t1.get$text(t1), 10);
        t1 = X.SourceSpanWithContext$(t2, V.SourceLocation$(t3, U._Highlight__lastLineLength(t1.get$text(t1)), t5, t4), t1.get$text(t1), t1.get$text(t1));
      }
      return U._Highlight__normalizeEndOfLine(U._Highlight__normalizeTrailingNewline(U._Highlight__normalizeNewlines(t1)));
    },
    $signature: 94
  };
  U._Line.prototype = {
    toString$0(_) {
      return "" + this.number + ': "' + H.S(this.text) + '" (' + C.JSArray_methods.join$1(this.highlights, ", ") + ")";
    }
  };
  V.SourceLocation.prototype = {
    distance$1(other) {
      var t1 = this.sourceUrl;
      if (!t1.$eq(0, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + t1.toString$0(0) + '" and "' + other.get$sourceUrl().toString$0(0) + "\" don't match.", null));
      return Math.abs(this.offset - other.get$offset(other));
    },
    compareTo$1(_, other) {
      var t1;
      type$.SourceLocation._as(other);
      t1 = this.sourceUrl;
      if (!t1.$eq(0, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + t1.toString$0(0) + '" and "' + other.get$sourceUrl().toString$0(0) + "\" don't match.", null));
      return this.offset - other.get$offset(other);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceLocation._is(other) && this.sourceUrl.$eq(0, other.get$sourceUrl()) && this.offset === other.get$offset(other);
    },
    get$hashCode(_) {
      var t1 = this.sourceUrl;
      t1 = t1.get$hashCode(t1);
      if (t1 == null)
        t1 = 0;
      return t1 + this.offset;
    },
    toString$0(_) {
      var _this = this,
        t1 = "<" + H.getRuntimeType(_this).toString$0(0) + ": " + _this.offset + " ";
      return t1 + (_this.sourceUrl.toString$0(0) + ":" + (_this.line + 1) + ":" + (_this.column + 1)) + ">";
    },
    get$sourceUrl() {
      return this.sourceUrl;
    },
    get$offset(receiver) {
      return this.offset;
    },
    get$line() {
      return this.line;
    },
    get$column() {
      return this.column;
    }
  };
  D.SourceLocationMixin.prototype = {
    distance$1(other) {
      if (!this.file.url.$eq(0, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + this.get$sourceUrl().toString$0(0) + '" and "' + other.get$sourceUrl().toString$0(0) + "\" don't match.", null));
      return Math.abs(this.offset - other.get$offset(other));
    },
    compareTo$1(_, other) {
      type$.SourceLocation._as(other);
      if (!this.file.url.$eq(0, other.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + this.get$sourceUrl().toString$0(0) + '" and "' + other.get$sourceUrl().toString$0(0) + "\" don't match.", null));
      return this.offset - other.get$offset(other);
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceLocation._is(other) && this.file.url.$eq(0, other.get$sourceUrl()) && this.offset === other.get$offset(other);
    },
    get$hashCode(_) {
      var t1 = this.file.url;
      t1 = t1.get$hashCode(t1);
      if (t1 == null)
        t1 = 0;
      return t1 + this.offset;
    },
    toString$0(_) {
      var t1 = this.offset,
        t2 = "<" + H.getRuntimeType(this).toString$0(0) + ": " + t1 + " ",
        t3 = this.file,
        t4 = t3.url.toString$0(0) + ":",
        t5 = t3.getLine$1(t1);
      if (typeof t5 !== "number")
        return t5.$add();
      return t2 + (t4 + (t5 + 1) + ":" + (t3.getColumn$1(t1) + 1)) + ">";
    },
    $isSourceLocation: 1
  };
  V.SourceSpanBase.prototype = {
    SourceSpanBase$3(start, end, text) {
      var t3,
        t1 = this.end,
        t2 = this.start;
      if (!t1.get$sourceUrl().$eq(0, t2.get$sourceUrl()))
        throw H.wrapException(P.ArgumentError$('Source URLs "' + t2.get$sourceUrl().toString$0(0) + '" and  "' + t1.get$sourceUrl().toString$0(0) + "\" don't match.", null));
      else if (t1.get$offset(t1) < t2.get$offset(t2))
        throw H.wrapException(P.ArgumentError$("End " + t1.toString$0(0) + " must come after start " + t2.toString$0(0) + ".", null));
      else {
        t3 = this.text;
        if (t3.length !== t2.distance$1(t1))
          throw H.wrapException(P.ArgumentError$('Text "' + t3 + '" must be ' + t2.distance$1(t1) + " characters long.", null));
      }
    },
    get$start(receiver) {
      return this.start;
    },
    get$end() {
      return this.end;
    },
    get$text(receiver) {
      return this.text;
    }
  };
  Y.SourceSpanMixin.prototype = {
    get$sourceUrl() {
      return this.get$start(this).get$sourceUrl();
    },
    get$length(_) {
      var t2,
        t1 = this.get$end();
      t1 = t1.get$offset(t1);
      t2 = this.get$start(this);
      return t1 - t2.get$offset(t2);
    },
    compareTo$1(_, other) {
      var result;
      type$.SourceSpan._as(other);
      result = this.get$start(this).compareTo$1(0, other.get$start(other));
      return result === 0 ? this.get$end().compareTo$1(0, other.get$end()) : result;
    },
    highlight$1$color(color) {
      var _this = this;
      if (!type$.SourceSpanWithContext._is(_this) && _this.get$length(_this) === 0)
        return "";
      return U.Highlighter$(_this, color).highlight$0();
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return type$.SourceSpan._is(other) && this.get$start(this).$eq(0, other.get$start(other)) && this.get$end().$eq(0, other.get$end());
    },
    get$hashCode(_) {
      var t2,
        t1 = this.get$start(this);
      t1 = t1.get$hashCode(t1);
      t2 = this.get$end();
      return t1 + 31 * t2.get$hashCode(t2);
    },
    toString$0(_) {
      var _this = this;
      return "<" + H.getRuntimeType(_this).toString$0(0) + ": from " + _this.get$start(_this).toString$0(0) + " to " + _this.get$end().toString$0(0) + ' "' + _this.get$text(_this) + '">';
    },
    $isSourceSpan: 1
  };
  X.SourceSpanWithContext.prototype = {
    get$context() {
      return this._context;
    }
  };
  S.Tuple2.prototype = {
    toString$0(_) {
      return "[" + H.S(this.item1) + ", " + H.S(this.item2) + "]";
    },
    $eq(_, other) {
      if (other == null)
        return false;
      return other instanceof S.Tuple2 && other.item1 == this.item1 && other.item2 === this.item2;
    },
    get$hashCode(_) {
      var hash,
        t1 = J.get$hashCode$(this.item1),
        t2 = H.Primitives_objectHashCode(this.item2);
      t2 = A._combine(A._combine(0, C.JSInt_methods.get$hashCode(t1)), C.JSInt_methods.get$hashCode(t2));
      hash = t2 + ((t2 & 67108863) << 3) & 536870911;
      hash ^= hash >>> 11;
      return hash + ((hash & 16383) << 15) & 536870911;
    }
  };
  F.main_closure.prototype = {
    call$1($event) {
      return this.$call$body$main_closure(type$.legacy_MouseEvent._as($event));
    },
    $call$body$main_closure($event) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(type$.Null),
        $async$next = [], $async$self = this, rootClassNameElement, rootClassName, elementById, json, parser, outputClasses, e, t1, exception;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              try {
                t1 = document;
                rootClassNameElement = type$.legacy_TextInputElement._as(t1.getElementById("root_class_name"));
                rootClassName = rootClassNameElement.value;
                elementById = type$.legacy_TextAreaElement._as(t1.getElementById("input_text"));
                json = elementById.value;
                P.print("json is " + H.S(json));
                parser = new G.Parser(Y.DartFormatter$());
                t1 = rootClassName;
                t1.toString;
                outputClasses = parser.parse$2(json, H.stringReplaceAllUnchecked(t1, " ", ""));
                J.set$text$x($async$self.outputText, outputClasses);
              } catch (exception) {
                e = H.unwrapException(exception);
                J.set$text$x($async$self.outputText, "Error: " + H.S(J.toString$0$(e)));
              }
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 95
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = H.JsLinkedHashMap.prototype;
    _.super$JsLinkedHashMap$internalContainsKey = _.internalContainsKey$1;
    _.super$JsLinkedHashMap$internalGet = _.internalGet$1;
    _.super$JsLinkedHashMap$internalSet = _.internalSet$2;
    _ = P.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
    _ = P.Object.prototype;
    _.super$Object$noSuchMethod = _.noSuchMethod$1;
    _ = Y.ForwardingListener.prototype;
    _.super$ForwardingListener$endConditionalUri = _.endConditionalUri$3;
    _.super$ForwardingListener$endHide = _.endHide$1;
    _.super$ForwardingListener$endShow = _.endShow$1;
    _.super$ForwardingListener$handleClassExtends = _.handleClassExtends$2;
    _.super$ForwardingListener$handleClassOrMixinImplements = _.handleClassOrMixinImplements$2;
    _.super$ForwardingListener$handleClassWithClause = _.handleClassWithClause$1;
    _.super$ForwardingListener$handleImportPrefix = _.handleImportPrefix$2;
    _.super$ForwardingListener$handleMixinOn = _.handleMixinOn$2;
    _ = V.SimpleTypeWith1Argument.prototype;
    _.super$SimpleTypeWith1Argument$skipType = _.skipType$1;
    _ = D.ParameterBuilder.prototype;
    _.super$ParameterBuilder$name = _.set$name;
    _ = Z.ArgumentRule.prototype;
    _.super$ArgumentRule$addConstrainedRules = _.addConstrainedRules$1;
    _.super$ArgumentRule$forgetUnusedRules = _.forgetUnusedRules$0;
    _ = K.Rule.prototype;
    _.super$Rule$constrain = _.constrain$2;
    _.super$Rule$addConstrainedRules = _.addConstrainedRules$1;
    _.super$Rule$forgetUnusedRules = _.forgetUnusedRules$0;
    _.super$Rule$toString = _.toString$0;
    _ = Y.SourceSpanMixin.prototype;
    _.super$SourceSpanMixin$compareTo = _.compareTo$1;
    _.super$SourceSpanMixin$$eq = _.$eq;
  })();
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static_2 = hunkHelpers._static_2,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_0_i = hunkHelpers._instance_0i,
      _static = hunkHelpers.installStaticTearOff;
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 11);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 11);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 11);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 0);
    _static_2(P, "collection___defaultEquals$closure", "_defaultEquals", 97);
    _static_1(P, "collection___defaultHashCode$closure", "_defaultHashCode", 98);
    _static_1(P, "core_Uri_decodeComponent$closure", "Uri_decodeComponent", 3);
    _instance(P.StringBuffer.prototype, "get$writeln", 0, 0, null, ["call$1", "call$0"], ["writeln$1", "writeln$0"], 69, 0, 0);
    _static_1(Z, "codes___withArgumentsBuiltInIdentifierAsType$closure", "_withArgumentsBuiltInIdentifierAsType", 1);
    _static_1(Z, "codes___withArgumentsBuiltInIdentifierInDeclaration$closure", "_withArgumentsBuiltInIdentifierInDeclaration", 1);
    _static_1(Z, "codes___withArgumentsDuplicatedModifier$closure", "_withArgumentsDuplicatedModifier", 1);
    _static_1(Z, "codes___withArgumentsExpectedClassMember$closure", "_withArgumentsExpectedClassMember", 1);
    _static_1(Z, "codes___withArgumentsExpectedDeclaration$closure", "_withArgumentsExpectedDeclaration", 1);
    _static_1(Z, "codes___withArgumentsExpectedEnumBody$closure", "_withArgumentsExpectedEnumBody", 1);
    _static_1(Z, "codes___withArgumentsExpectedFunctionBody$closure", "_withArgumentsExpectedFunctionBody", 1);
    _static_1(Z, "codes___withArgumentsExpectedIdentifier$closure", "_withArgumentsExpectedIdentifier", 1);
    _static_1(Z, "codes___withArgumentsExpectedIdentifierButGotKeyword$closure", "_withArgumentsExpectedIdentifierButGotKeyword", 1);
    _static_1(Z, "codes___withArgumentsExpectedString$closure", "_withArgumentsExpectedString", 1);
    _static_1(Z, "codes___withArgumentsExpectedType$closure", "_withArgumentsExpectedType", 1);
    _static_1(Z, "codes___withArgumentsExtraneousModifier$closure", "_withArgumentsExtraneousModifier", 1);
    _static_1(Z, "codes___withArgumentsExtraneousModifierInExtension$closure", "_withArgumentsExtraneousModifierInExtension", 1);
    _static_1(Z, "codes___withArgumentsInvalidOperator$closure", "_withArgumentsInvalidOperator", 1);
    _static_1(Z, "codes___withArgumentsUnexpectedModifierInNonNnbd$closure", "_withArgumentsUnexpectedModifierInNonNnbd", 1);
    _static_1(Z, "codes___withArgumentsUnexpectedToken$closure", "_withArgumentsUnexpectedToken", 1);
    var _;
    _instance(_ = O.Scanner.prototype, "get$reportError", 0, 3, null, ["call$3"], ["reportError$3"], 19, 0, 0);
    _instance_2_u(_, "get$_languageVersionChanged", "_languageVersionChanged$2", 36);
    _instance(N.FastaErrorReporter.prototype, "get$reportScannerError", 0, 3, null, ["call$3"], ["reportScannerError$3"], 19, 0, 0);
    _instance_1_u(U.ChunkBuilder.prototype, "get$_activateRule", "_activateRule$1", 9);
    _instance_1_u(B.SolveState.prototype, "get$getValue", "getValue$1", 63);
    _instance_0_u(_ = Q.SourceVisitor.prototype, "get$space", "space$0", 0);
    _instance_0_u(_, "get$newline", "newline$0", 0);
    _instance_0_u(_, "get$splitOrNewline", "splitOrNewline$0", 0);
    _instance_0_u(_, "get$splitOrTwoNewlines", "splitOrTwoNewlines$0", 0);
    _instance_0_u(_, "get$oneOrTwoNewlines", "oneOrTwoNewlines$0", 0);
    _instance_0_i(_, "get$split", "split$0", 22);
    _instance_0_u(_, "get$zeroSplit", "zeroSplit$0", 22);
    _instance(_, "get$soloSplit", 0, 0, null, ["call$1", "call$0"], ["soloSplit$1", "soloSplit$0"], 70, 0, 0);
    _instance_1_u(M.ReCase.prototype, "get$_upperCaseFirstLetter", "_upperCaseFirstLetter$1", 3);
    _static(P, "math__max$closure", 2, null, ["call$1$2", "call$2"], ["max", function(a, b) {
      return P.max(a, b, type$.num);
    }], 66, 0);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.ArrayIterator, P.Error, P._ListBase_Object_ListMixin, H.Closure, P.Iterable, H.ListIterator, P.Iterator, H.ExpandIterator, H.EmptyIterator, H.WhereTypeIterator, H.FixedLengthListMixin, H.UnmodifiableListMixin, H.Symbol, P.MapView, H.ConstantMap, H.JSInvocationMirror, H.TypeErrorDecoder, H.NullThrownFromJavaScriptException, H.ExceptionAndStackTrace, H._StackTrace, P.MapMixin, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.JSSyntaxRegExp, H._MatchImplementation, H._AllMatchesIterator, H.StringMatch, H._StringAllMatchesIterator, H._Cell, H._InitializedCell, H.Rti, H._FunctionParameters, H._Type, P._TimerImpl, P._AsyncAwaitCompleter, P._IterationMarker, P._SyncStarIterator, P.AsyncError, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.Stream, P.StreamSubscription, P.StreamTransformerBase, P._StreamIterator, P._Zone, P.__SetBase_Object_SetMixin, P._HashSetIterator, P._LinkedHashSetCell, P._LinkedHashSetIterator, P.IterableMixin, P.ListMixin, P._UnmodifiableMapMixin, P.SetMixin, P._UnmodifiableSetMixin, P.Codec, P._Utf8Encoder, P._Utf8Decoder, P.OutOfMemoryError, P.StackOverflowError, P._Exception, P.FormatException, P.MapEntry, P.Null, P._StringStackTrace, P.RuneIterator, P.StringBuffer, P._Uri, P.UriData, P._SimpleUri, W.EventStreamProvider, A.ErrorCode, A.ErrorSeverity, A.ErrorType, Z.Code, Z.Message, Z.Template, N.Severity, D.Assert, E.AsyncModifier, U.BlockKind, E.ConstructorReferenceContext, S.DeclarationKind, A.DirectiveContext, A.DirectiveState, M.FormalParameterKind, Y.ForwardingListener, D.IdentifierContext, L.Listener, N.LiteralEntryInfo, Q.LoopState, A.MemberKind, X.ModifierRecoveryContext, N.Parser1, Y.Quote, Y.NullValue, Y.StackImpl, Y.DebugStack, Y.ParserRecovery, R.TokenStreamRewriter, R.NextTokenStreamChange, R.EndGroupTokenStreamChange, R.OffsetTokenStreamChange, R.PrecedingCommentsTokenStreamChange, R.PreviousTokenStreamChange, M.TypeParamOrArgInfo, V.NoType, V.PrefixedType, V.SimpleTypeWith1Argument, V.SimpleType, V.VoidType, V.ComplexTypeInfo, S.AbstractScanner, S._LineStarts_Object_ListMixin, S.ScannerConfiguration, L.SimpleToken, E.NullInterner, Y.ArrayKeywordState, Y.LeafKeywordState, K.ScannerResult, N.Node, N.StringCanonicalizer, L.KeywordStyle, L.TokenType, B._LazySubstring, U.Link, G.LinkIterator, A.AstFactory, F.Precedence, B.ThrowingAstVisitor, V.AnalysisError, Z.ErrorReporter, Z.RecordingErrorListener, E.CharacterLocation, E.LineInfo, K._ExperimentStatus_Object__CurrentState, K._CurrentState, T.EnabledDisabledFlags, T.ExperimentalFeature, B.ParseStringResultImpl, U.AstNodeImpl, U._ChildEntities_Object_IterableMixin, U.CompoundAssignmentExpressionImpl, U._NodeListImpl_Object_ListMixin, U.NullShortableExpressionImpl, U.StringLexemeHelper, V.ToSourceVisitor, O.Scanner, L.DiagnosticMessageImpl, G._ConstructorNameWithInvalidTypeArgs, G._InvalidCollectionElement, G._Modifiers, G._OperatorName, G._OptionalFormalParameters, G._ParameterDefaultValue, G._RedirectingFactoryBody, N.FastaErrorReporter, X.Parser0, Z.Source, Q.ParameterKind, Q.CopyOnWriteList, D.BuiltList, D.ListBuilder, Y.IndentingBuiltValueToStringHelper, D._NullAllocator, D._DartEmitter_Object_CodeEmitter, V.HasAnnotations, V.HasAnnotationsBuilder, B.HasDartDocs, B.HasDartDocsBuilder, Y.HasGenerics, Y.HasGenericsBuilder, X._Class_Object_HasAnnotations, X._ClassBuilder_Object_HasAnnotationsBuilder, X.CodeEmitter, X.StaticCode, Y._Constructor_Object_HasAnnotations, Y._ConstructorBuilder_Object_HasAnnotationsBuilder, B.Expression0, B.ExpressionEmitter, F.FieldModifier, D._Method_Object_HasAnnotations, D._MethodBuilder_Object_HasAnnotationsBuilder, D.MethodType, D._Parameter_Object_HasAnnotations, D._ParameterBuilder_Object_HasAnnotationsBuilder, E._TypeReferenceBuilder_Object_HasGenericsBuilder, U.DefaultEquality, U.IterableEquality, U.ArgumentListVisitor, U.ArgumentSublist, U.CallChainVisitor, U._Selector, Q.Selection, Q.ChunkBlock, Q.OpenSpan, N.FastHash, Q.CommentType, U.ChunkBuilder, Y.DartFormatter, A.FormatterException, A.UnexpectedOutputException, Z.LineSplitter, G.RuleSet, G.SplitSet, B.SolveState, O.SolveStateQueue, A.LineWriter, A._BlockKey, A.FormatResult, F.NestingBuilder, A.SourceCode, Q.StyleFix, L.Whitespace, G.Parser, O.Subtype, O.JsonType, M.Context, O.Style, X.ParsedPath, X.PathException, T.Version, M.ReCase, Y.SourceFile, D.SourceLocationMixin, Y.SourceSpanMixin, U.Highlighter, U._Highlight, U._Line, V.SourceLocation, S.Tuple2]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeByteBuffer, H.NativeTypedData, W.EventTarget, W.DomException, W.Event]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSNumNotInt]);
    _inheritMany(P.Error, [H.LateError, H.ReachabilityError, H.NotNullableError, P.TypeError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.RuntimeError, P.AssertionError, H._Error, P.NullThrownError, P.ArgumentError, P.NoSuchMethodError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError, Y.BuiltValueNullFieldError, Y.BuiltValueNestedFieldError]);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inherit(H.UnmodifiableListBase, P.ListBase);
    _inherit(H.CodeUnits, H.UnmodifiableListBase);
    _inheritMany(H.Closure, [H.Closure0Args, H.Instantiation, H.Closure2Args, H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.initHooks_closure, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._awaitOnObject_closure, P._Future__chainForeignFuture_closure, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P.Stream_forEach_closure0, P.Stream_forEach__closure0, P.Stream_length_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P._LinkedCustomHashMap_closure, P.MapMixin_entries_closure, P.Uri_parseIPv6Address_error, P._Uri__makePath_closure, P._createTables_setChars, P._createTables_setRange, W._EventStreamSubscription_closure, W._EventStreamSubscription_onData_closure, Z.applyArgumentsToTemplate_closure, Y.KeywordState_KEYWORD_STATE_closure, Z._TypeToConvert_allElements_addElementsFrom, Z._TypeToConvert_allElements_closure, G.AstBuilder_checkFieldFormalParameters_closure, G.AstBuilder_endSwitchBlock_closure, G.AstBuilder_handleLiteralList_closure, G.AstBuilder_handleLiteralSetOrMap_closure, F.formatList_closure, Y.newBuiltValueToStringHelper_closure, D.DartEmitter_visitClass_closure, D.DartEmitter_visitClass_closure0, D.DartEmitter_visitClass_closure1, D.DartEmitter_visitClass_closure2, D.DartEmitter_visitClass_closure3, D.DartEmitter_visitClass_closure4, D.DartEmitter_visitClass_closure5, D.DartEmitter_visitConstructor_closure, D.DartEmitter_visitConstructor_closure0, D.DartEmitter_visitField_closure, D.DartEmitter_visitMethod_closure, D.DartEmitter_visitMethod_closure0, D.DartEmitter_visitMethod_closure1, D.DartEmitter__visitParameter_closure, D.DartEmitter_visitType_closure, D.DartEmitter_visitTypeParameters_closure, B.ExpressionEmitter_visitInvokeExpression__closure, B.ExpressionEmitter_visitInvokeExpression__closure0, B.ExpressionEmitter_visitInvokeExpression__closure1, U.Reference_type_closure, U.ArgumentListVisitor_ArgumentListVisitor$forArguments_isArrow, U.ArgumentSublist_ArgumentSublist_closure, U.CallChainVisitor_CallChainVisitor_closure, U.ChunkBuilder_writeComments_closure, U.ChunkBuilder__hardenRules_walkConstraints, Y.DartFormatter_formatSource_closure, Z.LineSplitter_closure, G.RuleSet_toString_closure, B.SolveState_expand_closure, B.SolveState_expand_closure0, B.SolveState__calculateCost_endLine, B.SolveState_toString_closure, K.Rule_forgetUnusedRules_closure, Q.SourceVisitor_visitBinaryExpression_traverse, Q.SourceVisitor_visitFormalParameterList_closure, Q.SourceVisitor_visitIfStatement_visitClause, Q.SourceVisitor__containsLineComments_hasLineCommentBefore, G.Parser_parse_closure, G.Parser_parse_closure0, G.Parser__generateStringClass_closure, G.Parser__generateStringClass__closure, G.Parser__generateStringClass__closure0, G.Parser__generateStringClass__closure1, G.Parser__generateStringClass___closure0, G.Parser__generateStringClass__closure2, G.Parser__generateStringClass__closure3, G.Parser__generateStringClass___closure, G.Parser__buildMethods_closure, G.Parser__buildMethods__closure, M.Context_joinAll_closure, M.Context_split_closure, M._validateArgList_closure, L.WindowsStyle_absolutePathToUri_closure, T.Version__splitParts_closure, M.ReCase__getSnakeCase_closure, U.Highlighter$__closure, U.Highlighter$___closure, U.Highlighter$__closure0, U.Highlighter__collateLines_closure, U.Highlighter__collateLines_closure1, U.Highlighter__collateLines__closure, U.Highlighter_highlight_closure, F.main_closure]);
    _inheritMany(H.Closure0Args, [H.nullFuture_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure1, P._Future__asyncCompleteWithValue_closure, P._Future__chainFuture_closure, P._Future__asyncCompleteError_closure, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_forEach_closure, P.Stream_forEach__closure, P.Stream_length_closure0, P._cancelAndError_closure, P._rootHandleError_closure, P._RootZone_bindCallbackGuarded_closure, P.Utf8Decoder__decoder_closure, P.Utf8Decoder__decoderNonfatal_closure, N.Parser_parseExtension_handleShowHideElements, Z.ErrorReporter__convertTypeNames_closure, N.FastaErrorReporter_reportByCode_lexeme, D.DartEmitter_visitField_closure0, B.ExpressionEmitter_visitInvokeExpression_closure, B.SolveState__initUnboundConstraints_closure, Q.SourceVisitor_visitAssertStatement_closure, Q.SourceVisitor_visitBreakStatement_closure, Q.SourceVisitor_visitClassTypeAlias_closure, Q.SourceVisitor_visitConstructorDeclaration_closure, Q.SourceVisitor_visitContinueStatement_closure, Q.SourceVisitor_visitExportDirective_closure, Q.SourceVisitor_visitExpressionStatement_closure, Q.SourceVisitor_visitFieldDeclaration_closure, Q.SourceVisitor_visitFieldFormalParameter_closure, Q.SourceVisitor_visitForPartsWithDeclarations_closure, Q.SourceVisitor_visitFunctionTypeAlias_closure, Q.SourceVisitor_visitFunctionTypeAlias_closure0, Q.SourceVisitor_visitFunctionTypedFormalParameter_closure, Q.SourceVisitor_visitGenericTypeAlias_closure, Q.SourceVisitor_visitImportDirective_closure, Q.SourceVisitor_visitLibraryDirective_closure, Q.SourceVisitor_visitNativeFunctionBody_closure, Q.SourceVisitor_visitPartDirective_closure, Q.SourceVisitor_visitPartOfDirective_closure, Q.SourceVisitor_visitReturnStatement_closure, Q.SourceVisitor_visitSimpleFormalParameter_closure, Q.SourceVisitor_visitSimpleFormalParameter__closure, Q.SourceVisitor_visitSwitchStatement_closure, Q.SourceVisitor_visitTopLevelVariableDeclaration_closure, Q.SourceVisitor_visitTypeParameter_closure, Q.SourceVisitor_visitVariableDeclarationStatement_closure, Q.SourceVisitor_visitYieldStatement_closure, Q.SourceVisitor_visitParameterMetadata_closure, Q.SourceVisitor__visitMemberDeclaration_closure, Q.SourceVisitor__visitCombinator_closure, Q.SourceVisitor__endBody_closure, U.Highlighter_closure, U.Highlighter__writeFileStart_closure, U.Highlighter__writeMultilineHighlights_closure, U.Highlighter__writeMultilineHighlights_closure0, U.Highlighter__writeMultilineHighlights_closure1, U.Highlighter__writeMultilineHighlights_closure2, U.Highlighter__writeMultilineHighlights__closure, U.Highlighter__writeMultilineHighlights__closure0, U.Highlighter__writeHighlightedText_closure, U.Highlighter__writeIndicator_closure, U.Highlighter__writeIndicator_closure0, U.Highlighter__writeIndicator_closure1, U.Highlighter__writeSidebar_closure, U._Highlight_closure]);
    _inheritMany(P.Iterable, [H.EfficientLengthIterable, H.MappedIterable, H.WhereIterable, H.ExpandIterable, H.TakeWhileIterable, H.WhereTypeIterable, H._ConstantMapKeyIterable, P.IterableBase, H._StringAllMatchesIterable, P.Runes]);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.EmptyIterable, H.LinkedHashMapKeyIterable]);
    _inheritMany(H.ListIterable, [H.SubListIterable, H.MappedListIterable, H.ReversedListIterable, P._JsonMapKeyIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.WhereIterator, H.TakeWhileIterator]);
    _inherit(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P.MapView);
    _inherit(P.UnmodifiableMapView, P._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(H.ConstantMapView, P.UnmodifiableMapView);
    _inherit(H.ConstantStringMap, H.ConstantMap);
    _inherit(H.Instantiation1, H.Instantiation);
    _inherit(H.NullError, P.TypeError);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H._AssertionError, P.AssertionError);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [H.JsLinkedHashMap, P._JsonMap]);
    _inheritMany(H.Closure2Args, [H.initHooks_closure0, P._awaitOnObject_closure0, P._wrapJsFunctionForAsync_closure, P._Future__chainForeignFuture_closure0, P._cancelAndErrorClosure_closure, P.MapBase_mapToString_closure, P.NoSuchMethodError_toString_closure, P.Uri__parseIPv4Address_error, P.Uri_parseIPv6Address_parseHex, P._createTables_build, A.translateErrorToken__makeError, Y.KeywordState_KEYWORD_STATE_closure0, A.hashObjects_closure, B.SolveState__calculateCost_closure, Q.SourceVisitor_visitIfElement_visitChild, G.Parser_parse_closure1, G.Parser__getTypedClassFields_closure, U.Highlighter__collateLines_closure0]);
    _inheritMany(P.IterableBase, [H._AllMatchesIterable, P._SyncStarIterable]);
    _inheritMany(H.NativeTypedData, [H.NativeByteData, H.NativeTypedArray]);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedArrayOfDouble, [H.NativeFloat32List, H.NativeFloat64List]);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inherit(H._TypeError, H._Error);
    _inherit(P._RootZone, P._Zone);
    _inheritMany(H.JsLinkedHashMap, [P._LinkedIdentityHashMap, P._LinkedCustomHashMap]);
    _inherit(P._SetBase, P.__SetBase_Object_SetMixin);
    _inheritMany(P._SetBase, [P._HashSet, P._LinkedHashSet, P.__UnmodifiableSet__SetBase__UnmodifiableSetMixin]);
    _inherit(P._UnmodifiableSet, P.__UnmodifiableSet__SetBase__UnmodifiableSetMixin);
    _inheritMany(P.Codec, [P.Base64Codec, P.Encoding, P.JsonCodec]);
    _inherit(P.Converter, P.StreamTransformerBase);
    _inheritMany(P.Converter, [P.Base64Encoder, P.JsonDecoder, P.Utf8Encoder, P.Utf8Decoder]);
    _inherit(P.Utf8Codec, P.Encoding);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inherit(P._DataUri, P._Uri);
    _inherit(W.Node0, W.EventTarget);
    _inherit(W.Element, W.Node0);
    _inheritMany(W.Element, [W.HtmlElement, P.SvgElement]);
    _inheritMany(W.HtmlElement, [W.AnchorElement, W.AreaElement, W.FormElement, W.InputElement, W.SelectElement, W.TextAreaElement]);
    _inherit(W.UIEvent, W.Event);
    _inherit(W.MouseEvent, W.UIEvent);
    _inherit(W._EventStream, P.Stream);
    _inherit(W._ElementEventStreamImpl, W._EventStream);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(Z.MessageCode, Z.Code);
    _inheritMany(Y.ForwardingListener, [Y.NullListener, R.ClassHeaderRecoveryListener, R.ImportRecoveryListener, R.MixinHeaderRecoveryListener]);
    _inheritMany(D.IdentifierContext, [G.CatchParameterIdentifierContext, G.ClassOrMixinOrExtensionIdentifierContext, G.CombinatorIdentifierContext, G.ConstructorReferenceIdentifierContext, G.DottedNameIdentifierContext, G.EnumDeclarationIdentifierContext, G.EnumValueDeclarationIdentifierContext, G.ExpressionIdentifierContext, G.ExtensionShowHideElementIdentifierContext, G.FieldDeclarationIdentifierContext, G.FieldInitializerIdentifierContext, G.FormalParameterDeclarationIdentifierContext, G.ImportPrefixIdentifierContext, G.LiteralSymbolIdentifierContext, G.LocalFunctionDeclarationIdentifierContext, G.LabelDeclarationIdentifierContext, G.LabelReferenceIdentifierContext, G.LibraryIdentifierContext, G.LocalVariableDeclarationIdentifierContext, G.MetadataReferenceIdentifierContext, G.MethodDeclarationIdentifierContext, G.NamedArgumentReferenceIdentifierContext, G.TopLevelDeclarationIdentifierContext, G.TypedefDeclarationIdentifierContext, G.TypeReferenceIdentifierContext, G.TypeVariableDeclarationIdentifierContext]);
    _inheritMany(N.LiteralEntryInfo, [R.ForCondition, R.SpreadOperator, R.ForEntry, R.ForInEntry, R.ForComplete, R.ForInComplete, R.IfCondition, R.IfEntry, R.IfComplete, R.IfElse, R.ElseEntry, R.IfElseComplete, R.Nested]);
    _inheritMany(R.SpreadOperator, [R.ForSpread, R.ForInSpread, R.IfSpread, R.ElseSpread]);
    _inherit(Y.StackListener, L.Listener);
    _inheritMany(R.TokenStreamRewriter, [R.TokenStreamRewriterImpl, R.UndoableTokenStreamRewriter]);
    _inherit(V.SimpleNullableTypeWith1Argument, V.SimpleTypeWith1Argument);
    _inherit(V.SimpleNullableType, V.SimpleType);
    _inheritMany(M.TypeParamOrArgInfo, [V.NoTypeParamOrArg, V.SimpleTypeArgument1, V.ComplexTypeParamOrArgInfo]);
    _inheritMany(V.SimpleTypeArgument1, [V.SimpleTypeArgument1GtEq, V.SimpleTypeArgument1GtGt]);
    _inherit(S.LineStarts, S._LineStarts_Object_ListMixin);
    _inheritMany(L.SimpleToken, [S.ErrorToken, L.BeginToken, L.KeywordToken, L.StringToken0, L.SyntheticToken, B.StringToken]);
    _inheritMany(S.ErrorToken, [S.EncodingErrorToken, S.NonAsciiIdentifierToken, S.NonAsciiWhitespaceToken, S.AsciiControlCharacterToken, S.UnsupportedOperator, S.UnterminatedString, S.UnterminatedToken, S.UnmatchedToken]);
    _inheritMany(A.ErrorCode, [A.ScannerErrorCode, Z.AnalyzerErrorCode, E.ParserErrorCode]);
    _inheritMany(Y.ArrayKeywordState, [Y.LowerCaseArrayKeywordState, Y.UpperCaseArrayKeywordState]);
    _inherit(T.StringScanner, S.AbstractScanner);
    _inherit(L.Keyword, L.TokenType);
    _inherit(L.SyntheticBeginToken, L.BeginToken);
    _inherit(L.SyntheticKeywordToken, L.KeywordToken);
    _inherit(L.SyntheticStringToken, L.StringToken0);
    _inherit(L.ReplacementToken, L.SyntheticToken);
    _inherit(B.CommentToken, B.StringToken);
    _inheritMany(B.CommentToken, [B.LanguageVersionToken, B.DartDocToken]);
    _inheritMany(B._LazySubstring, [B._CompactLazySubstring, B._FullLazySubstring]);
    _inherit(G.LinkEntry, U.Link);
    _inherit(K.ExperimentStatus, K._ExperimentStatus_Object__CurrentState);
    _inheritMany(U.AstNodeImpl, [U.ExpressionImpl, U.AnnotatedNodeImpl, U.AnnotationImpl, U.ArgumentListImpl, U.ConstructorInitializerImpl, U.StatementImpl, U.FunctionBodyImpl, U.CatchClauseImpl, U.CollectionElementImpl, U.CombinatorImpl, U.CommentImpl, U.CommentReferenceImpl, U.CompilationUnitImpl, U.ConfigurationImpl, U.ConstructorNameImpl, U.FormalParameterImpl, U.DottedNameImpl, U.ExtendsClauseImpl, U.ForLoopPartsImpl, U.FormalParameterListImpl, U.TypeAnnotationImpl, U.HideClauseImpl, U.ImplementsClauseImpl, U.InterpolationElementImpl, U.LabelImpl, U.NativeClauseImpl, U.OnClauseImpl, U.ScriptTagImpl, U.ShowClauseImpl, U.ShowHideElementImpl, U.SpreadElementImpl, U.SwitchMemberImpl, U.TypeArgumentListImpl, U.TypeParameterListImpl, U.WithClauseImpl]);
    _inheritMany(U.ExpressionImpl, [U.LiteralImpl, U.AsExpressionImpl, U._AssignmentExpressionImpl_ExpressionImpl_NullShortableExpressionImpl, U.AwaitExpressionImpl, U.BinaryExpressionImpl, U._CascadeExpressionImpl_ExpressionImpl_NullShortableExpressionImpl, U.ConditionalExpressionImpl, U.IdentifierImpl, U.FunctionExpressionImpl, U.InvocationExpressionImpl, U.FunctionReferenceImpl, U._IndexExpressionImpl_ExpressionImpl_NullShortableExpressionImpl, U.InstanceCreationExpressionImpl, U.IsExpressionImpl, U.NamedExpressionImpl, U.ParenthesizedExpressionImpl, U._PostfixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl, U._PrefixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl, U._PropertyAccessImpl_ExpressionImpl_NullShortableExpressionImpl, U.RethrowExpressionImpl, U.SuperExpressionImpl, U.ThisExpressionImpl, U.ThrowExpressionImpl]);
    _inheritMany(U.LiteralImpl, [U.StringLiteralImpl, U.BooleanLiteralImpl, U.DoubleLiteralImpl, U.IntegerLiteralImpl, U.TypedLiteralImpl, U.NullLiteralImpl, U.SymbolLiteralImpl]);
    _inheritMany(U.StringLiteralImpl, [U.AdjacentStringsImpl, U.SingleStringLiteralImpl]);
    _inheritMany(U.ConstructorInitializerImpl, [U.AssertInitializerImpl, U.ConstructorFieldInitializerImpl, U.RedirectingConstructorInvocationImpl, U.SuperConstructorInvocationImpl]);
    _inheritMany(U.StatementImpl, [U.AssertStatementImpl, U.BlockImpl, U.BreakStatementImpl, U.ContinueStatementImpl, U.DoStatementImpl, U.EmptyStatementImpl, U.ExpressionStatementImpl, U.ForStatementImpl, U.FunctionDeclarationStatementImpl, U.IfStatementImpl, U.LabeledStatementImpl, U.ReturnStatementImpl, U.SwitchStatementImpl, U.TryStatementImpl, U.VariableDeclarationStatementImpl, U.WhileStatementImpl, U.YieldStatementImpl]);
    _inherit(U._AssignmentExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl, U._AssignmentExpressionImpl_ExpressionImpl_NullShortableExpressionImpl);
    _inherit(U.AssignmentExpressionImpl, U._AssignmentExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl);
    _inheritMany(U.FunctionBodyImpl, [U.BlockFunctionBodyImpl, U.EmptyFunctionBodyImpl, U.ExpressionFunctionBodyImpl, U.NativeFunctionBodyImpl]);
    _inherit(U.CascadeExpressionImpl, U._CascadeExpressionImpl_ExpressionImpl_NullShortableExpressionImpl);
    _inherit(U.ChildEntities, U._ChildEntities_Object_IterableMixin);
    _inheritMany(U.AnnotatedNodeImpl, [U.DeclarationImpl, U.DirectiveImpl, U.VariableDeclarationListImpl]);
    _inheritMany(U.DeclarationImpl, [U.CompilationUnitMemberImpl, U.ClassMemberImpl, U.DeclaredIdentifierImpl, U.EnumConstantDeclarationImpl, U.TypeParameterImpl, U.VariableDeclarationImpl]);
    _inheritMany(U.CompilationUnitMemberImpl, [U.NamedCompilationUnitMemberImpl, U.ExtensionDeclarationImpl, U.TopLevelVariableDeclarationImpl]);
    _inheritMany(U.NamedCompilationUnitMemberImpl, [U.ClassOrMixinDeclarationImpl, U.TypeAliasImpl, U.EnumDeclarationImpl, U.FunctionDeclarationImpl]);
    _inheritMany(U.ClassOrMixinDeclarationImpl, [U.ClassDeclarationImpl, U.MixinDeclarationImpl]);
    _inheritMany(U.TypeAliasImpl, [U.ClassTypeAliasImpl, U.FunctionTypeAliasImpl, U.GenericTypeAliasImpl]);
    _inheritMany(U.ClassMemberImpl, [U.ConstructorDeclarationImpl, U.FieldDeclarationImpl, U.MethodDeclarationImpl]);
    _inheritMany(U.IdentifierImpl, [U.SimpleIdentifierImpl, U.LibraryIdentifierImpl, U.PrefixedIdentifierImpl]);
    _inherit(U.DeclaredSimpleIdentifier, U.SimpleIdentifierImpl);
    _inheritMany(U.FormalParameterImpl, [U.DefaultFormalParameterImpl, U.NormalFormalParameterImpl]);
    _inheritMany(U.DirectiveImpl, [U.UriBasedDirectiveImpl, U.LibraryDirectiveImpl, U.PartOfDirectiveImpl]);
    _inheritMany(U.UriBasedDirectiveImpl, [U.NamespaceDirectiveImpl, U.PartDirectiveImpl]);
    _inheritMany(U.NamespaceDirectiveImpl, [U.ExportDirectiveImpl, U.ImportDirectiveImpl]);
    _inheritMany(U.NormalFormalParameterImpl, [U.FieldFormalParameterImpl, U.FunctionTypedFormalParameterImpl, U.SimpleFormalParameterImpl]);
    _inheritMany(U.ForLoopPartsImpl, [U.ForEachPartsImpl, U.ForPartsImpl]);
    _inheritMany(U.ForEachPartsImpl, [U.ForEachPartsWithDeclarationImpl, U.ForEachPartsWithIdentifierImpl]);
    _inheritMany(U.CollectionElementImpl, [U.ForElementImpl, U.IfElementImpl, U.MapLiteralEntryImpl]);
    _inheritMany(U.ForPartsImpl, [U.ForPartsWithDeclarationsImpl, U.ForPartsWithExpressionImpl]);
    _inheritMany(U.InvocationExpressionImpl, [U._FunctionExpressionInvocationImpl_InvocationExpressionImpl_NullShortableExpressionImpl, U._MethodInvocationImpl_InvocationExpressionImpl_NullShortableExpressionImpl]);
    _inherit(U.FunctionExpressionInvocationImpl, U._FunctionExpressionInvocationImpl_InvocationExpressionImpl_NullShortableExpressionImpl);
    _inheritMany(U.TypeAnnotationImpl, [U.GenericFunctionTypeImpl, U.TypeNameImpl]);
    _inheritMany(U.CombinatorImpl, [U.HideCombinatorImpl, U.ShowCombinatorImpl]);
    _inherit(U.IndexExpressionImpl, U._IndexExpressionImpl_ExpressionImpl_NullShortableExpressionImpl);
    _inheritMany(U.InterpolationElementImpl, [U.InterpolationExpressionImpl, U.InterpolationStringImpl]);
    _inheritMany(U.TypedLiteralImpl, [U.ListLiteralImpl, U.SetOrMapLiteralImpl]);
    _inherit(U.MethodInvocationImpl, U._MethodInvocationImpl_InvocationExpressionImpl_NullShortableExpressionImpl);
    _inherit(U.NodeListImpl, U._NodeListImpl_Object_ListMixin);
    _inherit(U._PostfixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl, U._PostfixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl);
    _inherit(U.PostfixExpressionImpl, U._PostfixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl);
    _inherit(U._PrefixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl, U._PrefixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl);
    _inherit(U.PrefixExpressionImpl, U._PrefixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl);
    _inherit(U.PropertyAccessImpl, U._PropertyAccessImpl_ExpressionImpl_NullShortableExpressionImpl);
    _inheritMany(U.SingleStringLiteralImpl, [U.SimpleStringLiteralImpl, U.StringInterpolationImpl]);
    _inheritMany(U.SwitchMemberImpl, [U.SwitchCaseImpl, U.SwitchDefaultImpl]);
    _inherit(A.AstFactoryImpl, A.AstFactory);
    _inheritMany(Z.AnalyzerErrorCode, [O.HintCode, A.CompileTimeErrorCode]);
    _inherit(G.AstBuilder, Y.StackListener);
    _inherit(K.StringSource, Z.Source);
    _inherit(D._BuiltList, D.BuiltList);
    _inherit(D._DartEmitter_Object_CodeEmitter_ExpressionEmitter, D._DartEmitter_Object_CodeEmitter);
    _inherit(D.DartEmitter, D._DartEmitter_Object_CodeEmitter_ExpressionEmitter);
    _inherit(X._Class_Object_HasAnnotations_HasDartDocs, X._Class_Object_HasAnnotations);
    _inherit(X._Class_Object_HasAnnotations_HasDartDocs_HasGenerics, X._Class_Object_HasAnnotations_HasDartDocs);
    _inherit(X.Class, X._Class_Object_HasAnnotations_HasDartDocs_HasGenerics);
    _inherit(X._ClassBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder, X._ClassBuilder_Object_HasAnnotationsBuilder);
    _inherit(X._ClassBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder_HasGenericsBuilder, X._ClassBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder);
    _inherit(X.ClassBuilder, X._ClassBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder_HasGenericsBuilder);
    _inherit(X._$Class, X.Class);
    _inherit(X._$ClassBuilder, X.ClassBuilder);
    _inherit(Y._Constructor_Object_HasAnnotations_HasDartDocs, Y._Constructor_Object_HasAnnotations);
    _inherit(Y.Constructor, Y._Constructor_Object_HasAnnotations_HasDartDocs);
    _inherit(Y._ConstructorBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder, Y._ConstructorBuilder_Object_HasAnnotationsBuilder);
    _inherit(Y.ConstructorBuilder, Y._ConstructorBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder);
    _inherit(Y._$Constructor, Y.Constructor);
    _inherit(Y._$ConstructorBuilder, Y.ConstructorBuilder);
    _inheritMany(B.Expression0, [B.CodeExpression, B.InvokeExpression, U.Reference, E._TypeReference_Expression_HasGenerics]);
    _inherit(D._Method_Object_HasAnnotations_HasGenerics, D._Method_Object_HasAnnotations);
    _inherit(D._Method_Object_HasAnnotations_HasGenerics_HasDartDocs, D._Method_Object_HasAnnotations_HasGenerics);
    _inherit(D.Method, D._Method_Object_HasAnnotations_HasGenerics_HasDartDocs);
    _inherit(D._MethodBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder, D._MethodBuilder_Object_HasAnnotationsBuilder);
    _inherit(D._MethodBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder_HasDartDocsBuilder, D._MethodBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder);
    _inherit(D.MethodBuilder, D._MethodBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder_HasDartDocsBuilder);
    _inherit(D._Parameter_Object_HasAnnotations_HasGenerics, D._Parameter_Object_HasAnnotations);
    _inherit(D._Parameter_Object_HasAnnotations_HasGenerics_HasDartDocs, D._Parameter_Object_HasAnnotations_HasGenerics);
    _inherit(D.Parameter, D._Parameter_Object_HasAnnotations_HasGenerics_HasDartDocs);
    _inherit(D._ParameterBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder, D._ParameterBuilder_Object_HasAnnotationsBuilder);
    _inherit(D._ParameterBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder_HasDartDocsBuilder, D._ParameterBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder);
    _inherit(D.ParameterBuilder, D._ParameterBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder_HasDartDocsBuilder);
    _inherit(D._$Method, D.Method);
    _inherit(D._$MethodBuilder, D.MethodBuilder);
    _inherit(D._$Parameter, D.Parameter);
    _inherit(D._$ParameterBuilder, D.ParameterBuilder);
    _inherit(E.TypeReference, E._TypeReference_Expression_HasGenerics);
    _inherit(E.TypeReferenceBuilder, E._TypeReferenceBuilder_Object_HasGenericsBuilder);
    _inherit(E._$TypeReference, E.TypeReference);
    _inherit(E._$TypeReferenceBuilder, E.TypeReferenceBuilder);
    _inheritMany(U._Selector, [U._MethodSelector, U._PrefixedSelector, U._PropertySelector]);
    _inheritMany(Q.Selection, [Q.Chunk, Q.SourceComment]);
    _inheritMany(N.FastHash, [Q.Span, M.NestingLevel, K.Rule]);
    _inheritMany(K.Rule, [Z.ArgumentRule, Q.CombinatorRule, O.MetadataRule, Y.TypeArgumentRule]);
    _inheritMany(Z.ArgumentRule, [Z.PositionalRule, Z.NamedRule]);
    _inherit(Q.SourceVisitor, B.ThrowingAstVisitor);
    _inherit(B.InternalStyle, O.Style);
    _inheritMany(B.InternalStyle, [E.PosixStyle, F.UrlStyle, L.WindowsStyle]);
    _inherit(Y.FileLocation, D.SourceLocationMixin);
    _inheritMany(Y.SourceSpanMixin, [Y._FileSpan, V.SourceSpanBase]);
    _inherit(X.SourceSpanWithContext, V.SourceSpanBase);
    _mixin(H.UnmodifiableListBase, H.UnmodifiableListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P._UnmodifiableMapMixin);
    _mixin(P.__SetBase_Object_SetMixin, P.SetMixin);
    _mixin(P.__UnmodifiableSet__SetBase__UnmodifiableSetMixin, P._UnmodifiableSetMixin);
    _mixin(S._LineStarts_Object_ListMixin, P.ListMixin);
    _mixin(K._ExperimentStatus_Object__CurrentState, K._CurrentState);
    _mixin(U._AssignmentExpressionImpl_ExpressionImpl_NullShortableExpressionImpl, U.NullShortableExpressionImpl);
    _mixin(U._AssignmentExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl, U.CompoundAssignmentExpressionImpl);
    _mixin(U._CascadeExpressionImpl_ExpressionImpl_NullShortableExpressionImpl, U.NullShortableExpressionImpl);
    _mixin(U._ChildEntities_Object_IterableMixin, P.IterableMixin);
    _mixin(U._FunctionExpressionInvocationImpl_InvocationExpressionImpl_NullShortableExpressionImpl, U.NullShortableExpressionImpl);
    _mixin(U._IndexExpressionImpl_ExpressionImpl_NullShortableExpressionImpl, U.NullShortableExpressionImpl);
    _mixin(U._MethodInvocationImpl_InvocationExpressionImpl_NullShortableExpressionImpl, U.NullShortableExpressionImpl);
    _mixin(U._NodeListImpl_Object_ListMixin, P.ListMixin);
    _mixin(U._PostfixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl, U.NullShortableExpressionImpl);
    _mixin(U._PostfixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl, U.CompoundAssignmentExpressionImpl);
    _mixin(U._PrefixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl, U.NullShortableExpressionImpl);
    _mixin(U._PrefixExpressionImpl_ExpressionImpl_NullShortableExpressionImpl_CompoundAssignmentExpressionImpl, U.CompoundAssignmentExpressionImpl);
    _mixin(U._PropertyAccessImpl_ExpressionImpl_NullShortableExpressionImpl, U.NullShortableExpressionImpl);
    _mixin(D._DartEmitter_Object_CodeEmitter, X.CodeEmitter);
    _mixin(D._DartEmitter_Object_CodeEmitter_ExpressionEmitter, B.ExpressionEmitter);
    _mixin(X._Class_Object_HasAnnotations, V.HasAnnotations);
    _mixin(X._Class_Object_HasAnnotations_HasDartDocs, B.HasDartDocs);
    _mixin(X._Class_Object_HasAnnotations_HasDartDocs_HasGenerics, Y.HasGenerics);
    _mixin(X._ClassBuilder_Object_HasAnnotationsBuilder, V.HasAnnotationsBuilder);
    _mixin(X._ClassBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder, B.HasDartDocsBuilder);
    _mixin(X._ClassBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder_HasGenericsBuilder, Y.HasGenericsBuilder);
    _mixin(Y._Constructor_Object_HasAnnotations, V.HasAnnotations);
    _mixin(Y._Constructor_Object_HasAnnotations_HasDartDocs, B.HasDartDocs);
    _mixin(Y._ConstructorBuilder_Object_HasAnnotationsBuilder, V.HasAnnotationsBuilder);
    _mixin(Y._ConstructorBuilder_Object_HasAnnotationsBuilder_HasDartDocsBuilder, B.HasDartDocsBuilder);
    _mixin(D._Method_Object_HasAnnotations, V.HasAnnotations);
    _mixin(D._Method_Object_HasAnnotations_HasGenerics, Y.HasGenerics);
    _mixin(D._Method_Object_HasAnnotations_HasGenerics_HasDartDocs, B.HasDartDocs);
    _mixin(D._MethodBuilder_Object_HasAnnotationsBuilder, V.HasAnnotationsBuilder);
    _mixin(D._MethodBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder, Y.HasGenericsBuilder);
    _mixin(D._MethodBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder_HasDartDocsBuilder, B.HasDartDocsBuilder);
    _mixin(D._Parameter_Object_HasAnnotations, V.HasAnnotations);
    _mixin(D._Parameter_Object_HasAnnotations_HasGenerics, Y.HasGenerics);
    _mixin(D._Parameter_Object_HasAnnotations_HasGenerics_HasDartDocs, B.HasDartDocs);
    _mixin(D._ParameterBuilder_Object_HasAnnotationsBuilder, V.HasAnnotationsBuilder);
    _mixin(D._ParameterBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder, Y.HasGenericsBuilder);
    _mixin(D._ParameterBuilder_Object_HasAnnotationsBuilder_HasGenericsBuilder_HasDartDocsBuilder, B.HasDartDocsBuilder);
    _mixin(E._TypeReference_Expression_HasGenerics, Y.HasGenerics);
    _mixin(E._TypeReferenceBuilder_Object_HasGenericsBuilder, Y.HasGenericsBuilder);
  })();
  var init = {
    typeUniverse: {eC: new Map(), tR: {}, eT: {}, tPV: {}, sEA: []},
    mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"},
    mangledNames: {},
    types: ["~()", "Message(Token)", "~(Expression0)", "String(String)", "MethodBuilder*(MethodBuilder*)", "Null()", "bool(String)", "Reference(Reference)", "StringSink(Reference)", "~(Rule)", "bool(_Highlight)", "~(~())", "Null(@)", "~(@)", "bool(@)", "@()", "~(Uint8List,String,int)", "~(Event)", "String(Match)", "~(ScannerErrorCode,int,List<Object?>?)", "bool(CollectionElement)", "bool(Parameter)", "Chunk()", "ConstructorBuilder*(ConstructorBuilder*)", "ParameterBuilder*(ParameterBuilder*)", "bool(Element0)", "~(int,@)", "Null(Object,StackTrace)", "int()", "~(ScannerErrorCode,List<Object?>?)", "String(Keyword)", "int(String,String)", "Set<Element0>()", "~(DartType)", "Future<Null>()", "_Future<@>(@)", "~(Scanner0,LanguageVersionToken)", "~(FormalParameter)", "List<SwitchMember>(List<SwitchMember>)", "Null(~)", "String()", "int(int,@)", "IndentingBuiltValueToStringHelper(String)", "~(Object,StackTrace)", "Null(~())", "@(@,String)", "~(Constructor)", "~(Field)", "~(Method)", "@(String)", "StringSink()", "~(Reference)", "~(Spec)", "~(String)", "~(TypeReferenceBuilder)", "bool(NamedExpression)", "bool(Expression)", "bool(_Selector)", "~(Symbol0,@)", "bool(SourceComment)", "bool(AnalysisError)", "Rule?(Chunk)", "Object(int?)", "int(Rule)", "~(int)", "~(Rule,int)", "0^(0^,0^)<num>", "String(Rule)", "bool(Rule)", "~([Object?])", "Rule([int?])", "~(Expression)", "bool(FormalParameter)", "~(CollectionElement,CollectionElement)", "~(Statement)", "Null(Subtype*)", "String*(Tuple2<String*,List<Subtype*>*>*)", "String*(String*,String*)", "ClassBuilder*(ClassBuilder*)", "~(String,int)", "~(String[@])", "int(int,int)", "Method*(Subtype*)", "Null(@,@)", "Set<int>()", "String(String?)", "Object(String)", "String?()", "int(_Line)", "@(@)", "Uri?(_Line)", "Uri?(_Highlight)", "int(_Highlight,_Highlight)", "List<_Line>(List<_Highlight>)", "SourceSpanWithContext()", "Future<Null>*(MouseEvent*)", "Uint8List(@,@)", "bool(Object?,Object?)", "int(Object?)", "Null(@,StackTrace)", "~(Object?,Object?)"],
    interceptorsByTag: null,
    leafTags: null,
    arrayRti: Symbol("$ti")
  };
  H._Universe_addRules(init.typeUniverse, JSON.parse('{"PlainJavaScriptObject":"JavaScriptObject","UnknownJavaScriptObject":"JavaScriptObject","JavaScriptFunction":"JavaScriptObject","AbortPaymentEvent":"Event","ExtendableEvent":"Event","AElement":"SvgElement","GraphicsElement":"SvgElement","AudioElement":"HtmlElement","MediaElement":"HtmlElement","MessagePort":"EventTarget","PointerEvent":"MouseEvent","CompositionEvent":"UIEvent","HtmlDocument":"Node0","Document":"Node0","JSBool":{"bool":[]},"JSNull":{"Null":[]},"JSArray":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"JSUnmodifiableArray":{"JSArray":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ArrayIterator":{"Iterator":["1"]},"JSNumber":{"double":[],"num":[]},"JSInt":{"double":[],"int":[],"num":[]},"JSNumNotInt":{"double":[],"num":[]},"JSString":{"String":[],"Pattern":[]},"LateError":{"Error":[]},"ReachabilityError":{"Error":[]},"CodeUnits":{"ListMixin":["int"],"UnmodifiableListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int","UnmodifiableListMixin.E":"int"},"NotNullableError":{"TypeError":[],"Error":[]},"EfficientLengthIterable":{"Iterable":["1"]},"ListIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"SubListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"ListIterator":{"Iterator":["1"]},"MappedIterable":{"Iterable":["2"],"Iterable.E":"2"},"EfficientLengthMappedIterable":{"MappedIterable":["1","2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"Iterable.E":"2"},"MappedIterator":{"Iterator":["2"]},"MappedListIterable":{"ListIterable":["2"],"EfficientLengthIterable":["2"],"Iterable":["2"],"ListIterable.E":"2","Iterable.E":"2"},"WhereIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereIterator":{"Iterator":["1"]},"ExpandIterable":{"Iterable":["2"],"Iterable.E":"2"},"ExpandIterator":{"Iterator":["2"]},"TakeWhileIterable":{"Iterable":["1"],"Iterable.E":"1"},"TakeWhileIterator":{"Iterator":["1"]},"EmptyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"EmptyIterator":{"Iterator":["1"]},"WhereTypeIterable":{"Iterable":["1"],"Iterable.E":"1"},"WhereTypeIterator":{"Iterator":["1"]},"UnmodifiableListBase":{"ListMixin":["1"],"UnmodifiableListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"ReversedListIterable":{"ListIterable":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListIterable.E":"1","Iterable.E":"1"},"Symbol":{"Symbol0":[]},"ConstantMapView":{"UnmodifiableMapView":["1","2"],"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"ConstantMap":{"Map":["1","2"]},"ConstantStringMap":{"ConstantMap":["1","2"],"Map":["1","2"]},"_ConstantMapKeyIterable":{"Iterable":["1"],"Iterable.E":"1"},"Instantiation":{"Closure":[],"Function":[]},"Instantiation1":{"Closure":[],"Function":[]},"JSInvocationMirror":{"Invocation":[]},"NullError":{"TypeError":[],"Error":[]},"JsNoSuchMethodError":{"Error":[]},"UnknownJsTypeError":{"Error":[]},"NullThrownFromJavaScriptException":{"Exception":[]},"_StackTrace":{"StackTrace":[]},"Closure":{"Function":[]},"Closure0Args":{"Closure":[],"Function":[]},"Closure2Args":{"Closure":[],"Function":[]},"TearOffClosure":{"Closure":[],"Function":[]},"StaticClosure":{"Closure":[],"Function":[]},"BoundClosure":{"Closure":[],"Function":[]},"RuntimeError":{"Error":[]},"_AssertionError":{"Error":[]},"JsLinkedHashMap":{"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"LinkedHashMapKeyIterable":{"EfficientLengthIterable":["1"],"Iterable":["1"],"Iterable.E":"1"},"LinkedHashMapKeyIterator":{"Iterator":["1"]},"JSSyntaxRegExp":{"RegExp":[],"Pattern":[]},"_MatchImplementation":{"RegExpMatch":[],"Match":[]},"_AllMatchesIterable":{"Iterable":["RegExpMatch"],"Iterable.E":"RegExpMatch"},"_AllMatchesIterator":{"Iterator":["RegExpMatch"]},"StringMatch":{"Match":[]},"_StringAllMatchesIterable":{"Iterable":["Match"],"Iterable.E":"Match"},"_StringAllMatchesIterator":{"Iterator":["Match"]},"NativeTypedArray":{"JavaScriptIndexingBehavior":["1"]},"NativeTypedArrayOfDouble":{"NativeTypedArray":["double"],"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"]},"NativeTypedArrayOfInt":{"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"]},"NativeFloat32List":{"NativeTypedArray":["double"],"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double","FixedLengthListMixin.E":"double"},"NativeFloat64List":{"NativeTypedArray":["double"],"ListMixin":["double"],"JavaScriptIndexingBehavior":["double"],"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"],"FixedLengthListMixin":["double"],"ListMixin.E":"double","FixedLengthListMixin.E":"double"},"NativeInt16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeInt32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeInt8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint16List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint16List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint32List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint32List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8ClampedList":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"NativeUint8List":{"NativeTypedArrayOfInt":[],"NativeTypedArray":["int"],"ListMixin":["int"],"Uint8List":[],"JavaScriptIndexingBehavior":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"FixedLengthListMixin":["int"],"ListMixin.E":"int","FixedLengthListMixin.E":"int"},"_Error":{"Error":[]},"_TypeError":{"TypeError":[],"Error":[]},"_Future":{"Future":["1"]},"_SyncStarIterator":{"Iterator":["1"]},"_SyncStarIterable":{"Iterable":["1"],"Iterable.E":"1"},"AsyncError":{"Error":[]},"_Zone":{"Zone":[]},"_RootZone":{"_Zone":[],"Zone":[]},"_LinkedIdentityHashMap":{"JsLinkedHashMap":["1","2"],"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_LinkedCustomHashMap":{"JsLinkedHashMap":["1","2"],"MapMixin":["1","2"],"LinkedHashMap":["1","2"],"Map":["1","2"],"MapMixin.K":"1","MapMixin.V":"2"},"_HashSet":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_HashSetIterator":{"Iterator":["1"]},"_LinkedHashSet":{"SetMixin":["1"],"LinkedHashSet":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_LinkedHashSetIterator":{"Iterator":["1"]},"IterableBase":{"Iterable":["1"]},"ListBase":{"ListMixin":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"MapBase":{"MapMixin":["1","2"],"Map":["1","2"]},"MapMixin":{"Map":["1","2"]},"MapView":{"Map":["1","2"]},"UnmodifiableMapView":{"_UnmodifiableMapView_MapView__UnmodifiableMapMixin":["1","2"],"MapView":["1","2"],"_UnmodifiableMapMixin":["1","2"],"Map":["1","2"]},"_SetBase":{"SetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_UnmodifiableSet":{"SetMixin":["1"],"_UnmodifiableSetMixin":["1"],"Set":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"_JsonMap":{"MapMixin":["String","@"],"Map":["String","@"],"MapMixin.K":"String","MapMixin.V":"@"},"_JsonMapKeyIterable":{"ListIterable":["String"],"EfficientLengthIterable":["String"],"Iterable":["String"],"ListIterable.E":"String","Iterable.E":"String"},"Base64Codec":{"Codec":["List<int>","String"],"Codec.S":"List<int>"},"Base64Encoder":{"Converter":["List<int>","String"]},"Encoding":{"Codec":["String","List<int>"]},"JsonCodec":{"Codec":["Object?","String"],"Codec.S":"Object?"},"JsonDecoder":{"Converter":["String","Object?"]},"Utf8Codec":{"Codec":["String","List<int>"],"Codec.S":"String"},"Utf8Encoder":{"Converter":["String","List<int>"]},"Utf8Decoder":{"Converter":["List<int>","String"]},"double":{"num":[]},"int":{"num":[]},"List":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"RegExpMatch":{"Match":[]},"Set":{"EfficientLengthIterable":["1"],"Iterable":["1"]},"String":{"Pattern":[]},"AssertionError":{"Error":[]},"TypeError":{"Error":[]},"NullThrownError":{"Error":[]},"ArgumentError":{"Error":[]},"RangeError":{"Error":[]},"IndexError":{"Error":[]},"NoSuchMethodError":{"Error":[]},"UnsupportedError":{"Error":[]},"UnimplementedError":{"Error":[]},"StateError":{"Error":[]},"ConcurrentModificationError":{"Error":[]},"OutOfMemoryError":{"Error":[]},"StackOverflowError":{"Error":[]},"CyclicInitializationError":{"Error":[]},"_Exception":{"Exception":[]},"FormatException":{"Exception":[]},"_StringStackTrace":{"StackTrace":[]},"Runes":{"Iterable":["int"],"Iterable.E":"int"},"RuneIterator":{"Iterator":["int"]},"StringBuffer":{"StringSink":[]},"_Uri":{"Uri":[]},"_SimpleUri":{"Uri":[]},"_DataUri":{"Uri":[]},"MouseEvent":{"Event":[]},"HtmlElement":{"Element":[],"EventTarget":[]},"AnchorElement":{"Element":[],"EventTarget":[]},"AreaElement":{"Element":[],"EventTarget":[]},"Element":{"EventTarget":[]},"FormElement":{"Element":[],"EventTarget":[]},"InputElement":{"TextInputElement":[],"Element":[],"EventTarget":[]},"Node0":{"EventTarget":[]},"SelectElement":{"Element":[],"EventTarget":[]},"TextAreaElement":{"Element":[],"EventTarget":[]},"UIEvent":{"Event":[]},"_EventStream":{"Stream":["1"]},"_ElementEventStreamImpl":{"_EventStream":["1"],"Stream":["1"]},"_EventStreamSubscription":{"StreamSubscription":["1"]},"SvgElement":{"Element":[],"EventTarget":[]},"MessageCode":{"Code":["Null"],"Message":[]},"ForwardingListener":{"Listener":[]},"NullListener":{"Listener":[]},"CatchParameterIdentifierContext":{"IdentifierContext":[]},"ClassOrMixinOrExtensionIdentifierContext":{"IdentifierContext":[]},"CombinatorIdentifierContext":{"IdentifierContext":[]},"ConstructorReferenceIdentifierContext":{"IdentifierContext":[]},"DottedNameIdentifierContext":{"IdentifierContext":[]},"EnumDeclarationIdentifierContext":{"IdentifierContext":[]},"EnumValueDeclarationIdentifierContext":{"IdentifierContext":[]},"ExpressionIdentifierContext":{"IdentifierContext":[]},"ExtensionShowHideElementIdentifierContext":{"IdentifierContext":[]},"FieldDeclarationIdentifierContext":{"IdentifierContext":[]},"FieldInitializerIdentifierContext":{"IdentifierContext":[]},"FormalParameterDeclarationIdentifierContext":{"IdentifierContext":[]},"ImportPrefixIdentifierContext":{"IdentifierContext":[]},"LiteralSymbolIdentifierContext":{"IdentifierContext":[]},"LocalFunctionDeclarationIdentifierContext":{"IdentifierContext":[]},"LabelDeclarationIdentifierContext":{"IdentifierContext":[]},"LabelReferenceIdentifierContext":{"IdentifierContext":[]},"LibraryIdentifierContext":{"IdentifierContext":[]},"LocalVariableDeclarationIdentifierContext":{"IdentifierContext":[]},"MetadataReferenceIdentifierContext":{"IdentifierContext":[]},"MethodDeclarationIdentifierContext":{"IdentifierContext":[]},"NamedArgumentReferenceIdentifierContext":{"IdentifierContext":[]},"TopLevelDeclarationIdentifierContext":{"IdentifierContext":[]},"TypedefDeclarationIdentifierContext":{"IdentifierContext":[]},"TypeReferenceIdentifierContext":{"IdentifierContext":[]},"TypeVariableDeclarationIdentifierContext":{"IdentifierContext":[]},"ForCondition":{"LiteralEntryInfo":[]},"ForSpread":{"LiteralEntryInfo":[]},"ForInSpread":{"LiteralEntryInfo":[]},"ForEntry":{"LiteralEntryInfo":[]},"ForInEntry":{"LiteralEntryInfo":[]},"ForComplete":{"LiteralEntryInfo":[]},"ForInComplete":{"LiteralEntryInfo":[]},"IfCondition":{"LiteralEntryInfo":[]},"IfSpread":{"LiteralEntryInfo":[]},"IfEntry":{"LiteralEntryInfo":[]},"IfComplete":{"LiteralEntryInfo":[]},"IfElse":{"LiteralEntryInfo":[]},"ElseSpread":{"LiteralEntryInfo":[]},"ElseEntry":{"LiteralEntryInfo":[]},"IfElseComplete":{"LiteralEntryInfo":[]},"SpreadOperator":{"LiteralEntryInfo":[]},"Nested":{"LiteralEntryInfo":[]},"ClassHeaderRecoveryListener":{"Listener":[]},"ImportRecoveryListener":{"Listener":[]},"MixinHeaderRecoveryListener":{"Listener":[]},"StackListener":{"Listener":[]},"StackImpl":{"Stack":[]},"DebugStack":{"Stack":[]},"TokenStreamRewriterImpl":{"TokenStreamRewriter":[]},"NextTokenStreamChange":{"TokenStreamChange":[]},"EndGroupTokenStreamChange":{"TokenStreamChange":[]},"OffsetTokenStreamChange":{"TokenStreamChange":[]},"PrecedingCommentsTokenStreamChange":{"TokenStreamChange":[]},"PreviousTokenStreamChange":{"TokenStreamChange":[]},"UndoableTokenStreamRewriter":{"TokenStreamRewriter":[]},"NoType":{"TypeInfo":[]},"PrefixedType":{"TypeInfo":[]},"SimpleNullableTypeWith1Argument":{"TypeInfo":[]},"SimpleTypeWith1Argument":{"TypeInfo":[]},"SimpleNullableType":{"TypeInfo":[]},"SimpleType":{"TypeInfo":[]},"VoidType":{"TypeInfo":[]},"ComplexTypeInfo":{"TypeInfo":[]},"NoTypeParamOrArg":{"TypeParamOrArgInfo":[]},"SimpleTypeArgument1":{"TypeParamOrArgInfo":[]},"SimpleTypeArgument1GtEq":{"TypeParamOrArgInfo":[]},"SimpleTypeArgument1GtGt":{"TypeParamOrArgInfo":[]},"ComplexTypeParamOrArgInfo":{"TypeParamOrArgInfo":[]},"AbstractScanner":{"Scanner0":[]},"LineStarts":{"ListMixin":["int"],"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"],"ListMixin.E":"int"},"ErrorToken":{"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"EncodingErrorToken":{"ErrorToken":[],"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"NonAsciiIdentifierToken":{"ErrorToken":[],"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"NonAsciiWhitespaceToken":{"ErrorToken":[],"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"AsciiControlCharacterToken":{"ErrorToken":[],"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"UnsupportedOperator":{"ErrorToken":[],"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"UnterminatedString":{"ErrorToken":[],"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"UnterminatedToken":{"ErrorToken":[],"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"UnmatchedToken":{"ErrorToken":[],"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"ScannerErrorCode":{"ErrorCode":[]},"ArrayKeywordState":{"KeywordState":[]},"LowerCaseArrayKeywordState":{"KeywordState":[]},"UpperCaseArrayKeywordState":{"KeywordState":[]},"LeafKeywordState":{"KeywordState":[]},"StringScanner":{"Scanner0":[]},"BeginToken":{"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"Keyword":{"TokenType":[]},"Token":{"SyntacticEntity":[]},"KeywordToken":{"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"SimpleToken":{"Token":[],"SyntacticEntity":[]},"StringToken0":{"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"SyntheticBeginToken":{"BeginToken":[],"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"SyntheticKeywordToken":{"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"SyntheticStringToken":{"StringToken0":[],"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"SyntheticToken":{"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"ReplacementToken":{"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"LanguageVersionToken":{"CommentToken":[],"CommentToken0":[],"StringToken0":[],"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"StringToken":{"StringToken0":[],"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"CommentToken":{"CommentToken0":[],"StringToken0":[],"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"DartDocToken":{"CommentToken":[],"CommentToken0":[],"StringToken0":[],"SimpleToken":[],"Token":[],"SyntacticEntity":[]},"_CompactLazySubstring":{"_LazySubstring":[]},"_FullLazySubstring":{"_LazySubstring":[]},"Link":{"Iterable":["1"]},"LinkIterator":{"Iterator":["1"]},"LinkEntry":{"Link":["1"],"Iterable":["1"]},"ThrowingAstVisitor":{"AstVisitor":["1"]},"RecordingErrorListener":{"AnalysisErrorListener":[]},"ExperimentStatus":{"FeatureSet":[]},"ArgumentListImpl":{"AstNodeImpl":[],"ArgumentList":[],"AstNode":[],"SyntacticEntity":[]},"AstNodeImpl":{"AstNode":[],"SyntacticEntity":[]},"BlockImpl":{"StatementImpl":[],"Block":[],"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"CollectionElementImpl":{"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"CommentImpl":{"AstNodeImpl":[],"Comment":[],"AstNode":[],"SyntacticEntity":[]},"ConstructorNameImpl":{"ConstructorName":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"DeclaredIdentifierImpl":{"DeclaredIdentifier":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"DottedNameImpl":{"AstNodeImpl":[],"DottedName":[],"AstNode":[],"SyntacticEntity":[]},"ExpressionImpl":{"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"ExtendsClauseImpl":{"AstNodeImpl":[],"ExtendsClause":[],"AstNode":[],"SyntacticEntity":[]},"ForLoopPartsImpl":{"AstNodeImpl":[],"ForLoopParts":[],"AstNode":[],"SyntacticEntity":[]},"FormalParameterListImpl":{"AstNodeImpl":[],"FormalParameterList":[],"AstNode":[],"SyntacticEntity":[]},"FunctionBodyImpl":{"AstNodeImpl":[],"FunctionBody":[],"AstNode":[],"SyntacticEntity":[]},"FunctionDeclarationImpl":{"FunctionDeclaration":[],"CompilationUnitMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"FunctionExpressionImpl":{"ExpressionImpl":[],"FunctionExpression":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"HideClauseImpl":{"AstNodeImpl":[],"HideClause":[],"AstNode":[],"SyntacticEntity":[]},"IdentifierImpl":{"ExpressionImpl":[],"Identifier":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"ImplementsClauseImpl":{"AstNodeImpl":[],"ImplementsClause":[],"AstNode":[],"SyntacticEntity":[]},"LabelImpl":{"AstNodeImpl":[],"Label":[],"AstNode":[],"SyntacticEntity":[]},"LibraryIdentifierImpl":{"IdentifierImpl":[],"LibraryIdentifier":[],"ExpressionImpl":[],"Identifier":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"NativeClauseImpl":{"AstNodeImpl":[],"NativeClause":[],"AstNode":[],"SyntacticEntity":[]},"NormalFormalParameterImpl":{"NormalFormalParameter":[],"AstNodeImpl":[],"FormalParameter":[],"AstNode":[],"SyntacticEntity":[]},"OnClauseImpl":{"AstNodeImpl":[],"OnClause":[],"AstNode":[],"SyntacticEntity":[]},"ScriptTagImpl":{"AstNodeImpl":[],"ScriptTag":[],"AstNode":[],"SyntacticEntity":[]},"ShowClauseImpl":{"AstNodeImpl":[],"ShowClause":[],"AstNode":[],"SyntacticEntity":[]},"SimpleIdentifierImpl":{"IdentifierImpl":[],"SimpleIdentifier":[],"ExpressionImpl":[],"Identifier":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"StatementImpl":{"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"StringLiteralImpl":{"StringLiteral":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"TypeAnnotationImpl":{"AstNodeImpl":[],"TypeAnnotation":[],"AstNode":[],"SyntacticEntity":[]},"TypeArgumentListImpl":{"AstNodeImpl":[],"TypeArgumentList":[],"AstNode":[],"SyntacticEntity":[]},"TypeNameImpl":{"TypeName":[],"TypeAnnotationImpl":[],"AstNodeImpl":[],"TypeAnnotation":[],"ShowHideClauseElement":[],"AstNode":[],"SyntacticEntity":[]},"TypeParameterListImpl":{"AstNodeImpl":[],"TypeParameterList":[],"AstNode":[],"SyntacticEntity":[]},"VariableDeclarationListImpl":{"VariableDeclarationList":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"WithClauseImpl":{"AstNodeImpl":[],"WithClause":[],"AstNode":[],"SyntacticEntity":[]},"AdjacentStringsImpl":{"StringLiteralImpl":[],"AdjacentStrings":[],"StringLiteral":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"AnnotatedNodeImpl":{"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"AnnotationImpl":{"AstNodeImpl":[],"Annotation":[],"AstNode":[],"SyntacticEntity":[]},"AsExpressionImpl":{"ExpressionImpl":[],"AsExpression":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"AssertInitializerImpl":{"AssertInitializer":[],"AstNodeImpl":[],"ConstructorInitializer":[],"Assertion":[],"AstNode":[],"SyntacticEntity":[]},"AssertStatementImpl":{"StatementImpl":[],"AssertStatement":[],"AstNodeImpl":[],"Statement":[],"Assertion":[],"AstNode":[],"SyntacticEntity":[]},"AssignmentExpressionImpl":{"AssignmentExpression":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"AwaitExpressionImpl":{"ExpressionImpl":[],"AwaitExpression":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"BinaryExpressionImpl":{"ExpressionImpl":[],"BinaryExpression":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"BlockFunctionBodyImpl":{"FunctionBodyImpl":[],"BlockFunctionBody":[],"AstNodeImpl":[],"FunctionBody":[],"AstNode":[],"SyntacticEntity":[]},"BooleanLiteralImpl":{"BooleanLiteral":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"BreakStatementImpl":{"StatementImpl":[],"BreakStatement":[],"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"CascadeExpressionImpl":{"CascadeExpression":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"CatchClauseImpl":{"AstNodeImpl":[],"CatchClause":[],"AstNode":[],"SyntacticEntity":[]},"ChildEntities":{"IterableMixin":["SyntacticEntity"],"Iterable":["SyntacticEntity"],"IterableMixin.E":"SyntacticEntity"},"ClassDeclarationImpl":{"ClassDeclaration":[],"CompilationUnitMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"ClassMemberImpl":{"ClassMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"ClassOrMixinDeclarationImpl":{"CompilationUnitMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"ClassTypeAliasImpl":{"ClassTypeAlias":[],"CompilationUnitMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"CombinatorImpl":{"AstNodeImpl":[],"Combinator":[],"AstNode":[],"SyntacticEntity":[]},"CommentReferenceImpl":{"AstNodeImpl":[],"CommentReference":[],"AstNode":[],"SyntacticEntity":[]},"CompilationUnitImpl":{"AstNodeImpl":[],"CompilationUnit":[],"AstNode":[],"SyntacticEntity":[]},"CompilationUnitMemberImpl":{"CompilationUnitMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"ConditionalExpressionImpl":{"ExpressionImpl":[],"ConditionalExpression":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"ConfigurationImpl":{"AstNodeImpl":[],"Configuration":[],"AstNode":[],"SyntacticEntity":[]},"ConstructorDeclarationImpl":{"ConstructorDeclaration":[],"ClassMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"ConstructorFieldInitializerImpl":{"ConstructorFieldInitializer":[],"AstNodeImpl":[],"ConstructorInitializer":[],"AstNode":[],"SyntacticEntity":[]},"ConstructorInitializerImpl":{"AstNodeImpl":[],"ConstructorInitializer":[],"AstNode":[],"SyntacticEntity":[]},"ContinueStatementImpl":{"StatementImpl":[],"ContinueStatement":[],"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"DeclarationImpl":{"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"DeclaredSimpleIdentifier":{"SimpleIdentifierImpl":[],"IdentifierImpl":[],"SimpleIdentifier":[],"ExpressionImpl":[],"Identifier":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"DefaultFormalParameterImpl":{"DefaultFormalParameter":[],"AstNodeImpl":[],"FormalParameter":[],"AstNode":[],"SyntacticEntity":[]},"DirectiveImpl":{"Directive":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"DoStatementImpl":{"StatementImpl":[],"DoStatement":[],"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"DoubleLiteralImpl":{"DoubleLiteral":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"EmptyFunctionBodyImpl":{"FunctionBodyImpl":[],"EmptyFunctionBody":[],"AstNodeImpl":[],"FunctionBody":[],"AstNode":[],"SyntacticEntity":[]},"EmptyStatementImpl":{"StatementImpl":[],"EmptyStatement":[],"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"EnumConstantDeclarationImpl":{"EnumConstantDeclaration":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"EnumDeclarationImpl":{"EnumDeclaration":[],"CompilationUnitMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"ExportDirectiveImpl":{"ExportDirective":[],"Directive":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"ExpressionFunctionBodyImpl":{"FunctionBodyImpl":[],"ExpressionFunctionBody":[],"AstNodeImpl":[],"FunctionBody":[],"AstNode":[],"SyntacticEntity":[]},"ExpressionStatementImpl":{"StatementImpl":[],"ExpressionStatement":[],"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"ExtensionDeclarationImpl":{"ExtensionDeclaration":[],"CompilationUnitMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"FieldDeclarationImpl":{"FieldDeclaration":[],"ClassMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"FieldFormalParameterImpl":{"NormalFormalParameterImpl":[],"FieldFormalParameter":[],"NormalFormalParameter":[],"AstNodeImpl":[],"FormalParameter":[],"AstNode":[],"SyntacticEntity":[]},"ForEachPartsImpl":{"ForLoopPartsImpl":[],"ForEachParts":[],"AstNodeImpl":[],"ForLoopParts":[],"AstNode":[],"SyntacticEntity":[]},"ForEachPartsWithDeclarationImpl":{"ForEachPartsWithDeclaration":[],"ForLoopPartsImpl":[],"ForEachParts":[],"AstNodeImpl":[],"ForLoopParts":[],"AstNode":[],"SyntacticEntity":[]},"ForEachPartsWithIdentifierImpl":{"ForEachPartsWithIdentifier":[],"ForLoopPartsImpl":[],"ForEachParts":[],"AstNodeImpl":[],"ForLoopParts":[],"AstNode":[],"SyntacticEntity":[]},"ForElementImpl":{"CollectionElementImpl":[],"ForElement":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"FormalParameterImpl":{"AstNodeImpl":[],"FormalParameter":[],"AstNode":[],"SyntacticEntity":[]},"ForPartsImpl":{"ForLoopPartsImpl":[],"ForParts":[],"AstNodeImpl":[],"ForLoopParts":[],"AstNode":[],"SyntacticEntity":[]},"ForPartsWithDeclarationsImpl":{"ForPartsWithDeclarations":[],"ForLoopPartsImpl":[],"ForParts":[],"AstNodeImpl":[],"ForLoopParts":[],"AstNode":[],"SyntacticEntity":[]},"ForPartsWithExpressionImpl":{"ForPartsWithExpression":[],"ForLoopPartsImpl":[],"ForParts":[],"AstNodeImpl":[],"ForLoopParts":[],"AstNode":[],"SyntacticEntity":[]},"ForStatementImpl":{"StatementImpl":[],"ForStatement":[],"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"FunctionDeclarationStatementImpl":{"StatementImpl":[],"FunctionDeclarationStatement":[],"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"FunctionExpressionInvocationImpl":{"FunctionExpressionInvocation":[],"ExpressionImpl":[],"InvocationExpression":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"FunctionReferenceImpl":{"ExpressionImpl":[],"FunctionReference":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"FunctionTypeAliasImpl":{"FunctionTypeAlias":[],"CompilationUnitMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"FunctionTypedFormalParameterImpl":{"NormalFormalParameterImpl":[],"FunctionTypedFormalParameter":[],"NormalFormalParameter":[],"AstNodeImpl":[],"FormalParameter":[],"AstNode":[],"SyntacticEntity":[]},"GenericFunctionTypeImpl":{"TypeAnnotationImpl":[],"GenericFunctionType":[],"AstNodeImpl":[],"TypeAnnotation":[],"AstNode":[],"SyntacticEntity":[]},"GenericTypeAliasImpl":{"GenericTypeAlias":[],"CompilationUnitMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"HideCombinatorImpl":{"HideCombinator":[],"AstNodeImpl":[],"Combinator":[],"AstNode":[],"SyntacticEntity":[]},"IfElementImpl":{"CollectionElementImpl":[],"IfElement":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"IfStatementImpl":{"StatementImpl":[],"IfStatement":[],"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"ImportDirectiveImpl":{"ImportDirective":[],"Directive":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"IndexExpressionImpl":{"IndexExpression":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"InstanceCreationExpressionImpl":{"ExpressionImpl":[],"InstanceCreationExpression":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"IntegerLiteralImpl":{"IntegerLiteral":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"InterpolationElementImpl":{"AstNodeImpl":[],"InterpolationElement":[],"AstNode":[],"SyntacticEntity":[]},"InterpolationExpressionImpl":{"InterpolationExpression":[],"AstNodeImpl":[],"InterpolationElement":[],"AstNode":[],"SyntacticEntity":[]},"InterpolationStringImpl":{"InterpolationString":[],"AstNodeImpl":[],"InterpolationElement":[],"AstNode":[],"SyntacticEntity":[]},"InvocationExpressionImpl":{"ExpressionImpl":[],"InvocationExpression":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"IsExpressionImpl":{"ExpressionImpl":[],"IsExpression":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"LabeledStatementImpl":{"StatementImpl":[],"LabeledStatement":[],"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"LibraryDirectiveImpl":{"LibraryDirective":[],"Directive":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"ListLiteralImpl":{"ListLiteral":[],"TypedLiteral":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"LiteralImpl":{"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"MapLiteralEntryImpl":{"CollectionElementImpl":[],"MapLiteralEntry":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"MethodDeclarationImpl":{"MethodDeclaration":[],"ClassMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"MethodInvocationImpl":{"MethodInvocation":[],"ExpressionImpl":[],"InvocationExpression":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"MixinDeclarationImpl":{"MixinDeclaration":[],"CompilationUnitMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"NamedCompilationUnitMemberImpl":{"CompilationUnitMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"NamedExpressionImpl":{"ExpressionImpl":[],"NamedExpression":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"NamespaceDirectiveImpl":{"Directive":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"NativeFunctionBodyImpl":{"FunctionBodyImpl":[],"NativeFunctionBody":[],"AstNodeImpl":[],"FunctionBody":[],"AstNode":[],"SyntacticEntity":[]},"NodeListImpl":{"ListMixin":["1"],"NodeList":["1"],"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"],"ListMixin.E":"1"},"NullLiteralImpl":{"NullLiteral":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"ParenthesizedExpressionImpl":{"ExpressionImpl":[],"ParenthesizedExpression":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"PartDirectiveImpl":{"PartDirective":[],"Directive":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"PartOfDirectiveImpl":{"PartOfDirective":[],"Directive":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"PostfixExpressionImpl":{"PostfixExpression":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"PrefixedIdentifierImpl":{"IdentifierImpl":[],"PrefixedIdentifier":[],"ExpressionImpl":[],"Identifier":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"PrefixExpressionImpl":{"PrefixExpression":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"PropertyAccessImpl":{"PropertyAccess":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"RedirectingConstructorInvocationImpl":{"RedirectingConstructorInvocation":[],"AstNodeImpl":[],"ConstructorInitializer":[],"AstNode":[],"SyntacticEntity":[]},"RethrowExpressionImpl":{"ExpressionImpl":[],"RethrowExpression":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"ReturnStatementImpl":{"StatementImpl":[],"ReturnStatement":[],"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"SetOrMapLiteralImpl":{"SetOrMapLiteral":[],"TypedLiteral":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"ShowCombinatorImpl":{"ShowCombinator":[],"AstNodeImpl":[],"Combinator":[],"AstNode":[],"SyntacticEntity":[]},"ShowHideElementImpl":{"ShowHideElement":[],"AstNodeImpl":[],"ShowHideClauseElement":[],"AstNode":[],"SyntacticEntity":[]},"SimpleFormalParameterImpl":{"NormalFormalParameterImpl":[],"SimpleFormalParameter":[],"NormalFormalParameter":[],"AstNodeImpl":[],"FormalParameter":[],"AstNode":[],"SyntacticEntity":[]},"SimpleStringLiteralImpl":{"SimpleStringLiteral":[],"StringLiteralImpl":[],"SingleStringLiteral":[],"StringLiteral":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"SingleStringLiteralImpl":{"StringLiteralImpl":[],"SingleStringLiteral":[],"StringLiteral":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"SpreadElementImpl":{"CollectionElementImpl":[],"SpreadElement":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"StringInterpolationImpl":{"StringInterpolation":[],"StringLiteralImpl":[],"SingleStringLiteral":[],"StringLiteral":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"SuperConstructorInvocationImpl":{"SuperConstructorInvocation":[],"AstNodeImpl":[],"ConstructorInitializer":[],"AstNode":[],"SyntacticEntity":[]},"SuperExpressionImpl":{"ExpressionImpl":[],"SuperExpression":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"SwitchCaseImpl":{"SwitchCase":[],"AstNodeImpl":[],"SwitchMember":[],"AstNode":[],"SyntacticEntity":[]},"SwitchDefaultImpl":{"SwitchDefault":[],"AstNodeImpl":[],"SwitchMember":[],"AstNode":[],"SyntacticEntity":[]},"SwitchMemberImpl":{"AstNodeImpl":[],"SwitchMember":[],"AstNode":[],"SyntacticEntity":[]},"SwitchStatementImpl":{"StatementImpl":[],"SwitchStatement":[],"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"SymbolLiteralImpl":{"SymbolLiteral":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"ThisExpressionImpl":{"ExpressionImpl":[],"ThisExpression":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"ThrowExpressionImpl":{"ExpressionImpl":[],"ThrowExpression":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"TopLevelVariableDeclarationImpl":{"TopLevelVariableDeclaration":[],"CompilationUnitMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"TryStatementImpl":{"StatementImpl":[],"TryStatement":[],"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"TypeAliasImpl":{"CompilationUnitMember":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"TypedLiteralImpl":{"TypedLiteral":[],"ExpressionImpl":[],"CollectionElementImpl":[],"Expression":[],"AstNodeImpl":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"TypeParameterImpl":{"TypeParameter":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"UriBasedDirectiveImpl":{"Directive":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"VariableDeclarationImpl":{"VariableDeclaration":[],"AstNodeImpl":[],"AstNode":[],"SyntacticEntity":[]},"VariableDeclarationStatementImpl":{"StatementImpl":[],"VariableDeclarationStatement":[],"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"WhileStatementImpl":{"StatementImpl":[],"WhileStatement":[],"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"YieldStatementImpl":{"StatementImpl":[],"YieldStatement":[],"AstNodeImpl":[],"Statement":[],"AstNode":[],"SyntacticEntity":[]},"ToSourceVisitor":{"AstVisitor":["~"]},"HintCode":{"ErrorCode":[]},"ParserErrorCode":{"ErrorCode":[]},"DiagnosticMessageImpl":{"DiagnosticMessage":[]},"AnalyzerErrorCode":{"ErrorCode":[]},"CompileTimeErrorCode":{"ErrorCode":[]},"AstBuilder":{"Listener":[]},"_InvalidCollectionElement":{"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"StringSource":{"Source":[]},"CopyOnWriteList":{"List":["1"],"EfficientLengthIterable":["1"],"Iterable":["1"]},"BuiltList":{"Iterable":["1"]},"_BuiltList":{"BuiltList":["1"],"Iterable":["1"]},"BuiltValueNullFieldError":{"Error":[]},"BuiltValueNestedFieldError":{"Error":[]},"DartEmitter":{"CodeVisitor":["StringSink"],"ExpressionVisitor":["StringSink"],"SpecVisitor":["StringSink"]},"Class":{"Spec":[]},"_$Class":{"Class":[],"Spec":[]},"_$ClassBuilder":{"ClassBuilder":[]},"Code0":{"Spec":[]},"StaticCode":{"Code0":[],"Spec":[]},"_$Constructor":{"Constructor":[]},"_$ConstructorBuilder":{"ConstructorBuilder":[]},"Expression0":{"Spec":[]},"CodeExpression":{"Expression0":[],"Spec":[]},"InvokeExpression":{"Expression0":[],"Spec":[]},"Field":{"Spec":[]},"Method":{"Spec":[]},"_$Method":{"Method":[],"Spec":[]},"_$MethodBuilder":{"MethodBuilder":[]},"_$Parameter":{"Parameter":[]},"_$ParameterBuilder":{"ParameterBuilder":[]},"Reference":{"Expression0":[],"Spec":[]},"TypeReference":{"Reference":[],"Expression0":[],"Spec":[]},"_$TypeReference":{"TypeReference":[],"Reference":[],"Expression0":[],"Spec":[]},"_$TypeReferenceBuilder":{"TypeReferenceBuilder":[]},"_MethodSelector":{"_Selector":[]},"_PrefixedSelector":{"_Selector":[]},"_PropertySelector":{"_Selector":[]},"FormatterException":{"Exception":[]},"UnexpectedOutputException":{"Exception":[]},"ArgumentRule":{"Rule":[]},"PositionalRule":{"ArgumentRule":[],"Rule":[]},"NamedRule":{"ArgumentRule":[],"Rule":[]},"CombinatorRule":{"Rule":[]},"MetadataRule":{"Rule":[]},"TypeArgumentRule":{"Rule":[]},"SourceVisitor":{"AstVisitor":["@"]},"PathException":{"Exception":[]},"PosixStyle":{"InternalStyle":[]},"UrlStyle":{"InternalStyle":[]},"WindowsStyle":{"InternalStyle":[]},"Version":{"VersionRange":[]},"FileLocation":{"SourceLocation":[]},"_FileSpan":{"FileSpan":[],"SourceSpanWithContext":[],"SourceSpan":[]},"SourceLocationMixin":{"SourceLocation":[]},"SourceSpanBase":{"SourceSpan":[]},"SourceSpanMixin":{"SourceSpan":[]},"SourceSpanWithContext":{"SourceSpan":[]},"Int8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint8ClampedList":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint16List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Int32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Uint32List":{"List":["int"],"EfficientLengthIterable":["int"],"Iterable":["int"]},"Float32List":{"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"Float64List":{"List":["double"],"EfficientLengthIterable":["double"],"Iterable":["double"]},"Annotation":{"AstNode":[],"SyntacticEntity":[]},"AstNode":{"SyntacticEntity":[]},"CatchClause":{"AstNode":[],"SyntacticEntity":[]},"ClassMember":{"AstNode":[],"SyntacticEntity":[]},"CollectionElement":{"AstNode":[],"SyntacticEntity":[]},"Combinator":{"AstNode":[],"SyntacticEntity":[]},"CommentReference":{"AstNode":[],"SyntacticEntity":[]},"CompilationUnitMember":{"AstNode":[],"SyntacticEntity":[]},"Configuration":{"AstNode":[],"SyntacticEntity":[]},"ConstructorInitializer":{"AstNode":[],"SyntacticEntity":[]},"DefaultFormalParameter":{"FormalParameter":[],"AstNode":[],"SyntacticEntity":[]},"Directive":{"AstNode":[],"SyntacticEntity":[]},"EnumConstantDeclaration":{"AstNode":[],"SyntacticEntity":[]},"Expression":{"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"FormalParameter":{"AstNode":[],"SyntacticEntity":[]},"IfElement":{"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"InterpolationElement":{"AstNode":[],"SyntacticEntity":[]},"Label":{"AstNode":[],"SyntacticEntity":[]},"MapLiteralEntry":{"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"NamedExpression":{"Expression":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"ShowHideClauseElement":{"AstNode":[],"SyntacticEntity":[]},"SimpleIdentifier":{"Identifier":[],"Expression":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"Statement":{"AstNode":[],"SyntacticEntity":[]},"StringLiteral":{"Expression":[],"CollectionElement":[],"AstNode":[],"SyntacticEntity":[]},"SwitchMember":{"AstNode":[],"SyntacticEntity":[]},"TypeAnnotation":{"AstNode":[],"SyntacticEntity":[]},"TypeName":{"TypeAnnotation":[],"ShowHideClauseElement":[],"AstNode":[],"SyntacticEntity":[]},"TypeParameter":{"AstNode":[],"SyntacticEntity":[]},"VariableDeclaration":{"AstNode":[],"SyntacticEntity":[]},"ParameterElement":{"Element0":[]}}'));
  H._Universe_addErasedTypes(init.typeUniverse, JSON.parse('{"EfficientLengthIterable":1,"UnmodifiableListBase":1,"NativeTypedArray":1,"StreamTransformerBase":2,"IterableBase":1,"ListBase":1,"MapBase":2,"_SetBase":1,"_ListBase_Object_ListMixin":1,"__SetBase_Object_SetMixin":1,"__UnmodifiableSet__SetBase__UnmodifiableSetMixin":1,"ThrowingAstVisitor":1,"_NodeListImpl_Object_ListMixin":1}'));
  var string$ = {
    x20can_o: " can only be used in strings and comments.",
    x20must_: " must not be greater than the number of characters in the file, ",
    x27_has_: "' has been assigned during initialization.",
    x27catch: "'catch' must be followed by '(identifier)' or '(identifier, identifier)'.",
    A_____: "A '$' has special meaning inside a string, and must be followed by an identifier or an expression in curly braces ({}).",
    A_brea: "A break statement can't be used outside of a loop or switch statement.",
    A_clas: "A class member can't have the same name as the enclosing class.",
    A_comp: "A comparison expression can't be an operand of another comparison expression.",
    A_contc: "A continue statement can't be used outside of a loop or switch statement.",
    A_conti: "A continue statement in a switch statement must have a label as a target.",
    A_fiel: "A field can only be initialized in its declaring class",
    A_try_: "A try block must be followed by an 'on', 'catch', or 'finally' clause.",
    An_ann: "An annotation with type arguments must be followed by an argument list.",
    An_enu: "An enum definition must have a body with at least one constant name.",
    An_escu: "An escape sequence starting with '\\u' must be followed by 4 hexadecimal digits or from 1 to 6 digits between '{' and '}'.",
    An_escx: "An escape sequence starting with '\\x' must be followed by 2 hexadecimal digits.",
    An_extc: "An external constructor can't have any initializers.",
    An_exto: "An external or native method can't have a body.",
    An_imp_: "An import directive can only have one 'deferred' keyword.",
    An_impp: "An import directive can only have one prefix ('as' clause).",
    Can_ons: "Can only use 'super' in an initializer for calling the superclass constructor (e.g. 'super()' or 'super.namedConstructor()')",
    Can_ont: "Can only use 'this' in an initializer for field initialization (e.g. 'this.x = something') and constructor redirection (e.g. 'this()' or 'this.namedConstructor())",
    Cannotff: "Cannot extract a file path from a URI with a fragment component",
    Cannotfq: "Cannot extract a file path from a URI with a query component",
    Cannotn: "Cannot extract a non-Windows file path from a file URI with an authority",
    Classei: "Classes can't be declared inside other classes.",
    Classet: "Classes can't be declared to be 'external'.",
    Direct: "Directives must appear before any declarations.",
    Each_ce: "Each class definition can have at most one extends clause.",
    Each_cw: "Each class definition can have at most one with clause.",
    Each_m: "Each mixin definition can have at most one on clause.",
    Each_t: "Each type parameter can have at most one variance modifier.",
    Enums_: "Enums can't be declared to be 'external'.",
    Error_: "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a value of the returned future's type",
    Expect: "Expected an assignment after the field name.",
    Export: "Export directives must precede part directives.",
    Extens: "Extensions can't declare abstract members.",
    FIELD_: "FIELD_INITIALIZER_REDIRECTING_CONSTRUCTOR",
    Factorb: "Factory bodies can't use 'async', 'async*', or 'sync*'.",
    Factorc: "Factory constructors cannot have a return type.",
    Field_: "Field formal parameters can only be used in a constructor.",
    Fieldsb: "Fields can't be declared both 'abstract' and 'external'.",
    Fieldst: "Fields can't be declared to be 'external'.",
    For_in: "For-in loops use 'in' rather than a colon.",
    Functi: "Function-typed parameters can't specify 'const', 'final' or 'var' in place of a return type.",
    Gettern: "Getters, setters and methods can't be declared to be 'const'.",
    Getterv: "Getters, setters and methods can't be declared to be 'covariant'.",
    Illega: "Illegal assignment to non-assignable expression.",
    Import: "Import directives must precede part directives.",
    Intern: "Internal Error: Unexpected varFinalOrConst: ",
    Memberccn: "Members can't be declared to be both 'const' and 'final'.",
    Memberccv: "Members can't be declared to be both 'covariant' and 'static'.",
    Membercfc: "Members can't be declared to be both 'final' and 'covariant'.",
    Membercfv: "Members can't be declared to be both 'final' and 'var'.",
    Memberm: "Members marked 'late' with an initializer can't be declared to be both 'final' and 'covariant'.",
    Membero: "Members of classes can't be declared to be 'abstract'.",
    Missin: "Missing selector such as '.identifier' or '[0]'.",
    Native: "Native clause in this form is deprecated.",
    No_typ: "No types are needed, the first is given by 'on', the second is always 'StackTrace'.",
    Only_f: "Only factory constructor can specify '=' redirection.",
    Only_ol: "Only one library directive may be declared in a file.",
    Only_op: "Only one part-of directive may be declared in a file.",
    Only_r: "Only redirecting factory constructors can be declared to be 'const'.",
    Operat_: "Operator declarations must be preceded by the keyword 'operator'.",
    Operats: "Operators must be declared within a class.",
    Redire: "Redirecting constructors can't have a body.",
    Static: "Static fields can't be declared 'abstract'.",
    The___: "The '?..' cascade operator must be first in the cascade sequence.",
    The__d: "The 'default' case can only be declared once.",
    The_dea: "The default case should be the last case in a switch statement.",
    The_dee: "The deferred keyword should come immediately before the prefix ('as' clause).",
    The_exi: "The extends clause must be before the implements clause.",
    The_exw: "The extends clause must be before the with clause.",
    The_fi: "The file has too many nested expressions or statements.",
    The_kea: "The keyword 'await' isn't allowed for a normal 'for' statement.",
    The_kev: "The keyword 'var' can't be used as a type name.",
    The_li: "The library directive must appear before all other directives.",
    The_lo: "The loop variable in a for-each loop can't be initialized.",
    The_na: "The name of a constructor must match the name of the enclosing class.",
    The_on: "The on clause must be before the implements clause.",
    The_op: "The operator '?.' cannot be used with 'super' because 'super' cannot be null.",
    The_pa: "The part-of directive must be the only directive in a part.",
    The_pr: "The prefix ('as' clause) should come before any show/hide combinators.",
    The_wi: "The with clause must be before the implements clause.",
    To_ini: "To initialize a field, use the syntax 'name = value'.",
    Top_le: "Top-level declarations can't be declared to be 'factory'.",
    Try_ad: "Try adding an initializer ('= expression') to the declaration.",
    Try_ch: "Try choosing a different name for this label.",
    Try_rem: "Try removing all but one occurrence of the modifier.",
    Try_ren: "Try renaming this to be an identifier that isn't a keyword.",
    Try_us: "Try using a generic function type (returnType 'Function(' parameters ')').",
    Type_a: "Type arguments can't have annotations because they aren't declarations.",
    Typedei: "Typedefs can't be declared inside classes.",
    Typedet: "Typedefs can't be declared to be 'external'.",
    Types_: "Types parameters aren't allowed when defining an operator.",
    Variabc: "Variables can't be declared using both 'var' and a type name.",
    Variabm: "Variables must be declared using the keywords 'const', 'final', 'var' or a type name.",
    WRONG_: "WRONG_NUMBER_OF_TYPE_ARGUMENTS_CONSTRUCTOR",
    x60null_c: "`null` encountered as case in a switch expression with a non-nullable enum type.",
    x60null_t: "`null` encountered as the result from expression with type `Never`."
  };
  var type$ = (function rtii() {
    var findType = H.findType;
    return {
      AnalysisError: findType("AnalysisError"),
      Annotation: findType("Annotation"),
      ArgumentList: findType("ArgumentList"),
      ArgumentListImpl: findType("ArgumentListImpl"),
      ArrayIterator_SyntacticEntity: findType("ArrayIterator<SyntacticEntity>"),
      AsExpression: findType("AsExpression"),
      AssertInitializer: findType("AssertInitializer"),
      Assertion: findType("Assertion"),
      AssignmentExpression: findType("AssignmentExpression"),
      AstNode: findType("AstNode"),
      AstNodeImpl: findType("AstNodeImpl"),
      AsyncError: findType("AsyncError"),
      AwaitExpression: findType("AwaitExpression"),
      BeginToken: findType("BeginToken"),
      BinaryExpression: findType("BinaryExpression"),
      Block: findType("Block"),
      BlockFunctionBody: findType("BlockFunctionBody"),
      BlockImpl: findType("BlockImpl"),
      BooleanLiteral: findType("BooleanLiteral"),
      CascadeExpression: findType("CascadeExpression"),
      CatchClause: findType("CatchClause"),
      Chunk: findType("Chunk"),
      Class: findType("Class"),
      ClassDeclaration: findType("ClassDeclaration"),
      ClassDeclarationImpl: findType("ClassDeclarationImpl"),
      Code: findType("Code0"),
      CodeUnits: findType("CodeUnits"),
      CodeVisitor_StringSink: findType("CodeVisitor<StringSink>"),
      Code_of_legacy_legacy_Message_Function_2_legacy_String_and_legacy_String: findType("Code<Message*(String*,String*)*>"),
      Code_of_legacy_legacy_Message_Function_2_legacy_String_and_legacy_Token: findType("Code<Message*(String*,Token*)*>"),
      Code_of_legacy_legacy_Message_Function_legacy_String: findType("Code<Message*(String*)*>"),
      Code_of_legacy_legacy_Message_Function_legacy_Token: findType("Code<Message*(Token*)*>"),
      Code_of_legacy_legacy_Message_Function_legacy_int: findType("Code<Message*(int*)*>"),
      CollectionElement: findType("CollectionElement"),
      CollectionElementImpl: findType("CollectionElementImpl"),
      Combinator: findType("Combinator"),
      CombinatorRule: findType("CombinatorRule"),
      CommentReference: findType("CommentReference"),
      CompilationUnit: findType("CompilationUnit"),
      CompilationUnitImpl: findType("CompilationUnitImpl"),
      ConditionalExpression: findType("ConditionalExpression"),
      Configuration: findType("Configuration"),
      ConstantMapView_Symbol_dynamic: findType("ConstantMapView<Symbol0,@>"),
      ConstantStringMap_of_legacy_String_and_legacy_String: findType("ConstantStringMap<String*,String*>"),
      Constructor: findType("Constructor"),
      ConstructorName: findType("ConstructorName"),
      ConstructorNameImpl: findType("ConstructorNameImpl"),
      DeclaredIdentifierImpl: findType("DeclaredIdentifierImpl"),
      DefaultFormalParameter: findType("DefaultFormalParameter"),
      DottedName: findType("DottedName"),
      DottedNameImpl: findType("DottedNameImpl"),
      EfficientLengthIterable_dynamic: findType("EfficientLengthIterable<@>"),
      Element: findType("Element0"),
      EmptyFunctionBody: findType("EmptyFunctionBody"),
      EmptyStatement: findType("EmptyStatement"),
      EnumConstantDeclaration: findType("EnumConstantDeclaration"),
      Error: findType("Error"),
      ErrorToken: findType("ErrorToken"),
      Event: findType("Event"),
      Exception: findType("Exception"),
      Expression: findType("Expression"),
      ExpressionFunctionBody: findType("ExpressionFunctionBody"),
      ExpressionImpl: findType("ExpressionImpl"),
      ExpressionStatement: findType("ExpressionStatement"),
      Expression_2: findType("Expression0"),
      ExtensionDeclaration: findType("ExtensionDeclaration"),
      Field: findType("Field"),
      FieldFormalParameter: findType("FieldFormalParameter"),
      FileSpan: findType("FileSpan"),
      ForEachParts: findType("ForEachParts"),
      ForElement: findType("ForElement"),
      ForLoopPartsImpl: findType("ForLoopPartsImpl"),
      ForParts: findType("ForParts"),
      FormalParameter: findType("FormalParameter"),
      FormalParameterList: findType("FormalParameterList"),
      FormalParameterListImpl: findType("FormalParameterListImpl"),
      FormatResult: findType("FormatResult"),
      Function: findType("Function"),
      FunctionBody: findType("FunctionBody"),
      FunctionBodyImpl: findType("FunctionBodyImpl"),
      FunctionDeclaration: findType("FunctionDeclaration"),
      FunctionDeclarationImpl: findType("FunctionDeclarationImpl"),
      FunctionDeclarationStatement: findType("FunctionDeclarationStatement"),
      FunctionExpression: findType("FunctionExpression"),
      FunctionExpressionImpl: findType("FunctionExpressionImpl"),
      FunctionExpressionInvocation: findType("FunctionExpressionInvocation"),
      FunctionTypedFormalParameter: findType("FunctionTypedFormalParameter"),
      Future_dynamic: findType("Future<@>"),
      GenericFunctionType: findType("GenericFunctionType"),
      Identifier: findType("Identifier"),
      IdentifierImpl: findType("IdentifierImpl"),
      IfElement: findType("IfElement"),
      IfStatement: findType("IfStatement"),
      ImportDirectiveImpl: findType("ImportDirectiveImpl"),
      IndexExpression: findType("IndexExpression"),
      InstanceCreationExpression: findType("InstanceCreationExpression"),
      IntegerLiteral: findType("IntegerLiteral"),
      InterpolationExpression: findType("InterpolationExpression"),
      InterpolationString: findType("InterpolationString"),
      Invocation: findType("Invocation"),
      InvocationExpression: findType("InvocationExpression"),
      IsExpression: findType("IsExpression"),
      Iterable_AstNode: findType("Iterable<AstNode>"),
      Iterable_Expression: findType("Iterable<Expression0>"),
      Iterable_Reference: findType("Iterable<Reference>"),
      Iterable_String: findType("Iterable<String>"),
      Iterable_dynamic: findType("Iterable<@>"),
      Iterable_int: findType("Iterable<int>"),
      JSArray_AnalysisError: findType("JSArray<AnalysisError>"),
      JSArray_Annotation: findType("JSArray<Annotation>"),
      JSArray_CatchClause: findType("JSArray<CatchClause>"),
      JSArray_Chunk: findType("JSArray<Chunk>"),
      JSArray_ClassMember: findType("JSArray<ClassMember>"),
      JSArray_CollectionElement: findType("JSArray<CollectionElement>"),
      JSArray_Combinator: findType("JSArray<Combinator>"),
      JSArray_CommentReference: findType("JSArray<CommentReference>"),
      JSArray_CompilationUnitMember: findType("JSArray<CompilationUnitMember>"),
      JSArray_Configuration: findType("JSArray<Configuration>"),
      JSArray_ConstructorInitializer: findType("JSArray<ConstructorInitializer>"),
      JSArray_DiagnosticMessage: findType("JSArray<DiagnosticMessage>"),
      JSArray_Directive: findType("JSArray<Directive>"),
      JSArray_EnumConstantDeclaration: findType("JSArray<EnumConstantDeclaration>"),
      JSArray_Expression: findType("JSArray<Expression>"),
      JSArray_FormalParameter: findType("JSArray<FormalParameter>"),
      JSArray_IfElement: findType("JSArray<IfElement>"),
      JSArray_InterpolationElement: findType("JSArray<InterpolationElement>"),
      JSArray_Label: findType("JSArray<Label>"),
      JSArray_MapLiteralEntry: findType("JSArray<MapLiteralEntry>"),
      JSArray_MetadataRule: findType("JSArray<MetadataRule>"),
      JSArray_NestingLevel: findType("JSArray<NestingLevel>"),
      JSArray_OpenSpan: findType("JSArray<OpenSpan>"),
      JSArray_Rule: findType("JSArray<Rule>"),
      JSArray_Set_Chunk: findType("JSArray<Set<Chunk>>"),
      JSArray_ShowHideClauseElement: findType("JSArray<ShowHideClauseElement>"),
      JSArray_SimpleIdentifier: findType("JSArray<SimpleIdentifier>"),
      JSArray_SourceComment: findType("JSArray<SourceComment>"),
      JSArray_Span: findType("JSArray<Span>"),
      JSArray_Statement: findType("JSArray<Statement>"),
      JSArray_String: findType("JSArray<String>"),
      JSArray_StringLiteral: findType("JSArray<StringLiteral>"),
      JSArray_SwitchMember: findType("JSArray<SwitchMember>"),
      JSArray_SyntacticEntity: findType("JSArray<SyntacticEntity>"),
      JSArray_Token: findType("JSArray<Token>"),
      JSArray_TokenStreamChange: findType("JSArray<TokenStreamChange>"),
      JSArray_TypeAnnotation: findType("JSArray<TypeAnnotation>"),
      JSArray_TypeName: findType("JSArray<TypeName>"),
      JSArray_TypeParameter: findType("JSArray<TypeParameter>"),
      JSArray_Uint8List: findType("JSArray<Uint8List>"),
      JSArray_VariableDeclaration: findType("JSArray<VariableDeclaration>"),
      JSArray__Highlight: findType("JSArray<_Highlight>"),
      JSArray__Line: findType("JSArray<_Line>"),
      JSArray__MethodSelector: findType("JSArray<_MethodSelector>"),
      JSArray__Selector: findType("JSArray<_Selector>"),
      JSArray_bool: findType("JSArray<bool>"),
      JSArray_dynamic: findType("JSArray<@>"),
      JSArray_int: findType("JSArray<int>"),
      JSArray_legacy_String: findType("JSArray<String*>"),
      JSArray_legacy_Subtype: findType("JSArray<Subtype*>"),
      JSArray_legacy_TokenType: findType("JSArray<TokenType*>"),
      JSArray_legacy_Tuple2_of_legacy_String_and_legacy_List_legacy_Subtype: findType("JSArray<Tuple2<String*,List<Subtype*>*>*>"),
      JSArray_legacy_int: findType("JSArray<int*>"),
      JSArray_nullable_Chunk: findType("JSArray<Chunk?>"),
      JSArray_nullable_String: findType("JSArray<String?>"),
      JSNull: findType("JSNull"),
      JavaScriptFunction: findType("JavaScriptFunction"),
      JavaScriptIndexingBehavior_dynamic: findType("JavaScriptIndexingBehavior<@>"),
      JsLinkedHashMap_Symbol_dynamic: findType("JsLinkedHashMap<Symbol0,@>"),
      Keyword: findType("Keyword"),
      Label: findType("Label"),
      LabelImpl: findType("LabelImpl"),
      LibraryDirective: findType("LibraryDirective"),
      LibraryIdentifierImpl: findType("LibraryIdentifierImpl"),
      Link_BeginToken: findType("Link<BeginToken>"),
      Link_Token: findType("Link<Token>"),
      ListBuilder_Method: findType("ListBuilder<Method>"),
      ListBuilder_String: findType("ListBuilder<String>"),
      ListLiteral: findType("ListLiteral"),
      List_AstNode: findType("List<AstNode>"),
      List_CatchClause: findType("List<CatchClause>"),
      List_ClassMember: findType("List<ClassMember>"),
      List_CollectionElement: findType("List<CollectionElement>"),
      List_EnumConstantDeclaration: findType("List<EnumConstantDeclaration>"),
      List_Expression: findType("List<Expression>"),
      List_FormalParameter: findType("List<FormalParameter>"),
      List_InterpolationElement: findType("List<InterpolationElement>"),
      List_Label: findType("List<Label>"),
      List_Reference: findType("List<Reference>"),
      List_Rule: findType("List<Rule>"),
      List_ShowHideClauseElement: findType("List<ShowHideClauseElement>"),
      List_SimpleIdentifier: findType("List<SimpleIdentifier>"),
      List_SourceComment: findType("List<SourceComment>"),
      List_Statement: findType("List<Statement>"),
      List_String: findType("List<String>"),
      List_StringLiteral: findType("List<StringLiteral>"),
      List_SwitchMember: findType("List<SwitchMember>"),
      List_Token: findType("List<Token>"),
      List_TypeAnnotation: findType("List<TypeAnnotation>"),
      List_TypeName: findType("List<TypeName>"),
      List_TypeParameter: findType("List<TypeParameter>"),
      List_VariableDeclaration: findType("List<VariableDeclaration>"),
      List__Highlight: findType("List<_Highlight>"),
      List__TypeToConvert: findType("List<_TypeToConvert>"),
      List_dynamic: findType("List<@>"),
      List_int: findType("List<int>"),
      List_nullable_Node: findType("List<Node?>"),
      List_nullable_SolveState: findType("List<SolveState?>"),
      List_nullable__Highlight: findType("List<_Highlight?>"),
      MapLiteralEntry: findType("MapLiteralEntry"),
      Map_String_Expression: findType("Map<String,Expression0>"),
      MappedListIterable_String_Object: findType("MappedListIterable<String,Object>"),
      MappedListIterable_String_dynamic: findType("MappedListIterable<String,@>"),
      MappedListIterable_of_legacy_Keyword_and_String: findType("MappedListIterable<Keyword*,String>"),
      MappedListIterable_of_legacy_Tuple2_of_legacy_String_and_legacy_List_legacy_Subtype_and_legacy_String: findType("MappedListIterable<Tuple2<String*,List<Subtype*>*>*,String*>"),
      Message: findType("Message"),
      Method: findType("Method"),
      MethodDeclaration: findType("MethodDeclaration"),
      MethodInvocation: findType("MethodInvocation"),
      NamedExpression: findType("NamedExpression"),
      NamedRule: findType("NamedRule"),
      NativeTypedArrayOfInt: findType("NativeTypedArrayOfInt"),
      NativeUint8List: findType("NativeUint8List"),
      NestingLevel: findType("NestingLevel"),
      NodeListImpl_Annotation: findType("NodeListImpl<Annotation>"),
      NodeListImpl_CatchClause: findType("NodeListImpl<CatchClause>"),
      NodeListImpl_ClassMember: findType("NodeListImpl<ClassMember>"),
      NodeListImpl_CollectionElement: findType("NodeListImpl<CollectionElement>"),
      NodeListImpl_Combinator: findType("NodeListImpl<Combinator>"),
      NodeListImpl_CommentReference: findType("NodeListImpl<CommentReference>"),
      NodeListImpl_CompilationUnitMember: findType("NodeListImpl<CompilationUnitMember>"),
      NodeListImpl_Configuration: findType("NodeListImpl<Configuration>"),
      NodeListImpl_ConstructorInitializer: findType("NodeListImpl<ConstructorInitializer>"),
      NodeListImpl_Directive: findType("NodeListImpl<Directive>"),
      NodeListImpl_EnumConstantDeclaration: findType("NodeListImpl<EnumConstantDeclaration>"),
      NodeListImpl_Expression: findType("NodeListImpl<Expression>"),
      NodeListImpl_FormalParameter: findType("NodeListImpl<FormalParameter>"),
      NodeListImpl_InterpolationElement: findType("NodeListImpl<InterpolationElement>"),
      NodeListImpl_Label: findType("NodeListImpl<Label>"),
      NodeListImpl_ShowHideClauseElement: findType("NodeListImpl<ShowHideClauseElement>"),
      NodeListImpl_SimpleIdentifier: findType("NodeListImpl<SimpleIdentifier>"),
      NodeListImpl_Statement: findType("NodeListImpl<Statement>"),
      NodeListImpl_StringLiteral: findType("NodeListImpl<StringLiteral>"),
      NodeListImpl_SwitchMember: findType("NodeListImpl<SwitchMember>"),
      NodeListImpl_TypeAnnotation: findType("NodeListImpl<TypeAnnotation>"),
      NodeListImpl_TypeName: findType("NodeListImpl<TypeName>"),
      NodeListImpl_TypeParameter: findType("NodeListImpl<TypeParameter>"),
      NodeListImpl_VariableDeclaration: findType("NodeListImpl<VariableDeclaration>"),
      NodeList_Annotation: findType("NodeList<Annotation>"),
      NodeList_ClassMember: findType("NodeList<ClassMember>"),
      NodeList_Configuration: findType("NodeList<Configuration>"),
      NodeList_Label: findType("NodeList<Label>"),
      NormalFormalParameterImpl: findType("NormalFormalParameterImpl"),
      Null: findType("Null"),
      NullLiteral: findType("NullLiteral"),
      Null_Function: findType("Null()"),
      Object: findType("Object"),
      Object_Function_String: findType("Object(String)"),
      Parameter: findType("Parameter"),
      ParenthesizedExpression: findType("ParenthesizedExpression"),
      Pattern: findType("Pattern"),
      PostfixExpression: findType("PostfixExpression"),
      PrefixExpression: findType("PrefixExpression"),
      PrefixedIdentifier: findType("PrefixedIdentifier"),
      PropertyAccess: findType("PropertyAccess"),
      Reference: findType("Reference"),
      ReversedListIterable_CollectionElement: findType("ReversedListIterable<CollectionElement>"),
      Rule: findType("Rule"),
      SetOrMapLiteral: findType("SetOrMapLiteral"),
      Set_Element: findType("Set<Element0>"),
      Set_NestingLevel: findType("Set<NestingLevel>"),
      Set_Rule: findType("Set<Rule>"),
      Set_int: findType("Set<int>"),
      ShowHideClauseElement: findType("ShowHideClauseElement"),
      SimpleIdentifier: findType("SimpleIdentifier"),
      SimpleIdentifierImpl: findType("SimpleIdentifierImpl"),
      SingleStringLiteral: findType("SingleStringLiteral"),
      SourceComment: findType("SourceComment"),
      SourceLocation: findType("SourceLocation"),
      SourceSpan: findType("SourceSpan"),
      SourceSpanWithContext: findType("SourceSpanWithContext"),
      Span: findType("Span"),
      Spec: findType("Spec"),
      SpecVisitor_StringSink: findType("SpecVisitor<StringSink>"),
      SpecVisitor_legacy_StringSink: findType("SpecVisitor<StringSink*>"),
      SpreadElement: findType("SpreadElement"),
      StackTrace: findType("StackTrace"),
      Statement: findType("Statement"),
      StatementImpl: findType("StatementImpl"),
      String: findType("String"),
      StringInterpolation: findType("StringInterpolation"),
      StringLiteral: findType("StringLiteral"),
      StringLiteralImpl: findType("StringLiteralImpl"),
      StringSink: findType("StringSink"),
      StringSink_Function: findType("StringSink()"),
      StringToken: findType("StringToken0"),
      String_Function_Match: findType("String(Match)"),
      String_Function_legacy_Keyword: findType("String(Keyword*)"),
      StyleFix: findType("StyleFix"),
      SuperExpression: findType("SuperExpression"),
      SwitchMember: findType("SwitchMember"),
      Symbol: findType("Symbol0"),
      TakeWhileIterable__Selector: findType("TakeWhileIterable<_Selector>"),
      Template_of_Message_Function_Token: findType("Template<Message(Token)>"),
      Template_of_legacy_legacy_Message_Function_legacy_Token: findType("Template<Message*(Token*)*>"),
      ThisExpression: findType("ThisExpression"),
      Token: findType("Token"),
      TryStatement: findType("TryStatement"),
      Tuple2_of_legacy_String_and_legacy_List_legacy_Subtype: findType("Tuple2<String*,List<Subtype*>*>"),
      TypeAnnotation: findType("TypeAnnotation"),
      TypeAnnotationImpl: findType("TypeAnnotationImpl"),
      TypeArgumentList: findType("TypeArgumentList"),
      TypeError: findType("TypeError"),
      TypeName: findType("TypeName"),
      TypeNameImpl: findType("TypeNameImpl"),
      TypeParameter: findType("TypeParameter"),
      TypeParameterImpl: findType("TypeParameterImpl"),
      TypeReference: findType("TypeReference"),
      Uint16List: findType("Uint16List"),
      Uint32List: findType("Uint32List"),
      Uint8List: findType("Uint8List"),
      UnknownJavaScriptObject: findType("UnknownJavaScriptObject"),
      UnsupportedOperator: findType("UnsupportedOperator"),
      Uri: findType("Uri"),
      Utf8Codec: findType("Utf8Codec"),
      VariableDeclaration: findType("VariableDeclaration"),
      VariableDeclarationList: findType("VariableDeclarationList"),
      VariableDeclarationListImpl: findType("VariableDeclarationListImpl"),
      VariableDeclarationStatement: findType("VariableDeclarationStatement"),
      VersionRange: findType("VersionRange"),
      WhereIterable_String: findType("WhereIterable<String>"),
      WhereTypeIterable_DefaultFormalParameter: findType("WhereTypeIterable<DefaultFormalParameter>"),
      WhereTypeIterable_Rule: findType("WhereTypeIterable<Rule>"),
      WhereTypeIterable_String: findType("WhereTypeIterable<String>"),
      WithClause: findType("WithClause"),
      WithClauseImpl: findType("WithClauseImpl"),
      _BlockKey: findType("_BlockKey"),
      _ElementEventStreamImpl_legacy_MouseEvent: findType("_ElementEventStreamImpl<MouseEvent*>"),
      _Future_Null: findType("_Future<Null>"),
      _Future_dynamic: findType("_Future<@>"),
      _Future_int: findType("_Future<int>"),
      _Highlight: findType("_Highlight"),
      _LazySubstring: findType("_LazySubstring"),
      _Line: findType("_Line"),
      _MethodSelector: findType("_MethodSelector"),
      _Selector: findType("_Selector"),
      bool: findType("bool"),
      bool_Function_Object: findType("bool(Object)"),
      bool_Function_String: findType("bool(String)"),
      bool_Function__Highlight: findType("bool(_Highlight)"),
      bool_Function__Selector: findType("bool(_Selector)"),
      double: findType("double"),
      dynamic: findType("@"),
      dynamic_Function: findType("@()"),
      dynamic_Function_Object: findType("@(Object)"),
      dynamic_Function_Object_StackTrace: findType("@(Object,StackTrace)"),
      dynamic_Function_String: findType("@(String)"),
      int: findType("int"),
      int_Function_Rule: findType("int(Rule)"),
      legacy_List_dynamic: findType("List<@>*"),
      legacy_List_legacy_Subtype: findType("List<Subtype*>*"),
      legacy_Map_dynamic_dynamic: findType("Map<@,@>*"),
      legacy_Method: findType("Method*"),
      legacy_MouseEvent: findType("MouseEvent*"),
      legacy_Never: findType("0&*"),
      legacy_Object: findType("Object*"),
      legacy_String: findType("String*"),
      legacy_String_Function_legacy_Tuple2_of_legacy_String_and_legacy_List_legacy_Subtype: findType("String*(Tuple2<String*,List<Subtype*>*>*)"),
      legacy_Subtype: findType("Subtype*"),
      legacy_TextAreaElement: findType("TextAreaElement*"),
      legacy_TextInputElement: findType("TextInputElement*"),
      legacy_Tuple2_of_legacy_String_and_legacy_List_legacy_Subtype: findType("Tuple2<String*,List<Subtype*>*>*"),
      nullable_ArgumentListImpl: findType("ArgumentListImpl?"),
      nullable_AstNode: findType("AstNode?"),
      nullable_AstNodeImpl: findType("AstNodeImpl?"),
      nullable_Block: findType("Block?"),
      nullable_BlockImpl: findType("BlockImpl?"),
      nullable_CollectionElementImpl: findType("CollectionElementImpl?"),
      nullable_CommentImpl: findType("CommentImpl?"),
      nullable_CommentToken: findType("CommentToken0?"),
      nullable_ConstructorNameImpl: findType("ConstructorNameImpl?"),
      nullable_Expression: findType("Expression?"),
      nullable_ExpressionImpl: findType("ExpressionImpl?"),
      nullable_ExtendsClause: findType("ExtendsClause?"),
      nullable_ExtendsClauseImpl: findType("ExtendsClauseImpl?"),
      nullable_FormalParameterList: findType("FormalParameterList?"),
      nullable_FormalParameterListImpl: findType("FormalParameterListImpl?"),
      nullable_Future_Null: findType("Future<Null>?"),
      nullable_HideClause: findType("HideClause?"),
      nullable_HideClauseImpl: findType("HideClauseImpl?"),
      nullable_ImplementsClause: findType("ImplementsClause?"),
      nullable_ImplementsClauseImpl: findType("ImplementsClauseImpl?"),
      nullable_Iterable_SyntacticEntity: findType("Iterable<SyntacticEntity>?"),
      nullable_KeywordState: findType("KeywordState?"),
      nullable_LibraryIdentifierImpl: findType("LibraryIdentifierImpl?"),
      nullable_List_Annotation: findType("List<Annotation>?"),
      nullable_List_Combinator: findType("List<Combinator>?"),
      nullable_List_CommentReference: findType("List<CommentReference>?"),
      nullable_List_CompilationUnitMember: findType("List<CompilationUnitMember>?"),
      nullable_List_Configuration: findType("List<Configuration>?"),
      nullable_List_ConstructorInitializer: findType("List<ConstructorInitializer>?"),
      nullable_List_Directive: findType("List<Directive>?"),
      nullable_List_Expression: findType("List<Expression>?"),
      nullable_List_String: findType("List<String>?"),
      nullable_List_dynamic: findType("List<@>?"),
      nullable_Map_Rule_int: findType("Map<Rule,int>?"),
      nullable_Map_of_Rule_and_Set_int: findType("Map<Rule,Set<int>>?"),
      nullable_MethodInvocation: findType("MethodInvocation?"),
      nullable_MethodInvocationImpl: findType("MethodInvocationImpl?"),
      nullable_NativeClauseImpl: findType("NativeClauseImpl?"),
      nullable_Node: findType("Node?"),
      nullable_Object: findType("Object?"),
      nullable_OnClause: findType("OnClause?"),
      nullable_OnClauseImpl: findType("OnClauseImpl?"),
      nullable_ScriptTagImpl: findType("ScriptTagImpl?"),
      nullable_Set_AnalysisError: findType("Set<AnalysisError>?"),
      nullable_Set_Rule: findType("Set<Rule>?"),
      nullable_ShowClause: findType("ShowClause?"),
      nullable_ShowClauseImpl: findType("ShowClauseImpl?"),
      nullable_SimpleIdentifier: findType("SimpleIdentifier?"),
      nullable_SimpleIdentifierImpl: findType("SimpleIdentifierImpl?"),
      nullable_SolveState: findType("SolveState?"),
      nullable_StackTrace: findType("StackTrace?"),
      nullable_Statement: findType("Statement?"),
      nullable_StatementImpl: findType("StatementImpl?"),
      nullable_StringLiteral: findType("StringLiteral?"),
      nullable_StringLiteralImpl: findType("StringLiteralImpl?"),
      nullable_StringSink: findType("StringSink?"),
      nullable_String_Function_Match: findType("String(Match)?"),
      nullable_String_Function_String: findType("String(String)?"),
      nullable_SwitchMember: findType("SwitchMember?"),
      nullable_Template_of_Message_Function_Token: findType("Template<Message(Token)>?"),
      nullable_Token: findType("Token?"),
      nullable_TypeAnnotation: findType("TypeAnnotation?"),
      nullable_TypeAnnotationImpl: findType("TypeAnnotationImpl?"),
      nullable_TypeArgumentList: findType("TypeArgumentList?"),
      nullable_TypeArgumentListImpl: findType("TypeArgumentListImpl?"),
      nullable_TypeName: findType("TypeName?"),
      nullable_TypeParameterList: findType("TypeParameterList?"),
      nullable_TypeParameterListImpl: findType("TypeParameterListImpl?"),
      nullable_TypedLiteral: findType("TypedLiteral?"),
      nullable_Uri: findType("Uri?"),
      nullable_WithClause: findType("WithClause?"),
      nullable_WithClauseImpl: findType("WithClauseImpl?"),
      nullable__FutureListener_dynamic_dynamic: findType("_FutureListener<@,@>?"),
      nullable__Highlight: findType("_Highlight?"),
      nullable__LinkedHashSetCell: findType("_LinkedHashSetCell?"),
      nullable__Modifiers: findType("_Modifiers?"),
      nullable__ParameterDefaultValue: findType("_ParameterDefaultValue?"),
      nullable_dynamic_Function_Event: findType("@(Event)?"),
      nullable_int: findType("int?"),
      nullable_void_Function: findType("~()?"),
      nullable_void_Function_ClassBuilder: findType("~(ClassBuilder)?"),
      nullable_void_Function_ConstructorBuilder: findType("~(ConstructorBuilder)?"),
      nullable_void_Function_MethodBuilder: findType("~(MethodBuilder)?"),
      nullable_void_Function_ParameterBuilder: findType("~(ParameterBuilder)?"),
      nullable_void_Function_TypeReferenceBuilder: findType("~(TypeReferenceBuilder)?"),
      num: findType("num"),
      void: findType("~"),
      void_Function: findType("~()"),
      void_Function_Rule: findType("~(Rule)"),
      void_Function_Rule_int: findType("~(Rule,int)"),
      void_Function_String_dynamic: findType("~(String,@)")
    };
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSBool_methods = J.JSBool.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNull_methods = J.JSNull.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.NativeUint16List_methods = H.NativeUint16List.prototype;
    C.NativeUint32List_methods = H.NativeUint32List.prototype;
    C.NativeUint8List_methods = H.NativeUint8List.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.TextAreaElement_methods = W.TextAreaElement.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.Assert_0 = new D.Assert("Assert.Expression");
    C.Assert_1 = new D.Assert("Assert.Initializer");
    C.Assert_2 = new D.Assert("Assert.Statement");
    C.AsyncModifier_0 = new E.AsyncModifier("AsyncModifier.Sync");
    C.AsyncModifier_1 = new E.AsyncModifier("AsyncModifier.SyncStar");
    C.AsyncModifier_2 = new E.AsyncModifier("AsyncModifier.Async");
    C.AsyncModifier_3 = new E.AsyncModifier("AsyncModifier.AsyncStar");
    C.BlockKind_MqH = new U.BlockKind("finally clause", true);
    C.BlockKind_ZGG = new U.BlockKind("try statement", true);
    C.BlockKind_invalid_false = new U.BlockKind("invalid", false);
    C.BlockKind_statement_false = new U.BlockKind("statement", false);
    C.BlockKind_xcq = new U.BlockKind("catch clause", true);
    C.CONSTANT = new H.Instantiation1(P.math__max$closure(), H.findType("Instantiation1<int*>"));
    C.C_Base64Encoder = new P.Base64Encoder();
    C.C_Base64Codec = new P.Base64Codec();
    C.C_DefaultEquality = new U.DefaultEquality(H.findType("DefaultEquality<0&*>"));
    C.C_EmptyIterator = new H.EmptyIterator(H.findType("EmptyIterator<0&*>"));
    C.C_IterableEquality = new U.IterableEquality(H.findType("IterableEquality<@>"));
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C_JsonCodec = new P.JsonCodec();
    C.C_Link = new U.Link(H.findType("Link<BeginToken*>"));
    C.C_Link0 = new U.Link(H.findType("Link<Token*>"));
    C.C_Link2 = new U.Link(H.findType("Link<Token?>"));
    C.C_Link1 = new U.Link(H.findType("Link<TypeInfo?>"));
    C.C_NoType = new V.NoType();
    C.C_NoTypeParamOrArg = new V.NoTypeParamOrArg();
    C.C_OutOfMemoryError = new P.OutOfMemoryError();
    C.C_PrefixedType = new V.PrefixedType();
    C.C_SimpleNullableType = new V.SimpleNullableType();
    C.C_SimpleType = new V.SimpleType();
    C.C_SimpleTypeArgument1 = new V.SimpleTypeArgument1();
    C.C_SimpleTypeArgument1GtEq = new V.SimpleTypeArgument1GtEq();
    C.C_SimpleTypeArgument1GtGt = new V.SimpleTypeArgument1GtGt();
    C.C_Utf8Codec = new P.Utf8Codec();
    C.C_Utf8Encoder = new P.Utf8Encoder();
    C.C_VoidType = new V.VoidType();
    C.C__InvalidCollectionElement = new G._InvalidCollectionElement();
    C.C__NullAllocator = new D._NullAllocator();
    C.C__RootZone = new P._RootZone();
    C.C__StringStackTrace = new P._StringStackTrace();
    C.Template_ijv = new Z.Template(Z.codes___withArgumentsExpectedIdentifier$closure(), type$.Template_of_legacy_legacy_Message_Function_legacy_Token);
    C.CatchParameterIdentifierContext_mF3 = new G.CatchParameterIdentifierContext("catchParameter", false, false, false, false, true, C.Template_ijv);
    C.ClassOrMixinOrExtensionIdentifierContext_ww8 = new G.ClassOrMixinOrExtensionIdentifierContext("classOrMixinDeclaration", true, false, false, false, false, C.Template_ijv);
    C.List_UNSUPPORTED_OPERATOR = H._setArrayType(makeConstList(["UNSUPPORTED_OPERATOR"]), type$.JSArray_legacy_String);
    C.Severity_1 = new N.Severity("Severity.error");
    C.Code_0 = new Z.Code("UnsupportedOperator", -1, C.List_UNSUPPORTED_OPERATOR, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.List_UNTERMINATED_STRING_LITERAL = H._setArrayType(makeConstList(["UNTERMINATED_STRING_LITERAL"]), type$.JSArray_legacy_String);
    C.Code_2ru = new Z.Code("UnterminatedString", -1, C.List_UNTERMINATED_STRING_LITERAL, type$.Code_of_legacy_legacy_Message_Function_2_legacy_String_and_legacy_String);
    C.List_EXPECTED_EXECUTABLE = H._setArrayType(makeConstList(["EXPECTED_EXECUTABLE"]), type$.JSArray_legacy_String);
    C.Code_6YB = new Z.Code("ExpectedDeclaration", -1, C.List_EXPECTED_EXECUTABLE, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.List_ILLEGAL_CHARACTER = H._setArrayType(makeConstList(["ILLEGAL_CHARACTER"]), type$.JSArray_legacy_String);
    C.Code_7A3 = new Z.Code("NonAsciiIdentifier", -1, C.List_ILLEGAL_CHARACTER, H.findType("Code<Message*(String*,int*)*>"));
    C.List_CONST_NOT_INITIALIZED = H._setArrayType(makeConstList(["CONST_NOT_INITIALIZED"]), type$.JSArray_legacy_String);
    C.Code_8eb = new Z.Code("ConstFieldWithoutInitializer", -1, C.List_CONST_NOT_INITIALIZED, type$.Code_of_legacy_legacy_Message_Function_legacy_String);
    C.Severity_3 = new N.Severity("Severity.internalProblem");
    C.Code_ASw = new Z.Code("InternalProblemStackNotEmpty", -1, null, type$.Code_of_legacy_legacy_Message_Function_2_legacy_String_and_legacy_String);
    C.List_MISSING_ENUM_BODY = H._setArrayType(makeConstList(["MISSING_ENUM_BODY"]), type$.JSArray_legacy_String);
    C.Code_Azp = new Z.Code("ExpectedEnumBody", -1, C.List_MISSING_ENUM_BODY, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.Code_BinaryOperatorWrittenOut_112_null = new Z.Code("BinaryOperatorWrittenOut", 112, null, type$.Code_of_legacy_legacy_Message_Function_2_legacy_String_and_legacy_String);
    C.Code_ConflictingModifiers_59_null = new Z.Code("ConflictingModifiers", 59, null, type$.Code_of_legacy_legacy_Message_Function_2_legacy_String_and_legacy_String);
    C.Code_DuplicatedModifier_70_null = new Z.Code("DuplicatedModifier", 70, null, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.Code_ERY = new Z.Code("DuplicateLabelInSwitchStatement", 72, null, type$.Code_of_legacy_legacy_Message_Function_legacy_String);
    C.Code_ExpectedClassOrMixinBody_8_null = new Z.Code("ExpectedClassOrMixinBody", 8, null, type$.Code_of_legacy_legacy_Message_Function_legacy_String);
    C.Code_ExpectedInstead_41_null = new Z.Code("ExpectedInstead", 41, null, type$.Code_of_legacy_legacy_Message_Function_legacy_String);
    C.Code_ExperimentNotEnabled_48_null = new Z.Code("ExperimentNotEnabled", 48, null, type$.Code_of_legacy_legacy_Message_Function_2_legacy_String_and_legacy_String);
    C.Code_ExtraneousModifier_77_null = new Z.Code("ExtraneousModifier", 77, null, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.Code_InternalProblemUnhandled_m1_null = new Z.Code("InternalProblemUnhandled", -1, null, type$.Code_of_legacy_legacy_Message_Function_2_legacy_String_and_legacy_String);
    C.Code_InvalidOperator_39_null = new Z.Code("InvalidOperator", 39, null, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.List_EXPECTED_CLASS_MEMBER = H._setArrayType(makeConstList(["EXPECTED_CLASS_MEMBER"]), type$.JSArray_legacy_String);
    C.Code_K6C = new Z.Code("ExpectedClassMember", -1, C.List_EXPECTED_CLASS_MEMBER, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.Code_LiteralWithClassAndNew_115_null = new Z.Code("LiteralWithClassAndNew", 115, null, type$.Code_of_legacy_legacy_Message_Function_2_legacy_String_and_legacy_Token);
    C.Code_LiteralWithClass_116_null = new Z.Code("LiteralWithClass", 116, null, type$.Code_of_legacy_legacy_Message_Function_2_legacy_String_and_legacy_Token);
    C.List_BUILT_IN_IDENTIFIER_AS_TYPE = H._setArrayType(makeConstList(["BUILT_IN_IDENTIFIER_AS_TYPE"]), type$.JSArray_legacy_String);
    C.Code_MDT = new Z.Code("BuiltInIdentifierAsType", -1, C.List_BUILT_IN_IDENTIFIER_AS_TYPE, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.List_EXPECTED_TOKEN = H._setArrayType(makeConstList(["EXPECTED_TOKEN"]), type$.JSArray_legacy_String);
    C.Code_MUB = new Z.Code("ExpectedAfterButGot", -1, C.List_EXPECTED_TOKEN, type$.Code_of_legacy_legacy_Message_Function_legacy_String);
    C.Code_ModifierOutOfOrder_56_null = new Z.Code("ModifierOutOfOrder", 56, null, type$.Code_of_legacy_legacy_Message_Function_2_legacy_String_and_legacy_String);
    C.List_FINAL_NOT_INITIALIZED = H._setArrayType(makeConstList(["FINAL_NOT_INITIALIZED"]), type$.JSArray_legacy_String);
    C.Code_OXJ = new Z.Code("FinalFieldWithoutInitializer", -1, C.List_FINAL_NOT_INITIALIZED, type$.Code_of_legacy_legacy_Message_Function_legacy_String);
    C.List_EXPECTED_STRING_LITERAL = H._setArrayType(makeConstList(["EXPECTED_STRING_LITERAL"]), type$.JSArray_legacy_String);
    C.Code_P50 = new Z.Code("ExpectedString", -1, C.List_EXPECTED_STRING_LITERAL, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.List_UNEXPECTED_TOKEN = H._setArrayType(makeConstList(["UNEXPECTED_TOKEN"]), type$.JSArray_legacy_String);
    C.Code_QEL = new Z.Code("UnexpectedModifierInNonNnbd", -1, C.List_UNEXPECTED_TOKEN, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.Code_U4q = new Z.Code("ExpectedIdentifierButGotKeyword", 113, null, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.List_23h = H._setArrayType(makeConstList(["BUILT_IN_IDENTIFIER_IN_DECLARATION"]), type$.JSArray_legacy_String);
    C.Code_UcG = new Z.Code("BuiltInIdentifierInDeclaration", -1, C.List_23h, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.List_MISSING_IDENTIFIER = H._setArrayType(makeConstList(["MISSING_IDENTIFIER"]), type$.JSArray_legacy_String);
    C.Code_a3F = new Z.Code("ExpectedIdentifier", -1, C.List_MISSING_IDENTIFIER, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.Code_e3S = new Z.Code("UnexpectedToken", -1, C.List_UNEXPECTED_TOKEN, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.Code_gT2 = new Z.Code("ExpectedButGot", -1, C.List_EXPECTED_TOKEN, type$.Code_of_legacy_legacy_Message_Function_legacy_String);
    C.Code_ge0 = new Z.Code("ExtraneousModifierInExtension", 98, null, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.Code_kmC = new Z.Code("UnmatchedToken", -1, C.List_EXPECTED_TOKEN, type$.Code_of_legacy_legacy_Message_Function_2_legacy_String_and_legacy_Token);
    C.Code_qdq = new Z.Code("AsciiControlCharacter", -1, C.List_ILLEGAL_CHARACTER, type$.Code_of_legacy_legacy_Message_Function_legacy_int);
    C.List_MISSING_FUNCTION_BODY = H._setArrayType(makeConstList(["MISSING_FUNCTION_BODY"]), type$.JSArray_legacy_String);
    C.Code_uFz = new Z.Code("ExpectedFunctionBody", -1, C.List_MISSING_FUNCTION_BODY, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.Code_v60 = new Z.Code("ExpectedToken", -1, C.List_EXPECTED_TOKEN, type$.Code_of_legacy_legacy_Message_Function_legacy_String);
    C.List_EXPECTED_TYPE_NAME = H._setArrayType(makeConstList(["EXPECTED_TYPE_NAME"]), type$.JSArray_legacy_String);
    C.Code_vMb = new Z.Code("ExpectedType", -1, C.List_EXPECTED_TYPE_NAME, type$.Code_of_legacy_legacy_Message_Function_legacy_Token);
    C.Code_wC2 = new Z.Code("NonAsciiWhitespace", -1, C.List_ILLEGAL_CHARACTER, type$.Code_of_legacy_legacy_Message_Function_legacy_int);
    C.CombinatorIdentifierContext_7Mr = new G.CombinatorIdentifierContext("combinator", false, false, false, false, true, C.Template_ijv);
    C.CommentType_0 = new Q.CommentType("CommentType.doc");
    C.CommentType_1 = new Q.CommentType("CommentType.line");
    C.CommentType_2 = new Q.CommentType("CommentType.block");
    C.CommentType_3 = new Q.CommentType("CommentType.inlineBlock");
    C.CompileTimeErrorCode_0 = new A.CompileTimeErrorCode("CONCRETE_CLASS_WITH_ABSTRACT_MEMBER", "CompileTimeErrorCode.CONCRETE_CLASS_WITH_ABSTRACT_MEMBER", "'{0}' must have a method body because '{1}' isn't abstract.", "Try making '{1}' abstract, or adding a body to '{0}'.");
    C.CompileTimeErrorCode_00 = new A.CompileTimeErrorCode("INVALID_MODIFIER_ON_SETTER", "CompileTimeErrorCode.INVALID_MODIFIER_ON_SETTER", "The modifier '{0}' can't be applied to the body of a setter.", "Try removing the modifier.");
    C.CompileTimeErrorCode_2NL = new A.CompileTimeErrorCode(string$.FIELD_, "CompileTimeErrorCode.FIELD_INITIALIZER_REDIRECTING_CONSTRUCTOR", "The redirecting constructor can't have a field initializer.", "Try initializing the field in the constructor being redirected to.");
    C.CompileTimeErrorCode_4QF = new A.CompileTimeErrorCode("LABEL_UNDEFINED", "CompileTimeErrorCode.LABEL_UNDEFINED", "Can't reference an undefined label '{0}'.", "Try defining the label, or correcting the name to match an existing label.");
    C.CompileTimeErrorCode_65l = new A.CompileTimeErrorCode("AWAIT_IN_WRONG_CONTEXT", "CompileTimeErrorCode.AWAIT_IN_WRONG_CONTEXT", "The await expression can only be used in an async function.", "Try marking the function body with either 'async' or 'async*'.");
    C.CompileTimeErrorCode_6t1 = new A.CompileTimeErrorCode("WRONG_NUMBER_OF_PARAMETERS_FOR_SETTER", "CompileTimeErrorCode.WRONG_NUMBER_OF_PARAMETERS_FOR_SETTER", "Setters must declare exactly one required positional parameter.", null);
    C.CompileTimeErrorCode_86y = new A.CompileTimeErrorCode(string$.WRONG_, "CompileTimeErrorCode.WRONG_NUMBER_OF_TYPE_ARGUMENTS_CONSTRUCTOR", "The constructor '{0}.{1}' doesn't have type parameters.", "Try moving type arguments to after the type name.");
    C.CompileTimeErrorCode_CWV = new A.CompileTimeErrorCode("INVALID_CAST_FUNCTION_EXPR", "CompileTimeErrorCode.INVALID_CAST_FUNCTION_EXPR", "The function expression type '{0}' isn't of type '{1}'. This means its parameter or return type doesn't match what is expected. Consider changing parameter type(s) or the returned type(s).", null);
    C.CompileTimeErrorCode_D1o = new A.CompileTimeErrorCode("BUILT_IN_IDENTIFIER_AS_TYPE", "CompileTimeErrorCode.BUILT_IN_IDENTIFIER_AS_TYPE", "The built-in identifier '{0}' can't be used as a type.", "Try correcting the name to match an existing type.");
    C.CompileTimeErrorCode_EoN = new A.CompileTimeErrorCode("FINAL_NOT_INITIALIZED", "CompileTimeErrorCode.FINAL_NOT_INITIALIZED", "The final variable '{0}' must be initialized.", "Try initializing the variable.");
    C.CompileTimeErrorCode_EyN = new A.CompileTimeErrorCode("INVALID_INLINE_FUNCTION_TYPE", "CompileTimeErrorCode.INVALID_INLINE_FUNCTION_TYPE", "Inline function types can't be used for parameters in a generic function type.", string$.Try_us);
    C.CompileTimeErrorCode_G7N = new A.CompileTimeErrorCode("UNDEFINED_CLASS", "CompileTimeErrorCode.UNDEFINED_CLASS", "Undefined class '{0}'.", "Try changing the name to the name of an existing class, or creating a class with the name '{0}'.");
    C.CompileTimeErrorCode_GKK = new A.CompileTimeErrorCode("INVALID_CAST_METHOD", "CompileTimeErrorCode.INVALID_CAST_METHOD", "The method tear-off '{0}' has type '{1}' that isn't of expected type '{2}'. This means its parameter or return type doesn't match what is expected.", null);
    C.CompileTimeErrorCode_IVQ = new A.CompileTimeErrorCode("INVALID_CAST_NEW_EXPR", "CompileTimeErrorCode.INVALID_CAST_NEW_EXPR", "The constructor returns type '{0}' that isn't of expected type '{1}'.", null);
    C.CompileTimeErrorCode_IcR = new A.CompileTimeErrorCode("NON_SYNC_FACTORY", "CompileTimeErrorCode.NON_SYNC_FACTORY", string$.Factorb, null);
    C.CompileTimeErrorCode_IwT = new A.CompileTimeErrorCode("INVALID_CAST_LITERAL_MAP", "CompileTimeErrorCode.INVALID_CAST_LITERAL_MAP", "The map literal type '{0}' isn't of expected type '{1}'. The maps's type can be changed with an explicit generic type arguments or by changing the key and value types.", null);
    C.CompileTimeErrorCode_O16 = new A.CompileTimeErrorCode("ASYNC_FOR_IN_WRONG_CONTEXT", "CompileTimeErrorCode.ASYNC_FOR_IN_WRONG_CONTEXT", "The async for-in loop can only be used in an async function.", "Try marking the function body with either 'async' or 'async*', or removing the 'await' before the for-in loop.");
    C.CompileTimeErrorCode_Odn = new A.CompileTimeErrorCode("FINAL_NOT_INITIALIZED_CONSTRUCTOR", "CompileTimeErrorCode.FINAL_NOT_INITIALIZED_CONSTRUCTOR_1", "All final variables must be initialized, but '{0}' isn't.", "Try adding an initializer for the field.");
    C.CompileTimeErrorCode_SW7 = new A.CompileTimeErrorCode("UNDEFINED_SETTER", "CompileTimeErrorCode.UNDEFINED_SETTER", "The setter '{0}' isn't defined for the type '{1}'.", "Try importing the library that defines '{0}', correcting the name to the name of an existing setter, or defining a setter or field named '{0}'.");
    C.CompileTimeErrorCode_SfA = new A.CompileTimeErrorCode("SUPER_IN_REDIRECTING_CONSTRUCTOR", "CompileTimeErrorCode.SUPER_IN_REDIRECTING_CONSTRUCTOR", "The redirecting constructor can't have a 'super' initializer.", null);
    C.CompileTimeErrorCode_UCF = new A.CompileTimeErrorCode("INVALID_CAST_LITERAL_SET", "CompileTimeErrorCode.INVALID_CAST_LITERAL_SET", "The set literal type '{0}' isn't of expected type '{1}'. The set's type can be changed with an explicit generic type argument or by changing the element types.", null);
    C.CompileTimeErrorCode_VWp = new A.CompileTimeErrorCode("UNDEFINED_METHOD", "CompileTimeErrorCode.UNDEFINED_METHOD", "The method '{0}' isn't defined for the type '{1}'.", "Try correcting the name to the name of an existing method, or defining a method named '{0}'.");
    C.CompileTimeErrorCode_ckJ = new A.CompileTimeErrorCode("RECURSIVE_CONSTRUCTOR_REDIRECT", "CompileTimeErrorCode.RECURSIVE_CONSTRUCTOR_REDIRECT", "Constructors can't redirect to themselves either directly or indirectly.", "Try changing one of the constructors in the loop to not redirect.");
    C.CompileTimeErrorCode_fw6 = new A.CompileTimeErrorCode("INVALID_CAST_LITERAL_LIST", "CompileTimeErrorCode.INVALID_CAST_LITERAL_LIST", "The list literal type '{0}' isn't of expected type '{1}'. The list's type can be changed with an explicit generic type argument or by changing the element types.", null);
    C.CompileTimeErrorCode_gRf = new A.CompileTimeErrorCode("INVALID_CAST_FUNCTION", "CompileTimeErrorCode.INVALID_CAST_FUNCTION", "The function '{0}' has type '{1}' that isn't of expected type '{2}'. This means its parameter or return type doesn't match what is expected.", null);
    C.CompileTimeErrorCode_iL9 = new A.CompileTimeErrorCode("INVALID_SUPER_INVOCATION", "CompileTimeErrorCode.INVALID_SUPER_INVOCATION", "The superclass call must be last in an initializer list: '{0}'.", null);
    C.CompileTimeErrorCode_lQF = new A.CompileTimeErrorCode("UNDEFINED_GETTER", "CompileTimeErrorCode.UNDEFINED_GETTER", "The getter '{0}' isn't defined for the type '{1}'.", "Try importing the library that defines '{0}', correcting the name to the name of an existing getter, or defining a getter or field named '{0}'.");
    C.CompileTimeErrorCode_lm1 = new A.CompileTimeErrorCode("RETURN_IN_GENERATOR", "CompileTimeErrorCode.RETURN_IN_GENERATOR", "Can't return a value from a generator function that uses the 'async*' or 'sync*' modifier.", "Try replacing 'return' with 'yield', using a block function body, or changing the method body modifier.");
    C.CompileTimeErrorCode_qJO = new A.CompileTimeErrorCode("CONST_NOT_INITIALIZED", "CompileTimeErrorCode.CONST_NOT_INITIALIZED", "The constant '{0}' must be initialized.", "Try adding an initialization to the declaration.");
    C.CompileTimeErrorCode_s0P = new A.CompileTimeErrorCode("YIELD_IN_NON_GENERATOR", "CompileTimeErrorCode.YIELD_IN_NON_GENERATOR", "Yield statements must be in a generator function (one marked with either 'async*' or 'sync*').", "Try adding 'async*' or 'sync*' to the enclosing function.");
    C.CompileTimeErrorCode_sCM = new A.CompileTimeErrorCode("INVALID_ASSIGNMENT", "CompileTimeErrorCode.INVALID_ASSIGNMENT", "A value of type '{0}' can't be assigned to a variable of type '{1}'.", "Try changing the type of the variable, or casting the right-hand type to '{1}'.");
    C.CompileTimeErrorCode_wIv = new A.CompileTimeErrorCode("IMPORT_OF_NON_LIBRARY", "CompileTimeErrorCode.IMPORT_OF_NON_LIBRARY", "The imported library '{0}' can't have a part-of directive.", "Try importing the library that the part is a part of.");
    C.CompileTimeErrorCode_yBw = new A.CompileTimeErrorCode("INVALID_OVERRIDE", "CompileTimeErrorCode.INVALID_OVERRIDE", "'{1}.{0}' ('{2}') isn't a valid override of '{3}.{0}' ('{4}').", null);
    C.ConstructorReferenceContext_0 = new E.ConstructorReferenceContext("ConstructorReferenceContext.New");
    C.ConstructorReferenceContext_1 = new E.ConstructorReferenceContext("ConstructorReferenceContext.Const");
    C.ConstructorReferenceContext_2 = new E.ConstructorReferenceContext("ConstructorReferenceContext.Implicit");
    C.ConstructorReferenceContext_3 = new E.ConstructorReferenceContext("ConstructorReferenceContext.RedirectingFactory");
    C.ConstructorReferenceIdentifierContext_LOq = new G.ConstructorReferenceIdentifierContext("constructorReference", false, false, false, false, true, C.Template_ijv);
    C.ConstructorReferenceIdentifierContext_Ru4 = new G.ConstructorReferenceIdentifierContext("constructorReferenceContinuation", false, false, false, true, true, C.Template_ijv);
    C.ConstructorReferenceIdentifierContext_qhc = new G.ConstructorReferenceIdentifierContext("constructorReferenceContinuationAfterTypeArguments", false, false, false, true, true, C.Template_ijv);
    C.DeclarationKind_0 = new S.DeclarationKind("DeclarationKind.TopLevel");
    C.DeclarationKind_1 = new S.DeclarationKind("DeclarationKind.Class");
    C.DeclarationKind_2 = new S.DeclarationKind("DeclarationKind.Mixin");
    C.DeclarationKind_3 = new S.DeclarationKind("DeclarationKind.Extension");
    C.DirectiveState_0 = new A.DirectiveState(0, "DirectiveState.Unknown");
    C.DirectiveState_1 = new A.DirectiveState(1, "DirectiveState.Script");
    C.DirectiveState_2 = new A.DirectiveState(2, "DirectiveState.Library");
    C.DirectiveState_3 = new A.DirectiveState(3, "DirectiveState.ImportAndExport");
    C.DirectiveState_4 = new A.DirectiveState(4, "DirectiveState.Part");
    C.DirectiveState_5 = new A.DirectiveState(5, "DirectiveState.PartOf");
    C.DirectiveState_6 = new A.DirectiveState(6, "DirectiveState.Declarations");
    C.DottedNameIdentifierContext_idk = new G.DottedNameIdentifierContext("dottedNameContinuation", false, false, false, true, true, C.Template_ijv);
    C.DottedNameIdentifierContext_w5d = new G.DottedNameIdentifierContext("dottedName", false, false, false, false, true, C.Template_ijv);
    C.ElseEntry_true_0 = new R.ElseEntry(true, 0);
    C.ElseSpread_false_0 = new R.ElseSpread(false, 0);
    C.EnumDeclarationIdentifierContext_aTW = new G.EnumDeclarationIdentifierContext("enumDeclaration", true, false, false, false, false, C.Template_ijv);
    C.EnumValueDeclarationIdentifierContext_0qv = new G.EnumValueDeclarationIdentifierContext("enumValueDeclaration", true, false, false, false, true, C.Template_ijv);
    C.ErrorSeverity_ERROR_3 = new A.ErrorSeverity("ERROR", 3);
    C.ErrorType_COMPILE_TIME_ERROR_2 = new A.ErrorType("COMPILE_TIME_ERROR", 2);
    C.ErrorSeverity_INFO_1 = new A.ErrorSeverity("INFO", 1);
    C.ErrorType_HINT_1 = new A.ErrorType("HINT", 1);
    C.ErrorType_SYNTACTIC_ERROR_6 = new A.ErrorType("SYNTACTIC_ERROR", 6);
    C.ExpressionIdentifierContext_H5Y = new G.ExpressionIdentifierContext("expression", false, false, false, false, true, C.Template_ijv);
    C.ExpressionIdentifierContext_cW1 = new G.ExpressionIdentifierContext("expressionContinuation", false, false, false, true, true, C.Template_ijv);
    C.ExtensionShowHideElementIdentifierContext_kyU = new G.ExtensionShowHideElementIdentifierContext(2, "extensionShowHideElementOperator", true, false, false, false, true, C.Template_ijv);
    C.ExtensionShowHideElementIdentifierContext_uwi = new G.ExtensionShowHideElementIdentifierContext(0, "extensionShowHideElementGetter", true, false, false, false, true, C.Template_ijv);
    C.ExtensionShowHideElementIdentifierContext_uwi0 = new G.ExtensionShowHideElementIdentifierContext(3, "extensionShowHideElementSetter", true, false, false, false, true, C.Template_ijv);
    C.ExtensionShowHideElementIdentifierContext_yrN = new G.ExtensionShowHideElementIdentifierContext(1, "extensionShowHideElementMemberOrType", true, false, false, false, true, C.Template_ijv);
    C.FieldDeclarationIdentifierContext_KiL = new G.FieldDeclarationIdentifierContext("fieldDeclaration", true, false, false, false, true, C.Template_ijv);
    C.FieldInitializerIdentifierContext_adz = new G.FieldInitializerIdentifierContext("fieldInitializer", false, false, false, true, true, C.Template_ijv);
    C.FieldModifier_0 = new F.FieldModifier("FieldModifier.var$");
    C.FieldModifier_1 = new F.FieldModifier("FieldModifier.final$");
    C.FieldModifier_2 = new F.FieldModifier("FieldModifier.constant");
    C.ForComplete_false_0 = new R.ForComplete(false, 0);
    C.ForEntry_true_0 = new R.ForEntry(true, 0);
    C.ForInComplete_false_0 = new R.ForInComplete(false, 0);
    C.ForInEntry_true_0 = new R.ForInEntry(true, 0);
    C.ForInSpread_false_0 = new R.ForInSpread(false, 0);
    C.ForSpread_false_0 = new R.ForSpread(false, 0);
    C.FormalParameterDeclarationIdentifierContext_al8 = new G.FormalParameterDeclarationIdentifierContext("formalParameterDeclaration", true, false, false, false, true, C.Template_ijv);
    C.FormalParameterKind_0 = new M.FormalParameterKind("FormalParameterKind.mandatory");
    C.FormalParameterKind_1 = new M.FormalParameterKind("FormalParameterKind.optionalNamed");
    C.FormalParameterKind_2 = new M.FormalParameterKind("FormalParameterKind.optionalPositional");
    C.HintCode_2Vk = new O.HintCode("INVALID_LANGUAGE_VERSION_OVERRIDE", "INVALID_LANGUAGE_VERSION_OVERRIDE_GREATER", "The language version override can't specify a version greater than the latest known language version: {0}.{1}", "Try removing the language version override.");
    C.IfComplete_false_0 = new R.IfComplete(false, 0);
    C.IfCondition_false_1 = new R.IfCondition(false, 1);
    C.IfElseComplete_false_0 = new R.IfElseComplete(false, 0);
    C.IfElse_false_m1 = new R.IfElse(false, -1);
    C.IfEntry_true_0 = new R.IfEntry(true, 0);
    C.IfSpread_false_0 = new R.IfSpread(false, 0);
    C.ImportPrefixIdentifierContext_CxF = new G.ImportPrefixIdentifierContext("importPrefixDeclaration", true, false, false, false, false, C.Template_ijv);
    C.JsonDecoder_null = new P.JsonDecoder(null);
    C.JsonType_0 = new O.JsonType("JsonType.INT");
    C.JsonType_1 = new O.JsonType("JsonType.DOUBLE");
    C.JsonType_2 = new O.JsonType("JsonType.BOOL");
    C.JsonType_3 = new O.JsonType("JsonType.STRING");
    C.JsonType_4 = new O.JsonType("JsonType.MAP");
    C.JsonType_5 = new O.JsonType("JsonType.LIST");
    C.KeywordStyle_0 = new L.KeywordStyle("KeywordStyle.reserved");
    C.KeywordStyle_1 = new L.KeywordStyle("KeywordStyle.builtIn");
    C.KeywordStyle_2 = new L.KeywordStyle("KeywordStyle.pseudo");
    C.Keyword_0 = new L.Keyword(C.KeywordStyle_2, 107, false, false, false, false, "on", "ON", 0, "on");
    C.Keyword_2No = new L.Keyword(C.KeywordStyle_2, 107, false, false, false, false, "Function", "FUNCTION", 0, "Function");
    C.Keyword_2jk = new L.Keyword(C.KeywordStyle_1, 107, false, false, false, false, "as", "AS", 8, "as");
    C.Keyword_8aB = new L.Keyword(C.KeywordStyle_1, 107, false, false, true, false, "extension", "EXTENSION", 0, "extension");
    C.Keyword_GVQ = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "is", "IS", 8, "is");
    C.Keyword_KXs = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "this", "THIS", 0, "this");
    C.Keyword_Lt0 = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "with", "WITH", 0, "with");
    C.Keyword_NcA = new L.Keyword(C.KeywordStyle_0, 107, true, false, false, false, "var", "VAR", 0, "var");
    C.Keyword_Sjd = new L.Keyword(C.KeywordStyle_1, 107, true, false, false, false, "required", "REQUIRED", 0, "required");
    C.Keyword_WRs = new L.Keyword(C.KeywordStyle_1, 107, true, false, false, false, "late", "LATE", 0, "late");
    C.Keyword_bId = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "in", "IN", 0, "in");
    C.Keyword_i1a = new L.Keyword(C.KeywordStyle_1, 107, false, false, false, false, "operator", "OPERATOR", 0, "operator");
    C.Keyword_oXM = new L.Keyword(C.KeywordStyle_0, 107, true, false, false, false, "const", "CONST", 0, "const");
    C.Keyword_rs4 = new L.Keyword(C.KeywordStyle_1, 107, false, false, false, false, "get", "GET", 0, "get");
    C.Keyword_sJO = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "while", "WHILE", 0, "while");
    C.Keyword_wbZ = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "new", "NEW", 0, "new");
    C.Keyword_yXf = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "null", "NULL", 0, "null");
    C.LabelDeclarationIdentifierContext_Wxi = new G.LabelDeclarationIdentifierContext("labelDeclaration", true, false, false, false, true, C.Template_ijv);
    C.LabelReferenceIdentifierContext_z5f = new G.LabelReferenceIdentifierContext("labelReference", false, false, false, false, true, C.Template_ijv);
    C.LibraryIdentifierContext_E9d = new G.LibraryIdentifierContext("partNameContinuation", false, true, false, true, true, C.Template_ijv);
    C.LibraryIdentifierContext_GEU = new G.LibraryIdentifierContext("libraryNameContinuation", false, true, false, true, true, C.Template_ijv);
    C.LibraryIdentifierContext_yH6 = new G.LibraryIdentifierContext("partName", false, true, false, false, true, C.Template_ijv);
    C.LibraryIdentifierContext_yLN = new G.LibraryIdentifierContext("libraryName", false, true, false, false, true, C.Template_ijv);
    C.List_2Vk = H._setArrayType(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), type$.JSArray_legacy_int);
    C.List_4Cz = H._setArrayType(makeConstList([";", ",", ")"]), type$.JSArray_legacy_String);
    C.List_6T6 = H._setArrayType(makeConstList(["<", "{", "extends", "with", "implements", "on", "="]), type$.JSArray_legacy_String);
    C.List_6z6 = H._setArrayType(makeConstList([".", "==", ")"]), type$.JSArray_legacy_String);
    C.List_8eb = H._setArrayType(makeConstList([".", "(", "{", "=>"]), type$.JSArray_legacy_String);
    C.List_CO9 = H._setArrayType(makeConstList([".", ",", "(", ")", "[", "]", "{", "}", "?", ":", ";"]), type$.JSArray_legacy_String);
    C.List_CVk = H._setArrayType(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), type$.JSArray_legacy_int);
    C.List_CpJ = H._setArrayType(makeConstList([",", "}"]), type$.JSArray_legacy_String);
    C.List_Dnn = H._setArrayType(makeConstList([".", "(", "{", "=>", "}"]), type$.JSArray_legacy_String);
    C.List_EBV = H._setArrayType(makeConstList([":", "=", ",", "(", ")", "[", "]", "{", "}"]), type$.JSArray_legacy_String);
    C.Keyword_Ktx = new L.Keyword(C.KeywordStyle_1, 107, true, false, false, false, "abstract", "ABSTRACT", 0, "abstract");
    C.Keyword_ugl = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "assert", "ASSERT", 0, "assert");
    C.Keyword_o8Y = new L.Keyword(C.KeywordStyle_2, 107, false, false, false, false, "async", "ASYNC", 0, "async");
    C.Keyword_NPk = new L.Keyword(C.KeywordStyle_2, 107, false, false, false, false, "await", "AWAIT", 0, "await");
    C.Keyword_EZU = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "break", "BREAK", 0, "break");
    C.Keyword_HTJ = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "case", "CASE", 0, "case");
    C.Keyword_6nc = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "catch", "CATCH", 0, "catch");
    C.Keyword_Y1I = new L.Keyword(C.KeywordStyle_0, 107, false, false, true, false, "class", "CLASS", 0, "class");
    C.Keyword_HxY = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "continue", "CONTINUE", 0, "continue");
    C.Keyword_hk6 = new L.Keyword(C.KeywordStyle_1, 107, true, false, false, false, "covariant", "COVARIANT", 0, "covariant");
    C.Keyword_4m4 = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "default", "DEFAULT", 0, "default");
    C.Keyword_4i6 = new L.Keyword(C.KeywordStyle_1, 107, false, false, false, false, "deferred", "DEFERRED", 0, "deferred");
    C.Keyword_4CA = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "do", "DO", 0, "do");
    C.Keyword_IQR = new L.Keyword(C.KeywordStyle_1, 107, false, false, false, false, "dynamic", "DYNAMIC", 0, "dynamic");
    C.Keyword_IoN = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "else", "ELSE", 0, "else");
    C.Keyword_ejd = new L.Keyword(C.KeywordStyle_0, 107, false, false, true, false, "enum", "ENUM", 0, "enum");
    C.Keyword_aXZ = new L.Keyword(C.KeywordStyle_1, 107, false, false, true, false, "export", "EXPORT", 0, "export");
    C.Keyword_chs = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "extends", "EXTENDS", 0, "extends");
    C.Keyword_sIG = new L.Keyword(C.KeywordStyle_1, 107, true, false, false, false, "external", "EXTERNAL", 0, "external");
    C.Keyword_rH7 = new L.Keyword(C.KeywordStyle_1, 107, false, false, false, false, "factory", "FACTORY", 0, "factory");
    C.Keyword_jTd = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "false", "FALSE", 0, "false");
    C.Keyword_CFX = new L.Keyword(C.KeywordStyle_0, 107, true, false, false, false, "final", "FINAL", 0, "final");
    C.Keyword_mNZ = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "finally", "FINALLY", 0, "finally");
    C.Keyword_Iua = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "for", "FOR", 0, "for");
    C.Keyword_k4X = new L.Keyword(C.KeywordStyle_2, 107, false, false, false, false, "hide", "HIDE", 0, "hide");
    C.Keyword_33r = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "if", "IF", 0, "if");
    C.Keyword_3VL = new L.Keyword(C.KeywordStyle_1, 107, false, false, false, false, "implements", "IMPLEMENTS", 0, "implements");
    C.Keyword_qgg = new L.Keyword(C.KeywordStyle_1, 107, false, false, true, false, "import", "IMPORT", 0, "import");
    C.Keyword_sQ0 = new L.Keyword(C.KeywordStyle_2, 107, false, false, false, false, "inout", "INOUT", 0, "inout");
    C.Keyword_MT8 = new L.Keyword(C.KeywordStyle_1, 107, false, false, false, false, "interface", "INTERFACE", 0, "interface");
    C.Keyword_V0o = new L.Keyword(C.KeywordStyle_1, 107, false, false, true, false, "library", "LIBRARY", 0, "library");
    C.Keyword_2jN = new L.Keyword(C.KeywordStyle_1, 107, false, false, true, false, "mixin", "MIXIN", 0, "mixin");
    C.Keyword_v5l = new L.Keyword(C.KeywordStyle_2, 107, false, false, false, false, "native", "NATIVE", 0, "native");
    C.Keyword_xw8 = new L.Keyword(C.KeywordStyle_2, 107, false, false, false, false, "of", "OF", 0, "of");
    C.Keyword_3h3 = new L.Keyword(C.KeywordStyle_2, 107, false, false, false, false, "out", "OUT", 0, "out");
    C.Keyword_6v8 = new L.Keyword(C.KeywordStyle_1, 107, false, false, true, false, "part", "PART", 0, "part");
    C.Keyword_cKo = new L.Keyword(C.KeywordStyle_2, 107, false, false, false, false, "patch", "PATCH", 0, "patch");
    C.Keyword_gtU = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "rethrow", "RETHROW", 0, "rethrow");
    C.Keyword_rT0 = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "return", "RETURN", 0, "return");
    C.Keyword_tTi = new L.Keyword(C.KeywordStyle_1, 107, false, false, false, false, "set", "SET", 0, "set");
    C.Keyword_HrD = new L.Keyword(C.KeywordStyle_2, 107, false, false, false, false, "show", "SHOW", 0, "show");
    C.Keyword_WNt = new L.Keyword(C.KeywordStyle_2, 107, false, false, false, false, "source", "SOURCE", 0, "source");
    C.Keyword_mlD = new L.Keyword(C.KeywordStyle_1, 107, true, false, false, false, "static", "STATIC", 0, "static");
    C.Keyword_ccb = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "super", "SUPER", 0, "super");
    C.Keyword_MEW = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "switch", "SWITCH", 0, "switch");
    C.Keyword_bvC = new L.Keyword(C.KeywordStyle_2, 107, false, false, false, false, "sync", "SYNC", 0, "sync");
    C.Keyword_wAg = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "throw", "THROW", 0, "throw");
    C.Keyword_062 = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "true", "TRUE", 0, "true");
    C.Keyword_olH = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "try", "TRY", 0, "try");
    C.Keyword_ftH = new L.Keyword(C.KeywordStyle_1, 107, false, false, true, false, "typedef", "TYPEDEF", 0, "typedef");
    C.Keyword_ROM = new L.Keyword(C.KeywordStyle_0, 107, false, false, false, false, "void", "VOID", 0, "void");
    C.Keyword_uvG = new L.Keyword(C.KeywordStyle_2, 107, false, false, false, false, "yield", "YIELD", 0, "yield");
    C.List_Gvb = H._setArrayType(makeConstList([C.Keyword_Ktx, C.Keyword_2jk, C.Keyword_ugl, C.Keyword_o8Y, C.Keyword_NPk, C.Keyword_EZU, C.Keyword_HTJ, C.Keyword_6nc, C.Keyword_Y1I, C.Keyword_oXM, C.Keyword_HxY, C.Keyword_hk6, C.Keyword_4m4, C.Keyword_4i6, C.Keyword_4CA, C.Keyword_IQR, C.Keyword_IoN, C.Keyword_ejd, C.Keyword_aXZ, C.Keyword_chs, C.Keyword_8aB, C.Keyword_sIG, C.Keyword_rH7, C.Keyword_jTd, C.Keyword_CFX, C.Keyword_mNZ, C.Keyword_Iua, C.Keyword_2No, C.Keyword_rs4, C.Keyword_k4X, C.Keyword_33r, C.Keyword_3VL, C.Keyword_qgg, C.Keyword_bId, C.Keyword_sQ0, C.Keyword_MT8, C.Keyword_GVQ, C.Keyword_WRs, C.Keyword_V0o, C.Keyword_2jN, C.Keyword_v5l, C.Keyword_wbZ, C.Keyword_yXf, C.Keyword_xw8, C.Keyword_0, C.Keyword_i1a, C.Keyword_3h3, C.Keyword_6v8, C.Keyword_cKo, C.Keyword_Sjd, C.Keyword_gtU, C.Keyword_rT0, C.Keyword_tTi, C.Keyword_HrD, C.Keyword_WNt, C.Keyword_mlD, C.Keyword_ccb, C.Keyword_MEW, C.Keyword_bvC, C.Keyword_KXs, C.Keyword_wAg, C.Keyword_062, C.Keyword_olH, C.Keyword_ftH, C.Keyword_NcA, C.Keyword_ROM, C.Keyword_sJO, C.Keyword_Lt0, C.Keyword_uvG]), H.findType("JSArray<Keyword*>"));
    C.List_IXH = H._setArrayType(makeConstList([")", "?", "??", ",", ";", ":", "is", "as", ".."]), type$.JSArray_legacy_String);
    C.List_JYB = H._setArrayType(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), type$.JSArray_legacy_int);
    C.List_Jcu = H._setArrayType(makeConstList(["<", ">", ">>", ">>>", ";", "}", "extends", "super", "=", ">="]), type$.JSArray_legacy_String);
    C.List_Kp9 = H._setArrayType(makeConstList([";", ",", "if", "as", "show", "hide"]), type$.JSArray_legacy_String);
    C.List_NMh = H._setArrayType(makeConstList([";", "=", ",", "}"]), type$.JSArray_legacy_String);
    C.List_PHH = H._setArrayType(makeConstList([":"]), type$.JSArray_legacy_String);
    C.List_QYh = H._setArrayType(makeConstList([",", ")"]), type$.JSArray_legacy_String);
    C.List_Tvy = H._setArrayType(makeConstList(["<", ",", ">"]), type$.JSArray_legacy_String);
    C.List_Xul = H._setArrayType(makeConstList(["const", "get", "final", "set", "var", "void"]), type$.JSArray_legacy_String);
    C.List_YwG = H._setArrayType(makeConstList([";", "if", "show", "hide", "deferred", "as"]), type$.JSArray_legacy_String);
    C.List_aFE = H._setArrayType(makeConstList([".", ";"]), type$.JSArray_legacy_String);
    C.List_aTZ = H._setArrayType(makeConstList(["(", "<", "=", ";"]), type$.JSArray_legacy_String);
    C.List_apY = H._setArrayType(makeConstList(["if", "deferred", "as", "hide", "show", ";"]), type$.JSArray_legacy_String);
    C.List_as_is = H._setArrayType(makeConstList(["as", "is"]), type$.JSArray_legacy_String);
    C.List_bnB = H._setArrayType(makeConstList(["<", ">", ")", "[", "]", "[]", "{", "}", ",", ";"]), type$.JSArray_legacy_String);
    C.List_cKo = H._setArrayType(makeConstList(["on", "implements", "{"]), type$.JSArray_legacy_String);
    C.List_cdS = H._setArrayType(makeConstList([";", ",", ")", "{", "}", "|", "||", "&", "&&"]), type$.JSArray_legacy_String);
    C.List_egL = H._setArrayType(makeConstList(["=", ":", ",", ")", "]", "}"]), type$.JSArray_legacy_String);
    C.List_empty = H._setArrayType(makeConstList([]), type$.JSArray_dynamic);
    C.List_empty2 = H._setArrayType(makeConstList([]), H.findType("JSArray<AnalysisError*>"));
    C.List_empty3 = H._setArrayType(makeConstList([]), H.findType("JSArray<CommentReference*>"));
    C.List_empty5 = H._setArrayType(makeConstList([]), H.findType("JSArray<ConstructorInitializer*>"));
    C.List_empty0 = H._setArrayType(makeConstList([]), H.findType("JSArray<DiagnosticMessage*>"));
    C.List_empty4 = H._setArrayType(makeConstList([]), H.findType("JSArray<Expression*>"));
    C.List_empty6 = H._setArrayType(makeConstList([]), H.findType("JSArray<Reference*>"));
    C.List_empty1 = H._setArrayType(makeConstList([]), type$.JSArray_legacy_String);
    C.List_extend_extends = H._setArrayType(makeConstList(["extend", "extends"]), type$.JSArray_legacy_String);
    C.List_extend_on = H._setArrayType(makeConstList(["extend", "on"]), type$.JSArray_legacy_String);
    C.List_gRj = H._setArrayType(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), type$.JSArray_legacy_int);
    C.List_gkc = H._setArrayType(makeConstList(["extends", "with", "implements", "{"]), type$.JSArray_legacy_String);
    C.List_nxB = H._setArrayType(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), type$.JSArray_legacy_int);
    C.List_oKf = H._setArrayType(makeConstList([";"]), type$.JSArray_legacy_String);
    C.List_oqK = H._setArrayType(makeConstList([")", "]", "}", ";"]), type$.JSArray_legacy_String);
    C.List_qNA = H._setArrayType(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), type$.JSArray_legacy_int);
    C.List_qTx = H._setArrayType(makeConstList([";", "=", ",", "{", "}"]), type$.JSArray_legacy_String);
    C.List_qg40 = H._setArrayType(makeConstList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_legacy_int);
    C.List_qg4 = H._setArrayType(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), type$.JSArray_legacy_int);
    C.List_sv1 = H._setArrayType(makeConstList(["{", "}", "(", ")", "]"]), type$.JSArray_legacy_String);
    C.List_vjM = H._setArrayType(makeConstList(["@", "assert", "break", "continue", "do", "else", "final", "for", "if", "return", "switch", "try", "var", "void", "while"]), type$.JSArray_legacy_String);
    C.List_wsa = H._setArrayType(makeConstList(["{"]), type$.JSArray_legacy_String);
    C.List_xV7 = H._setArrayType(makeConstList(["@", "get", "set", "void"]), type$.JSArray_legacy_String);
    C.LiteralEntryInfo_true_0 = new N.LiteralEntryInfo(true, 0);
    C.LiteralSymbolIdentifierContext_aXZ = new G.LiteralSymbolIdentifierContext("literalSymbol", false, false, true, false, true, C.Template_ijv);
    C.LiteralSymbolIdentifierContext_o0o = new G.LiteralSymbolIdentifierContext("literalSymbolContinuation", false, false, true, true, true, C.Template_ijv);
    C.LocalFunctionDeclarationIdentifierContext_8pl = new G.LocalFunctionDeclarationIdentifierContext("localFunctionDeclaration", true, false, false, false, true, C.Template_ijv);
    C.LocalVariableDeclarationIdentifierContext_vI3 = new G.LocalVariableDeclarationIdentifierContext("localVariableDeclaration", true, false, false, false, true, C.Template_ijv);
    C.LoopState_0 = new Q.LoopState("LoopState.OutsideLoop");
    C.LoopState_1 = new Q.LoopState("LoopState.InsideSwitch");
    C.LoopState_2 = new Q.LoopState("LoopState.InsideLoop");
    C.List_4uk = H._setArrayType(makeConstList(["(", "[", "{", "<", "${"]), type$.JSArray_legacy_String);
    C.Map_4u8XL = new H.ConstantStringMap(5, {"(": ")", "[": "]", "{": "}", "<": ">", "${": "}"}, C.List_4uk, type$.ConstantStringMap_of_legacy_String_and_legacy_String);
    C.TokenType_coy = new L.TokenType(41, false, false, false, false, ")", "CLOSE_PAREN", 0, ")");
    C.TokenType_zra = new L.TokenType(93, false, false, false, false, "]", "CLOSE_SQUARE_BRACKET", 0, "]");
    C.TokenType_2ty = new L.TokenType(125, false, false, false, false, "}", "CLOSE_CURLY_BRACKET", 0, "}");
    C.TokenType_wOL = new L.TokenType(62, false, true, false, true, ">", "GT", 8, ">");
    C.Map_4uyfz = new H.ConstantStringMap(5, {"(": C.TokenType_coy, "[": C.TokenType_zra, "{": C.TokenType_2ty, "<": C.TokenType_wOL, "${": C.TokenType_2ty}, C.List_4uk, H.findType("ConstantStringMap<String*,TokenType*>"));
    C.List_ATp = H._setArrayType(makeConstList(["xor", "and", "or", "shl", "shr"]), type$.JSArray_legacy_String);
    C.TokenType_SGC = new L.TokenType(94, false, true, false, true, "^", "CARET", 10, "^");
    C.List_hcQ = H._setArrayType(makeConstList([C.TokenType_SGC]), type$.JSArray_legacy_TokenType);
    C.TokenType_OxW = new L.TokenType(38, false, true, false, true, "&", "AMPERSAND", 11, "&");
    C.TokenType_eOk = new L.TokenType(144, false, true, false, false, "&&", "AMPERSAND_AMPERSAND", 6, "&&");
    C.List_QdC = H._setArrayType(makeConstList([C.TokenType_OxW, C.TokenType_eOk]), type$.JSArray_legacy_TokenType);
    C.TokenType_ssu = new L.TokenType(124, false, true, false, true, "|", "BAR", 9, "|");
    C.TokenType_wDN = new L.TokenType(147, false, true, false, false, "||", "BAR_BAR", 5, "||");
    C.List_Gn1 = H._setArrayType(makeConstList([C.TokenType_ssu, C.TokenType_wDN]), type$.JSArray_legacy_TokenType);
    C.TokenType_FgV = new L.TokenType(137, false, true, false, true, "<<", "LT_LT", 12, "<<");
    C.List_l83 = H._setArrayType(makeConstList([C.TokenType_FgV]), type$.JSArray_legacy_TokenType);
    C.TokenType_4XV = new L.TokenType(158, false, true, false, true, ">>", "GT_GT", 12, ">>");
    C.List_MT8 = H._setArrayType(makeConstList([C.TokenType_4XV]), type$.JSArray_legacy_TokenType);
    C.Map_ATX1g = new H.ConstantStringMap(5, {xor: C.List_hcQ, and: C.List_QdC, or: C.List_Gn1, shl: C.List_l83, shr: C.List_MT8}, C.List_ATp, H.findType("ConstantStringMap<String*,List<TokenType*>*>"));
    C.Map_empty0 = new H.ConstantStringMap(0, {}, C.List_empty1, H.findType("ConstantStringMap<String*,@>"));
    C.Map_empty2 = new H.ConstantStringMap(0, {}, C.List_empty1, H.findType("ConstantStringMap<String*,Expression0*>"));
    C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty1, type$.ConstantStringMap_of_legacy_String_and_legacy_String);
    C.List_empty7 = H._setArrayType(makeConstList([]), H.findType("JSArray<Symbol0*>"));
    C.Map_empty1 = new H.ConstantStringMap(0, {}, C.List_empty7, H.findType("ConstantStringMap<Symbol0*,@>"));
    C.List_nZ5 = H._setArrayType(makeConstList(['"', "'", '"""', "'''", 'r"', "r'", 'r"""', "r'''"]), type$.JSArray_legacy_String);
    C.Map_nZmPa = new H.ConstantStringMap(8, {'"': '"', "'": "'", '"""': '"""', "'''": "'''", 'r"': '"', "r'": "'", 'r"""': '"""', "r'''": "'''"}, C.List_nZ5, type$.ConstantStringMap_of_legacy_String_and_legacy_String);
    C.MemberKind_0 = new A.MemberKind("MemberKind.Catch");
    C.MemberKind_1 = new A.MemberKind("MemberKind.Factory");
    C.MemberKind_10 = new A.MemberKind("MemberKind.ExtensionStaticMethod");
    C.MemberKind_2 = new A.MemberKind("MemberKind.FunctionTypeAlias");
    C.MemberKind_3 = new A.MemberKind("MemberKind.FunctionTypedParameter");
    C.MemberKind_4 = new A.MemberKind("MemberKind.GeneralizedFunctionType");
    C.MemberKind_5 = new A.MemberKind("MemberKind.Local");
    C.MemberKind_6 = new A.MemberKind("MemberKind.NonStaticMethod");
    C.MemberKind_7 = new A.MemberKind("MemberKind.StaticMethod");
    C.MemberKind_8 = new A.MemberKind("MemberKind.TopLevelMethod");
    C.MemberKind_9 = new A.MemberKind("MemberKind.ExtensionNonStaticMethod");
    C.MessageCode_12j = new Z.MessageCode(string$.The_lo, "InitializedVariableInForEach", 82, null);
    C.MessageCode_1Ae = new Z.MessageCode(string$.Top_le, "FactoryTopLevelDeclaration", 78, null);
    C.MessageCode_23h = new Z.MessageCode(string$.Only_ol, "MultipleLibraryDirectives", 27, null);
    C.List_MISSING_FUNCTION_PARAMETERS = H._setArrayType(makeConstList(["MISSING_FUNCTION_PARAMETERS"]), type$.JSArray_legacy_String);
    C.MessageCode_2Hq = new Z.MessageCode("A function declaration needs an explicit list of parameters.", "MissingFunctionParameters", -1, C.List_MISSING_FUNCTION_PARAMETERS);
    C.MessageCode_2bx = new Z.MessageCode("Extension fields can't be declared 'abstract'.", "AbstractExtensionField", -1, null);
    C.MessageCode_2rX = new Z.MessageCode(string$.Extens, "ExtensionDeclaresAbstractMember", 94, null);
    C.List_UNEXPECTED_DOLLAR_IN_STRING = H._setArrayType(makeConstList(["UNEXPECTED_DOLLAR_IN_STRING"]), type$.JSArray_legacy_String);
    C.MessageCode_3Nw = new Z.MessageCode(string$.A_____, "UnexpectedDollarInString", -1, C.List_UNEXPECTED_DOLLAR_IN_STRING);
    C.MessageCode_3Zi = new Z.MessageCode(string$.Redire, "RedirectingConstructorWithBody", 22, null);
    C.MessageCode_3hr = new Z.MessageCode(string$.The_fi, "StackOverflow", 19, null);
    C.MessageCode_43h = new Z.MessageCode(string$.An_impp, "DuplicatePrefix", 73, null);
    C.MessageCode_466 = new Z.MessageCode("Expected a function body or '=>'.", "ExpectedBody", -1, C.List_MISSING_FUNCTION_BODY);
    C.MessageCode_4CA = new Z.MessageCode(string$.Membero, "AbstractClassMember", 51, null);
    C.MessageCode_4IJ = new Z.MessageCode(string$.The_kev, "VarAsTypeName", 61, null);
    C.MessageCode_5Fg = new Z.MessageCode("A redirecting factory can't be external.", "ExternalFactoryRedirection", 85, null);
    C.MessageCode_66f = new Z.MessageCode(string$.Getterv, "CovariantMember", 67, null);
    C.MessageCode_6QF = new Z.MessageCode("Enums can't be declared inside classes.", "EnumInClass", 74, null);
    C.List_MISSING_DIGIT = H._setArrayType(makeConstList(["MISSING_DIGIT"]), type$.JSArray_legacy_String);
    C.MessageCode_6RQ = new Z.MessageCode("Numbers in exponential notation should always contain an exponent (an integer number with an optional sign).", "MissingExponent", -1, C.List_MISSING_DIGIT);
    C.List_MISSING_METHOD_PARAMETERS = H._setArrayType(makeConstList(["MISSING_METHOD_PARAMETERS"]), type$.JSArray_legacy_String);
    C.MessageCode_6Vn = new Z.MessageCode("A method declaration needs an explicit list of parameters.", "MissingMethodParameters", -1, C.List_MISSING_METHOD_PARAMETERS);
    C.List_INVALID_INLINE_FUNCTION_TYPE = H._setArrayType(makeConstList(["INVALID_INLINE_FUNCTION_TYPE"]), type$.JSArray_legacy_String);
    C.MessageCode_6nc = new Z.MessageCode("Inline function types cannot be used for parameters in a generic function type.", "InvalidInlineFunctionType", -1, C.List_INVALID_INLINE_FUNCTION_TYPE);
    C.MessageCode_6pO = new Z.MessageCode(string$.Can_ont, "InvalidThisInInitializer", 65, null);
    C.List_TYPE_PARAMETER_ON_OPERATOR = H._setArrayType(makeConstList(["TYPE_PARAMETER_ON_OPERATOR"]), type$.JSArray_legacy_String);
    C.MessageCode_6yO = new Z.MessageCode(string$.Types_, "OperatorWithTypeParameters", -1, C.List_TYPE_PARAMETER_ON_OPERATOR);
    C.MessageCode_72A = new Z.MessageCode(string$.x27catch, "CatchSyntax", 84, null);
    C.List_ubf = H._setArrayType(makeConstList(["ASYNC_KEYWORD_USED_AS_IDENTIFIER"]), type$.JSArray_legacy_String);
    C.MessageCode_86y = new Z.MessageCode("'await' can't be used as an identifier in 'async', 'async*', or 'sync*' methods.", "AwaitAsIdentifier", -1, C.List_ubf);
    C.MessageCode_89U = new Z.MessageCode("Optional parameter lists cannot be empty.", "EmptyOptionalParameterList", -1, C.List_MISSING_IDENTIFIER);
    C.List_NON_SYNC_ABSTRACT_METHOD = H._setArrayType(makeConstList(["NON_SYNC_ABSTRACT_METHOD"]), type$.JSArray_legacy_String);
    C.MessageCode_8Wd = new Z.MessageCode("Abstract methods can't use 'async', 'async*', or 'sync*'.", "AbstractNotSync", -1, C.List_NON_SYNC_ABSTRACT_METHOD);
    C.MessageCode_8aB = new Z.MessageCode(string$.A_contc, "ContinueOutsideOfLoop", 2, null);
    C.List_0 = H._setArrayType(makeConstList(["UNTERMINATED_MULTI_LINE_COMMENT"]), type$.JSArray_legacy_String);
    C.MessageCode_8ii = new Z.MessageCode("Comment starting with '/*' must end with '*/'.", "UnterminatedComment", -1, C.List_0);
    C.MessageCode_8o8 = new Z.MessageCode(string$.Factorc, "TypeBeforeFactory", 57, null);
    C.MessageCode_9Rf = new Z.MessageCode(string$.Only_op, "PartOfTwice", 25, null);
    C.MessageCode_AFW = new Z.MessageCode(string$.Memberccv, "CovariantAndStatic", 66, null);
    C.MessageCode_AGi = new Z.MessageCode(string$.Export, "ExportAfterPart", 75, null);
    C.List_ASYNC_FOR_IN_WRONG_CONTEXT = H._setArrayType(makeConstList(["ASYNC_FOR_IN_WRONG_CONTEXT"]), type$.JSArray_legacy_String);
    C.MessageCode_AgZ = new Z.MessageCode("The asynchronous for-in can only be used in functions marked with 'async' or 'async*'.", "AwaitForNotAsync", -1, C.List_ASYNC_FOR_IN_WRONG_CONTEXT);
    C.MessageCode_Au4 = new Z.MessageCode("Extensions can't declare instance fields", "ExtensionDeclaresInstanceField", 93, null);
    C.MessageCode_B8J = new Z.MessageCode(string$.The_op, "SuperNullAware", 18, null);
    C.MessageCode_BHz = new Z.MessageCode(string$.x27catch, "CatchSyntaxExtraParameters", 83, null);
    C.MessageCode_BuK = new Z.MessageCode(string$.Typedet, "ExternalTypedef", 76, null);
    C.MessageCode_Cfu = new Z.MessageCode(string$.Expect, "MissingAssignmentInInitializer", 34, null);
    C.MessageCode_D1h = new Z.MessageCode("Classes can't be declared to be 'const'.", "ConstClass", 60, null);
    C.MessageCode_DHo = new Z.MessageCode(string$.Membercfc, "FinalAndCovariant", 80, null);
    C.List_MULTIPLE_IMPLEMENTS_CLAUSES = H._setArrayType(makeConstList(["MULTIPLE_IMPLEMENTS_CLAUSES"]), type$.JSArray_legacy_String);
    C.MessageCode_Djl = new Z.MessageCode("Each class definition can have at most one implements clause.", "MultipleImplements", -1, C.List_MULTIPLE_IMPLEMENTS_CLAUSES);
    C.MessageCode_E6Z = new Z.MessageCode("Constructors can't be a getter.", "GetterConstructor", 103, null);
    C.MessageCode_EBn = new Z.MessageCode(string$.Each_m, "MultipleOnClauses", 26, null);
    C.List_j2R = H._setArrayType(makeConstList(["WRONG_SEPARATOR_FOR_POSITIONAL_PARAMETER"]), type$.JSArray_legacy_String);
    C.MessageCode_EO3 = new Z.MessageCode("Positional optional parameters can't use ':' to specify a default value.", "PositionalParameterWithEquals", -1, C.List_j2R);
    C.MessageCode_EOr = new Z.MessageCode(string$.An_escx, "InvalidHexEscape", 40, null);
    C.MessageCode_EQQ = new Z.MessageCode(string$.Illega, "IllegalAssignmentToNonAssignable", 45, null);
    C.MessageCode_ESD = new Z.MessageCode(string$.Classet, "ExternalClass", 3, null);
    C.List_MISSING_STAR_AFTER_SYNC = H._setArrayType(makeConstList(["MISSING_STAR_AFTER_SYNC"]), type$.JSArray_legacy_String);
    C.MessageCode_EYo = new Z.MessageCode("Invalid modifier 'sync'.", "InvalidSyncModifier", -1, C.List_MISSING_STAR_AFTER_SYNC);
    C.MessageCode_Exl = new Z.MessageCode(string$.The_dea, "SwitchHasCaseAfterDefault", 16, null);
    C.List_EMPTY_ENUM_BODY = H._setArrayType(makeConstList(["EMPTY_ENUM_BODY"]), type$.JSArray_legacy_String);
    C.MessageCode_FCG = new Z.MessageCode("An enum declaration can't be empty.", "EnumDeclarationEmpty", -1, C.List_EMPTY_ENUM_BODY);
    C.List_NAMED_FUNCTION_EXPRESSION = H._setArrayType(makeConstList(["NAMED_FUNCTION_EXPRESSION"]), type$.JSArray_legacy_String);
    C.MessageCode_Gwk = new Z.MessageCode("A function expression can't have a name.", "NamedFunctionExpression", -1, C.List_NAMED_FUNCTION_EXPRESSION);
    C.MessageCode_Hj3 = new Z.MessageCode(string$.Only_r, "ConstFactory", 62, null);
    C.MessageCode_IF2 = new Z.MessageCode(string$.Membercfv, "FinalAndVar", 81, null);
    C.List_RETURN_IN_GENERATOR = H._setArrayType(makeConstList(["RETURN_IN_GENERATOR"]), type$.JSArray_legacy_String);
    C.MessageCode_IJC = new Z.MessageCode("'sync*' and 'async*' can't return a value.", "GeneratorReturnsValue", -1, C.List_RETURN_IN_GENERATOR);
    C.MessageCode_IVQ = new Z.MessageCode("Abstract fields cannot be late.", "AbstractLateField", 108, null);
    C.MessageCode_IY4 = new Z.MessageCode("Expected an initializer.", "ExpectedAnInitializer", 36, null);
    C.List_dSs = H._setArrayType(makeConstList([string$.WRONG_]), type$.JSArray_legacy_String);
    C.MessageCode_Iue = new Z.MessageCode("A constructor invocation can't have type arguments after the constructor name.", "ConstructorWithTypeArguments", -1, C.List_dSs);
    C.List_DEFAULT_VALUE_IN_FUNCTION_TYPE = H._setArrayType(makeConstList(["DEFAULT_VALUE_IN_FUNCTION_TYPE"]), type$.JSArray_legacy_String);
    C.MessageCode_KNu = new Z.MessageCode("Can't have a default value in a function type.", "FunctionTypeDefaultValue", -1, C.List_DEFAULT_VALUE_IN_FUNCTION_TYPE);
    C.List_Sxx = H._setArrayType(makeConstList(["INVALID_LITERAL_IN_CONFIGURATION"]), type$.JSArray_legacy_String);
    C.MessageCode_KXz = new Z.MessageCode("Can't use string interpolation in a URI.", "InterpolationInUri", -1, C.List_Sxx);
    C.MessageCode_L5J = new Z.MessageCode(string$.The___, "NullAwareCascadeOutOfOrder", 96, null);
    C.MessageCode_LBt = new Z.MessageCode("External factories can't have a body.", "ExternalFactoryWithBody", 86, null);
    C.MessageCode_Lg7 = new Z.MessageCode(string$.Operats, "TopLevelOperator", 14, null);
    C.MessageCode_M8m = new Z.MessageCode("Expected 'else' or comma.", "ExpectedElseOrComma", 46, null);
    C.MessageCode_Msz = new Z.MessageCode(string$.Fieldst, "ExternalField", 50, null);
    C.MessageCode_NQk = new Z.MessageCode(string$.Type_a, "AnnotationOnTypeArgument", 111, null);
    C.List_ymd = H._setArrayType(makeConstList(["POSITIONAL_AFTER_NAMED_ARGUMENT"]), type$.JSArray_legacy_String);
    C.MessageCode_Pss = new Z.MessageCode("Place positional arguments before named arguments.", "PositionalAfterNamedArgument", -1, C.List_ymd);
    C.List_NAMED_PARAMETER_OUTSIDE_GROUP = H._setArrayType(makeConstList(["NAMED_PARAMETER_OUTSIDE_GROUP"]), type$.JSArray_legacy_String);
    C.MessageCode_Q49 = new Z.MessageCode("Non-optional parameters can't have a default value.", "RequiredParameterWithDefault", -1, C.List_NAMED_PARAMETER_OUTSIDE_GROUP);
    C.MessageCode_QZl = new Z.MessageCode(string$.A_clas, "MemberWithSameNameAsClass", 105, null);
    C.List_GETTER_WITH_PARAMETERS = H._setArrayType(makeConstList(["GETTER_WITH_PARAMETERS"]), type$.JSArray_legacy_String);
    C.MessageCode_QcT = new Z.MessageCode("A getter can't have formal parameters.", "GetterWithFormals", -1, C.List_GETTER_WITH_PARAMETERS);
    C.MessageCode_Qy4 = new Z.MessageCode(string$.Native, "NativeClauseShouldBeAnnotation", 23, null);
    C.MessageCode_ROa = new Z.MessageCode(string$.An_escu, "InvalidUnicodeEscape", 38, null);
    C.MessageCode_Rro = new Z.MessageCode(string$.For_in, "ColonInPlaceOfIn", 54, null);
    C.MessageCode_TBs = new Z.MessageCode(string$.Can_ons, "InvalidSuperInInitializer", 47, null);
    C.MessageCode_TSy = new Z.MessageCode(string$.Variabm, "MissingConstFinalVarOrType", 33, null);
    C.MessageCode_Tbc0 = new Z.MessageCode(string$.Import, "ImportAfterPart", 10, null);
    C.List_PRIVATE_OPTIONAL_PARAMETER = H._setArrayType(makeConstList(["PRIVATE_OPTIONAL_PARAMETER"]), type$.JSArray_legacy_String);
    C.MessageCode_Tbc = new Z.MessageCode("An optional named parameter can't start with '_'.", "PrivateNamedParameter", -1, C.List_PRIVATE_OPTIONAL_PARAMETER);
    C.MessageCode_Tvq = new Z.MessageCode(string$.An_ann, "MetadataTypeArgumentsUninstantiated", 114, null);
    C.MessageCode_UGD = new Z.MessageCode(string$.The_na, "ConstructorWithWrongName", 102, null);
    C.MessageCode_Uhj = new Z.MessageCode(string$.Direct, "DirectiveAfterDeclaration", 69, null);
    C.MessageCode_UxB = new Z.MessageCode("'+' is not a prefix operator.", "UnsupportedPrefixPlus", -1, C.List_MISSING_IDENTIFIER);
    C.MessageCode_Uyh = new Z.MessageCode("Constructors can't be static.", "StaticConstructor", 4, null);
    C.List_FUNCTION_TYPED_PARAMETER_VAR = H._setArrayType(makeConstList(["FUNCTION_TYPED_PARAMETER_VAR"]), type$.JSArray_legacy_String);
    C.MessageCode_Vav = new Z.MessageCode(string$.Functi, "FunctionTypedParameterVar", -1, C.List_FUNCTION_TYPED_PARAMETER_VAR);
    C.MessageCode_VsD = new Z.MessageCode("Named parameter lists cannot be empty.", "EmptyNamedParameterList", -1, C.List_MISSING_IDENTIFIER);
    C.MessageCode_W7p = new Z.MessageCode(string$.Static, "AbstractStaticField", 107, null);
    C.List_CONST_CONSTRUCTOR_WITH_BODY = H._setArrayType(makeConstList(["CONST_CONSTRUCTOR_WITH_BODY"]), type$.JSArray_legacy_String);
    C.MessageCode_W7u = new Z.MessageCode("A const constructor can't have a body.", "ConstConstructorWithBody", -1, C.List_CONST_CONSTRUCTOR_WITH_BODY);
    C.List_NON_PART_OF_DIRECTIVE_IN_PART = H._setArrayType(makeConstList(["NON_PART_OF_DIRECTIVE_IN_PART"]), type$.JSArray_legacy_String);
    C.MessageCode_WXJ = new Z.MessageCode(string$.The_pa, "NonPartOfDirectiveInPart", -1, C.List_NON_PART_OF_DIRECTIVE_IN_PART);
    C.MessageCode_X7q = new Z.MessageCode(string$.The_on, "ImplementsBeforeOn", 43, null);
    C.MessageCode_Y8v = new Z.MessageCode(string$.The_dee, "DeferredAfterPrefix", 68, null);
    C.MessageCode_a5W = new Z.MessageCode(string$.Operat_, "MissingOperatorKeyword", 31, null);
    C.MessageCode_aZ8 = new Z.MessageCode(string$.The_exi, "ImplementsBeforeExtends", 44, null);
    C.MessageCode_acK = new Z.MessageCode(string$.An_extc, "ExternalConstructorWithInitializer", 106, null);
    C.MessageCode_d4d = new Z.MessageCode(string$.A_comp, "EqualityCannotBeEqualityOperand", 1, null);
    C.MessageCode_dIX = new Z.MessageCode(string$.The_kea, "InvalidAwaitFor", 9, null);
    C.MessageCode_dg3 = new Z.MessageCode(string$.Memberm, "FinalAndCovariantLateWithInitializer", 101, null);
    C.MessageCode_enX = new Z.MessageCode("Constructors can't have a return type.", "ConstructorWithReturnType", 55, null);
    C.MessageCode_fg9 = new Z.MessageCode(string$.An_imp_, "DuplicateDeferred", 71, null);
    C.MessageCode_gMT = new Z.MessageCode("The return type can't be 'var'.", "VarReturnType", 12, null);
    C.MessageCode_gkc = new Z.MessageCode("A set or map literal requires exactly one or two type arguments, respectively.", "SetOrMapLiteralTooManyTypeArguments", -1, null);
    C.MessageCode_gkc0 = new Z.MessageCode("'yield' can't be used as an identifier in 'async', 'async*', or 'sync*' methods.", "YieldAsIdentifier", -1, C.List_ubf);
    C.MessageCode_gsm = new Z.MessageCode(string$.Enums_, "ExternalEnum", 5, null);
    C.List_INVALID_MODIFIER_ON_SETTER = H._setArrayType(makeConstList(["INVALID_MODIFIER_ON_SETTER"]), type$.JSArray_legacy_String);
    C.MessageCode_gya = new Z.MessageCode("Setters can't use 'async', 'async*', or 'sync*'.", "SetterNotSync", -1, C.List_INVALID_MODIFIER_ON_SETTER);
    C.MessageCode_i0N = new Z.MessageCode(string$.The_pr, "PrefixAfterCombinator", 6, null);
    C.MessageCode_iV0 = new Z.MessageCode(string$.A_conti, "ContinueWithoutLabelInCase", 64, null);
    C.MessageCode_jnt = new Z.MessageCode("Not a valid initializer.", "InvalidInitializer", 90, null);
    C.MessageCode_k2M = new Z.MessageCode(string$.An_exto, "ExternalMethodWithBody", 49, null);
    C.MessageCode_kB5 = new Z.MessageCode(string$.Each_t, "MultipleVarianceModifiers", 97, null);
    C.MessageCode_kGC = new Z.MessageCode(string$.Typedei, "TypedefInClass", 7, null);
    C.MessageCode_lJ4 = new Z.MessageCode("Mixins can't declare constructors.", "MixinDeclaresConstructor", 95, null);
    C.MessageCode_lKs = new Z.MessageCode("Constructors can't have type parameters.", "ConstructorWithTypeParameters", 99, null);
    C.MessageCode_lqK = new Z.MessageCode(string$.Classei, "ClassInClass", 53, null);
    C.MessageCode_mKQ = new Z.MessageCode("External fields cannot be late.", "ExternalLateField", 109, null);
    C.MessageCode_mNU = new Z.MessageCode("`assert` can't be used as an expression.", "AssertAsExpression", -1, null);
    C.MessageCode_mfL = new Z.MessageCode(string$.Fieldsb, "AbstractExternalField", 110, null);
    C.MessageCode_mu6 = new Z.MessageCode("Unable to decode bytes as UTF-8.", "Encoding", -1, null);
    C.MessageCode_myU = new Z.MessageCode("Constructors can't be a setter.", "SetterConstructor", 104, null);
    C.MessageCode_oex = new Z.MessageCode("Operators can't be static.", "StaticOperator", 17, null);
    C.MessageCode_oqh = new Z.MessageCode("Expected a statement.", "ExpectedStatement", 29, null);
    C.MessageCode_oyU = new Z.MessageCode("Deferred imports should have a prefix.", "MissingPrefixInDeferredImport", 30, null);
    C.MessageCode_p8L = new Z.MessageCode(string$.Each_ce, "MultipleExtends", 28, null);
    C.List_INVALID_CODE_POINT = H._setArrayType(makeConstList(["INVALID_CODE_POINT"]), type$.JSArray_legacy_String);
    C.MessageCode_qGx = new Z.MessageCode("The escape sequence starting with '\\u' isn't a valid code point.", "InvalidCodePoint", -1, C.List_INVALID_CODE_POINT);
    C.MessageCode_qM8 = new Z.MessageCode(string$.The_exw, "WithBeforeExtends", 11, null);
    C.MessageCode_qx4 = new Z.MessageCode(string$.The__d, "SwitchHasMultipleDefaults", 15, null);
    C.MessageCode_sD6 = new Z.MessageCode(string$.Gettern, "ConstMethod", 63, null);
    C.MessageCode_sUl = new Z.MessageCode("Type 'void' can't have type arguments.", "VoidWithTypeArguments", 100, null);
    C.List_YIELD_IN_NON_GENERATOR = H._setArrayType(makeConstList(["YIELD_IN_NON_GENERATOR"]), type$.JSArray_legacy_String);
    C.MessageCode_sbZ = new Z.MessageCode("'yield' can only be used in 'sync*' or 'async*' methods.", "YieldNotGenerator", -1, C.List_YIELD_IN_NON_GENERATOR);
    C.MessageCode_so3 = new Z.MessageCode("A literal can't be prefixed by 'new'.", "LiteralWithNew", 117, null);
    C.MessageCode_ssX = new Z.MessageCode(string$.Only_f, "RedirectionInNonFactory", 21, null);
    C.List_MISSING_HEX_DIGIT = H._setArrayType(makeConstList(["MISSING_HEX_DIGIT"]), type$.JSArray_legacy_String);
    C.MessageCode_swd = new Z.MessageCode("A hex digit (0-9 or A-F) must follow '0x'.", "ExpectedHexDigit", -1, C.List_MISSING_HEX_DIGIT);
    C.MessageCode_sx4 = new Z.MessageCode(string$.Variabc, "TypeAfterVar", 89, null);
    C.List_AWAIT_IN_WRONG_CONTEXT = H._setArrayType(makeConstList(["AWAIT_IN_WRONG_CONTEXT"]), type$.JSArray_legacy_String);
    C.MessageCode_t2b = new Z.MessageCode("'await' can only be used in 'async' or 'async*' methods.", "AwaitNotAsync", -1, C.List_AWAIT_IN_WRONG_CONTEXT);
    C.MessageCode_twx = new Z.MessageCode(string$.A_fiel, "FieldInitializedOutsideDeclaringClass", 88, null);
    C.MessageCode_uPs = new Z.MessageCode(string$.The_wi, "ImplementsBeforeWith", 42, null);
    C.MessageCode_w66 = new Z.MessageCode("Missing expression after 'throw'.", "MissingExpressionInThrow", 32, null);
    C.MessageCode_wEo = new Z.MessageCode(string$.Memberccn, "ConstAndFinal", 58, null);
    C.MessageCode_wJZ = new Z.MessageCode(string$.Each_cw, "MultipleWith", 24, null);
    C.MessageCode_wWe = new Z.MessageCode("Type 'void' can't be used here.", "InvalidVoid", -1, C.List_EXPECTED_TYPE_NAME);
    C.MessageCode_wsa = new Z.MessageCode(string$.A_brea, "BreakOutsideOfLoop", 52, null);
    C.MessageCode_ww80 = new Z.MessageCode(string$.The_li, "LibraryDirectiveNotFirst", 37, null);
    C.List_MISSING_TYPEDEF_PARAMETERS = H._setArrayType(makeConstList(["MISSING_TYPEDEF_PARAMETERS"]), type$.JSArray_legacy_String);
    C.MessageCode_ww8 = new Z.MessageCode("A typedef needs an explicit list of parameters.", "MissingTypedefParameters", -1, C.List_MISSING_TYPEDEF_PARAMETERS);
    C.MessageCode_xje = new Z.MessageCode(string$.A_try_, "OnlyTry", 20, null);
    C.MessageCode_xny = new Z.MessageCode(string$.Missin, "MissingAssignableSelector", 35, null);
    C.MessageCode_yHy = new Z.MessageCode(string$.Field_, "FieldInitializerOutsideConstructor", 79, null);
    C.List_NON_SYNC_FACTORY = H._setArrayType(makeConstList(["NON_SYNC_FACTORY"]), type$.JSArray_legacy_String);
    C.MessageCode_zPZ = new Z.MessageCode(string$.Factorb, "FactoryNotSync", -1, C.List_NON_SYNC_FACTORY);
    C.MessageCode_zrt = new Z.MessageCode("Extensions can't declare constructors.", "ExtensionDeclaresConstructor", 92, null);
    C.MetadataReferenceIdentifierContext_H1G = new G.MetadataReferenceIdentifierContext("metadataContinuationAfterTypeArguments", false, false, false, true, true, C.Template_ijv);
    C.MetadataReferenceIdentifierContext_OGH = new G.MetadataReferenceIdentifierContext("metadataReference", false, false, false, false, true, C.Template_ijv);
    C.MetadataReferenceIdentifierContext_ZKG = new G.MetadataReferenceIdentifierContext("metadataContinuation", false, false, false, true, true, C.Template_ijv);
    C.MethodDeclarationIdentifierContext_2fF = new G.MethodDeclarationIdentifierContext("methodDeclarationContinuation", true, false, false, true, true, C.Template_ijv);
    C.MethodDeclarationIdentifierContext_e0h = new G.MethodDeclarationIdentifierContext("methodDeclaration", true, false, false, false, true, C.Template_ijv);
    C.MethodType_0 = new D.MethodType("MethodType.getter");
    C.MethodType_1 = new D.MethodType("MethodType.setter");
    C.NamedArgumentReferenceIdentifierContext_k8l = new G.NamedArgumentReferenceIdentifierContext("namedArgumentReference", false, false, false, false, true, C.Template_ijv);
    C.NullValue_0 = new Y.NullValue("NullValue.Arguments");
    C.NullValue_1 = new Y.NullValue("NullValue.As");
    C.NullValue_10 = new Y.NullValue("NullValue.ConstructorInitializerSeparator");
    C.NullValue_11 = new Y.NullValue("NullValue.ConstructorInitializers");
    C.NullValue_12 = new Y.NullValue("NullValue.ConstructorReferenceContinuationAfterTypeArguments");
    C.NullValue_14 = new Y.NullValue("NullValue.Deferred");
    C.NullValue_16 = new Y.NullValue("NullValue.Expression");
    C.NullValue_17 = new Y.NullValue("NullValue.ExtendsClause");
    C.NullValue_19 = new Y.NullValue("NullValue.FormalParameters");
    C.NullValue_2 = new Y.NullValue("NullValue.AwaitToken");
    C.NullValue_20 = new Y.NullValue("NullValue.FunctionBody");
    C.NullValue_21 = new Y.NullValue("NullValue.FunctionBodyAsyncToken");
    C.NullValue_22 = new Y.NullValue("NullValue.FunctionBodyStarToken");
    C.NullValue_23 = new Y.NullValue("NullValue.HideClause");
    C.NullValue_24 = new Y.NullValue("NullValue.Identifier");
    C.NullValue_25 = new Y.NullValue("NullValue.IdentifierList");
    C.NullValue_26 = new Y.NullValue("NullValue.Initializers");
    C.NullValue_28 = new Y.NullValue("NullValue.Metadata");
    C.NullValue_29 = new Y.NullValue("NullValue.Modifiers");
    C.NullValue_32 = new Y.NullValue("NullValue.ParameterDefaultValue");
    C.NullValue_33 = new Y.NullValue("NullValue.Prefix");
    C.NullValue_34 = new Y.NullValue("NullValue.ShowClause");
    C.NullValue_38 = new Y.NullValue("NullValue.Type");
    C.NullValue_39 = new Y.NullValue("NullValue.TypeArguments");
    C.NullValue_41 = new Y.NullValue("NullValue.TypeList");
    C.NullValue_43 = new Y.NullValue("NullValue.TypeVariables");
    C.NullValue_45 = new Y.NullValue("NullValue.WithClause");
    C.NullValue_5 = new Y.NullValue("NullValue.CascadeReceiver");
    C.NullValue_6 = new Y.NullValue("NullValue.Combinators");
    C.NullValue_8 = new Y.NullValue("NullValue.ConditionalUris");
    C.ParameterKind_NAMED_3_false_true = new Q.ParameterKind("NAMED", 3, false, true);
    C.ParameterKind_NAMED_REQUIRED_2_false_true = new Q.ParameterKind("NAMED_REQUIRED", 2, false, true);
    C.ParameterKind_POSITIONAL_1_true_false = new Q.ParameterKind("POSITIONAL", 1, true, false);
    C.ParameterKind_REQUIRED_0_false_false = new Q.ParameterKind("REQUIRED", 0, false, false);
    C.ParserErrorCode_0 = new E.ParserErrorCode("ANNOTATION_WITH_TYPE_ARGUMENTS", "ParserErrorCode.ANNOTATION_WITH_TYPE_ARGUMENTS", "An annotation can't use type arguments.", null);
    C.ParserErrorCode_04A = new E.ParserErrorCode("EXTERNAL_ENUM", "ParserErrorCode.EXTERNAL_ENUM", string$.Enums_, "Try removing the keyword 'external'.");
    C.ParserErrorCode_0UG = new E.ParserErrorCode("DUPLICATED_MODIFIER", "ParserErrorCode.DUPLICATED_MODIFIER", "The modifier '#lexeme' was already specified.", string$.Try_rem);
    C.ParserErrorCode_1y5 = new E.ParserErrorCode("EXTERNAL_METHOD_WITH_BODY", "ParserErrorCode.EXTERNAL_METHOD_WITH_BODY", string$.An_exto, null);
    C.ParserErrorCode_23B = new E.ParserErrorCode("EXTERNAL_FACTORY_REDIRECTION", "ParserErrorCode.EXTERNAL_FACTORY_REDIRECTION", "A redirecting factory can't be external.", "Try removing the 'external' modifier.");
    C.ParserErrorCode_23h = new E.ParserErrorCode("GETTER_WITH_PARAMETERS", "ParserErrorCode.GETTER_WITH_PARAMETERS", "Getters must be declared without a parameter list.", "Try removing the parameter list, or removing the keyword 'get' to define a method rather than a getter.");
    C.ParserErrorCode_27z = new E.ParserErrorCode("STATIC_CONSTRUCTOR", "ParserErrorCode.STATIC_CONSTRUCTOR", "Constructors can't be static.", "Try removing the keyword 'static'.");
    C.ParserErrorCode_2Lp = new E.ParserErrorCode("POSITIONAL_AFTER_NAMED_ARGUMENT", "ParserErrorCode.POSITIONAL_AFTER_NAMED_ARGUMENT", "Positional arguments must occur before named arguments.", "Try moving all of the positional arguments before the named arguments.");
    C.ParserErrorCode_2No = new E.ParserErrorCode("CONST_CLASS", "ParserErrorCode.CONST_CLASS", "Classes can't be declared to be 'const'.", "Try removing the 'const' keyword. If you're trying to indicate that instances of the class can be constants, place the 'const' keyword on  the class' constructor(s).");
    C.ParserErrorCode_2Vk = new E.ParserErrorCode("EXTENSION_DECLARES_CONSTRUCTOR", "ParserErrorCode.EXTENSION_DECLARES_CONSTRUCTOR", "Extensions can't declare constructors.", "Try removing the constructor declaration.");
    C.ParserErrorCode_2Zi = new E.ParserErrorCode("CONST_CONSTRUCTOR_WITH_BODY", "ParserErrorCode.CONST_CONSTRUCTOR_WITH_BODY", "Const constructors can't have a body.", "Try removing either the 'const' keyword or the body.");
    C.ParserErrorCode_2jN = new E.ParserErrorCode("MISSING_ASSIGNABLE_SELECTOR", "ParserErrorCode.MISSING_ASSIGNABLE_SELECTOR", string$.Missin, "Try adding a selector.");
    C.ParserErrorCode_2jN0 = new E.ParserErrorCode("DUPLICATE_PREFIX", "ParserErrorCode.DUPLICATE_PREFIX", string$.An_impp, "Try removing all but one prefix.");
    C.ParserErrorCode_3Vk = new E.ParserErrorCode("WITH_BEFORE_EXTENDS", "ParserErrorCode.WITH_BEFORE_EXTENDS", string$.The_exw, "Try moving the extends clause before the with clause.");
    C.ParserErrorCode_46c = new E.ParserErrorCode("MISSING_TYPEDEF_PARAMETERS", "ParserErrorCode.MISSING_TYPEDEF_PARAMETERS", "Typedefs must have an explicit list of parameters.", "Try adding a parameter list.");
    C.ParserErrorCode_4MW = new E.ParserErrorCode("FINAL_AND_VAR", "ParserErrorCode.FINAL_AND_VAR", string$.Membercfv, "Try removing the keyword 'var'.");
    C.ParserErrorCode_5yr = new E.ParserErrorCode("TYPE_ARGUMENTS_ON_TYPE_VARIABLE", "ParserErrorCode.TYPE_ARGUMENTS_ON_TYPE_VARIABLE", "Can't use type arguments with type variable '#name'.", "Try removing the type arguments.");
    C.ParserErrorCode_6Gw = new E.ParserErrorCode("EXPECTED_IDENTIFIER_BUT_GOT_KEYWORD", "ParserErrorCode.EXPECTED_IDENTIFIER_BUT_GOT_KEYWORD", "'#lexeme' can't be used as an identifier because it's a keyword.", string$.Try_ren);
    C.ParserErrorCode_6Vh = new E.ParserErrorCode("MULTIPLE_IMPLEMENTS_CLAUSES", "ParserErrorCode.MULTIPLE_IMPLEMENTS_CLAUSES", "Each class or mixin definition can have at most one implements clause.", "Try combining all of the implements clauses into a single clause.");
    C.ParserErrorCode_6Vn = new E.ParserErrorCode("MISSING_FUNCTION_PARAMETERS", "ParserErrorCode.MISSING_FUNCTION_PARAMETERS", "Functions must have an explicit list of parameters.", "Try adding a parameter list.");
    C.ParserErrorCode_6Vn0 = new E.ParserErrorCode("MULTIPLE_WITH_CLAUSES", "ParserErrorCode.MULTIPLE_WITH_CLAUSES", string$.Each_cw, "Try combining all of the with clauses into a single clause.");
    C.ParserErrorCode_7FR = new E.ParserErrorCode("MISSING_PREFIX_IN_DEFERRED_IMPORT", "ParserErrorCode.MISSING_PREFIX_IN_DEFERRED_IMPORT", "Deferred imports should have a prefix.", "Try adding a prefix to the import by adding an 'as' clause.");
    C.ParserErrorCode_7JZ = new E.ParserErrorCode("INVALID_AWAIT_IN_FOR", "ParserErrorCode.INVALID_AWAIT_IN_FOR", string$.The_kea, "Try removing the keyword, or use a for-each statement.");
    C.ParserErrorCode_86y = new E.ParserErrorCode("LIBRARY_DIRECTIVE_NOT_FIRST", "ParserErrorCode.LIBRARY_DIRECTIVE_NOT_FIRST", string$.The_li, "Try moving the library directive before any other directives.");
    C.ParserErrorCode_8D4 = new E.ParserErrorCode("LITERAL_WITH_CLASS", "ParserErrorCode.LITERAL_WITH_CLASS", "A #string literal can't be prefixed by '#lexeme'.", "Try removing '#lexeme'");
    C.ParserErrorCode_8Qi = new E.ParserErrorCode("STATIC_OPERATOR", "ParserErrorCode.STATIC_OPERATOR", "Operators can't be static.", "Try removing the keyword 'static'.");
    C.ParserErrorCode_8hf = new E.ParserErrorCode("ABSTRACT_CLASS_MEMBER", "ParserErrorCode.ABSTRACT_CLASS_MEMBER", string$.Membero, "Try removing the 'abstract' keyword. You can add the 'abstract' keyword before the class declaration.");
    C.ParserErrorCode_9uy = new E.ParserErrorCode("IMPLEMENTS_BEFORE_EXTENDS", "ParserErrorCode.IMPLEMENTS_BEFORE_EXTENDS", string$.The_exi, "Try moving the extends clause before the implements clause.");
    C.ParserErrorCode_A2Y = new E.ParserErrorCode("NULL_AWARE_CASCADE_OUT_OF_ORDER", "ParserErrorCode.NULL_AWARE_CASCADE_OUT_OF_ORDER", string$.The___, "Try moving the '?..' operator to be the first cascade operator in the sequence.");
    C.ParserErrorCode_AIB = new E.ParserErrorCode("MULTIPLE_LIBRARY_DIRECTIVES", "ParserErrorCode.MULTIPLE_LIBRARY_DIRECTIVES", string$.Only_ol, "Try removing all but one of the library directives.");
    C.ParserErrorCode_AdS = new E.ParserErrorCode("CONSTRUCTOR_WITH_RETURN_TYPE", "ParserErrorCode.CONSTRUCTOR_WITH_RETURN_TYPE", "Constructors can't have a return type.", "Try removing the return type.");
    C.ParserErrorCode_AgZ = new E.ParserErrorCode("MULTIPLE_ON_CLAUSES", "ParserErrorCode.MULTIPLE_ON_CLAUSES", string$.Each_m, "Try combining all of the on clauses into a single clause.");
    C.ParserErrorCode_Aij = new E.ParserErrorCode("EXPECTED_STRING_LITERAL", "ParserErrorCode.EXPECTED_STRING_LITERAL", "Expected a string literal.", null);
    C.ParserErrorCode_C0A = new E.ParserErrorCode("CATCH_SYNTAX", "ParserErrorCode.CATCH_SYNTAX", string$.x27catch, string$.No_typ);
    C.ParserErrorCode_CAD = new E.ParserErrorCode("EXPECTED_TOKEN", "ParserErrorCode.EXPECTED_TOKEN", "Expected to find '{0}'.", null);
    C.ParserErrorCode_CxF = new E.ParserErrorCode("FINAL_AND_COVARIANT_LATE_WITH_INITIALIZER", "ParserErrorCode.FINAL_AND_COVARIANT_LATE_WITH_INITIALIZER", string$.Memberm, "Try removing either the 'final' or 'covariant' keyword, or removing the initializer.");
    C.ParserErrorCode_E2T = new E.ParserErrorCode("INITIALIZED_VARIABLE_IN_FOR_EACH", "ParserErrorCode.INITIALIZED_VARIABLE_IN_FOR_EACH", string$.The_lo, "Try removing the initializer, or using a different kind of loop.");
    C.ParserErrorCode_E6F = new E.ParserErrorCode("INVALID_GENERIC_FUNCTION_TYPE", "ParserErrorCode.INVALID_GENERIC_FUNCTION_TYPE", "Invalid generic function type.", string$.Try_us);
    C.ParserErrorCode_ECL = new E.ParserErrorCode("INVALID_LITERAL_IN_CONFIGURATION", "ParserErrorCode.INVALID_LITERAL_IN_CONFIGURATION", "The literal in a configuration can't contain interpolation.", "Try removing the interpolation expressions.");
    C.ParserErrorCode_EE4 = new E.ParserErrorCode("EXTRANEOUS_MODIFIER", "ParserErrorCode.EXTRANEOUS_MODIFIER", "Can't have modifier '#lexeme' here.", "Try removing '#lexeme'.");
    C.ParserErrorCode_EFi = new E.ParserErrorCode("ILLEGAL_ASSIGNMENT_TO_NON_ASSIGNABLE", "ParserErrorCode.ILLEGAL_ASSIGNMENT_TO_NON_ASSIGNABLE", string$.Illega, null);
    C.ParserErrorCode_ERc = new E.ParserErrorCode("MISSING_ASSIGNMENT_IN_INITIALIZER", "ParserErrorCode.MISSING_ASSIGNMENT_IN_INITIALIZER", string$.Expect, string$.To_ini);
    C.ParserErrorCode_El7 = new E.ParserErrorCode("FIELD_INITIALIZER_OUTSIDE_CONSTRUCTOR", "ParserErrorCode.FIELD_INITIALIZER_OUTSIDE_CONSTRUCTOR", string$.Field_, "Try removing 'this.'.");
    C.ParserErrorCode_G0K = new E.ParserErrorCode("ASYNC_KEYWORD_USED_AS_IDENTIFIER", "ParserErrorCode.ASYNC_KEYWORD_USED_AS_IDENTIFIER", "The keywords 'await' and 'yield' can't be used as identifiers in an asynchronous or generator function.", null);
    C.ParserErrorCode_G37 = new E.ParserErrorCode("TYPE_PARAMETER_ON_CONSTRUCTOR", "ParserErrorCode.TYPE_PARAMETER_ON_CONSTRUCTOR", "Constructors can't have type parameters.", "Try removing the type parameters.");
    C.ParserErrorCode_G8G = new E.ParserErrorCode("MISSING_STATEMENT", "ParserErrorCode.MISSING_STATEMENT", "Expected a statement.", null);
    C.ParserErrorCode_GDx = new E.ParserErrorCode("MISSING_STAR_AFTER_SYNC", "ParserErrorCode.MISSING_STAR_AFTER_SYNC", "The modifier 'sync' must be followed by a star ('*').", "Try removing the modifier, or add a star.");
    C.ParserErrorCode_GVU = new E.ParserErrorCode("STACK_OVERFLOW", "ParserErrorCode.STACK_OVERFLOW", string$.The_fi, "Try simplifying the code.");
    C.ParserErrorCode_Gbb = new E.ParserErrorCode("MISSING_KEYWORD_OPERATOR", "ParserErrorCode.MISSING_KEYWORD_OPERATOR", string$.Operat_, "Try adding the keyword 'operator'.");
    C.ParserErrorCode_Gl7 = new E.ParserErrorCode("EXPECTED_EXECUTABLE", "ParserErrorCode.EXPECTED_EXECUTABLE", "Expected a method, getter, setter or operator declaration.", "This appears to be incomplete code. Try removing it or completing it.");
    C.ParserErrorCode_H9C = new E.ParserErrorCode("NATIVE_CLAUSE_SHOULD_BE_ANNOTATION", "ParserErrorCode.NATIVE_CLAUSE_SHOULD_BE_ANNOTATION", string$.Native, "Try removing this native clause and adding @native() or @native('native-name') before the declaration.");
    C.ParserErrorCode_HjT = new E.ParserErrorCode("CONTINUE_OUTSIDE_OF_LOOP", "ParserErrorCode.CONTINUE_OUTSIDE_OF_LOOP", string$.A_contc, "Try removing the continue statement.");
    C.ParserErrorCode_Hx4 = new E.ParserErrorCode("INVALID_CONSTRUCTOR_NAME", "ParserErrorCode.INVALID_CONSTRUCTOR_NAME", string$.The_na, null);
    C.ParserErrorCode_IF2 = new E.ParserErrorCode("SWITCH_HAS_CASE_AFTER_DEFAULT_CASE", "ParserErrorCode.SWITCH_HAS_CASE_AFTER_DEFAULT_CASE", string$.The_dea, "Try moving the default case after the other case clauses.");
    C.ParserErrorCode_Iev = new E.ParserErrorCode("MISSING_FUNCTION_BODY", "ParserErrorCode.MISSING_FUNCTION_BODY", "A function body must be provided.", "Try adding a function body.");
    C.ParserErrorCode_J82 = new E.ParserErrorCode("VAR_RETURN_TYPE", "ParserErrorCode.VAR_RETURN_TYPE", "The return type can't be 'var'.", "Try removing the keyword 'var', or replacing it with the name of the return type.");
    C.ParserErrorCode_Jaz = new E.ParserErrorCode("EXPECTED_BODY", "ParserErrorCode.EXPECTED_BODY", "A #string must have a body, even if it is empty.", "Try adding an empty body.");
    C.ParserErrorCode_M7M = new E.ParserErrorCode("TOP_LEVEL_OPERATOR", "ParserErrorCode.TOP_LEVEL_OPERATOR", string$.Operats, "Try removing the operator, moving it to a class, or converting it to be a function.");
    C.ParserErrorCode_MIo = new E.ParserErrorCode("INVALID_UNICODE_ESCAPE", "ParserErrorCode.INVALID_UNICODE_ESCAPE", string$.An_escu, null);
    C.ParserErrorCode_MUw = new E.ParserErrorCode("BINARY_OPERATOR_WRITTEN_OUT", "ParserErrorCode.BINARY_OPERATOR_WRITTEN_OUT", "Binary operator '#string' is written as '#string2' instead of the written out word.", "Try replacing '#string' with '#string2'.");
    C.ParserErrorCode_Nhy = new E.ParserErrorCode("FACTORY_TOP_LEVEL_DECLARATION", "ParserErrorCode.FACTORY_TOP_LEVEL_DECLARATION", string$.Top_le, "Try removing the keyword 'factory'.");
    C.ParserErrorCode_OzG = new E.ParserErrorCode("MISSING_INITIALIZER", "ParserErrorCode.MISSING_INITIALIZER", "Expected an initializer.", null);
    C.ParserErrorCode_Q8B = new E.ParserErrorCode("ANNOTATION_ON_TYPE_ARGUMENT", "ParserErrorCode.ANNOTATION_ON_TYPE_ARGUMENT", string$.Type_a, null);
    C.ParserErrorCode_QPf = new E.ParserErrorCode("EXTERNAL_FIELD", "ParserErrorCode.EXTERNAL_FIELD", string$.Fieldst, "Try removing the keyword 'external', or replacing the field by an external getter and/or setter.");
    C.ParserErrorCode_RA5 = new E.ParserErrorCode("SETTER_CONSTRUCTOR", "ParserErrorCode.SETTER_CONSTRUCTOR", "Constructors can't be a setter.", "Try removing 'set'.");
    C.ParserErrorCode_RU9 = new E.ParserErrorCode("FINAL_AND_COVARIANT", "ParserErrorCode.FINAL_AND_COVARIANT", string$.Membercfc, "Try removing either the 'final' or 'covariant' keyword.");
    C.ParserErrorCode_THA = new E.ParserErrorCode("DEFAULT_VALUE_IN_FUNCTION_TYPE", "ParserErrorCode.DEFAULT_VALUE_IN_FUNCTION_TYPE", "Parameters in a function type can't have default values.", "Try removing the default value.");
    C.ParserErrorCode_U01 = new E.ParserErrorCode("BREAK_OUTSIDE_OF_LOOP", "ParserErrorCode.BREAK_OUTSIDE_OF_LOOP", string$.A_brea, "Try removing the break statement.");
    C.ParserErrorCode_U2z = new E.ParserErrorCode("EXTERNAL_CONSTRUCTOR_WITH_INITIALIZER", "ParserErrorCode.EXTERNAL_CONSTRUCTOR_WITH_INITIALIZER", string$.An_extc, null);
    C.ParserErrorCode_U4d = new E.ParserErrorCode("CATCH_SYNTAX_EXTRA_PARAMETERS", "ParserErrorCode.CATCH_SYNTAX_EXTRA_PARAMETERS", string$.x27catch, string$.No_typ);
    C.ParserErrorCode_Ued = new E.ParserErrorCode("ENUM_IN_CLASS", "ParserErrorCode.ENUM_IN_CLASS", "Enums can't be declared inside classes.", "Try moving the enum to the top-level.");
    C.ParserErrorCode_Uj8 = new E.ParserErrorCode("EXTERNAL_TYPEDEF", "ParserErrorCode.EXTERNAL_TYPEDEF", string$.Typedet, "Try removing the keyword 'external'.");
    C.ParserErrorCode_Usm = new E.ParserErrorCode("INVALID_OPERATOR_QUESTIONMARK_PERIOD_FOR_SUPER", "ParserErrorCode.INVALID_OPERATOR_QUESTIONMARK_PERIOD_FOR_SUPER", string$.The_op, "Try replacing '?.' with '.'");
    C.ParserErrorCode_VOZ = new E.ParserErrorCode("FUNCTION_TYPED_PARAMETER_VAR", "ParserErrorCode.FUNCTION_TYPED_PARAMETER_VAR", string$.Functi, "Try replacing the keyword with a return type.");
    C.ParserErrorCode_VaT = new E.ParserErrorCode("NAMED_FUNCTION_EXPRESSION", "ParserErrorCode.NAMED_FUNCTION_EXPRESSION", "Function expressions can't be named.", "Try removing the name, or moving the function expression to a function declaration statement.");
    C.ParserErrorCode_WiE = new E.ParserErrorCode("DUPLICATE_DEFERRED", "ParserErrorCode.DUPLICATE_DEFERRED", string$.An_imp_, "Try removing all but one 'deferred' keyword.");
    C.ParserErrorCode_Wrl = new E.ParserErrorCode("MEMBER_WITH_CLASS_NAME", "ParserErrorCode.MEMBER_WITH_CLASS_NAME", string$.A_clas, "Try renaming the member.");
    C.ParserErrorCode_XH7 = new E.ParserErrorCode("EMPTY_ENUM_BODY", "ParserErrorCode.EMPTY_ENUM_BODY", "An enum must declare at least one constant name.", "Try declaring a constant.");
    C.ParserErrorCode_Y9c = new E.ParserErrorCode("COLON_IN_PLACE_OF_IN", "ParserErrorCode.COLON_IN_PLACE_OF_IN", string$.For_in, "Try replacing the colon with the keyword 'in'.");
    C.ParserErrorCode_YEt = new E.ParserErrorCode("MIXIN_DECLARES_CONSTRUCTOR", "ParserErrorCode.MIXIN_DECLARES_CONSTRUCTOR", "Mixins can't declare constructors.", null);
    C.ParserErrorCode_YGg = new E.ParserErrorCode("CONFLICTING_MODIFIERS", "ParserErrorCode.CONFLICTING_MODIFIERS", "Members can't be declared to be both '#string' and '#string2'.", "Try removing one of the keywords.");
    C.ParserErrorCode_YMD = new E.ParserErrorCode("GETTER_CONSTRUCTOR", "ParserErrorCode.GETTER_CONSTRUCTOR", "Constructors can't be a getter.", "Try removing 'get'.");
    C.ParserErrorCode_YMW = new E.ParserErrorCode("EXPECTED_INSTEAD", "ParserErrorCode.EXPECTED_INSTEAD", "Expected '#string' instead of this.", null);
    C.ParserErrorCode_Yu2 = new E.ParserErrorCode("MISSING_ENUM_BODY", "ParserErrorCode.MISSING_ENUM_BODY", string$.An_enu, "Try adding a body and defining at least one constant.");
    C.ParserErrorCode_a9w = new E.ParserErrorCode("VAR_AS_TYPE_NAME", "ParserErrorCode.VAR_AS_TYPE_NAME", string$.The_kev, null);
    C.ParserErrorCode_aTW = new E.ParserErrorCode("EXTERNAL_CONSTRUCTOR_WITH_BODY", "ParserErrorCode.EXTERNAL_CONSTRUCTOR_WITH_BODY", "External constructors can't have a body.", "Try removing the body of the constructor, or removing the keyword 'external'.");
    C.ParserErrorCode_aZM = new E.ParserErrorCode("VOID_WITH_TYPE_ARGUMENTS", "ParserErrorCode.VOID_WITH_TYPE_ARGUMENTS", "Type 'void' can't have type arguments.", "Try removing the type arguments.");
    C.ParserErrorCode_ahj = new E.ParserErrorCode("INVALID_SUPER_IN_INITIALIZER", "ParserErrorCode.INVALID_SUPER_IN_INITIALIZER", string$.Can_ons, null);
    C.ParserErrorCode_apl = new E.ParserErrorCode("EXPORT_DIRECTIVE_AFTER_PART_DIRECTIVE", "ParserErrorCode.EXPORT_DIRECTIVE_AFTER_PART_DIRECTIVE", string$.Export, "Try moving the export directives before the part directives.");
    C.ParserErrorCode_bLp = new E.ParserErrorCode("DUPLICATE_LABEL_IN_SWITCH_STATEMENT", "ParserErrorCode.DUPLICATE_LABEL_IN_SWITCH_STATEMENT", "The label '#name' was already used in this switch statement.", string$.Try_ch);
    C.ParserErrorCode_bd2 = new E.ParserErrorCode("ABSTRACT_LATE_FIELD", "ParserErrorCode.ABSTRACT_LATE_FIELD", "Abstract fields cannot be late.", "Try removing the 'abstract' or 'late' keyword.");
    C.ParserErrorCode_c0h = new E.ParserErrorCode("LITERAL_WITH_CLASS_AND_NEW", "ParserErrorCode.LITERAL_WITH_CLASS_AND_NEW", "A #string literal can't be prefixed by 'new #lexeme'.", "Try removing 'new' and '#lexeme'");
    C.ParserErrorCode_cKo = new E.ParserErrorCode("INVALID_THIS_IN_INITIALIZER", "ParserErrorCode.INVALID_THIS_IN_INITIALIZER", string$.Can_ont, null);
    C.ParserErrorCode_ciA = new E.ParserErrorCode("EXPECTED_TYPE_NAME", "ParserErrorCode.EXPECTED_TYPE_NAME", "Expected a type name.", null);
    C.ParserErrorCode_dyC = new E.ParserErrorCode("EXTENSION_DECLARES_INSTANCE_FIELD", "ParserErrorCode.EXTENSION_DECLARES_INSTANCE_FIELD", "Extensions can't declare instance fields", "Try removing the field declaration or making it a static field");
    C.ParserErrorCode_e3y = new E.ParserErrorCode("MISSING_CATCH_OR_FINALLY", "ParserErrorCode.MISSING_CATCH_OR_FINALLY", string$.A_try_, "Try adding either a catch or finally clause, or remove the try statement.");
    C.ParserErrorCode_e4R = new E.ParserErrorCode("REDIRECTION_IN_NON_FACTORY_CONSTRUCTOR", "ParserErrorCode.REDIRECTION_IN_NON_FACTORY_CONSTRUCTOR", string$.Only_f, "Try making this a factory constructor, or remove the redirection.");
    C.ParserErrorCode_eVL = new E.ParserErrorCode("MULTIPLE_EXTENDS_CLAUSES", "ParserErrorCode.MULTIPLE_EXTENDS_CLAUSES", string$.Each_ce, "Try choosing one superclass and define your class to implement (or mix in) the others.");
    C.ParserErrorCode_ecN = new E.ParserErrorCode("EXTERNAL_CLASS", "ParserErrorCode.EXTERNAL_CLASS", string$.Classet, "Try removing the keyword 'external'.");
    C.ParserErrorCode_fHw = new E.ParserErrorCode("CONTINUE_WITHOUT_LABEL_IN_CASE", "ParserErrorCode.CONTINUE_WITHOUT_LABEL_IN_CASE", string$.A_conti, "Try adding a label associated with one of the case clauses to the continue statement.");
    C.ParserErrorCode_fR0 = new E.ParserErrorCode("VAR_AND_TYPE", "ParserErrorCode.VAR_AND_TYPE", string$.Variabc, "Try removing 'var.'");
    C.ParserErrorCode_fU9 = new E.ParserErrorCode("ANNOTATION_WITH_TYPE_ARGUMENTS_UNINSTANTIATED", "ParserErrorCode.ANNOTATION_WITH_TYPE_ARGUMENTS_UNINSTANTIATED", string$.An_ann, null);
    C.ParserErrorCode_gQW = new E.ParserErrorCode("PREFIX_AFTER_COMBINATOR", "ParserErrorCode.PREFIX_AFTER_COMBINATOR", string$.The_pr, "Try moving the prefix before the combinators.");
    C.ParserErrorCode_gYG = new E.ParserErrorCode("ABSTRACT_STATIC_FIELD", "ParserErrorCode.ABSTRACT_STATIC_FIELD", string$.Static, "Try removing the 'abstract' or 'static' keyword.");
    C.ParserErrorCode_gmF = new E.ParserErrorCode("MISSING_CONST_FINAL_VAR_OR_TYPE", "ParserErrorCode.MISSING_CONST_FINAL_VAR_OR_TYPE", string$.Variabm, "Try adding the name of the type of the variable or the keyword 'var'.");
    C.ParserErrorCode_i9j = new E.ParserErrorCode("EXTENSION_DECLARES_ABSTRACT_MEMBER", "ParserErrorCode.EXTENSION_DECLARES_ABSTRACT_MEMBER", string$.Extens, "Try providing an implementation for the member.");
    C.ParserErrorCode_iDZ = new E.ParserErrorCode("INVALID_OPERATOR", "ParserErrorCode.INVALID_OPERATOR", "The string '#lexeme' isn't a user-definable operator.", null);
    C.ParserErrorCode_iLh = new E.ParserErrorCode("WRONG_SEPARATOR_FOR_POSITIONAL_PARAMETER", "ParserErrorCode.WRONG_SEPARATOR_FOR_POSITIONAL_PARAMETER", "The default value of a positional parameter should be preceded by '='.", "Try replacing the ':' with '='.");
    C.ParserErrorCode_iRX = new E.ParserErrorCode("CONST_FACTORY", "ParserErrorCode.CONST_FACTORY", string$.Only_r, "Try removing the 'const' keyword, or replacing the body with '=' followed by a valid target.");
    C.ParserErrorCode_icQ = new E.ParserErrorCode("CONST_AND_FINAL", "ParserErrorCode.CONST_AND_FINAL", string$.Memberccn, "Try removing either the 'const' or 'final' keyword.");
    C.ParserErrorCode_int = new E.ParserErrorCode("MULTIPLE_PART_OF_DIRECTIVES", "ParserErrorCode.MULTIPLE_PART_OF_DIRECTIVES", string$.Only_op, "Try removing all but one of the part-of directives.");
    C.ParserErrorCode_jrF = new E.ParserErrorCode("EXTERNAL_FACTORY_WITH_BODY", "ParserErrorCode.EXTERNAL_FACTORY_WITH_BODY", "External factories can't have a body.", "Try removing the body of the factory, or removing the keyword 'external'.");
    C.ParserErrorCode_k0M = new E.ParserErrorCode("INVALID_OPERATOR_FOR_SUPER", "ParserErrorCode.INVALID_OPERATOR_FOR_SUPER", "The operator '{0}' can't be used with 'super'.", null);
    C.ParserErrorCode_kB5 = new E.ParserErrorCode("INVALID_USE_OF_COVARIANT_IN_EXTENSION", "ParserErrorCode.INVALID_USE_OF_COVARIANT_IN_EXTENSION", "Can't have modifier '#lexeme' in an extension.", "Try removing '#lexeme'.");
    C.ParserErrorCode_kMT = new E.ParserErrorCode("DIRECTIVE_AFTER_DECLARATION", "ParserErrorCode.DIRECTIVE_AFTER_DECLARATION", string$.Direct, "Try moving the directive before any declarations.");
    C.ParserErrorCode_kOy = new E.ParserErrorCode("CLASS_IN_CLASS", "ParserErrorCode.CLASS_IN_CLASS", string$.Classei, "Try moving the class to the top-level.");
    C.ParserErrorCode_kiE = new E.ParserErrorCode("EXPERIMENT_NOT_ENABLED", "ParserErrorCode.EXPERIMENT_NOT_ENABLED", "This requires the '#string' language feature to be enabled.", "Try updating your pubspec.yaml to set the minimum SDK constraint to #string2 or higher, and running 'pub get'.");
    C.ParserErrorCode_kn0 = new E.ParserErrorCode("EQUALITY_CANNOT_BE_EQUALITY_OPERAND", "ParserErrorCode.EQUALITY_CANNOT_BE_EQUALITY_OPERAND", string$.A_comp, "Try putting parentheses around one of the comparisons.");
    C.ParserErrorCode_m3E = new E.ParserErrorCode("INVALID_HEX_ESCAPE", "ParserErrorCode.INVALID_HEX_ESCAPE", string$.An_escx, null);
    C.ParserErrorCode_n7k = new E.ParserErrorCode("TYPEDEF_IN_CLASS", "ParserErrorCode.TYPEDEF_IN_CLASS", string$.Typedei, "Try moving the typedef to the top-level.");
    C.ParserErrorCode_o8m = new E.ParserErrorCode("IMPORT_DIRECTIVE_AFTER_PART_DIRECTIVE", "ParserErrorCode.IMPORT_DIRECTIVE_AFTER_PART_DIRECTIVE", string$.Import, "Try moving the import directives before the part directives.");
    C.ParserErrorCode_oRH = new E.ParserErrorCode("COVARIANT_AND_STATIC", "ParserErrorCode.COVARIANT_AND_STATIC", string$.Memberccv, "Try removing either the 'covariant' or 'static' keyword.");
    C.ParserErrorCode_oYK = new E.ParserErrorCode("ABSTRACT_EXTERNAL_FIELD", "ParserErrorCode.ABSTRACT_EXTERNAL_FIELD", string$.Fieldsb, "Try removing the 'abstract' or 'external' keyword.");
    C.ParserErrorCode_oqh = new E.ParserErrorCode("TYPE_PARAMETERS_ON_OPERATOR", "ParserErrorCode.TYPE_PARAMETERS_ON_OPERATOR", string$.Types_, "Try removing the type parameters.");
    C.ParserErrorCode_qBS = new E.ParserErrorCode("IMPLEMENTS_BEFORE_ON", "ParserErrorCode.IMPLEMENTS_BEFORE_ON", string$.The_on, "Try moving the on clause before the implements clause.");
    C.ParserErrorCode_qBb = new E.ParserErrorCode("MISSING_EXPRESSION_IN_THROW", "ParserErrorCode.MISSING_EXPRESSION_IN_THROW", "Missing expression after 'throw'.", "Add an expression after 'throw' or use 'rethrow' to throw a caught exception");
    C.ParserErrorCode_qFt = new E.ParserErrorCode("EXTERNAL_LATE_FIELD", "ParserErrorCode.EXTERNAL_LATE_FIELD", "External fields cannot be late.", "Try removing the 'external' or 'late' keyword.");
    C.ParserErrorCode_qJw = new E.ParserErrorCode("MISSING_METHOD_PARAMETERS", "ParserErrorCode.MISSING_METHOD_PARAMETERS", "Methods must have an explicit list of parameters.", "Try adding a parameter list.");
    C.ParserErrorCode_qlV = new E.ParserErrorCode("NON_PART_OF_DIRECTIVE_IN_PART", "ParserErrorCode.NON_PART_OF_DIRECTIVE_IN_PART", string$.The_pa, "Try removing the other directives, or moving them to the library for which this is a part.");
    C.ParserErrorCode_rPh = new E.ParserErrorCode("COVARIANT_MEMBER", "ParserErrorCode.COVARIANT_MEMBER", string$.Getterv, "Try removing the 'covariant' keyword.");
    C.ParserErrorCode_sMO = new E.ParserErrorCode("INVALID_INITIALIZER", "ParserErrorCode.INVALID_INITIALIZER", "Not a valid initializer.", string$.To_ini);
    C.ParserErrorCode_sUY = new E.ParserErrorCode("DEFERRED_AFTER_PREFIX", "ParserErrorCode.DEFERRED_AFTER_PREFIX", string$.The_dee, "Try moving the deferred keyword before the prefix.");
    C.ParserErrorCode_sXS = new E.ParserErrorCode("MODIFIER_OUT_OF_ORDER", "ParserErrorCode.MODIFIER_OUT_OF_ORDER", "The modifier '#string' should be before the modifier '#string2'.", "Try re-ordering the modifiers.");
    C.ParserErrorCode_sxw = new E.ParserErrorCode("INVALID_CODE_POINT", "ParserErrorCode.INVALID_CODE_POINT", "The escape sequence '{0}' isn't a valid code point.", null);
    C.ParserErrorCode_sy0 = new E.ParserErrorCode("FIELD_INITIALIZED_OUTSIDE_DECLARING_CLASS", "ParserErrorCode.FIELD_INITIALIZED_OUTSIDE_DECLARING_CLASS", string$.A_fiel, "Try passing a value into the superclass constructor, or moving the initialization into the constructor body.");
    C.ParserErrorCode_tEy = new E.ParserErrorCode("CONST_METHOD", "ParserErrorCode.CONST_METHOD", string$.Gettern, "Try removing the 'const' keyword.");
    C.ParserErrorCode_uT8 = new E.ParserErrorCode("NAMED_PARAMETER_OUTSIDE_GROUP", "ParserErrorCode.NAMED_PARAMETER_OUTSIDE_GROUP", "Named parameters must be enclosed in curly braces ('{' and '}').", "Try surrounding the named parameters in curly braces.");
    C.ParserErrorCode_uUr = new E.ParserErrorCode("UNEXPECTED_TOKEN", "ParserErrorCode.UNEXPECTED_TOKEN", "Unexpected text '{0}'.", "Try removing the text.");
    C.ParserErrorCode_uXK = new E.ParserErrorCode("REDIRECTING_CONSTRUCTOR_WITH_BODY", "ParserErrorCode.REDIRECTING_CONSTRUCTOR_WITH_BODY", string$.Redire, "Try removing the body, or not making this a redirecting constructor.");
    C.ParserErrorCode_vg3 = new E.ParserErrorCode("EXPECTED_ELSE_OR_COMMA", "ParserErrorCode.EXPECTED_ELSE_OR_COMMA", "Expected 'else' or comma.", null);
    C.ParserErrorCode_wBk = new E.ParserErrorCode("LITERAL_WITH_NEW", "ParserErrorCode.LITERAL_WITH_NEW", "A literal can't be prefixed by 'new'.", "Try removing 'new'");
    C.ParserErrorCode_wQg = new E.ParserErrorCode("MULTIPLE_VARIANCE_MODIFIERS", "ParserErrorCode.MULTIPLE_VARIANCE_MODIFIERS", string$.Each_t, "Use at most one of the 'in', 'out', or 'inout' modifiers.");
    C.ParserErrorCode_x8n = new E.ParserErrorCode("IMPLEMENTS_BEFORE_WITH", "ParserErrorCode.IMPLEMENTS_BEFORE_WITH", string$.The_wi, "Try moving the with clause before the implements clause.");
    C.ParserErrorCode_xw8 = new E.ParserErrorCode("TYPE_BEFORE_FACTORY", "ParserErrorCode.TYPE_BEFORE_FACTORY", string$.Factorc, "Try removing the type appearing before 'factory'.");
    C.ParserErrorCode_xxH = new E.ParserErrorCode("MISSING_IDENTIFIER", "ParserErrorCode.MISSING_IDENTIFIER", "Expected an identifier.", null);
    C.ParserErrorCode_zJs = new E.ParserErrorCode("EXPECTED_CLASS_MEMBER", "ParserErrorCode.EXPECTED_CLASS_MEMBER", "Expected a class member.", "Try placing this code inside a class member.");
    C.ParserErrorCode_zLt = new E.ParserErrorCode("SWITCH_HAS_MULTIPLE_DEFAULT_CASES", "ParserErrorCode.SWITCH_HAS_MULTIPLE_DEFAULT_CASES", string$.The__d, "Try removing all but one default case.");
    C.Precedence_0 = new F.Precedence(0);
    C.Precedence_1 = new F.Precedence(1);
    C.Precedence_15 = new F.Precedence(15);
    C.Precedence_16 = new F.Precedence(16);
    C.Precedence_17 = new F.Precedence(17);
    C.Precedence_2 = new F.Precedence(2);
    C.Precedence_3 = new F.Precedence(3);
    C.Precedence_8 = new F.Precedence(8);
    C.Quote_0 = new Y.Quote("Quote.Single");
    C.Quote_1 = new Y.Quote("Quote.Double");
    C.Quote_2 = new Y.Quote("Quote.MultiLineSingle");
    C.Quote_3 = new Y.Quote("Quote.MultiLineDouble");
    C.Quote_4 = new Y.Quote("Quote.RawSingle");
    C.Quote_5 = new Y.Quote("Quote.RawDouble");
    C.Quote_6 = new Y.Quote("Quote.RawMultiLineSingle");
    C.Quote_7 = new Y.Quote("Quote.RawMultiLineDouble");
    C.ScannerConfiguration_false_false_false = new S.ScannerConfiguration(false, false, false);
    C.ScannerErrorCode_66f = new A.ScannerErrorCode("ILLEGAL_CHARACTER", "ScannerErrorCode.ILLEGAL_CHARACTER", "Illegal character '{0}'.", null);
    C.ScannerErrorCode_6TA = new A.ScannerErrorCode("UNSUPPORTED_OPERATOR", "ScannerErrorCode.UNSUPPORTED_OPERATOR", "The '{0}' operator is not supported.", null);
    C.ScannerErrorCode_CJo = new A.ScannerErrorCode("UNTERMINATED_STRING_LITERAL", "ScannerErrorCode.UNTERMINATED_STRING_LITERAL", "Unterminated string literal.", null);
    C.ScannerErrorCode_IQy = new A.ScannerErrorCode("MISSING_DIGIT", "ScannerErrorCode.MISSING_DIGIT", "Decimal digit expected.", null);
    C.ScannerErrorCode_g9V = new A.ScannerErrorCode("UNTERMINATED_MULTI_LINE_COMMENT", "ScannerErrorCode.UNTERMINATED_MULTI_LINE_COMMENT", "Unterminated multi-line comment.", "Try terminating the comment with '*/', or removing any unbalanced occurrences of '/*' (because comments nest in Dart).");
    C.ScannerErrorCode_gXq = new A.ScannerErrorCode("UNEXPECTED_DOLLAR_IN_STRING", "ScannerErrorCode.UNEXPECTED_DOLLAR_IN_STRING", string$.A_____, "Try adding a backslash (\\) to escape the '$'.");
    C.ScannerErrorCode_mtz = new A.ScannerErrorCode("EXPECTED_TOKEN", "ScannerErrorCode.EXPECTED_TOKEN", "Expected to find '{0}'.", null);
    C.ScannerErrorCode_q8u = new A.ScannerErrorCode("MISSING_IDENTIFIER", "ScannerErrorCode.MISSING_IDENTIFIER", "Expected an identifier.", null);
    C.ScannerErrorCode_wsa = new A.ScannerErrorCode("MISSING_HEX_DIGIT", "ScannerErrorCode.MISSING_HEX_DIGIT", "Hexadecimal digit expected.", null);
    C.List_kr3 = H._setArrayType(makeConstList(["(", ".", "==", "!=", ")", "]", "}", ";", ":", ","]), type$.JSArray_legacy_String);
    C.Map_kr2Vk = new H.ConstantStringMap(10, {"(": null, ".": null, "==": null, "!=": null, ")": null, "]": null, "}": null, ";": null, ":": null, ",": null}, C.List_kr3, H.findType("ConstantStringMap<String*,Null>"));
    C.Set_kr3n9 = new P._UnmodifiableSet(C.Map_kr2Vk, H.findType("_UnmodifiableSet<String*>"));
    C.SimpleNullableTypeWith1Argument_SimpleTypeArgument1 = new V.SimpleNullableTypeWith1Argument(C.C_SimpleTypeArgument1);
    C.SimpleTypeWith1Argument_SimpleTypeArgument1 = new V.SimpleTypeWith1Argument(C.C_SimpleTypeArgument1);
    C.SimpleTypeWith1Argument_SimpleTypeArgument1GtEq = new V.SimpleTypeWith1Argument(C.C_SimpleTypeArgument1GtEq);
    C.SimpleTypeWith1Argument_SimpleTypeArgument1GtGt = new V.SimpleTypeWith1Argument(C.C_SimpleTypeArgument1GtGt);
    C.SpreadOperator_false_0 = new R.SpreadOperator(false, 0);
    C.StyleFix_8aB = new Q.StyleFix("optional-new");
    C.StyleFix_MQu = new Q.StyleFix("single-cascade-statements");
    C.StyleFix_U4w = new Q.StyleFix("named-default-separator");
    C.StyleFix_UEC = new Q.StyleFix("function-typedefs");
    C.StyleFix_hj7 = new Q.StyleFix("doc-comments");
    C.StyleFix_xoD = new Q.StyleFix("optional-const");
    C.Symbol_accept = new H.Symbol("accept");
    C.Symbol_beginToken = new H.Symbol("beginToken");
    C.Symbol_endToken = new H.Symbol("endToken");
    C.Symbol_length = new H.Symbol("length");
    C.Template_4MH = new Z.Template(Z.codes___withArgumentsExpectedClassMember$closure(), type$.Template_of_legacy_legacy_Message_Function_legacy_Token);
    C.Template_86y = new Z.Template(Z.codes___withArgumentsDuplicatedModifier$closure(), type$.Template_of_legacy_legacy_Message_Function_legacy_Token);
    C.Template_CKH = new Z.Template(Z.codes___withArgumentsExpectedIdentifierButGotKeyword$closure(), type$.Template_of_legacy_legacy_Message_Function_legacy_Token);
    C.Template_Y7N = new Z.Template(Z.codes___withArgumentsExtraneousModifierInExtension$closure(), type$.Template_of_legacy_legacy_Message_Function_legacy_Token);
    C.Template__withArgumentsExpectedEnumBody = new Z.Template(Z.codes___withArgumentsExpectedEnumBody$closure(), type$.Template_of_legacy_legacy_Message_Function_legacy_Token);
    C.Template__withArgumentsExpectedString = new Z.Template(Z.codes___withArgumentsExpectedString$closure(), type$.Template_of_legacy_legacy_Message_Function_legacy_Token);
    C.Template__withArgumentsExpectedType = new Z.Template(Z.codes___withArgumentsExpectedType$closure(), type$.Template_of_legacy_legacy_Message_Function_legacy_Token);
    C.Template__withArgumentsInvalidOperator = new Z.Template(Z.codes___withArgumentsInvalidOperator$closure(), type$.Template_of_legacy_legacy_Message_Function_legacy_Token);
    C.Template__withArgumentsUnexpectedToken = new Z.Template(Z.codes___withArgumentsUnexpectedToken$closure(), type$.Template_of_legacy_legacy_Message_Function_legacy_Token);
    C.Template_ak7 = new Z.Template(Z.codes___withArgumentsBuiltInIdentifierAsType$closure(), type$.Template_of_legacy_legacy_Message_Function_legacy_Token);
    C.Template_gA4 = new Z.Template(Z.codes___withArgumentsBuiltInIdentifierInDeclaration$closure(), type$.Template_of_legacy_legacy_Message_Function_legacy_Token);
    C.Template_gsT = new Z.Template(Z.codes___withArgumentsExpectedDeclaration$closure(), type$.Template_of_legacy_legacy_Message_Function_legacy_Token);
    C.Template_int = new Z.Template(Z.codes___withArgumentsUnexpectedModifierInNonNnbd$closure(), type$.Template_of_legacy_legacy_Message_Function_legacy_Token);
    C.Template_lnn = new Z.Template(Z.codes___withArgumentsExtraneousModifier$closure(), type$.Template_of_legacy_legacy_Message_Function_legacy_Token);
    C.Template_qiR = new Z.Template(Z.codes___withArgumentsExpectedFunctionBody$closure(), type$.Template_of_legacy_legacy_Message_Function_legacy_Token);
    C.TokenType_0Ef = new L.TokenType(138, false, true, false, true, ">=", "GT_EQ", 8, ">=");
    C.TokenType_1KU = new L.TokenType(96, false, false, false, false, "`", "BACKPING", 0, "`");
    C.TokenType_2Hh = new L.TokenType(159, false, true, false, false, "^=", "CARET_EQ", 1, "^=");
    C.TokenType_3D9 = new L.TokenType(136, false, true, false, false, "<<=", "LT_LT_EQ", 1, "<<=");
    C.TokenType_5uk = new L.TokenType(40, false, false, false, false, "(", "OPEN_PAREN", 17, "(");
    C.TokenType_86y = new L.TokenType(39, false, false, false, false, "string", "STRING", 0, null);
    C.TokenType_AGi = new L.TokenType(91, false, false, false, false, "[", "OPEN_SQUARE_BRACKET", 17, "[");
    C.TokenType_M5Z = new L.TokenType(45, false, true, false, true, "-", "MINUS", 13, "-");
    C.TokenType_AO3 = new L.TokenType(154, false, true, false, false, "-=", "MINUS_EQ", 1, "-=");
    C.TokenType_CNR = new L.TokenType(42, false, true, false, true, "*", "STAR", 14, "*");
    C.TokenType_DCV = new L.TokenType(139, false, true, false, false, ">>=", "GT_GT_EQ", 1, ">>=");
    C.TokenType_Drw = new L.TokenType(60, false, true, false, true, "<", "LT", 8, "<");
    C.TokenType_ECn = new L.TokenType(130, false, false, false, false, "=>", "FUNCTION", 0, "=>");
    C.TokenType_ESD = new L.TokenType(168, false, false, false, false, "...?", "PERIOD_PERIOD_PERIOD_QUESTION", 0, "...?");
    C.TokenType_Emx = new L.TokenType(0, false, false, false, false, "", "EOF", 0, "");
    C.TokenType_FmR = new L.TokenType(59, false, false, false, false, ";", "SEMICOLON", 0, ";");
    C.TokenType_GNi = new L.TokenType(151, false, true, false, false, "++", "PLUS_PLUS", 16, "++");
    C.TokenType_HH1 = new L.TokenType(146, false, true, false, false, "&=", "AMPERSAND_EQ", 1, "&=");
    C.TokenType_IIj = new L.TokenType(92, false, false, false, false, "\\", "BACKSLASH", 0, "\\");
    C.TokenType_IQp = new L.TokenType(97, false, false, false, false, "identifier", "IDENTIFIER", 0, null);
    C.TokenType_MvE = new L.TokenType(161, false, false, false, false, "$", "STRING_INTERPOLATION_IDENTIFIER", 0, "$");
    C.TokenType_NQ8 = new L.TokenType(156, false, true, false, true, "~/", "TILDE_SLASH", 14, "~/");
    C.TokenType_O1S = new L.TokenType(170, false, false, false, false, "?..", "QUESTION_PERIOD_PERIOD", 2, "?..");
    C.TokenType_O55 = new L.TokenType(44, false, false, false, false, ",", "COMMA", 0, ",");
    C.TokenType_P5Z = new L.TokenType(35, false, false, false, false, "#", "HASH", 0, "#");
    C.TokenType_QOM = new L.TokenType(155, false, true, false, false, "~/=", "TILDE_SLASH_EQ", 1, "~/=");
    C.TokenType_Qq8 = new L.TokenType(141, false, true, false, true, "[]", "INDEX", 17, "[]");
    C.TokenType_RzD = new L.TokenType(43, false, true, false, true, "+", "PLUS", 13, "+");
    C.TokenType_SfG = new L.TokenType(150, false, true, false, false, "*=", "STAR_EQ", 1, "*=");
    C.TokenType_Uvq = new L.TokenType(160, false, false, false, false, "comment", "MULTI_LINE_COMMENT", 0, null);
    C.TokenType_V43 = new L.TokenType(63, false, true, false, false, "?", "QUESTION", 3, "?");
    C.TokenType_Vyt = new L.TokenType(105, false, false, false, false, "int", "INT", 0, null);
    C.TokenType_WjT = new L.TokenType(160, false, false, false, false, "comment", "SINGLE_LINE_COMMENT", 0, null);
    C.TokenType_Yb0 = new L.TokenType(143, false, true, false, false, "!=", "BANG_EQ", 7, "!=");
    C.TokenType_k07 = new L.TokenType(37, false, true, false, true, "%", "PERCENT", 14, "%");
    C.TokenType_ao1 = new L.TokenType(157, false, true, false, false, "%=", "PERCENT_EQ", 1, "%=");
    C.TokenType_lOW = new L.TokenType(163, false, true, false, false, "??", "QUESTION_QUESTION", 4, "??");
    C.TokenType_cI8 = new L.TokenType(164, false, true, false, false, "??=", "QUESTION_QUESTION_EQ", 1, "??=");
    C.TokenType_cOk = new L.TokenType(123, false, false, false, false, "{", "OPEN_CURLY_BRACKET", 0, "{");
    C.TokenType_cQv = new L.TokenType(140, false, true, false, true, "[]=", "INDEX_EQ", 0, "[]=");
    C.TokenType_cYV = new L.TokenType(33, false, true, false, false, "!", "BANG", 15, "!");
    C.TokenType_cv8 = new L.TokenType(133, false, true, false, false, "..", "PERIOD_PERIOD", 2, "..");
    C.TokenType_gg4 = new L.TokenType(58, false, false, false, false, ":", "COLON", 0, ":");
    C.TokenType_gg40 = new L.TokenType(135, false, true, false, true, "==", "EQ_EQ", 7, "==");
    C.TokenType_ifb = new L.TokenType(162, false, true, false, false, "?.", "QUESTION_PERIOD", 17, "?.");
    C.TokenType_j7J = new L.TokenType(132, false, false, false, false, "...", "PERIOD_PERIOD_PERIOD", 0, "...");
    C.TokenType_jTn = new L.TokenType(153, false, true, false, false, "--", "MINUS_MINUS", 16, "--");
    C.TokenType_kqK = new L.TokenType(149, false, true, false, false, "|=", "BAR_EQ", 1, "|=");
    C.TokenType_mRX = new L.TokenType(167, false, true, false, true, ">>>", "GT_GT_GT", 12, ">>>");
    C.TokenType_kr3 = new L.TokenType(169, false, true, false, false, ">>>=", "GT_GT_GT_EQ", 1, ">>>=");
    C.TokenType_my0 = new L.TokenType(129, false, true, false, true, "<=", "LT_EQ", 8, "<=");
    C.TokenType_sBE = new L.TokenType(47, false, true, false, true, "/", "SLASH", 14, "/");
    C.TokenType_nD8 = new L.TokenType(131, false, true, false, false, "/=", "SLASH_EQ", 1, "/=");
    C.TokenType_oZ3 = new L.TokenType(98, false, false, false, false, "script", "SCRIPT_TAG", 0, "script");
    C.TokenType_pCd = new L.TokenType(120, false, false, false, false, "hexadecimal", "HEXADECIMAL", 0, null);
    C.TokenType_q1z = new L.TokenType(100, false, false, false, false, "double", "DOUBLE", 0, null);
    C.TokenType_qNW = new L.TokenType(152, false, true, false, false, "+=", "PLUS_EQ", 1, "+=");
    C.TokenType_skV = new L.TokenType(128, false, false, false, false, "${", "STRING_INTERPOLATION_EXPRESSION", 0, "${");
    C.TokenType_sxw = new L.TokenType(134, false, false, false, false, "===", "EQ_EQ_EQ", 7, "===");
    C.TokenType_tca = new L.TokenType(61, false, true, false, false, "=", "EQ", 1, "=");
    C.TokenType_ufh = new L.TokenType(126, false, true, false, true, "~", "TILDE", 15, "~");
    C.TokenType_uv8 = new L.TokenType(88, false, false, false, false, "malformed input", "BAD_INPUT", 0, null);
    C.TokenType_wCI = new L.TokenType(46, false, false, false, false, ".", "PERIOD", 17, ".");
    C.TokenType_xgG = new L.TokenType(142, false, false, false, false, "!==", "BANG_EQ_EQ", 7, "!==");
    C.TokenType_yzz = new L.TokenType(64, false, false, false, false, "@", "AT", 0, "@");
    C.List_4AN = H._setArrayType(makeConstList(["<", "(", "{", "=>"]), type$.JSArray_legacy_String);
    C.TopLevelDeclarationIdentifierContext_ssl = new G.TopLevelDeclarationIdentifierContext(C.List_4AN, "topLevelFunctionDeclaration", true, false, false, false, true, C.Template_ijv);
    C.List_IIf = H._setArrayType(makeConstList([";", "=", ","]), type$.JSArray_legacy_String);
    C.TopLevelDeclarationIdentifierContext_yXb = new G.TopLevelDeclarationIdentifierContext(C.List_IIf, "topLevelVariableDeclaration", true, false, false, false, true, C.Template_ijv);
    C.TypeReferenceIdentifierContext_27z = new G.TypeReferenceIdentifierContext("typeReference", false, false, false, false, false, C.Template__withArgumentsExpectedType);
    C.TypeReferenceIdentifierContext_9a2 = new G.TypeReferenceIdentifierContext("typeReferenceContinuation", false, false, false, true, false, C.Template_ijv);
    C.TypeReferenceIdentifierContext_Ucj = new G.TypeReferenceIdentifierContext("prefixedTypeReference", false, false, false, false, true, C.Template__withArgumentsExpectedType);
    C.TypeVariableDeclarationIdentifierContext_Fyn = new G.TypeVariableDeclarationIdentifierContext("typeVariableDeclaration", true, false, false, false, false, C.Template_ijv);
    C.Type_ByteBuffer_RkP = H.typeLiteral("ByteBuffer");
    C.Type_ByteData_zNC = H.typeLiteral("ByteData");
    C.Type_Float32List_LB7 = H.typeLiteral("Float32List");
    C.Type_Float64List_LB7 = H.typeLiteral("Float64List");
    C.Type_Int16List_uXf = H.typeLiteral("Int16List");
    C.Type_Int32List_O50 = H.typeLiteral("Int32List");
    C.Type_Int8List_ekJ = H.typeLiteral("Int8List");
    C.Type_JSObject_8k0 = H.typeLiteral("JSObject");
    C.Type_Null_Yyn = H.typeLiteral("Null");
    C.Type_String_k8F = H.typeLiteral("String");
    C.Type_Uint16List_2bx = H.typeLiteral("Uint16List");
    C.Type_Uint32List_2bx = H.typeLiteral("Uint32List");
    C.Type_Uint8ClampedList_Jik = H.typeLiteral("Uint8ClampedList");
    C.Type_Uint8List_WLA = H.typeLiteral("Uint8List");
    C.Type_bool_lhE = H.typeLiteral("bool");
    C.Type_double_K1J = H.typeLiteral("double");
    C.Type_int_tHn = H.typeLiteral("int");
    C.Type_num_cv7 = H.typeLiteral("num");
    C.TypedefDeclarationIdentifierContext_UAO = new G.TypedefDeclarationIdentifierContext("typedefDeclaration", true, false, false, false, false, C.Template_ijv);
    C.Utf8Decoder_false = new P.Utf8Decoder(false);
    C.Whitespace_afterHardSplit = new L.Whitespace("afterHardSplit");
    C.Whitespace_nestedNewline = new L.Whitespace("nestedNewline");
    C.Whitespace_newline = new L.Whitespace("newline");
    C.Whitespace_newlineFlushLeft = new L.Whitespace("newlineFlushLeft");
    C.Whitespace_none = new L.Whitespace("none");
    C.Whitespace_oneOrTwoNewlines = new L.Whitespace("oneOrTwoNewlines");
    C.Whitespace_space = new L.Whitespace("space");
    C.Whitespace_splitOrNewline = new L.Whitespace("splitOrNewline");
    C.Whitespace_splitOrTwoNewlines = new L.Whitespace("splitOrTwoNewlines");
    C.Whitespace_twoNewlines = new L.Whitespace("twoNewlines");
    C._IterationMarker_null_2 = new P._IterationMarker(null, 2);
  })();
  (function staticFields() {
    $._JS_INTEROP_INTERCEPTOR_TAG = null;
    $.Closure_functionCounter = 0;
    $.BoundClosure__receiverFieldNameCache = null;
    $.BoundClosure__interceptorFieldNameCache = null;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._toStringVisiting = H._setArrayType([], H.findType("JSArray<Object>"));
    $.KeywordState__KEYWORD_STATE = null;
    $.fastaAnalyzerErrorCodes = H._setArrayType([null, C.ParserErrorCode_kn0, C.ParserErrorCode_HjT, C.ParserErrorCode_ecN, C.ParserErrorCode_27z, C.ParserErrorCode_04A, C.ParserErrorCode_gQW, C.ParserErrorCode_n7k, C.ParserErrorCode_Jaz, C.ParserErrorCode_7JZ, C.ParserErrorCode_o8m, C.ParserErrorCode_3Vk, C.ParserErrorCode_J82, C.ParserErrorCode_5yr, C.ParserErrorCode_M7M, C.ParserErrorCode_zLt, C.ParserErrorCode_IF2, C.ParserErrorCode_8Qi, C.ParserErrorCode_Usm, C.ParserErrorCode_GVU, C.ParserErrorCode_e3y, C.ParserErrorCode_e4R, C.ParserErrorCode_uXK, C.ParserErrorCode_H9C, C.ParserErrorCode_6Vn0, C.ParserErrorCode_int, C.ParserErrorCode_AgZ, C.ParserErrorCode_AIB, C.ParserErrorCode_eVL, C.ParserErrorCode_G8G, C.ParserErrorCode_7FR, C.ParserErrorCode_Gbb, C.ParserErrorCode_qBb, C.ParserErrorCode_gmF, C.ParserErrorCode_ERc, C.ParserErrorCode_2jN, C.ParserErrorCode_OzG, C.ParserErrorCode_86y, C.ParserErrorCode_MIo, C.ParserErrorCode_iDZ, C.ParserErrorCode_m3E, C.ParserErrorCode_YMW, C.ParserErrorCode_x8n, C.ParserErrorCode_qBS, C.ParserErrorCode_9uy, C.ParserErrorCode_EFi, C.ParserErrorCode_vg3, C.ParserErrorCode_ahj, C.ParserErrorCode_kiE, C.ParserErrorCode_1y5, C.ParserErrorCode_QPf, C.ParserErrorCode_8hf, C.ParserErrorCode_U01, C.ParserErrorCode_kOy, C.ParserErrorCode_Y9c, C.ParserErrorCode_AdS, C.ParserErrorCode_sXS, C.ParserErrorCode_xw8, C.ParserErrorCode_icQ, C.ParserErrorCode_YGg, C.ParserErrorCode_2No, C.ParserErrorCode_a9w, C.ParserErrorCode_iRX, C.ParserErrorCode_tEy, C.ParserErrorCode_fHw, C.ParserErrorCode_cKo, C.ParserErrorCode_oRH, C.ParserErrorCode_rPh, C.ParserErrorCode_sUY, C.ParserErrorCode_kMT, C.ParserErrorCode_0UG, C.ParserErrorCode_WiE, C.ParserErrorCode_bLp, C.ParserErrorCode_2jN0, C.ParserErrorCode_Ued, C.ParserErrorCode_apl, C.ParserErrorCode_Uj8, C.ParserErrorCode_EE4, C.ParserErrorCode_Nhy, C.ParserErrorCode_El7, C.ParserErrorCode_RU9, C.ParserErrorCode_4MW, C.ParserErrorCode_E2T, C.ParserErrorCode_U4d, C.ParserErrorCode_C0A, C.ParserErrorCode_23B, C.ParserErrorCode_jrF, C.ParserErrorCode_aTW, C.ParserErrorCode_sy0, C.ParserErrorCode_fR0, C.ParserErrorCode_sMO, C.ParserErrorCode_0, C.ParserErrorCode_2Vk, C.ParserErrorCode_dyC, C.ParserErrorCode_i9j, C.ParserErrorCode_YEt, C.ParserErrorCode_A2Y, C.ParserErrorCode_wQg, C.ParserErrorCode_kB5, C.ParserErrorCode_G37, C.ParserErrorCode_aZM, C.ParserErrorCode_CxF, C.ParserErrorCode_Hx4, C.ParserErrorCode_YMD, C.ParserErrorCode_RA5, C.ParserErrorCode_Wrl, C.ParserErrorCode_U2z, C.ParserErrorCode_gYG, C.ParserErrorCode_bd2, C.ParserErrorCode_qFt, C.ParserErrorCode_oYK, C.ParserErrorCode_Q8B, C.ParserErrorCode_MUw, C.ParserErrorCode_6Gw, C.ParserErrorCode_fU9, C.ParserErrorCode_c0h, C.ParserErrorCode_8D4, C.ParserErrorCode_wBk], H.findType("JSArray<ErrorCode?>"));
    $._indentingBuiltValueToStringHelperIndent = 0;
    $.FastHash__nextId = 0;
    $._currentUriBase = null;
    $._current = null;
  })();
  (function lazyInitializers() {
    var _lazyFinal = hunkHelpers.lazyFinal,
      _lazy = hunkHelpers.lazy;
    _lazyFinal($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazyFinal($, "nullFuture", "$get$nullFuture", function() {
      return C.C__RootZone.run$1$1(new H.nullFuture_closure(), H.findType("Future<Null>"));
    });
    _lazyFinal($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazyFinal($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazyFinal($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazyFinal($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = "$arguments$";
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = "$arguments$";
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazyFinal($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazyFinal($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazyFinal($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazyFinal($, "Future__nullFuture", "$get$Future__nullFuture", function() {
      return type$._Future_Null._as($.$get$nullFuture());
    });
    _lazyFinal($, "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", function() {
      return new P.Utf8Decoder__decoder_closure().call$0();
    });
    _lazyFinal($, "Utf8Decoder__decoderNonfatal", "$get$Utf8Decoder__decoderNonfatal", function() {
      return new P.Utf8Decoder__decoderNonfatal_closure().call$0();
    });
    _lazyFinal($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", function() {
      return H.NativeInt8List__create1(H._ensureNativeList(H._setArrayType([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], type$.JSArray_int)));
    });
    _lazyFinal($, "_Uri__isWindowsCached", "$get$_Uri__isWindowsCached", function() {
      return typeof process != "undefined" && Object.prototype.toString.call(process) == "[object process]" && process.platform == "win32";
    });
    _lazyFinal($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", function() {
      return P.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$");
    });
    _lazy($, "_hasErrorStackProperty", "$get$_hasErrorStackProperty", function() {
      return new Error().stack != void 0;
    });
    _lazyFinal($, "_scannerTables", "$get$_scannerTables", function() {
      return P._createTables();
    });
    _lazyFinal($, "templateKey", "$get$templateKey", function() {
      return P.RegExp_RegExp("#(\\w+)");
    });
    _lazy($, "StringUtilities_INTERNER", "$get$StringUtilities_INTERNER", function() {
      return new E.NullInterner();
    });
    _lazyFinal($, "Keyword_keywords", "$get$Keyword_keywords", function() {
      return L.Keyword__createKeywordMap();
    });
    _lazyFinal($, "StringToken_canonicalizer", "$get$StringToken_canonicalizer", function() {
      return new N.StringCanonicalizer(P.List_List$filled(8192, null, false, type$.nullable_Node));
    });
    _lazyFinal($, "Feature_non_nullable", "$get$Feature_non_nullable", function() {
      return $.$get$ExperimentalFeatures_non_nullable();
    });
    _lazyFinal($, "Feature_constructor_tearoffs", "$get$Feature_constructor_tearoffs", function() {
      return $.$get$ExperimentalFeatures_constructor_tearoffs();
    });
    _lazyFinal($, "Feature_control_flow_collections", "$get$Feature_control_flow_collections", function() {
      return $.$get$ExperimentalFeatures_control_flow_collections();
    });
    _lazyFinal($, "Feature_extension_methods", "$get$Feature_extension_methods", function() {
      return $.$get$ExperimentalFeatures_extension_methods();
    });
    _lazyFinal($, "Feature_extension_types", "$get$Feature_extension_types", function() {
      return $.$get$ExperimentalFeatures_extension_types();
    });
    _lazyFinal($, "Feature_generic_metadata", "$get$Feature_generic_metadata", function() {
      return $.$get$ExperimentalFeatures_generic_metadata();
    });
    _lazyFinal($, "Feature_spread_collections", "$get$Feature_spread_collections", function() {
      return $.$get$ExperimentalFeatures_spread_collections();
    });
    _lazyFinal($, "Feature_triple_shift", "$get$Feature_triple_shift", function() {
      return $.$get$ExperimentalFeatures_triple_shift();
    });
    _lazyFinal($, "Feature_nonfunction_type_aliases", "$get$Feature_nonfunction_type_aliases", function() {
      return $.$get$ExperimentalFeatures_nonfunction_type_aliases();
    });
    _lazyFinal($, "Feature_variance", "$get$Feature_variance", function() {
      return $.$get$ExperimentalFeatures_variance();
    });
    _lazyFinal($, "astFactory", "$get$astFactory0", function() {
      return new A.AstFactoryImpl();
    });
    _lazyFinal($, "ExperimentStatus_currentVersion", "$get$ExperimentStatus_currentVersion", function() {
      return T.Version_Version$parse("2.15.0");
    });
    _lazyFinal($, "ExperimentStatus_knownFeatures", "$get$ExperimentStatus_knownFeatures", function() {
      return $.$get$_knownFeatures0();
    });
    _lazyFinal($, "_knownFeatures", "$get$_knownFeatures0", function() {
      return P.LinkedHashMap_LinkedHashMap$_literal(["const-functions", $.$get$ExperimentalFeatures_const_functions(), "constant-update-2018", $.$get$ExperimentalFeatures_constant_update_2018(), "constructor-tearoffs", $.$get$ExperimentalFeatures_constructor_tearoffs(), "control-flow-collections", $.$get$ExperimentalFeatures_control_flow_collections(), "extension-methods", $.$get$ExperimentalFeatures_extension_methods(), "extension-types", $.$get$ExperimentalFeatures_extension_types(), "generic-metadata", $.$get$ExperimentalFeatures_generic_metadata(), "non-nullable", $.$get$ExperimentalFeatures_non_nullable(), "nonfunction-type-aliases", $.$get$ExperimentalFeatures_nonfunction_type_aliases(), "set-literals", $.$get$ExperimentalFeatures_set_literals(), "spread-collections", $.$get$ExperimentalFeatures_spread_collections(), "test-experiment", $.$get$ExperimentalFeatures_test_experiment(), "triple-shift", $.$get$ExperimentalFeatures_triple_shift(), "value-class", $.$get$ExperimentalFeatures_value_class(), "variance", $.$get$ExperimentalFeatures_variance()], type$.String, H.findType("ExperimentalFeature"));
    });
    _lazyFinal($, "ExperimentalFeatures_const_functions", "$get$ExperimentalFeatures_const_functions", function() {
      return T.ExperimentalFeature$("Allow more of the Dart language to be executed in const expressions.", "const-functions", null, 0, false, false, null);
    });
    _lazyFinal($, "ExperimentalFeatures_constant_update_2018", "$get$ExperimentalFeatures_constant_update_2018", function() {
      return T.ExperimentalFeature$("Enhanced constant expressions", "constant-update-2018", null, 1, true, true, T.Version_Version$parse("2.0.0"));
    });
    _lazyFinal($, "ExperimentalFeatures_constructor_tearoffs", "$get$ExperimentalFeatures_constructor_tearoffs", function() {
      return T.ExperimentalFeature$("Allow constructor tear-offs and explicit generic instantiations.", "constructor-tearoffs", null, 2, true, false, T.Version_Version$parse("2.15.0"));
    });
    _lazyFinal($, "ExperimentalFeatures_control_flow_collections", "$get$ExperimentalFeatures_control_flow_collections", function() {
      return T.ExperimentalFeature$("Control Flow Collections", "control-flow-collections", null, 3, true, true, T.Version_Version$parse("2.0.0"));
    });
    _lazyFinal($, "ExperimentalFeatures_extension_methods", "$get$ExperimentalFeatures_extension_methods", function() {
      return T.ExperimentalFeature$("Extension Methods", "extension-methods", null, 4, true, false, T.Version_Version$parse("2.6.0"));
    });
    _lazyFinal($, "ExperimentalFeatures_extension_types", "$get$ExperimentalFeatures_extension_types", function() {
      return T.ExperimentalFeature$("Extension Types", "extension-types", null, 5, false, false, null);
    });
    _lazyFinal($, "ExperimentalFeatures_generic_metadata", "$get$ExperimentalFeatures_generic_metadata", function() {
      return T.ExperimentalFeature$("Allow annotations to accept type arguments; also allow generic function types as type arguments.", "generic-metadata", null, 6, true, false, T.Version_Version$parse("2.14.0"));
    });
    _lazyFinal($, "ExperimentalFeatures_non_nullable", "$get$ExperimentalFeatures_non_nullable", function() {
      return T.ExperimentalFeature$("Non Nullable by default", "non-nullable", T.Version_Version$parse("2.10.0"), 7, true, false, T.Version_Version$parse("2.12.0"));
    });
    _lazyFinal($, "ExperimentalFeatures_nonfunction_type_aliases", "$get$ExperimentalFeatures_nonfunction_type_aliases", function() {
      return T.ExperimentalFeature$("Type aliases define a <type>, not just a <functionType>", "nonfunction-type-aliases", null, 8, true, false, T.Version_Version$parse("2.13.0"));
    });
    _lazyFinal($, "ExperimentalFeatures_set_literals", "$get$ExperimentalFeatures_set_literals", function() {
      return T.ExperimentalFeature$("Set Literals", "set-literals", null, 9, true, true, T.Version_Version$parse("2.0.0"));
    });
    _lazyFinal($, "ExperimentalFeatures_spread_collections", "$get$ExperimentalFeatures_spread_collections", function() {
      return T.ExperimentalFeature$("Spread Collections", "spread-collections", null, 10, true, true, T.Version_Version$parse("2.0.0"));
    });
    _lazyFinal($, "ExperimentalFeatures_test_experiment", "$get$ExperimentalFeatures_test_experiment", function() {
      return T.ExperimentalFeature$("Has no effect. Can be used for testing the --enable-experiment command line functionality.", "test-experiment", null, 11, false, false, null);
    });
    _lazyFinal($, "ExperimentalFeatures_triple_shift", "$get$ExperimentalFeatures_triple_shift", function() {
      return T.ExperimentalFeature$("Triple-shift operator", "triple-shift", null, 12, true, false, T.Version_Version$parse("2.14.0"));
    });
    _lazyFinal($, "ExperimentalFeatures_value_class", "$get$ExperimentalFeatures_value_class", function() {
      return T.ExperimentalFeature$("Value class", "value-class", null, 13, false, false, null);
    });
    _lazyFinal($, "ExperimentalFeatures_variance", "$get$ExperimentalFeatures_variance", function() {
      return T.ExperimentalFeature$("Sound variance", "variance", null, 14, false, false, null);
    });
    _lazy($, "_knownFeatures0", "$get$_knownFeatures", function() {
      return $.$get$ExperimentStatus_knownFeatures();
    });
    _lazyFinal($, "astFactory0", "$get$astFactory", function() {
      return new A.AstFactoryImpl();
    });
    _lazy($, "StringUtilities_INTERNER0", "$get$StringUtilities_INTERNER0", function() {
      return new E.NullInterner();
    });
    _lazyFinal($, "isSoundMode", "$get$isSoundMode", function() {
      return !type$.List_int._is(H._setArrayType([], H.findType("JSArray<int?>")));
    });
    _lazy($, "newBuiltValueToStringHelper", "$get$newBuiltValueToStringHelper", function() {
      return new Y.newBuiltValueToStringHelper_closure();
    });
    _lazyFinal($, "_trailingIdentifierChar", "$get$_trailingIdentifierChar", function() {
      return P.RegExp_RegExp("[a-zA-Z0-9_]$");
    });
    _lazyFinal($, "_javaDocComment", "$get$_javaDocComment", function() {
      return P.RegExp_RegExp("^/\\*\\*([^*/][\\s\\S]*?)\\*?\\*/$");
    });
    _lazyFinal($, "_javaDocLine", "$get$_javaDocLine", function() {
      return P.RegExp_RegExp("^\\s*\\*(.*)");
    });
    _lazyFinal($, "_leadingIndentation", "$get$_leadingIndentation", function() {
      return P.RegExp_RegExp("^(\\s*)");
    });
    _lazyFinal($, "_gray", "$get$_gray", function() {
      return E._color("\x1b[1;30m");
    });
    _lazyFinal($, "_none", "$get$_none", function() {
      return E._color("\x1b[0m");
    });
    _lazyFinal($, "_bold", "$get$_bold", function() {
      return E._color("\x1b[1m");
    });
    _lazyFinal($, "context", "$get$context", function() {
      return new M.Context($.$get$Style_platform(), null);
    });
    _lazyFinal($, "Style_posix", "$get$Style_posix", function() {
      return new E.PosixStyle(P.RegExp_RegExp("/"), P.RegExp_RegExp("[^/]$"), P.RegExp_RegExp("^/"));
    });
    _lazyFinal($, "Style_windows", "$get$Style_windows", function() {
      return new L.WindowsStyle(P.RegExp_RegExp("[/\\\\]"), P.RegExp_RegExp("[^/\\\\]$"), P.RegExp_RegExp("^(\\\\\\\\[^\\\\]+\\\\[^\\\\/]+|[a-zA-Z]:[/\\\\])"), P.RegExp_RegExp("^[/\\\\](?![/\\\\])"));
    });
    _lazyFinal($, "Style_url", "$get$Style_url", function() {
      return new F.UrlStyle(P.RegExp_RegExp("/"), P.RegExp_RegExp("(^[a-zA-Z][-+.a-zA-Z\\d]*://|[^/])$"), P.RegExp_RegExp("[a-zA-Z][-+.a-zA-Z\\d]*://[^/]*"), P.RegExp_RegExp("^/"));
    });
    _lazyFinal($, "Style_platform", "$get$Style_platform", function() {
      return O.Style__getPlatformStyle();
    });
    _lazyFinal($, "startVersion", "$get$startVersion", function() {
      return P.RegExp_RegExp("^(\\d+).(\\d+).(\\d+)(-([0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*))?(\\+([0-9A-Za-z-]+(\\.[0-9A-Za-z-]+)*))?");
    });
    _lazyFinal($, "completeVersion", "$get$completeVersion", function() {
      return P.RegExp_RegExp($.$get$startVersion().pattern + "$");
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({Blob: J.Interceptor, DOMError: J.Interceptor, File: J.Interceptor, MediaError: J.Interceptor, Navigator: J.Interceptor, NavigatorConcurrentHardware: J.Interceptor, NavigatorUserMediaError: J.Interceptor, OverconstrainedError: J.Interceptor, PositionError: J.Interceptor, GeolocationPositionError: J.Interceptor, PushMessageData: J.Interceptor, SVGAnimatedEnumeration: J.Interceptor, SQLError: J.Interceptor, ArrayBuffer: H.NativeByteBuffer, ArrayBufferView: H.NativeTypedData, DataView: H.NativeByteData, Float32Array: H.NativeFloat32List, Float64Array: H.NativeFloat64List, Int16Array: H.NativeInt16List, Int32Array: H.NativeInt32List, Int8Array: H.NativeInt8List, Uint16Array: H.NativeUint16List, Uint32Array: H.NativeUint32List, Uint8ClampedArray: H.NativeUint8ClampedList, CanvasPixelArray: H.NativeUint8ClampedList, Uint8Array: H.NativeUint8List, HTMLAudioElement: W.HtmlElement, HTMLBRElement: W.HtmlElement, HTMLBaseElement: W.HtmlElement, HTMLBodyElement: W.HtmlElement, HTMLButtonElement: W.HtmlElement, HTMLCanvasElement: W.HtmlElement, HTMLContentElement: W.HtmlElement, HTMLDListElement: W.HtmlElement, HTMLDataElement: W.HtmlElement, HTMLDataListElement: W.HtmlElement, HTMLDetailsElement: W.HtmlElement, HTMLDialogElement: W.HtmlElement, HTMLDivElement: W.HtmlElement, HTMLEmbedElement: W.HtmlElement, HTMLFieldSetElement: W.HtmlElement, HTMLHRElement: W.HtmlElement, HTMLHeadElement: W.HtmlElement, HTMLHeadingElement: W.HtmlElement, HTMLHtmlElement: W.HtmlElement, HTMLIFrameElement: W.HtmlElement, HTMLImageElement: W.HtmlElement, HTMLLIElement: W.HtmlElement, HTMLLabelElement: W.HtmlElement, HTMLLegendElement: W.HtmlElement, HTMLLinkElement: W.HtmlElement, HTMLMapElement: W.HtmlElement, HTMLMediaElement: W.HtmlElement, HTMLMenuElement: W.HtmlElement, HTMLMetaElement: W.HtmlElement, HTMLMeterElement: W.HtmlElement, HTMLModElement: W.HtmlElement, HTMLOListElement: W.HtmlElement, HTMLObjectElement: W.HtmlElement, HTMLOptGroupElement: W.HtmlElement, HTMLOptionElement: W.HtmlElement, HTMLOutputElement: W.HtmlElement, HTMLParagraphElement: W.HtmlElement, HTMLParamElement: W.HtmlElement, HTMLPictureElement: W.HtmlElement, HTMLPreElement: W.HtmlElement, HTMLProgressElement: W.HtmlElement, HTMLQuoteElement: W.HtmlElement, HTMLScriptElement: W.HtmlElement, HTMLShadowElement: W.HtmlElement, HTMLSlotElement: W.HtmlElement, HTMLSourceElement: W.HtmlElement, HTMLSpanElement: W.HtmlElement, HTMLStyleElement: W.HtmlElement, HTMLTableCaptionElement: W.HtmlElement, HTMLTableCellElement: W.HtmlElement, HTMLTableDataCellElement: W.HtmlElement, HTMLTableHeaderCellElement: W.HtmlElement, HTMLTableColElement: W.HtmlElement, HTMLTableElement: W.HtmlElement, HTMLTableRowElement: W.HtmlElement, HTMLTableSectionElement: W.HtmlElement, HTMLTemplateElement: W.HtmlElement, HTMLTimeElement: W.HtmlElement, HTMLTitleElement: W.HtmlElement, HTMLTrackElement: W.HtmlElement, HTMLUListElement: W.HtmlElement, HTMLUnknownElement: W.HtmlElement, HTMLVideoElement: W.HtmlElement, HTMLDirectoryElement: W.HtmlElement, HTMLFontElement: W.HtmlElement, HTMLFrameElement: W.HtmlElement, HTMLFrameSetElement: W.HtmlElement, HTMLMarqueeElement: W.HtmlElement, HTMLElement: W.HtmlElement, HTMLAnchorElement: W.AnchorElement, HTMLAreaElement: W.AreaElement, DOMException: W.DomException, Element: W.Element, AbortPaymentEvent: W.Event, AnimationEvent: W.Event, AnimationPlaybackEvent: W.Event, ApplicationCacheErrorEvent: W.Event, BackgroundFetchClickEvent: W.Event, BackgroundFetchEvent: W.Event, BackgroundFetchFailEvent: W.Event, BackgroundFetchedEvent: W.Event, BeforeInstallPromptEvent: W.Event, BeforeUnloadEvent: W.Event, BlobEvent: W.Event, CanMakePaymentEvent: W.Event, ClipboardEvent: W.Event, CloseEvent: W.Event, CustomEvent: W.Event, DeviceMotionEvent: W.Event, DeviceOrientationEvent: W.Event, ErrorEvent: W.Event, ExtendableEvent: W.Event, ExtendableMessageEvent: W.Event, FetchEvent: W.Event, FontFaceSetLoadEvent: W.Event, ForeignFetchEvent: W.Event, GamepadEvent: W.Event, HashChangeEvent: W.Event, InstallEvent: W.Event, MediaEncryptedEvent: W.Event, MediaKeyMessageEvent: W.Event, MediaQueryListEvent: W.Event, MediaStreamEvent: W.Event, MediaStreamTrackEvent: W.Event, MessageEvent: W.Event, MIDIConnectionEvent: W.Event, MIDIMessageEvent: W.Event, MutationEvent: W.Event, NotificationEvent: W.Event, PageTransitionEvent: W.Event, PaymentRequestEvent: W.Event, PaymentRequestUpdateEvent: W.Event, PopStateEvent: W.Event, PresentationConnectionAvailableEvent: W.Event, PresentationConnectionCloseEvent: W.Event, ProgressEvent: W.Event, PromiseRejectionEvent: W.Event, PushEvent: W.Event, RTCDataChannelEvent: W.Event, RTCDTMFToneChangeEvent: W.Event, RTCPeerConnectionIceEvent: W.Event, RTCTrackEvent: W.Event, SecurityPolicyViolationEvent: W.Event, SensorErrorEvent: W.Event, SpeechRecognitionError: W.Event, SpeechRecognitionEvent: W.Event, SpeechSynthesisEvent: W.Event, StorageEvent: W.Event, SyncEvent: W.Event, TrackEvent: W.Event, TransitionEvent: W.Event, WebKitTransitionEvent: W.Event, VRDeviceEvent: W.Event, VRDisplayEvent: W.Event, VRSessionEvent: W.Event, MojoInterfaceRequestEvent: W.Event, ResourceProgressEvent: W.Event, USBConnectionEvent: W.Event, IDBVersionChangeEvent: W.Event, AudioProcessingEvent: W.Event, OfflineAudioCompletionEvent: W.Event, WebGLContextEvent: W.Event, Event: W.Event, InputEvent: W.Event, SubmitEvent: W.Event, MessagePort: W.EventTarget, Window: W.EventTarget, DOMWindow: W.EventTarget, EventTarget: W.EventTarget, HTMLFormElement: W.FormElement, HTMLInputElement: W.InputElement, MouseEvent: W.MouseEvent, DragEvent: W.MouseEvent, PointerEvent: W.MouseEvent, WheelEvent: W.MouseEvent, Document: W.Node0, HTMLDocument: W.Node0, Node: W.Node0, HTMLSelectElement: W.SelectElement, HTMLTextAreaElement: W.TextAreaElement, CompositionEvent: W.UIEvent, FocusEvent: W.UIEvent, KeyboardEvent: W.UIEvent, TextEvent: W.UIEvent, TouchEvent: W.UIEvent, UIEvent: W.UIEvent, SVGAElement: P.SvgElement, SVGAnimateElement: P.SvgElement, SVGAnimateMotionElement: P.SvgElement, SVGAnimateTransformElement: P.SvgElement, SVGAnimationElement: P.SvgElement, SVGCircleElement: P.SvgElement, SVGClipPathElement: P.SvgElement, SVGDefsElement: P.SvgElement, SVGDescElement: P.SvgElement, SVGDiscardElement: P.SvgElement, SVGEllipseElement: P.SvgElement, SVGFEBlendElement: P.SvgElement, SVGFEColorMatrixElement: P.SvgElement, SVGFEComponentTransferElement: P.SvgElement, SVGFECompositeElement: P.SvgElement, SVGFEConvolveMatrixElement: P.SvgElement, SVGFEDiffuseLightingElement: P.SvgElement, SVGFEDisplacementMapElement: P.SvgElement, SVGFEDistantLightElement: P.SvgElement, SVGFEFloodElement: P.SvgElement, SVGFEFuncAElement: P.SvgElement, SVGFEFuncBElement: P.SvgElement, SVGFEFuncGElement: P.SvgElement, SVGFEFuncRElement: P.SvgElement, SVGFEGaussianBlurElement: P.SvgElement, SVGFEImageElement: P.SvgElement, SVGFEMergeElement: P.SvgElement, SVGFEMergeNodeElement: P.SvgElement, SVGFEMorphologyElement: P.SvgElement, SVGFEOffsetElement: P.SvgElement, SVGFEPointLightElement: P.SvgElement, SVGFESpecularLightingElement: P.SvgElement, SVGFESpotLightElement: P.SvgElement, SVGFETileElement: P.SvgElement, SVGFETurbulenceElement: P.SvgElement, SVGFilterElement: P.SvgElement, SVGForeignObjectElement: P.SvgElement, SVGGElement: P.SvgElement, SVGGeometryElement: P.SvgElement, SVGGraphicsElement: P.SvgElement, SVGImageElement: P.SvgElement, SVGLineElement: P.SvgElement, SVGLinearGradientElement: P.SvgElement, SVGMarkerElement: P.SvgElement, SVGMaskElement: P.SvgElement, SVGMetadataElement: P.SvgElement, SVGPathElement: P.SvgElement, SVGPatternElement: P.SvgElement, SVGPolygonElement: P.SvgElement, SVGPolylineElement: P.SvgElement, SVGRadialGradientElement: P.SvgElement, SVGRectElement: P.SvgElement, SVGScriptElement: P.SvgElement, SVGSetElement: P.SvgElement, SVGStopElement: P.SvgElement, SVGStyleElement: P.SvgElement, SVGElement: P.SvgElement, SVGSVGElement: P.SvgElement, SVGSwitchElement: P.SvgElement, SVGSymbolElement: P.SvgElement, SVGTSpanElement: P.SvgElement, SVGTextContentElement: P.SvgElement, SVGTextElement: P.SvgElement, SVGTextPathElement: P.SvgElement, SVGTextPositioningElement: P.SvgElement, SVGTitleElement: P.SvgElement, SVGUseElement: P.SvgElement, SVGViewElement: P.SvgElement, SVGGradientElement: P.SvgElement, SVGComponentTransferFunctionElement: P.SvgElement, SVGFEDropShadowElement: P.SvgElement, SVGMPathElement: P.SvgElement});
    hunkHelpers.setOrUpdateLeafTags({Blob: true, DOMError: true, File: true, MediaError: true, Navigator: true, NavigatorConcurrentHardware: true, NavigatorUserMediaError: true, OverconstrainedError: true, PositionError: true, GeolocationPositionError: true, PushMessageData: true, SVGAnimatedEnumeration: true, SQLError: true, ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, HTMLAudioElement: true, HTMLBRElement: true, HTMLBaseElement: true, HTMLBodyElement: true, HTMLButtonElement: true, HTMLCanvasElement: true, HTMLContentElement: true, HTMLDListElement: true, HTMLDataElement: true, HTMLDataListElement: true, HTMLDetailsElement: true, HTMLDialogElement: true, HTMLDivElement: true, HTMLEmbedElement: true, HTMLFieldSetElement: true, HTMLHRElement: true, HTMLHeadElement: true, HTMLHeadingElement: true, HTMLHtmlElement: true, HTMLIFrameElement: true, HTMLImageElement: true, HTMLLIElement: true, HTMLLabelElement: true, HTMLLegendElement: true, HTMLLinkElement: true, HTMLMapElement: true, HTMLMediaElement: true, HTMLMenuElement: true, HTMLMetaElement: true, HTMLMeterElement: true, HTMLModElement: true, HTMLOListElement: true, HTMLObjectElement: true, HTMLOptGroupElement: true, HTMLOptionElement: true, HTMLOutputElement: true, HTMLParagraphElement: true, HTMLParamElement: true, HTMLPictureElement: true, HTMLPreElement: true, HTMLProgressElement: true, HTMLQuoteElement: true, HTMLScriptElement: true, HTMLShadowElement: true, HTMLSlotElement: true, HTMLSourceElement: true, HTMLSpanElement: true, HTMLStyleElement: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTableColElement: true, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, HTMLTemplateElement: true, HTMLTimeElement: true, HTMLTitleElement: true, HTMLTrackElement: true, HTMLUListElement: true, HTMLUnknownElement: true, HTMLVideoElement: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, HTMLElement: false, HTMLAnchorElement: true, HTMLAreaElement: true, DOMException: true, Element: false, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MessageEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, ProgressEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, MojoInterfaceRequestEvent: true, ResourceProgressEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, SubmitEvent: false, MessagePort: true, Window: true, DOMWindow: true, EventTarget: false, HTMLFormElement: true, HTMLInputElement: true, MouseEvent: true, DragEvent: true, PointerEvent: true, WheelEvent: true, Document: true, HTMLDocument: true, Node: false, HTMLSelectElement: true, HTMLTextAreaElement: true, CompositionEvent: true, FocusEvent: true, KeyboardEvent: true, TextEvent: true, TouchEvent: true, UIEvent: false, SVGAElement: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimationElement: true, SVGCircleElement: true, SVGClipPathElement: true, SVGDefsElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGEllipseElement: true, SVGFEBlendElement: true, SVGFEColorMatrixElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFETurbulenceElement: true, SVGFilterElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGGeometryElement: true, SVGGraphicsElement: true, SVGImageElement: true, SVGLineElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMetadataElement: true, SVGPathElement: true, SVGPatternElement: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGRadialGradientElement: true, SVGRectElement: true, SVGScriptElement: true, SVGSetElement: true, SVGStopElement: true, SVGStyleElement: true, SVGElement: true, SVGSVGElement: true, SVGSwitchElement: true, SVGSymbolElement: true, SVGTSpanElement: true, SVGTextContentElement: true, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: true, SVGTitleElement: true, SVGUseElement: true, SVGViewElement: true, SVGGradientElement: true, SVGComponentTransferFunctionElement: true, SVGFEDropShadowElement: true, SVGMPathElement: true});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != "undefined") {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    var callMain = F.main;
    if (typeof dartMainRunner === "function")
      dartMainRunner(callMain, []);
    else
      callMain([]);
  });
})();

//# sourceMappingURL=main.dart.js.map
